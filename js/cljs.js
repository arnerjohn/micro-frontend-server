if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

 /**
  * React v15.5.4
  */
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.React = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(25);

var invariant = _dereq_(29);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? "development" !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
},{"25":25,"29":29}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(31);

var ReactChildren = _dereq_(4);
var ReactComponent = _dereq_(6);
var ReactPureComponent = _dereq_(17);
var ReactClass = _dereq_(5);
var ReactDOMFactories = _dereq_(9);
var ReactElement = _dereq_(10);
var ReactPropTypes = _dereq_(15);
var ReactVersion = _dereq_(19);

var onlyChild = _dereq_(24);
var warning = _dereq_(30);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if ("development" !== 'production') {
  var canDefineProperty = _dereq_(20);
  var ReactElementValidator = _dereq_(12);
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if ("development" !== 'production') {
  var warned = false;
  __spread = function () {
    "development" !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

// TODO: Fix tests so that this deprecation warning doesn't cause failures.
if ("development" !== 'production') {
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        "development" !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });
  }
}

module.exports = React;
},{"10":10,"12":12,"15":15,"17":17,"19":19,"20":20,"24":24,"30":30,"31":31,"4":4,"5":5,"6":6,"9":9}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var PooledClass = _dereq_(2);
var ReactElement = _dereq_(10);

var emptyFunction = _dereq_(27);
var traverseAllChildren = _dereq_(26);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"10":10,"2":2,"26":26,"27":27}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(25),
    _assign = _dereq_(31);

var ReactComponent = _dereq_(6);
var ReactElement = _dereq_(10);
var ReactPropTypeLocationNames = _dereq_(14);
var ReactNoopUpdateQueue = _dereq_(13);

var emptyObject = _dereq_(28);
var invariant = _dereq_(29);
var warning = _dereq_(30);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if ("development" !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if ("development" !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if ("development" !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      "development" !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? "development" !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? "development" !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if ("development" !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      "development" !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? "development" !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? "development" !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? "development" !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if ("development" !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? "development" !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? "development" !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? "development" !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? "development" !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if ("development" !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        "development" !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        "development" !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

var didWarnDeprecated = false;

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    if ("development" !== 'production') {
      "development" !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
      didWarnDeprecated = true;
    }

    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if ("development" !== 'production') {
        "development" !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if ("development" !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "development" !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if ("development" !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? "development" !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if ("development" !== 'production') {
      "development" !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      "development" !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
},{"10":10,"13":13,"14":14,"25":25,"28":28,"29":29,"30":30,"31":31,"6":6}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(25);

var ReactNoopUpdateQueue = _dereq_(13);

var canDefineProperty = _dereq_(20);
var emptyObject = _dereq_(28);
var invariant = _dereq_(29);
var warning = _dereq_(30);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? "development" !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if ("development" !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          "development" !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
},{"13":13,"20":20,"25":25,"28":28,"29":29,"30":30}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(25);

var ReactCurrentOwner = _dereq_(8);

var invariant = _dereq_(29);
var warning = _dereq_(30);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  "development" !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? "development" !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? "development" !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? "development" !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? "development" !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? "development" !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? "development" !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
},{"25":25,"29":29,"30":30,"8":8}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactElement = _dereq_(10);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if ("development" !== 'production') {
  var ReactElementValidator = _dereq_(12);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
},{"10":10,"12":12}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(31);

var ReactCurrentOwner = _dereq_(8);

var warning = _dereq_(30);
var canDefineProperty = _dereq_(20);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = _dereq_(11);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if ("development" !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if ("development" !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      "development" !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      "development" !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if ("development" !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if ("development" !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if ("development" !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
},{"11":11,"20":20,"30":30,"31":31,"8":8}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = _dereq_(8);
var ReactComponentTreeHook = _dereq_(7);
var ReactElement = _dereq_(10);

var checkReactTypeSpec = _dereq_(21);

var canDefineProperty = _dereq_(20);
var getIteratorFn = _dereq_(22);
var warning = _dereq_(30);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  "development" !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    "development" !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        "development" !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if ("development" !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            "development" !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
},{"10":10,"20":20,"21":21,"22":22,"30":30,"7":7,"8":8}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var warning = _dereq_(30);

function warnNoop(publicInstance, callerName) {
  if ("development" !== 'production') {
    var constructor = publicInstance.constructor;
    "development" !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
},{"30":30}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("development" !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
},{}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _require = _dereq_(10),
    isValidElement = _require.isValidElement;

var factory = _dereq_(33);

module.exports = factory(isValidElement);
},{"10":10,"33":33}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(31);

var ReactComponent = _dereq_(6);
var ReactNoopUpdateQueue = _dereq_(13);

var emptyObject = _dereq_(28);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;
},{"13":13,"28":28,"31":31,"6":6}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(31);

var React = _dereq_(3);

// `version` will be added here by the React module.
var ReactUMDEntry = _assign(React, {
  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: _dereq_(8)
  }
});

if ("development" !== 'production') {
  _assign(ReactUMDEntry.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    // ReactComponentTreeHook should not be included in production.
    ReactComponentTreeHook: _dereq_(7),
    getNextDebugID: _dereq_(23)
  });
}

module.exports = ReactUMDEntry;
},{"23":23,"3":3,"31":31,"7":7,"8":8}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

module.exports = '15.5.4';
},{}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var canDefineProperty = false;
if ("development" !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
},{}],21:[function(_dereq_,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(25);

var ReactPropTypeLocationNames = _dereq_(14);
var ReactPropTypesSecret = _dereq_(16);

var invariant = _dereq_(29);
var warning = _dereq_(30);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = _dereq_(7);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? "development" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      "development" !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if ("development" !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = _dereq_(7);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        "development" !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,undefined)
},{"14":14,"16":16,"25":25,"29":29,"30":30,"7":7}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;
},{}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
'use strict';

var _prodInvariant = _dereq_(25);

var ReactElement = _dereq_(10);

var invariant = _dereq_(29);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? "development" !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
},{"10":10,"25":25,"29":29}],25:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(25);

var ReactCurrentOwner = _dereq_(8);
var REACT_ELEMENT_TYPE = _dereq_(11);

var getIteratorFn = _dereq_(22);
var invariant = _dereq_(29);
var KeyEscapeUtils = _dereq_(1);
var warning = _dereq_(30);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if ("development" !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          "development" !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if ("development" !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? "development" !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
},{"1":1,"11":11,"22":22,"25":25,"29":29,"30":30,"8":8}],27:[function(_dereq_,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],28:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if ("development" !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],29:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if ("development" !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
},{}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = _dereq_(27);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("development" !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
},{"27":27}],31:[function(_dereq_,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

if ("development" !== 'production') {
  var invariant = _dereq_(29);
  var warning = _dereq_(30);
  var ReactPropTypesSecret = _dereq_(35);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("development" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

},{"29":29,"30":30,"35":35}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = _dereq_(34);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"34":34}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var emptyFunction = _dereq_(27);
var invariant = _dereq_(29);
var warning = _dereq_(30);

var ReactPropTypesSecret = _dereq_(35);
var checkPropTypes = _dereq_(32);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("development" !== 'production') {
      var manualPropTypeCallCache = {};
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey]) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      "development" !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"27":27,"29":29,"30":30,"32":32,"35":35}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}]},{},[18])(18)
});
 /**
  * ReactDOM v15.5.4
  */

;(function(f) {
  // CommonJS
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f(require('react'));

  // RequireJS
  } else if (typeof define === "function" && define.amd) {
    define(['react'], f);

  // <script>
  } else {
    var g;
    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      // works providing we're not in "use strict";
      // needed for Java 8 Nashorn
      // see https://github.com/facebook/react/issues/3037
      g = this;
    }
    g.ReactDOM = f(g.React);
  }
})(function(React) {
  return (function(f){return f()})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;
},{}],2:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentTree = _dereq_(34);

var focusNode = _dereq_(144);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;
},{"144":144,"34":34}],3:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = _dereq_(20);
var ExecutionEnvironment = _dereq_(136);
var FallbackCompositionState = _dereq_(21);
var SyntheticCompositionEvent = _dereq_(89);
var SyntheticInputEvent = _dereq_(93);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"136":136,"20":20,"21":21,"89":89,"93":93}],4:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],5:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = _dereq_(4);
var ExecutionEnvironment = _dereq_(136);
var ReactInstrumentation = _dereq_(64);

var camelizeStyleName = _dereq_(138);
var dangerousStyleValue = _dereq_(106);
var hyphenateStyleName = _dereq_(149);
var memoizeStringOnly = _dereq_(153);
var warning = _dereq_(157);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if ("development" !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    "development" !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    "development" !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    "development" !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    "development" !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if ("development" !== 'production') {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if ("development" !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if ("development" !== 'production') {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;
},{"106":106,"136":136,"138":138,"149":149,"153":153,"157":157,"4":4,"64":64}],6:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = _dereq_(25);

var invariant = _dereq_(150);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? "development" !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
},{"124":124,"150":150,"25":25}],7:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = _dereq_(17);
var EventPropagators = _dereq_(20);
var ExecutionEnvironment = _dereq_(136);
var ReactDOMComponentTree = _dereq_(34);
var ReactUpdates = _dereq_(82);
var SyntheticEvent = _dereq_(91);

var getEventTarget = _dereq_(114);
var isEventSupported = _dereq_(121);
var isTextInputElement = _dereq_(122);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"114":114,"121":121,"122":122,"136":136,"17":17,"20":20,"34":34,"82":82,"91":91}],8:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMLazyTree = _dereq_(9);
var Danger = _dereq_(13);
var ReactDOMComponentTree = _dereq_(34);
var ReactInstrumentation = _dereq_(64);

var createMicrosoftUnsafeLocalFunction = _dereq_(105);
var setInnerHTML = _dereq_(126);
var setTextContent = _dereq_(127);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if ("development" !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if ("development" !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if ("development" !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if ("development" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if ("development" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if ("development" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if ("development" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if ("development" !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;
},{"105":105,"126":126,"127":127,"13":13,"34":34,"64":64,"9":9}],9:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = _dereq_(10);
var setInnerHTML = _dereq_(126);

var createMicrosoftUnsafeLocalFunction = _dereq_(105);
var setTextContent = _dereq_(127);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"10":10,"105":105,"126":126,"127":127}],10:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;
},{}],11:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? "development" !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? "development" !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if ("development" !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if ("development" !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: "development" !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
},{"124":124,"150":150}],12:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = _dereq_(11);
var ReactDOMComponentTree = _dereq_(34);
var ReactInstrumentation = _dereq_(64);

var quoteAttributeValueForBrowser = _dereq_(123);
var warning = _dereq_(157);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  "development" !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if ("development" !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if ("development" !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if ("development" !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if ("development" !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;
},{"11":11,"123":123,"157":157,"34":34,"64":64}],13:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var DOMLazyTree = _dereq_(9);
var ExecutionEnvironment = _dereq_(136);

var createNodesFromMarkup = _dereq_(141);
var emptyFunction = _dereq_(142);
var invariant = _dereq_(150);

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? "development" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? "development" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? "development" !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;
},{"124":124,"136":136,"141":141,"142":142,"150":150,"9":9}],14:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;
},{}],15:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = _dereq_(20);
var ReactDOMComponentTree = _dereq_(34);
var SyntheticMouseEvent = _dereq_(95);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;
},{"20":20,"34":34,"95":95}],16:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = {
  topAbort: null,
  topAnimationEnd: null,
  topAnimationIteration: null,
  topAnimationStart: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topInvalid: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topTransitionEnd: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
};

var EventConstants = {
  topLevelTypes: topLevelTypes
};

module.exports = EventConstants;
},{}],17:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var EventPluginRegistry = _dereq_(18);
var EventPluginUtils = _dereq_(19);
var ReactErrorUtils = _dereq_(55);

var accumulateInto = _dereq_(102);
var forEachAccumulated = _dereq_(110);
var invariant = _dereq_(150);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? "development" !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? "development" !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
},{"102":102,"110":110,"124":124,"150":150,"18":18,"19":19,"55":55}],18:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? "development" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? "development" !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if ("development" !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: "development" !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? "development" !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if ("development" !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
},{"124":124,"150":150}],19:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactErrorUtils = _dereq_(55);

var invariant = _dereq_(150);
var warning = _dereq_(157);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if ("development" !== 'production') {
      "development" !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if ("development" !== 'production') {
      "development" !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if ("development" !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    "development" !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if ("development" !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if ("development" !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if ("development" !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? "development" !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
},{"124":124,"150":150,"157":157,"55":55}],20:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = _dereq_(17);
var EventPluginUtils = _dereq_(19);

var accumulateInto = _dereq_(102);
var forEachAccumulated = _dereq_(110);
var warning = _dereq_(157);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if ("development" !== 'production') {
    "development" !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
},{"102":102,"110":110,"157":157,"17":17,"19":19}],21:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var PooledClass = _dereq_(25);

var getTextContentAccessor = _dereq_(118);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"118":118,"158":158,"25":25}],22:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = _dereq_(11);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"11":11}],23:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],24:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactPropTypesSecret = _dereq_(73);
var propTypesFactory = _dereq_(160);

var React = _dereq_(133);
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = _dereq_(150);
var warning = _dereq_(157);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? "development" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? "development" !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? "development" !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        "development" !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
},{"124":124,"133":133,"150":150,"157":157,"160":160,"73":73}],25:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? "development" !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
},{"124":124,"150":150}],26:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var EventPluginRegistry = _dereq_(18);
var ReactEventEmitterMixin = _dereq_(56);
var ViewportMetrics = _dereq_(101);

var getVendorPrefixedEventName = _dereq_(119);
var isEventSupported = _dereq_(121);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;
},{"101":101,"119":119,"121":121,"158":158,"18":18,"56":56}],27:[function(_dereq_,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactReconciler = _dereq_(75);

var instantiateReactComponent = _dereq_(120);
var KeyEscapeUtils = _dereq_(23);
var shouldUpdateReactComponent = _dereq_(128);
var traverseAllChildren = _dereq_(129);
var warning = _dereq_(157);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = _dereq_(131);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if ("development" !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = _dereq_(131);
    }
    if (!keyUnique) {
      "development" !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if ("development" !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,undefined)
},{"120":120,"128":128,"129":129,"131":131,"157":157,"23":23,"75":75}],28:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = _dereq_(8);
var ReactDOMIDOperations = _dereq_(38);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;
},{"38":38,"8":8}],29:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? "development" !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
},{"124":124,"150":150}],30:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var React = _dereq_(133);
var ReactComponentEnvironment = _dereq_(29);
var ReactCurrentOwner = _dereq_(132);
var ReactErrorUtils = _dereq_(55);
var ReactInstanceMap = _dereq_(63);
var ReactInstrumentation = _dereq_(64);
var ReactNodeTypes = _dereq_(69);
var ReactReconciler = _dereq_(75);

if ("development" !== 'production') {
  var checkReactTypeSpec = _dereq_(104);
}

var emptyObject = _dereq_(143);
var invariant = _dereq_(150);
var shallowEqual = _dereq_(156);
var shouldUpdateReactComponent = _dereq_(128);
var warning = _dereq_(157);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if ("development" !== 'production') {
    "development" !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    "development" !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if ("development" !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? "development" !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if ("development" !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        "development" !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      "development" !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if ("development" !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      "development" !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      "development" !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      "development" !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      "development" !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      "development" !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      "development" !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      "development" !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? "development" !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if ("development" !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if ("development" !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if ("development" !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if ("development" !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if ("development" !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if ("development" !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if ("development" !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if ("development" !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if ("development" !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if ("development" !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? "development" !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if ("development" !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? "development" !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if ("development" !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? "development" !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if ("development" !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if ("development" !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if ("development" !== 'production') {
      "development" !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if ("development" !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if ("development" !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if ("development" !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if ("development" !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if ("development" !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if ("development" !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if ("development" !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? "development" !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? "development" !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if ("development" !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      "development" !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
},{"104":104,"124":124,"128":128,"132":132,"133":133,"143":143,"150":150,"156":156,"157":157,"158":158,"29":29,"55":55,"63":63,"64":64,"69":69,"75":75}],31:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = _dereq_(34);
var ReactDefaultInjection = _dereq_(52);
var ReactMount = _dereq_(67);
var ReactReconciler = _dereq_(75);
var ReactUpdates = _dereq_(82);
var ReactVersion = _dereq_(83);

var findDOMNode = _dereq_(108);
var getHostComponentFromComposite = _dereq_(115);
var renderSubtreeIntoContainer = _dereq_(125);
var warning = _dereq_(157);

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if ("development" !== 'production') {
  var ExecutionEnvironment = _dereq_(136);
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    "development" !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    "development" !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        "development" !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if ("development" !== 'production') {
  var ReactInstrumentation = _dereq_(64);
  var ReactDOMUnknownPropertyHook = _dereq_(49);
  var ReactDOMNullInputValuePropHook = _dereq_(41);
  var ReactDOMInvalidARIAHook = _dereq_(40);

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
},{"108":108,"115":115,"125":125,"136":136,"157":157,"34":34,"40":40,"41":41,"49":49,"52":52,"64":64,"67":67,"75":75,"82":82,"83":83}],32:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var AutoFocusUtils = _dereq_(2);
var CSSPropertyOperations = _dereq_(5);
var DOMLazyTree = _dereq_(9);
var DOMNamespaces = _dereq_(10);
var DOMProperty = _dereq_(11);
var DOMPropertyOperations = _dereq_(12);
var EventPluginHub = _dereq_(17);
var EventPluginRegistry = _dereq_(18);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactDOMComponentFlags = _dereq_(33);
var ReactDOMComponentTree = _dereq_(34);
var ReactDOMInput = _dereq_(39);
var ReactDOMOption = _dereq_(42);
var ReactDOMSelect = _dereq_(43);
var ReactDOMTextarea = _dereq_(46);
var ReactInstrumentation = _dereq_(64);
var ReactMultiChild = _dereq_(68);
var ReactServerRenderingTransaction = _dereq_(77);

var emptyFunction = _dereq_(142);
var escapeTextContentForBrowser = _dereq_(107);
var invariant = _dereq_(150);
var isEventSupported = _dereq_(121);
var shallowEqual = _dereq_(156);
var validateDOMNesting = _dereq_(130);
var warning = _dereq_(157);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  "development" !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? "development" !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? "development" !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? "development" !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if ("development" !== 'production') {
    "development" !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    "development" !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    "development" !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? "development" !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if ("development" !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    "development" !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if ("development" !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? "development" !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? "development" !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? "development" !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if ("development" !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if ("development" !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if ("development" !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if ("development" !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if ("development" !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if ("development" !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if ("development" !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if ("development" !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if ("development" !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if ("development" !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? "development" !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if ("development" !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
},{"10":10,"107":107,"11":11,"12":12,"121":121,"124":124,"130":130,"142":142,"150":150,"156":156,"157":157,"158":158,"17":17,"18":18,"2":2,"26":26,"33":33,"34":34,"39":39,"42":42,"43":43,"46":46,"5":5,"64":64,"68":68,"77":77,"9":9}],33:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;
},{}],34:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var DOMProperty = _dereq_(11);
var ReactDOMComponentFlags = _dereq_(33);

var invariant = _dereq_(150);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
    !false ? "development" !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? "development" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? "development" !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
},{"11":11,"124":124,"150":150,"33":33}],35:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var validateDOMNesting = _dereq_(130);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if ("development" !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
},{"130":130}],36:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var DOMLazyTree = _dereq_(9);
var ReactDOMComponentTree = _dereq_(34);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;
},{"158":158,"34":34,"9":9}],37:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;
},{}],38:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = _dereq_(8);
var ReactDOMComponentTree = _dereq_(34);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;
},{"34":34,"8":8}],39:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var DOMPropertyOperations = _dereq_(12);
var LinkedValueUtils = _dereq_(24);
var ReactDOMComponentTree = _dereq_(34);
var ReactUpdates = _dereq_(82);

var invariant = _dereq_(150);
var warning = _dereq_(157);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if ("development" !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        "development" !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        "development" !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        "development" !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        "development" !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if ("development" !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        "development" !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        "development" !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        // eslint-disable-next-line
        if (value != valueAsNumber) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
        // eslint-disable-next-line
      } else if (value != node.value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? "development" !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
},{"12":12,"124":124,"150":150,"157":157,"158":158,"24":24,"34":34,"82":82}],40:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = _dereq_(11);
var ReactComponentTreeHook = _dereq_(131);

var warning = _dereq_(157);

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      "development" !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    "development" !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    "development" !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if ("development" !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if ("development" !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
},{"11":11,"131":131,"157":157}],41:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactComponentTreeHook = _dereq_(131);

var warning = _dereq_(157);

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    "development" !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
},{"131":131,"157":157}],42:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var React = _dereq_(133);
var ReactDOMComponentTree = _dereq_(34);
var ReactDOMSelect = _dereq_(43);

var warning = _dereq_(157);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      "development" !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if ("development" !== 'production') {
      "development" !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;
},{"133":133,"157":157,"158":158,"34":34,"43":43}],43:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var LinkedValueUtils = _dereq_(24);
var ReactDOMComponentTree = _dereq_(34);
var ReactUpdates = _dereq_(82);

var warning = _dereq_(157);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    "development" !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      "development" !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      "development" !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if ("development" !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      "development" !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
},{"157":157,"158":158,"24":24,"34":34,"82":82}],44:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);

var getNodeForCharacterOffset = _dereq_(117);
var getTextContentAccessor = _dereq_(118);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"117":117,"118":118,"136":136}],45:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var DOMChildrenOperations = _dereq_(8);
var DOMLazyTree = _dereq_(9);
var ReactDOMComponentTree = _dereq_(34);

var escapeTextContentForBrowser = _dereq_(107);
var invariant = _dereq_(150);
var validateDOMNesting = _dereq_(130);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if ("development" !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? "development" !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;
},{"107":107,"124":124,"130":130,"150":150,"158":158,"34":34,"8":8,"9":9}],46:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var LinkedValueUtils = _dereq_(24);
var ReactDOMComponentTree = _dereq_(34);
var ReactUpdates = _dereq_(82);

var invariant = _dereq_(150);
var warning = _dereq_(157);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? "development" !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if ("development" !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        "development" !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        "development" !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if ("development" !== 'production') {
          "development" !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? "development" !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? "development" !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
},{"124":124,"150":150,"157":157,"158":158,"24":24,"34":34,"82":82}],47:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? "development" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? "development" !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? "development" !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? "development" !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? "development" !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
},{"124":124,"150":150}],48:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var React = _dereq_(133);
var ReactDOM = _dereq_(31);

var ReactDOMUMDEntry = ReactDOM;

if ("development" !== 'production') {
  ReactDOMUMDEntry.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
    // ReactPerf and ReactTestUtils currently only work with the DOM renderer
    // so we expose them from here, but only in DEV mode.
    ReactPerf: _dereq_(71),
    ReactTestUtils: _dereq_(80)
  };
}

// Inject ReactDOM into React for the addons UMD build that depends on ReactDOM (TransitionGroup).
// We can remove this after we deprecate and remove the addons UMD build.
if (React.addons) {
  React.__SECRET_INJECTED_REACT_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMUMDEntry;
}

module.exports = ReactDOMUMDEntry;
},{"133":133,"31":31,"71":71,"80":80}],49:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = _dereq_(11);
var EventPluginRegistry = _dereq_(18);
var ReactComponentTreeHook = _dereq_(131);

var warning = _dereq_(157);

if ("development" !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      "development" !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      "development" !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    "development" !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    "development" !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
},{"11":11,"131":131,"157":157,"18":18}],50:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactInvalidSetStateWarningHook = _dereq_(65);
var ReactHostOperationHistoryHook = _dereq_(60);
var ReactComponentTreeHook = _dereq_(131);
var ExecutionEnvironment = _dereq_(136);

var performanceNow = _dereq_(155);
var warning = _dereq_(157);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    "development" !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    "development" !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    "development" !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    "development" !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
},{"131":131,"136":136,"155":155,"157":157,"60":60,"65":65}],51:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var ReactUpdates = _dereq_(82);
var Transaction = _dereq_(100);

var emptyFunction = _dereq_(142);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"100":100,"142":142,"158":158,"82":82}],52:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = _dereq_(1);
var BeforeInputEventPlugin = _dereq_(3);
var ChangeEventPlugin = _dereq_(7);
var DefaultEventPluginOrder = _dereq_(14);
var EnterLeaveEventPlugin = _dereq_(15);
var HTMLDOMPropertyConfig = _dereq_(22);
var ReactComponentBrowserEnvironment = _dereq_(28);
var ReactDOMComponent = _dereq_(32);
var ReactDOMComponentTree = _dereq_(34);
var ReactDOMEmptyComponent = _dereq_(36);
var ReactDOMTreeTraversal = _dereq_(47);
var ReactDOMTextComponent = _dereq_(45);
var ReactDefaultBatchingStrategy = _dereq_(51);
var ReactEventListener = _dereq_(57);
var ReactInjection = _dereq_(61);
var ReactReconcileTransaction = _dereq_(74);
var SVGDOMPropertyConfig = _dereq_(84);
var SelectEventPlugin = _dereq_(85);
var SimpleEventPlugin = _dereq_(86);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};
},{"1":1,"14":14,"15":15,"22":22,"28":28,"3":3,"32":32,"34":34,"36":36,"45":45,"47":47,"51":51,"57":57,"61":61,"7":7,"74":74,"84":84,"85":85,"86":86}],53:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],54:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],55:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if ("development" !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
},{}],56:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = _dereq_(17);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"17":17}],57:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var EventListener = _dereq_(135);
var ExecutionEnvironment = _dereq_(136);
var PooledClass = _dereq_(25);
var ReactDOMComponentTree = _dereq_(34);
var ReactUpdates = _dereq_(82);

var getEventTarget = _dereq_(114);
var getUnboundedScrollPosition = _dereq_(147);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"114":114,"135":135,"136":136,"147":147,"158":158,"25":25,"34":34,"82":82}],58:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
},{}],59:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? "development" !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
},{"124":124,"150":150}],60:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
},{}],61:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = _dereq_(11);
var EventPluginHub = _dereq_(17);
var EventPluginUtils = _dereq_(19);
var ReactComponentEnvironment = _dereq_(29);
var ReactEmptyComponent = _dereq_(54);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactHostComponent = _dereq_(59);
var ReactUpdates = _dereq_(82);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"11":11,"17":17,"19":19,"26":26,"29":29,"54":54,"59":59,"82":82}],62:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMSelection = _dereq_(44);

var containsNode = _dereq_(139);
var focusNode = _dereq_(144);
var getActiveElement = _dereq_(145);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"139":139,"144":144,"145":145,"44":44}],63:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],64:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if ("development" !== 'production') {
  var ReactDebugTool = _dereq_(50);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
},{"50":50}],65:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var warning = _dereq_(157);

if ("development" !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    "development" !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
},{"157":157}],66:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var adler32 = _dereq_(103);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"103":103}],67:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var DOMLazyTree = _dereq_(9);
var DOMProperty = _dereq_(11);
var React = _dereq_(133);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactCurrentOwner = _dereq_(132);
var ReactDOMComponentTree = _dereq_(34);
var ReactDOMContainerInfo = _dereq_(35);
var ReactDOMFeatureFlags = _dereq_(37);
var ReactFeatureFlags = _dereq_(58);
var ReactInstanceMap = _dereq_(63);
var ReactInstrumentation = _dereq_(64);
var ReactMarkupChecksum = _dereq_(66);
var ReactReconciler = _dereq_(75);
var ReactUpdateQueue = _dereq_(81);
var ReactUpdates = _dereq_(82);

var emptyObject = _dereq_(143);
var instantiateReactComponent = _dereq_(120);
var invariant = _dereq_(150);
var setInnerHTML = _dereq_(126);
var shouldUpdateReactComponent = _dereq_(128);
var warning = _dereq_(157);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if ("development" !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if ("development" !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if ("development" !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    "development" !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? "development" !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? "development" !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? "development" !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    "development" !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if ("development" !== 'production') {
      "development" !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            "development" !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    "development" !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? "development" !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if ("development" !== 'production') {
      "development" !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if ("development" !== 'production') {
        "development" !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? "development" !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if ("development" !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? "development" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if ("development" !== 'production') {
          "development" !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? "development" !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if ("development" !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
},{"11":11,"120":120,"124":124,"126":126,"128":128,"132":132,"133":133,"143":143,"150":150,"157":157,"26":26,"34":34,"35":35,"37":37,"58":58,"63":63,"64":64,"66":66,"75":75,"81":81,"82":82,"9":9}],68:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactComponentEnvironment = _dereq_(29);
var ReactInstanceMap = _dereq_(63);
var ReactInstrumentation = _dereq_(64);

var ReactCurrentOwner = _dereq_(132);
var ReactReconciler = _dereq_(75);
var ReactChildReconciler = _dereq_(27);

var emptyFunction = _dereq_(142);
var flattenChildren = _dereq_(109);
var invariant = _dereq_(150);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if ("development" !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if ("development" !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if ("development" !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if ("development" !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if ("development" !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? "development" !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? "development" !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if ("development" !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;
},{"109":109,"124":124,"132":132,"142":142,"150":150,"27":27,"29":29,"63":63,"64":64,"75":75}],69:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var React = _dereq_(133);

var invariant = _dereq_(150);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    !false ? "development" !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
},{"124":124,"133":133,"150":150}],70:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? "development" !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? "development" !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
},{"124":124,"150":150}],71:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _assign = _dereq_(158);

var _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ReactDebugTool = _dereq_(50);
var warning = _dereq_(157);
var alreadyWarned = false;

function roundFloat(val) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var n = Math.pow(10, base);
  return Math.floor(val * n) / n;
}

// Flow type definition of console.table is too strict right now, see
// https://github.com/facebook/flow/pull/2353 for updates
function consoleTable(table) {
  console.table(table);
}

function warnInProduction() {
  if (alreadyWarned) {
    return;
  }
  alreadyWarned = true;
  if (typeof console !== 'undefined') {
    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
  }
}

function getLastMeasurements() {
  if (!("development" !== 'production')) {
    warnInProduction();
    return [];
  }

  return ReactDebugTool.getFlushHistory();
}

function getExclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!("development" !== 'production')) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
    var displayName = treeSnapshot[instanceID].displayName;

    var key = displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        counts: {},
        durations: {},
        totalDuration: 0
      };
    }
    if (!stats.durations[timerType]) {
      stats.durations[timerType] = 0;
    }
    if (!stats.counts[timerType]) {
      stats.counts[timerType] = 0;
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
        stats.totalDuration += duration;
        stats.durations[timerType] += duration;
        stats.counts[timerType]++;
      });
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return _extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.totalDuration - a.totalDuration;
  });
}

function getInclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!("development" !== 'production')) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc.displayName,
        ownerID = _treeSnapshot$instanc.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  var isCompositeByID = {};
  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements;

    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      isCompositeByID[instanceID] = true;
    });
  });

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });
      var nextParentID = instanceID;
      while (nextParentID) {
        // As we traverse parents, only count inclusive time towards composites.
        // We know something is a composite if its render() was called.
        if (isCompositeByID[nextParentID]) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return _extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getWasted() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!("development" !== 'production')) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc2.displayName,
        ownerID = _treeSnapshot$instanc2.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot,
        operations = flush.operations;

    var isDefinitelyNotWastedByID = {};

    // Find host components associated with an operation in this batch.
    // Mark all components in their parent tree as definitely not wasted.
    operations.forEach(function (operation) {
      var instanceID = operation.instanceID;

      var nextParentID = instanceID;
      while (nextParentID) {
        isDefinitelyNotWastedByID[nextParentID] = true;
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });

    // Find composite components that rendered in this batch.
    // These are potential candidates for being wasted renders.
    var renderedCompositeIDs = {};
    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      renderedCompositeIDs[instanceID] = true;
    });

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }

      // If there was a DOM update below this component, or it has just been
      // mounted, its render() is not considered wasted.
      var updateCount = treeSnapshot[instanceID].updateCount;

      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
        return;
      }

      // We consider this render() wasted.
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });

      var nextParentID = instanceID;
      while (nextParentID) {
        // Any parents rendered during this batch are considered wasted
        // unless we previously marked them as dirty.
        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
        if (isWasted) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return _extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getOperations() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!("development" !== 'production')) {
    warnInProduction();
    return [];
  }

  var stats = [];
  flushHistory.forEach(function (flush, flushIndex) {
    var operations = flush.operations,
        treeSnapshot = flush.treeSnapshot;

    operations.forEach(function (operation) {
      var instanceID = operation.instanceID,
          type = operation.type,
          payload = operation.payload;
      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
          displayName = _treeSnapshot$instanc3.displayName,
          ownerID = _treeSnapshot$instanc3.ownerID;

      var owner = treeSnapshot[ownerID];
      var key = (owner ? owner.displayName + ' > ' : '') + displayName;

      stats.push({
        flushIndex: flushIndex,
        instanceID: instanceID,
        key: key,
        type: type,
        ownerID: ownerID,
        payload: payload
      });
    });
  });
  return stats;
}

function printExclusive(flushHistory) {
  if (!("development" !== 'production')) {
    warnInProduction();
    return;
  }

  var stats = getExclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        totalDuration = item.totalDuration;

    var renderCount = item.counts.render || 0;
    var renderDuration = item.durations.render || 0;
    return {
      'Component': key,
      'Total time (ms)': roundFloat(totalDuration),
      'Instance count': instanceCount,
      'Total render time (ms)': roundFloat(renderDuration),
      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
      'Render count': renderCount,
      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
    };
  });
  consoleTable(table);
}

function printInclusive(flushHistory) {
  if (!("development" !== 'production')) {
    warnInProduction();
    return;
  }

  var stats = getInclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printWasted(flushHistory) {
  if (!("development" !== 'production')) {
    warnInProduction();
    return;
  }

  var stats = getWasted(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printOperations(flushHistory) {
  if (!("development" !== 'production')) {
    warnInProduction();
    return;
  }

  var stats = getOperations(flushHistory);
  var table = stats.map(function (stat) {
    return {
      'Owner > Node': stat.key,
      'Operation': stat.type,
      'Payload': typeof stat.payload === 'object' ? JSON.stringify(stat.payload) : stat.payload,
      'Flush index': stat.flushIndex,
      'Owner Component ID': stat.ownerID,
      'DOM Component ID': stat.instanceID
    };
  });
  consoleTable(table);
}

var warnedAboutPrintDOM = false;
function printDOM(measurements) {
  "development" !== 'production' ? warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.') : void 0;
  warnedAboutPrintDOM = true;
  return printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = false;
function getMeasurementsSummaryMap(measurements) {
  "development" !== 'production' ? warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.') : void 0;
  warnedAboutGetMeasurementsSummaryMap = true;
  return getWasted(measurements);
}

function start() {
  if (!("development" !== 'production')) {
    warnInProduction();
    return;
  }

  ReactDebugTool.beginProfiling();
}

function stop() {
  if (!("development" !== 'production')) {
    warnInProduction();
    return;
  }

  ReactDebugTool.endProfiling();
}

function isRunning() {
  if (!("development" !== 'production')) {
    warnInProduction();
    return false;
  }

  return ReactDebugTool.isProfiling();
}

var ReactPerfAnalysis = {
  getLastMeasurements: getLastMeasurements,
  getExclusive: getExclusive,
  getInclusive: getInclusive,
  getWasted: getWasted,
  getOperations: getOperations,
  printExclusive: printExclusive,
  printInclusive: printInclusive,
  printWasted: printWasted,
  printOperations: printOperations,
  start: start,
  stop: stop,
  isRunning: isRunning,
  // Deprecated:
  printDOM: printDOM,
  getMeasurementsSummaryMap: getMeasurementsSummaryMap
};

module.exports = ReactPerfAnalysis;
},{"157":157,"158":158,"50":50}],72:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if ("development" !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
},{}],73:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],74:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var CallbackQueue = _dereq_(6);
var PooledClass = _dereq_(25);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactInputSelection = _dereq_(62);
var ReactInstrumentation = _dereq_(64);
var Transaction = _dereq_(100);
var ReactUpdateQueue = _dereq_(81);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if ("development" !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"100":100,"158":158,"25":25,"26":26,"6":6,"62":62,"64":64,"81":81}],75:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactRef = _dereq_(76);
var ReactInstrumentation = _dereq_(64);

var warning = _dereq_(157);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      "development" !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if ("development" !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
},{"157":157,"64":64,"76":76}],76:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactOwner = _dereq_(70);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"70":70}],77:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var PooledClass = _dereq_(25);
var Transaction = _dereq_(100);
var ReactInstrumentation = _dereq_(64);
var ReactServerUpdateQueue = _dereq_(78);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if ("development" !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"100":100,"158":158,"25":25,"64":64,"78":78}],78:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = _dereq_(81);

var warning = _dereq_(157);

function warnNoop(publicInstance, callerName) {
  if ("development" !== 'production') {
    var constructor = publicInstance.constructor;
    "development" !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
},{"157":157,"81":81}],79:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var React = _dereq_(133);
var ReactCompositeComponent = _dereq_(30);
var ReactDefaultBatchingStrategy = _dereq_(51);
var ReactReconciler = _dereq_(75);
var ReactReconcileTransaction = _dereq_(74);
var ReactUpdates = _dereq_(82);

var emptyObject = _dereq_(143);
var getNextDebugID = _dereq_(134);
var invariant = _dereq_(150);

function injectDefaults() {
  ReactUpdates.injection.injectReconcileTransaction(ReactReconcileTransaction);
  ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
}

var NoopInternalComponent = function () {
  function NoopInternalComponent(element) {
    _classCallCheck(this, NoopInternalComponent);

    this._renderedOutput = element;
    this._currentElement = element;

    if ("development" !== 'production') {
      this._debugID = getNextDebugID();
    }
  }

  NoopInternalComponent.prototype.mountComponent = function mountComponent() {};

  NoopInternalComponent.prototype.receiveComponent = function receiveComponent(element) {
    this._renderedOutput = element;
    this._currentElement = element;
  };

  NoopInternalComponent.prototype.unmountComponent = function unmountComponent() {};

  NoopInternalComponent.prototype.getHostNode = function getHostNode() {
    return undefined;
  };

  NoopInternalComponent.prototype.getPublicInstance = function getPublicInstance() {
    return null;
  };

  return NoopInternalComponent;
}();

var ShallowComponentWrapper = function (element) {
  // TODO: Consolidate with instantiateReactComponent
  if ("development" !== 'production') {
    this._debugID = getNextDebugID();
  }

  this.construct(element);
};
_assign(ShallowComponentWrapper.prototype, ReactCompositeComponent, {
  _constructComponent: ReactCompositeComponent._constructComponentWithoutOwner,
  _instantiateReactComponent: function (element) {
    return new NoopInternalComponent(element);
  },
  _replaceNodeWithMarkup: function () {},
  _renderValidatedComponent: ReactCompositeComponent._renderValidatedComponentWithoutOwnerOrContext
});

function _batchedRender(renderer, element, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
  renderer._render(element, transaction, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

var ReactShallowRenderer = function () {
  function ReactShallowRenderer() {
    _classCallCheck(this, ReactShallowRenderer);

    this._instance = null;
  }

  ReactShallowRenderer.prototype.getMountedInstance = function getMountedInstance() {
    return this._instance ? this._instance._instance : null;
  };

  ReactShallowRenderer.prototype.render = function render(element, context) {
    // Ensure we've done the default injections. This might not be true in the
    // case of a simple test that only requires React and the TestUtils in
    // conjunction with an inline-requires transform.
    injectDefaults();

    !React.isValidElement(element) ? "development" !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : _prodInvariant('12', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : void 0;
    !(typeof element.type !== 'string') ? "development" !== 'production' ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom components, not primitives (%s). Instead of calling `.render(el)` and inspecting the rendered output, look at `el.props` directly instead.', element.type) : _prodInvariant('13', element.type) : void 0;

    if (!context) {
      context = emptyObject;
    }
    ReactUpdates.batchedUpdates(_batchedRender, this, element, context);

    return this.getRenderOutput();
  };

  ReactShallowRenderer.prototype.getRenderOutput = function getRenderOutput() {
    return this._instance && this._instance._renderedComponent && this._instance._renderedComponent._renderedOutput || null;
  };

  ReactShallowRenderer.prototype.unmount = function unmount() {
    if (this._instance) {
      ReactReconciler.unmountComponent(this._instance, false);
    }
  };

  ReactShallowRenderer.prototype.unstable_batchedUpdates = function unstable_batchedUpdates(callback, bookkeeping) {
    // This is used by Enzyme for fake-simulating events in shallow mode.
    injectDefaults();
    return ReactUpdates.batchedUpdates(callback, bookkeeping);
  };

  ReactShallowRenderer.prototype._render = function _render(element, transaction, context) {
    if (this._instance) {
      ReactReconciler.receiveComponent(this._instance, element, transaction, context);
    } else {
      var instance = new ShallowComponentWrapper(element);
      ReactReconciler.mountComponent(instance, transaction, null, null, context, 0);
      this._instance = instance;
    }
  };

  return ReactShallowRenderer;
}();

ReactShallowRenderer.createRenderer = function () {
  return new ReactShallowRenderer();
};

module.exports = ReactShallowRenderer;
},{"124":124,"133":133,"134":134,"143":143,"150":150,"158":158,"30":30,"51":51,"74":74,"75":75,"82":82}],80:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var EventConstants = _dereq_(16);
var EventPluginHub = _dereq_(17);
var EventPluginRegistry = _dereq_(18);
var EventPropagators = _dereq_(20);
var React = _dereq_(133);
var ReactDOM = _dereq_(31);
var ReactDOMComponentTree = _dereq_(34);
var ReactBrowserEventEmitter = _dereq_(26);
var ReactInstanceMap = _dereq_(63);
var ReactUpdates = _dereq_(82);
var SyntheticEvent = _dereq_(91);
var ReactShallowRenderer = _dereq_(79);

var findDOMNode = _dereq_(108);
var invariant = _dereq_(150);
var warning = _dereq_(157);

var topLevelTypes = EventConstants.topLevelTypes;

function Event(suffix) {}

// In react 16+ shallowRenderer will not be accessible via ReactTestUtils.createRenderer()
// Instead it will be available via react-test-renderer/shallow
// Maintain backwards compat for 15.5.0 release, but warn about using the deprecated method
var hasWarnedAboutCreateRenderer = false;
function createRendererWithWarning() {
  "development" !== 'production' ? warning(hasWarnedAboutCreateRenderer, 'Shallow renderer has been moved to react-test-renderer/shallow. ' + 'Update references to remove this warning.') : void 0;
  hasWarnedAboutCreateRenderer = true;

  return new ReactShallowRenderer();
}

/**
 * @class ReactTestUtils
 */

function findAllInRenderedTreeInternal(inst, test) {
  if (!inst || !inst.getPublicInstance) {
    return [];
  }
  var publicInst = inst.getPublicInstance();
  var ret = test(publicInst) ? [publicInst] : [];
  var currentElement = inst._currentElement;
  if (ReactTestUtils.isDOMComponent(publicInst)) {
    var renderedChildren = inst._renderedChildren;
    var key;
    for (key in renderedChildren) {
      if (!renderedChildren.hasOwnProperty(key)) {
        continue;
      }
      ret = ret.concat(findAllInRenderedTreeInternal(renderedChildren[key], test));
    }
  } else if (React.isValidElement(currentElement) && typeof currentElement.type === 'function') {
    ret = ret.concat(findAllInRenderedTreeInternal(inst._renderedComponent, test));
  }
  return ret;
}

/**
 * Utilities for making it easy to test React components.
 *
 * See https://facebook.github.io/react/docs/test-utils.html
 *
 * Todo: Support the entire DOM.scry query syntax. For now, these simple
 * utilities will suffice for testing purposes.
 * @lends ReactTestUtils
 */
var ReactTestUtils = {
  renderIntoDocument: function (element) {
    var div = document.createElement('div');
    // None of our tests actually require attaching the container to the
    // DOM, and doing so creates a mess that we rely on test isolation to
    // clean up, so we're going to stop honoring the name of this method
    // (and probably rename it eventually) if no problems arise.
    // document.documentElement.appendChild(div);
    return ReactDOM.render(element, div);
  },

  isElement: function (element) {
    return React.isValidElement(element);
  },

  isElementOfType: function (inst, convenienceConstructor) {
    return React.isValidElement(inst) && inst.type === convenienceConstructor;
  },

  isDOMComponent: function (inst) {
    return !!(inst && inst.nodeType === 1 && inst.tagName);
  },

  isDOMComponentElement: function (inst) {
    return !!(inst && React.isValidElement(inst) && !!inst.tagName);
  },

  isCompositeComponent: function (inst) {
    if (ReactTestUtils.isDOMComponent(inst)) {
      // Accessing inst.setState warns; just return false as that'll be what
      // this returns when we have DOM nodes as refs directly
      return false;
    }
    return inst != null && typeof inst.render === 'function' && typeof inst.setState === 'function';
  },

  isCompositeComponentWithType: function (inst, type) {
    if (!ReactTestUtils.isCompositeComponent(inst)) {
      return false;
    }
    var internalInstance = ReactInstanceMap.get(inst);
    var constructor = internalInstance._currentElement.type;

    return constructor === type;
  },

  isCompositeComponentElement: function (inst) {
    if (!React.isValidElement(inst)) {
      return false;
    }
    // We check the prototype of the type that will get mounted, not the
    // instance itself. This is a future proof way of duck typing.
    var prototype = inst.type.prototype;
    return typeof prototype.render === 'function' && typeof prototype.setState === 'function';
  },

  isCompositeComponentElementWithType: function (inst, type) {
    var internalInstance = ReactInstanceMap.get(inst);
    var constructor = internalInstance._currentElement.type;

    return !!(ReactTestUtils.isCompositeComponentElement(inst) && constructor === type);
  },

  getRenderedChildOfCompositeComponent: function (inst) {
    if (!ReactTestUtils.isCompositeComponent(inst)) {
      return null;
    }
    var internalInstance = ReactInstanceMap.get(inst);
    return internalInstance._renderedComponent.getPublicInstance();
  },

  findAllInRenderedTree: function (inst, test) {
    if (!inst) {
      return [];
    }
    !ReactTestUtils.isCompositeComponent(inst) ? "development" !== 'production' ? invariant(false, 'findAllInRenderedTree(...): instance must be a composite component') : _prodInvariant('10') : void 0;
    return findAllInRenderedTreeInternal(ReactInstanceMap.get(inst), test);
  },

  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the class name matching `className`.
   * @return {array} an array of all the matches.
   */
  scryRenderedDOMComponentsWithClass: function (root, classNames) {
    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
      if (ReactTestUtils.isDOMComponent(inst)) {
        var className = inst.className;
        if (typeof className !== 'string') {
          // SVG, probably.
          className = inst.getAttribute('class') || '';
        }
        var classList = className.split(/\s+/);

        if (!Array.isArray(classNames)) {
          !(classNames !== undefined) ? "development" !== 'production' ? invariant(false, 'TestUtils.scryRenderedDOMComponentsWithClass expects a className as a second argument.') : _prodInvariant('11') : void 0;
          classNames = classNames.split(/\s+/);
        }
        return classNames.every(function (name) {
          return classList.indexOf(name) !== -1;
        });
      }
      return false;
    });
  },

  /**
   * Like scryRenderedDOMComponentsWithClass but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithClass: function (root, className) {
    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for class:' + className);
    }
    return all[0];
  },

  /**
   * Finds all instance of components in the rendered tree that are DOM
   * components with the tag name matching `tagName`.
   * @return {array} an array of all the matches.
   */
  scryRenderedDOMComponentsWithTag: function (root, tagName) {
    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
      return ReactTestUtils.isDOMComponent(inst) && inst.tagName.toUpperCase() === tagName.toUpperCase();
    });
  },

  /**
   * Like scryRenderedDOMComponentsWithTag but expects there to be one result,
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactDOMComponent} The one match.
   */
  findRenderedDOMComponentWithTag: function (root, tagName) {
    var all = ReactTestUtils.scryRenderedDOMComponentsWithTag(root, tagName);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for tag:' + tagName);
    }
    return all[0];
  },

  /**
   * Finds all instances of components with type equal to `componentType`.
   * @return {array} an array of all the matches.
   */
  scryRenderedComponentsWithType: function (root, componentType) {
    return ReactTestUtils.findAllInRenderedTree(root, function (inst) {
      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
    });
  },

  /**
   * Same as `scryRenderedComponentsWithType` but expects there to be one result
   * and returns that one result, or throws exception if there is any other
   * number of matches besides one.
   * @return {!ReactComponent} The one match.
   */
  findRenderedComponentWithType: function (root, componentType) {
    var all = ReactTestUtils.scryRenderedComponentsWithType(root, componentType);
    if (all.length !== 1) {
      throw new Error('Did not find exactly one match (found: ' + all.length + ') ' + 'for componentType:' + componentType);
    }
    return all[0];
  },

  /**
   * Pass a mocked component module to this method to augment it with
   * useful methods that allow it to be used as a dummy React component.
   * Instead of rendering as usual, the component will become a simple
   * <div> containing any provided children.
   *
   * @param {object} module the mock function object exported from a
   *                        module that defines the component to be mocked
   * @param {?string} mockTagName optional dummy root tag name to return
   *                              from render method (overrides
   *                              module.mockTagName if provided)
   * @return {object} the ReactTestUtils object (for chaining)
   */
  mockComponent: function (module, mockTagName) {
    mockTagName = mockTagName || module.mockTagName || 'div';

    module.prototype.render.mockImplementation(function () {
      return React.createElement(mockTagName, null, this.props.children);
    });

    return this;
  },

  /**
   * Simulates a top level event being dispatched from a raw event that occurred
   * on an `Element` node.
   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`
   * @param {!Element} node The dom to simulate an event occurring on.
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnNode: function (topLevelType, node, fakeNativeEvent) {
    fakeNativeEvent.target = node;
    ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(topLevelType, fakeNativeEvent);
  },

  /**
   * Simulates a top level event being dispatched from a raw event that occurred
   * on the `ReactDOMComponent` `comp`.
   * @param {Object} topLevelType A type from `EventConstants.topLevelTypes`.
   * @param {!ReactDOMComponent} comp
   * @param {?Event} fakeNativeEvent Fake native event to use in SyntheticEvent.
   */
  simulateNativeEventOnDOMComponent: function (topLevelType, comp, fakeNativeEvent) {
    ReactTestUtils.simulateNativeEventOnNode(topLevelType, findDOMNode(comp), fakeNativeEvent);
  },

  nativeTouchData: function (x, y) {
    return {
      touches: [{ pageX: x, pageY: y }]
    };
  },

  createRenderer: createRendererWithWarning,

  Simulate: null,
  SimulateNative: {}
};

/**
 * Exports:
 *
 * - `ReactTestUtils.Simulate.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.Simulate.change(Element/ReactDOMComponent)`
 * - ... (All keys from event plugin `eventTypes` objects)
 */
function makeSimulator(eventType) {
  return function (domComponentOrNode, eventData) {
    var node;
    !!React.isValidElement(domComponentOrNode) ? "development" !== 'production' ? invariant(false, 'TestUtils.Simulate expects a component instance and not a ReactElement.TestUtils.Simulate will not work if you are using shallow rendering.') : _prodInvariant('14') : void 0;
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      node = findDOMNode(domComponentOrNode);
    } else if (domComponentOrNode.tagName) {
      node = domComponentOrNode;
    }

    var dispatchConfig = EventPluginRegistry.eventNameDispatchConfigs[eventType];

    var fakeNativeEvent = new Event();
    fakeNativeEvent.target = node;
    fakeNativeEvent.type = eventType.toLowerCase();

    // We don't use SyntheticEvent.getPooled in order to not have to worry about
    // properly destroying any properties assigned from `eventData` upon release
    var event = new SyntheticEvent(dispatchConfig, ReactDOMComponentTree.getInstanceFromNode(node), fakeNativeEvent, node);
    // Since we aren't using pooling, always persist the event. This will make
    // sure it's marked and won't warn when setting additional properties.
    event.persist();
    _assign(event, eventData);

    if (dispatchConfig.phasedRegistrationNames) {
      EventPropagators.accumulateTwoPhaseDispatches(event);
    } else {
      EventPropagators.accumulateDirectDispatches(event);
    }

    ReactUpdates.batchedUpdates(function () {
      EventPluginHub.enqueueEvents(event);
      EventPluginHub.processEventQueue(true);
    });
  };
}

function buildSimulators() {
  ReactTestUtils.Simulate = {};

  var eventType;
  for (eventType in EventPluginRegistry.eventNameDispatchConfigs) {
    /**
     * @param {!Element|ReactDOMComponent} domComponentOrNode
     * @param {?object} eventData Fake event data to use in SyntheticEvent.
     */
    ReactTestUtils.Simulate[eventType] = makeSimulator(eventType);
  }
}

// Rebuild ReactTestUtils.Simulate whenever event plugins are injected
var oldInjectEventPluginOrder = EventPluginHub.injection.injectEventPluginOrder;
EventPluginHub.injection.injectEventPluginOrder = function () {
  oldInjectEventPluginOrder.apply(this, arguments);
  buildSimulators();
};
var oldInjectEventPlugins = EventPluginHub.injection.injectEventPluginsByName;
EventPluginHub.injection.injectEventPluginsByName = function () {
  oldInjectEventPlugins.apply(this, arguments);
  buildSimulators();
};

buildSimulators();

/**
 * Exports:
 *
 * - `ReactTestUtils.SimulateNative.click(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseMove(Element/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseIn/ReactDOMComponent)`
 * - `ReactTestUtils.SimulateNative.mouseOut(Element/ReactDOMComponent)`
 * - ... (All keys from `EventConstants.topLevelTypes`)
 *
 * Note: Top level event types are a subset of the entire set of handler types
 * (which include a broader set of "synthetic" events). For example, onDragDone
 * is a synthetic event. Except when testing an event plugin or React's event
 * handling code specifically, you probably want to use ReactTestUtils.Simulate
 * to dispatch synthetic events.
 */

function makeNativeSimulator(eventType) {
  return function (domComponentOrNode, nativeEventData) {
    var fakeNativeEvent = new Event(eventType);
    _assign(fakeNativeEvent, nativeEventData);
    if (ReactTestUtils.isDOMComponent(domComponentOrNode)) {
      ReactTestUtils.simulateNativeEventOnDOMComponent(eventType, domComponentOrNode, fakeNativeEvent);
    } else if (domComponentOrNode.tagName) {
      // Will allow on actual dom nodes.
      ReactTestUtils.simulateNativeEventOnNode(eventType, domComponentOrNode, fakeNativeEvent);
    }
  };
}

Object.keys(topLevelTypes).forEach(function (eventType) {
  // Event type is stored as 'topClick' - we transform that to 'click'
  var convenienceName = eventType.indexOf('top') === 0 ? eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
  /**
   * @param {!Element|ReactDOMComponent} domComponentOrNode
   * @param {?Event} nativeEventData Fake native event to use in SyntheticEvent.
   */
  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(eventType);
});

module.exports = ReactTestUtils;
},{"108":108,"124":124,"133":133,"150":150,"157":157,"158":158,"16":16,"17":17,"18":18,"20":20,"26":26,"31":31,"34":34,"63":63,"79":79,"82":82,"91":91}],81:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactCurrentOwner = _dereq_(132);
var ReactInstanceMap = _dereq_(63);
var ReactInstrumentation = _dereq_(64);
var ReactUpdates = _dereq_(82);

var invariant = _dereq_(150);
var warning = _dereq_(157);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if ("development" !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      "development" !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if ("development" !== 'production') {
    "development" !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if ("development" !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        "development" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if ("development" !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      "development" !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? "development" !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;
},{"124":124,"132":132,"150":150,"157":157,"63":63,"64":64,"82":82}],82:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var CallbackQueue = _dereq_(6);
var PooledClass = _dereq_(25);
var ReactFeatureFlags = _dereq_(58);
var ReactReconciler = _dereq_(75);
var Transaction = _dereq_(100);

var invariant = _dereq_(150);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? "development" !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? "development" !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? "development" !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
},{"100":100,"124":124,"150":150,"158":158,"25":25,"58":58,"6":6,"75":75}],83:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

module.exports = '15.5.4';
},{}],84:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;
},{}],85:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = _dereq_(20);
var ExecutionEnvironment = _dereq_(136);
var ReactDOMComponentTree = _dereq_(34);
var ReactInputSelection = _dereq_(62);
var SyntheticEvent = _dereq_(91);

var getActiveElement = _dereq_(145);
var isTextInputElement = _dereq_(122);
var shallowEqual = _dereq_(156);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"122":122,"136":136,"145":145,"156":156,"20":20,"34":34,"62":62,"91":91}],86:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var EventListener = _dereq_(135);
var EventPropagators = _dereq_(20);
var ReactDOMComponentTree = _dereq_(34);
var SyntheticAnimationEvent = _dereq_(87);
var SyntheticClipboardEvent = _dereq_(88);
var SyntheticEvent = _dereq_(91);
var SyntheticFocusEvent = _dereq_(92);
var SyntheticKeyboardEvent = _dereq_(94);
var SyntheticMouseEvent = _dereq_(95);
var SyntheticDragEvent = _dereq_(90);
var SyntheticTouchEvent = _dereq_(96);
var SyntheticTransitionEvent = _dereq_(97);
var SyntheticUIEvent = _dereq_(98);
var SyntheticWheelEvent = _dereq_(99);

var emptyFunction = _dereq_(142);
var getEventCharCode = _dereq_(111);
var invariant = _dereq_(150);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? "development" !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;
},{"111":111,"124":124,"135":135,"142":142,"150":150,"20":20,"34":34,"87":87,"88":88,"90":90,"91":91,"92":92,"94":94,"95":95,"96":96,"97":97,"98":98,"99":99}],87:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = _dereq_(91);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;
},{"91":91}],88:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = _dereq_(91);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"91":91}],89:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = _dereq_(91);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"91":91}],90:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = _dereq_(95);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"95":95}],91:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var PooledClass = _dereq_(25);

var emptyFunction = _dereq_(142);
var warning = _dereq_(157);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if ("development" !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if ("development" !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if ("development" !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if ("development" !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if ("development" !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              "development" !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    "development" !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
},{"142":142,"157":157,"158":158,"25":25}],92:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = _dereq_(98);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"98":98}],93:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = _dereq_(91);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"91":91}],94:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = _dereq_(98);

var getEventCharCode = _dereq_(111);
var getEventKey = _dereq_(112);
var getEventModifierState = _dereq_(113);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"111":111,"112":112,"113":113,"98":98}],95:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = _dereq_(98);
var ViewportMetrics = _dereq_(101);

var getEventModifierState = _dereq_(113);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"101":101,"113":113,"98":98}],96:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = _dereq_(98);

var getEventModifierState = _dereq_(113);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"113":113,"98":98}],97:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = _dereq_(91);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;
},{"91":91}],98:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = _dereq_(91);

var getEventTarget = _dereq_(114);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"114":114,"91":91}],99:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = _dereq_(95);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"95":95}],100:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? "development" !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? "development" !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
},{"124":124,"150":150}],101:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],102:[function(_dereq_,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = _dereq_(124);

var invariant = _dereq_(150);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? "development" !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
},{"124":124,"150":150}],103:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],104:[function(_dereq_,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactPropTypeLocationNames = _dereq_(72);
var ReactPropTypesSecret = _dereq_(73);

var invariant = _dereq_(150);
var warning = _dereq_(157);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = _dereq_(131);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? "development" !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      "development" !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if ("development" !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = _dereq_(131);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        "development" !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,undefined)
},{"124":124,"131":131,"150":150,"157":157,"72":72,"73":73}],105:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */

'use strict';

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;
},{}],106:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = _dereq_(4);
var warning = _dereq_(157);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if ("development" !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          "development" !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"157":157,"4":4}],107:[function(_dereq_,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

'use strict';

// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;
},{}],108:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactCurrentOwner = _dereq_(132);
var ReactDOMComponentTree = _dereq_(34);
var ReactInstanceMap = _dereq_(63);

var getHostComponentFromComposite = _dereq_(115);
var invariant = _dereq_(150);
var warning = _dereq_(157);

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if ("development" !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      "development" !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
    !false ? "development" !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
    !false ? "development" !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
},{"115":115,"124":124,"132":132,"150":150,"157":157,"34":34,"63":63}],109:[function(_dereq_,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var KeyEscapeUtils = _dereq_(23);
var traverseAllChildren = _dereq_(129);
var warning = _dereq_(157);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && "development" === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = _dereq_(131);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if ("development" !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = _dereq_(131);
      }
      if (!keyUnique) {
        "development" !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if ("development" !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}).call(this,undefined)
},{"129":129,"131":131,"157":157,"23":23}],110:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
},{}],111:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],112:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var getEventCharCode = _dereq_(111);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"111":111}],113:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],114:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],115:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactNodeTypes = _dereq_(69);

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;
},{"69":69}],116:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],117:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],118:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"136":136}],119:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;
},{"136":136}],120:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124),
    _assign = _dereq_(158);

var ReactCompositeComponent = _dereq_(30);
var ReactEmptyComponent = _dereq_(54);
var ReactHostComponent = _dereq_(59);

var getNextDebugID = _dereq_(134);
var invariant = _dereq_(150);
var warning = _dereq_(157);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if ("development" !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
      !false ? "development" !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    !false ? "development" !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if ("development" !== 'production') {
    "development" !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if ("development" !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if ("development" !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
},{"124":124,"134":134,"150":150,"157":157,"158":158,"30":30,"54":54,"59":59}],121:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"136":136}],122:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;
},{}],123:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var escapeTextContentForBrowser = _dereq_(107);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"107":107}],124:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],125:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactMount = _dereq_(67);

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"67":67}],126:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);
var DOMNamespaces = _dereq_(10);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = _dereq_(105);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;
},{"10":10,"105":105,"136":136}],127:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);
var escapeTextContentForBrowser = _dereq_(107);
var setInnerHTML = _dereq_(126);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"107":107,"126":126,"136":136}],128:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
},{}],129:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = _dereq_(124);

var ReactCurrentOwner = _dereq_(132);
var REACT_ELEMENT_TYPE = _dereq_(53);

var getIteratorFn = _dereq_(116);
var invariant = _dereq_(150);
var KeyEscapeUtils = _dereq_(23);
var warning = _dereq_(157);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if ("development" !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          "development" !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if ("development" !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? "development" !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
},{"116":116,"124":124,"132":132,"150":150,"157":157,"23":23,"53":53}],130:[function(_dereq_,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = _dereq_(158);

var emptyFunction = _dereq_(142);
var warning = _dereq_(157);

var validateDOMNesting = emptyFunction;

if ("development" !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      "development" !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        "development" !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        "development" !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
},{"142":142,"157":157,"158":158}],131:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals React */

'use strict';

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = ReactInternals.ReactComponentTreeHook;
},{}],132:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals React */

'use strict';

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = ReactInternals.ReactCurrentOwner;
},{}],133:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals React */

'use strict';

module.exports = React;
},{}],134:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals React */

'use strict';

var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = ReactInternals.getNextDebugID;
},{}],135:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = _dereq_(142);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if ("development" !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
},{"142":142}],136:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],137:[function(_dereq_,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],138:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var camelize = _dereq_(137);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"137":137}],139:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = _dereq_(152);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"152":152}],140:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = _dereq_(150);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? "development" !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? "development" !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? "development" !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? "development" !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"150":150}],141:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = _dereq_(136);

var createArrayFromMixed = _dereq_(140);
var getMarkupWrap = _dereq_(146);
var invariant = _dereq_(150);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? "development" !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? "development" !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
},{"136":136,"140":140,"146":146,"150":150}],142:[function(_dereq_,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],143:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if ("development" !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
},{}],144:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],145:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
},{}],146:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = _dereq_(136);

var invariant = _dereq_(150);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? "development" !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
},{"136":136,"150":150}],147:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],148:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],149:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var hyphenate = _dereq_(148);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"148":148}],150:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if ("development" !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
},{}],151:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],152:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = _dereq_(151);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"151":151}],153:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],154:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = _dereq_(136);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"136":136}],155:[function(_dereq_,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = _dereq_(154);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"154":154}],156:[function(_dereq_,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],157:[function(_dereq_,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = _dereq_(142);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if ("development" !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
},{"142":142}],158:[function(_dereq_,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],159:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

if ("development" !== 'production') {
  var invariant = _dereq_(150);
  var warning = _dereq_(157);
  var ReactPropTypesSecret = _dereq_(162);
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if ("development" !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

},{"150":150,"157":157,"162":162}],160:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = _dereq_(161);
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"161":161}],161:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var emptyFunction = _dereq_(142);
var invariant = _dereq_(150);
var warning = _dereq_(157);

var ReactPropTypesSecret = _dereq_(162);
var checkPropTypes = _dereq_(159);

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if ("development" !== 'production') {
      var manualPropTypeCallCache = {};
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if ("development" !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey]) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      "development" !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      "development" !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"142":142,"150":150,"157":157,"159":159,"162":162}],162:[function(_dereq_,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}]},{},[48])(48)
});
});

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (goog.isInModuleLoader_()) {
    throw Error("goog.provide can not be used within a goog.module.");
  }
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
goog.forwardDeclare("Document");
goog.forwardDeclare("HTMLScriptElement");
goog.forwardDeclare("XMLHttpRequest");
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    if (!opt_loadFlags || typeof opt_loadFlags === "boolean") {
      opt_loadFlags = opt_loadFlags ? {"module":"goog"} : {};
    }
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.loadFlags[path] = opt_loadFlags;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.writeScripts_(path);
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.define("goog.TRANSPILE", "detect");
goog.define("goog.TRANSPILER", "transpile.js");
if (goog.DEPENDENCIES_ENABLED) {
  goog.dependencies_ = {loadFlags:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return doc != null && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importProcessedScript_ = function(src, isModule, needsTranspile) {
    var bootstrap = 'goog.retrieveAndExec_("' + src + '", ' + isModule + ", " + needsTranspile + ");";
    goog.importScript_("", bootstrap);
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    var loadFlags = path && goog.dependencies_.loadFlags[path] || {};
    if (path && (loadFlags["module"] == "goog" || goog.needsTranspile_(loadFlags["lang"]))) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModuleFromUrl = function(url) {
    goog.retrieveAndExec_(url, true, false);
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined, declareLegacyNamespace:false};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function() {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = (doc.createElement("script"));
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      if (opt_sourceText === undefined) {
        if (!goog.IS_OLD_IE_) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.needsTranspile_ = function(lang) {
    if (goog.TRANSPILE == "always") {
      return true;
    } else {
      if (goog.TRANSPILE == "never") {
        return false;
      } else {
        if (!goog.transpiledLanguages_) {
          goog.transpiledLanguages_ = {"es5":true, "es6":true, "es6-impl":true};
          try {
            goog.transpiledLanguages_["es5"] = eval("[1,].length!\x3d1");
            var es6implTest = "let a\x3d{};const X\x3dclass{constructor(){}x(z){return new Map([" + "...arguments]).get(z[0])\x3d\x3d3}};return new X().x([a,3])";
            var es6fullTest = "class X{constructor(){if(new.target!\x3dString)throw 1;this.x\x3d42}}" + "let q\x3dReflect.construct(X,[],String);if(q.x!\x3d42||!(q instanceof " + "String))throw 1;for(const a of[2,3]){if(a\x3d\x3d2)continue;function " + "f(z\x3d{a}){let a\x3d0;return z.a}{function f(){return 0;}}return f()" + "\x3d\x3d3}";
            if (eval('(()\x3d\x3e{"use strict";' + es6implTest + "})()")) {
              goog.transpiledLanguages_["es6-impl"] = false;
            }
            if (eval('(()\x3d\x3e{"use strict";' + es6fullTest + "})()")) {
              goog.transpiledLanguages_["es6"] = false;
            }
          } catch (err) {
          }
        }
      }
    }
    return !!goog.transpiledLanguages_[lang];
  };
  goog.transpiledLanguages_ = null;
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function(pathToLoad) {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    visitNode(pathToLoad);
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        var loadFlags = deps.loadFlags[path] || {};
        var needsTranspile = goog.needsTranspile_(loadFlags["lang"]);
        if (loadFlags["module"] == "goog" || needsTranspile) {
          goog.importProcessedScript_(goog.basePath + path, loadFlags["module"] == "goog", needsTranspile);
        } else {
          goog.importScript_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    try {
      var xhr = new goog.global["XMLHttpRequest"];
      xhr.open("get", src, false);
      xhr.send();
      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;
    } catch (err) {
      return null;
    }
  }
};
goog.retrieveAndExec_ = function(src, isModule, needsTranspile) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText == null) {
      throw new Error('Load of "' + src + '" failed');
    }
    if (needsTranspile) {
      scriptText = goog.transpile_.call(goog.global, scriptText, src);
    }
    if (isModule) {
      scriptText = goog.wrapModule_(src, scriptText);
    } else {
      scriptText += "\n//# sourceURL\x3d" + src;
    }
    var isOldIE = goog.IS_OLD_IE_;
    if (isOldIE) {
      goog.dependencies_.deferred[originalPath] = scriptText;
      goog.queuedModules_.push(originalPath);
    } else {
      importScript(src, scriptText);
    }
  }
};
goog.transpile_ = function(code, path) {
  var jscomp = goog.global["$jscomp"];
  if (!jscomp) {
    goog.global["$jscomp"] = jscomp = {};
  }
  var transpile = jscomp.transpile;
  if (!transpile) {
    var transpilerPath = goog.basePath + goog.TRANSPILER;
    var transpilerCode = goog.loadFileSync_(transpilerPath);
    if (transpilerCode) {
      eval(transpilerCode + "\n//# sourceURL\x3d" + transpilerPath);
      jscomp = goog.global["$jscomp"];
      transpile = jscomp.transpile;
    }
  }
  if (!transpile) {
    var suffix = " requires transpilation but no transpiler was found.";
    transpile = jscomp.transpile = function(code, path) {
      goog.logToConsole_(path + suffix);
      return code;
    };
  }
  return transpile(code, path);
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if (obj !== null && "removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1e9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = (doc.createElement("SCRIPT"));
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  if (goog.isInModuleLoader_()) {
    throw Error("goog.scope is not supported within a goog.module.");
  }
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
    return ctr;
  }
  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);
  var wrappedCtr = function() {
    var instance = ctr.apply(this, arguments) || this;
    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
    if (this.constructor === wrappedCtr && superclassSealable && Object.seal instanceof Function) {
      Object.seal(instance);
    }
    return instance;
  };
  return wrappedCtr;
};
goog.defineClass.isUnsealable_ = function(ctr) {
  return ctr && ctr.prototype && ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:" "};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "" && ch <= "�";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function(str1, str2) {
  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\", "\x3c":"\x3c"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  var sb = ['"'];
  for (var i = 0;i < s.length;i++) {
    var ch = s.charAt(i);
    var cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
  }
  sb.push('"');
  return sb.join("");
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = String.prototype.repeat ? function(string, length) {
  return string.repeat(length);
} : function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i) >>> 0;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.lastComponent = function(str, separators) {
  if (!separators) {
    return str;
  } else {
    if (typeof separators == "string") {
      separators = [separators];
    }
  }
  var lastSeparatorIndex = -1;
  for (var i = 0;i < separators.length;i++) {
    if (separators[i] == "") {
      continue;
    }
    var currentSeparatorIndex = str.lastIndexOf(separators[i]);
    if (currentSeparatorIndex > lastSeparatorIndex) {
      lastSeparatorIndex = currentSeparatorIndex;
    }
  }
  if (lastSeparatorIndex == -1) {
    return str;
  }
  return str.slice(lastSeparatorIndex + 1);
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = Number(a[i] != b[j]);
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  Array.prototype.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call((opt_obj), arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call((opt_obj), arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call((opt_obj), val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call((opt_obj), arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return Array.prototype.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call((opt_obj), rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.asserts.assert(f != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return Array.prototype.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call((opt_obj), rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call((opt_obj), arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call((opt_obj), element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeLast = function(arr, obj) {
  var i = goog.array.lastIndexOf(arr, obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call((opt_obj), val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return Array.prototype.concat.apply(Array.prototype, arguments);
};
goog.array.join = function(var_args) {
  return Array.prototype.concat.apply(Array.prototype, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return Array.prototype.slice.call(arr, start);
  } else {
    return Array.prototype.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = (compareFn)(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  var compArr = new Array(arr.length);
  for (var i = 0;i < arr.length;i++) {
    compArr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(compArr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = compArr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call((opt_obj), value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call((opt_obj), element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      Array.prototype.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        Array.prototype.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  var minLen = arguments[0].length;
  for (var i = 1;i < arguments.length;i++) {
    if (arguments[i].length < minLen) {
      minLen = arguments[i].length;
    }
  }
  for (var i = 0;i < minLen;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      value.push(arguments[j][i]);
    }
    result.push(value);
  }
  return result;
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.array.concatMap = function(arr, f, opt_obj) {
  return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.object");
goog.object.is = function(v, v2) {
  if (v === v2) {
    return v !== 0 || 1 / v === 1 / (v2);
  }
  return v !== v && v2 !== v2;
};
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call((opt_obj), obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call((opt_obj), obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call((opt_obj), obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call((opt_obj), obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call((opt_obj), obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return obj !== null && key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call((opt_this), obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in (obj)) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (obj !== null && key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (obj !== null && key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in (obj) ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (goog.isFunction(obj.clone)) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.object");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchEdge_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !(goog.labs.userAgent.browser.matchChrome_() || goog.labs.userAgent.browser.matchCoast_() || goog.labs.userAgent.browser.matchOpera_() || goog.labs.userAgent.browser.matchEdge_() || goog.labs.userAgent.browser.isSilk() || goog.labs.userAgent.util.matchUserAgent("Android"));
};
goog.labs.userAgent.browser.matchCoast_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Coast");
};
goog.labs.userAgent.browser.matchIosWebview_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("iPad") || goog.labs.userAgent.util.matchUserAgent("iPhone")) && !goog.labs.userAgent.browser.matchSafari_() && !goog.labs.userAgent.browser.matchChrome_() && !goog.labs.userAgent.browser.matchCoast_() && goog.labs.userAgent.util.matchUserAgent("AppleWebKit");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return (goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS")) && !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !(goog.labs.userAgent.browser.isChrome() || goog.labs.userAgent.browser.isFirefox() || goog.labs.userAgent.browser.isOpera() || goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview = goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  var versionMap = {};
  goog.array.forEach(versionTuples, function(tuple) {
    var key = tuple[0];
    var value = tuple[1];
    versionMap[key] = value;
  });
  var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
  function lookUpValueWithKeys(keys) {
    var key = goog.array.find(keys, versionMapHasKey);
    return versionMap[key] || "";
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return lookUpValueWithKeys(["Version", "Opera"]);
  }
  if (goog.labs.userAgent.browser.isEdge()) {
    return lookUpValueWithKeys(["Edge"]);
  }
  if (goog.labs.userAgent.browser.isChrome()) {
    return lookUpValueWithKeys(["Chrome", "CriOS"]);
  }
  var tuple = versionTuples[2];
  return tuple && tuple[1] || "";
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isEdge = function() {
  return goog.labs.userAgent.util.matchUserAgent("Edge");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit") && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident() && !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.getEngineTuple_ = function(tuples) {
  if (!goog.labs.userAgent.engine.isEdge()) {
    return tuples[1];
  }
  for (var i = 0;i < tuples.length;i++) {
    var tuple = tuples[i];
    if (tuple[0] == "Edge") {
      return tuple;
    }
  }
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.platform.isAndroid = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.platform.isIpod = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPod");
};
goog.labs.userAgent.platform.isIphone = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPhone") && !goog.labs.userAgent.util.matchUserAgent("iPod") && !goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIpad = function() {
  return goog.labs.userAgent.util.matchUserAgent("iPad");
};
goog.labs.userAgent.platform.isIos = function() {
  return goog.labs.userAgent.platform.isIphone() || goog.labs.userAgent.platform.isIpad() || goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function() {
  return goog.labs.userAgent.util.matchUserAgent("Macintosh");
};
goog.labs.userAgent.platform.isLinux = function() {
  return goog.labs.userAgent.util.matchUserAgent("Linux");
};
goog.labs.userAgent.platform.isWindows = function() {
  return goog.labs.userAgent.util.matchUserAgent("Windows");
};
goog.labs.userAgent.platform.isChromeOS = function() {
  return goog.labs.userAgent.util.matchUserAgent("CrOS");
};
goog.labs.userAgent.platform.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  var version = "", re;
  if (goog.labs.userAgent.platform.isWindows()) {
    re = /Windows (?:NT|Phone) ([0-9.]+)/;
    var match = re.exec(userAgentString);
    if (match) {
      version = match[1];
    } else {
      version = "0.0";
    }
  } else {
    if (goog.labs.userAgent.platform.isIos()) {
      re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
      var match = re.exec(userAgentString);
      version = match && match[1].replace(/_/g, ".");
    } else {
      if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, ".") : "10";
      } else {
        if (goog.labs.userAgent.platform.isAndroid()) {
          re = /Android\s+([^\);]+)(\)|;)/;
          var match = re.exec(userAgentString);
          version = match && match[1];
        } else {
          if (goog.labs.userAgent.platform.isChromeOS()) {
            re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
            var match = re.exec(userAgentString);
            version = match && match[1];
          }
        }
      }
    }
  }
  return version || "";
};
goog.labs.userAgent.platform.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.platform");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_EDGE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_EDGE : goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.define("goog.userAgent.ASSUME_IPOD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD || goog.userAgent.ASSUME_IPOD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function() {
  return goog.labs.userAgent.platform.isLinux() || goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return !!navigator && goog.string.contains(navigator["appVersion"] || "", "X11");
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPOD : goog.labs.userAgent.platform.isIpod();
goog.userAgent.determineVersion_ = function() {
  var version = "";
  var arr = goog.userAgent.getVersionRegexResult_();
  if (arr) {
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode != null && docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getVersionRegexResult_ = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  if (goog.userAgent.GECKO) {
    return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.EDGE) {
    return /Edge\/([\d\.]+)/.exec(userAgent);
  }
  if (goog.userAgent.IE) {
    return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
  }
  if (goog.userAgent.WEBKIT) {
    return /WebKit\/(\S+)/.exec(userAgent);
  }
  if (goog.userAgent.OPERA) {
    return /(?:Version)[ \/]?(\S+)/.exec(userAgent);
  }
  return undefined;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  var mode = goog.userAgent.getDocumentMode_();
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.dom.BrowserFeature");
goog.require("goog.userAgent");
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) || goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, 
INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE, LEGACY_IE_RANGES:goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)};
goog.provide("goog.dom.TagName");
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEMPLATE:"TEMPLATE", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.provide("goog.dom.tags");
goog.require("goog.object");
goog.dom.tags.VOID_TAGS_ = goog.object.createSet("area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr");
goog.dom.tags.isVoidTag = function(tagName) {
  return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide("goog.string.TypedString");
goog.string.TypedString = function() {
};
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide("goog.string.Const");
goog.require("goog.asserts");
goog.require("goog.string.TypedString");
goog.string.Const = function() {
  this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = "";
  this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ = goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function() {
  return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function() {
  return "Const{" + this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ + "}";
};
goog.string.Const.unwrap = function(stringConst) {
  if (stringConst instanceof goog.string.Const && stringConst.constructor === goog.string.Const && stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ === goog.string.Const.TYPE_MARKER_) {
    return stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
  } else {
    goog.asserts.fail("expected object of type Const, got '" + stringConst + "'");
    return "type_error:Const";
  }
};
goog.string.Const.from = function(s) {
  return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function(s) {
  var stringConst = new goog.string.Const;
  stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = s;
  return stringConst;
};
goog.provide("goog.html.SafeStyle");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyle = function() {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = "";
  this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function(style) {
  var styleString = goog.string.Const.unwrap(style);
  if (styleString.length === 0) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(styleString);
  goog.asserts.assert(goog.string.endsWith(styleString, ";"), "Last character of style string is not ';': " + styleString);
  goog.asserts.assert(goog.string.contains(styleString, ":"), "Style string must contain at least one ':', to " + 'specify a "name: value" pair: ' + styleString);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function(style) {
  goog.asserts.assert(!/[<>]/.test(style), "Forbidden characters in style string: " + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyle.prototype.toString = function() {
    return "SafeStyle{" + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ + "}";
  };
}
goog.html.SafeStyle.unwrap = function(safeStyle) {
  if (safeStyle instanceof goog.html.SafeStyle && safeStyle.constructor === goog.html.SafeStyle && safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyle, got '" + safeStyle + "' of type " + goog.typeOf(safeStyle));
    return "type_error:SafeStyle";
  }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function(style) {
  return (new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(style) {
  this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
  return this;
};
goog.html.SafeStyle.EMPTY = goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse("");
goog.html.SafeStyle.INNOCUOUS_STRING = "zClosurez";
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function(map) {
  var style = "";
  for (var name in map) {
    if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
      throw Error("Name allows only [-_a-zA-Z0-9], got: " + name);
    }
    var value = map[name];
    if (value == null) {
      continue;
    }
    if (value instanceof goog.string.Const) {
      value = goog.string.Const.unwrap(value);
      goog.asserts.assert(!/[{;}]/.test(value), "Value does not allow [{;}].");
    } else {
      if (!goog.html.SafeStyle.VALUE_RE_.test(value)) {
        goog.asserts.fail("String value allows only [-,.\"'%_!# a-zA-Z0-9], rgb() and " + "rgba(), got: " + value);
        value = goog.html.SafeStyle.INNOCUOUS_STRING;
      } else {
        if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
          goog.asserts.fail("String value requires balanced quotes, got: " + value);
          value = goog.html.SafeStyle.INNOCUOUS_STRING;
        }
      }
    }
    style += name + ":" + value + ";";
  }
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  goog.html.SafeStyle.checkStyle_(style);
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function(value) {
  var outsideSingle = true;
  var outsideDouble = true;
  for (var i = 0;i < value.length;i++) {
    var c = value.charAt(i);
    if (c == "'" && outsideDouble) {
      outsideSingle = !outsideSingle;
    } else {
      if (c == '"' && outsideSingle) {
        outsideDouble = !outsideDouble;
      }
    }
  }
  return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_RE_ = /^([-,."'%_!# a-zA-Z0-9]+|(?:rgb|hsl)a?\([0-9.%, ]+\))$/;
goog.html.SafeStyle.concat = function(var_args) {
  var style = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      style += goog.html.SafeStyle.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  if (!style) {
    return goog.html.SafeStyle.EMPTY;
  }
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide("goog.html.SafeStyleSheet");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeStyleSheet = function() {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = "";
  this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.concat = function(var_args) {
  var result = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      result += goog.html.SafeStyleSheet.unwrap(argument);
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function(styleSheet) {
  var styleSheetString = goog.string.Const.unwrap(styleSheet);
  if (styleSheetString.length === 0) {
    return goog.html.SafeStyleSheet.EMPTY;
  }
  goog.asserts.assert(!goog.string.contains(styleSheetString, "\x3c"), "Forbidden '\x3c' character in style sheet string: " + styleSheetString);
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeStyleSheet.prototype.toString = function() {
    return "SafeStyleSheet{" + this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + "}";
  };
}
goog.html.SafeStyleSheet.unwrap = function(safeStyleSheet) {
  if (safeStyleSheet instanceof goog.html.SafeStyleSheet && safeStyleSheet.constructor === goog.html.SafeStyleSheet && safeStyleSheet.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeStyleSheet, got '" + safeStyleSheet + "' of type " + goog.typeOf(safeStyleSheet));
    return "type_error:SafeStyleSheet";
  }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse = function(styleSheet) {
  return (new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(styleSheet);
};
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(styleSheet) {
  this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
  return this;
};
goog.html.SafeStyleSheet.EMPTY = goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.fs.url");
goog.fs.url.createObjectUrl = function(blob) {
  return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function(url) {
  goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function() {
  var urlObject = goog.fs.url.findUrlObject_();
  if (urlObject != null) {
    return urlObject;
  } else {
    throw Error("This browser doesn't seem to support blob URLs");
  }
};
goog.fs.url.findUrlObject_ = function() {
  if (goog.isDef(goog.global.URL) && goog.isDef(goog.global.URL.createObjectURL)) {
    return (goog.global.URL);
  } else {
    if (goog.isDef(goog.global.webkitURL) && goog.isDef(goog.global.webkitURL.createObjectURL)) {
      return (goog.global.webkitURL);
    } else {
      if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
      } else {
        return null;
      }
    }
  }
};
goog.fs.url.browserSupportsObjectUrls = function() {
  return goog.fs.url.findUrlObject_() != null;
};
goog.provide("goog.i18n.bidi");
goog.provide("goog.i18n.bidi.Dir");
goog.provide("goog.i18n.bidi.DirectionalString");
goog.provide("goog.i18n.bidi.Format");
goog.define("goog.i18n.bidi.FORCE_RTL", false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || (goog.LOCALE.substring(0, 2).toLowerCase() == "ar" || goog.LOCALE.substring(0, 2).toLowerCase() == "fa" || goog.LOCALE.substring(0, 2).toLowerCase() == "he" || goog.LOCALE.substring(0, 2).toLowerCase() == "iw" || goog.LOCALE.substring(0, 2).toLowerCase() == "ps" || goog.LOCALE.substring(0, 2).toLowerCase() == "sd" || goog.LOCALE.substring(0, 2).toLowerCase() == "ug" || goog.LOCALE.substring(0, 2).toLowerCase() == "ur" || goog.LOCALE.substring(0, 
2).toLowerCase() == "yi") && (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == "-" || goog.LOCALE.substring(2, 3) == "_") || goog.LOCALE.length >= 3 && goog.LOCALE.substring(0, 3).toLowerCase() == "ckb" && (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == "-" || goog.LOCALE.substring(3, 4) == "_");
goog.i18n.bidi.Format = {LRE:"‪", RLE:"‫", PDF:"‬", LRM:"‎", RLM:"‏"};
goog.i18n.bidi.Dir = {LTR:1, RTL:-1, NEUTRAL:0};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir, opt_noNeutral) {
  if (typeof givenDir == "number") {
    return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ? goog.i18n.bidi.Dir.RTL : opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
  } else {
    if (givenDir == null) {
      return null;
    } else {
      return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
  }
};
goog.i18n.bidi.ltrChars_ = "A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿" + "‎Ⰰ-﬜︀-﹯﻽-￿";
goog.i18n.bidi.rtlChars_ = "֑-ۯۺ-߿‏יִ-﷿ﹰ-ﻼ";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, "") : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = new RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp("^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|" + ".*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))" + "(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext;
  var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$\x26" + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3drtl");
  }
  return "\n\x3cspan dir\x3drtl\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  if (html.charAt(0) == "\x3c") {
    return html.replace(/<\w+/, "$\x26 dir\x3dltr");
  }
  return "\n\x3cspan dir\x3dltr\x3e" + html + "\x3c/span\x3e";
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1׳");
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = 0.40;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  var rtlCount = 0;
  var totalCount = 0;
  var hasWeaklyLtr = false;
  var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_);
  for (var i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    if (goog.i18n.bidi.startsWithRtl(token)) {
      rtlCount++;
      totalCount++;
    } else {
      if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
        hasWeaklyLtr = true;
      } else {
        if (goog.i18n.bidi.hasAnyLtr(token)) {
          totalCount++;
        } else {
          if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
          }
        }
      }
    }
  }
  return totalCount == 0 ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if (element) {
    dir = goog.i18n.bidi.toDir(dir);
    if (dir) {
      element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
      element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr";
    }
  }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function(element, text) {
  switch(goog.i18n.bidi.estimateDirection(text)) {
    case goog.i18n.bidi.Dir.LTR:
      element.dir = "ltr";
      break;
    case goog.i18n.bidi.Dir.RTL:
      element.dir = "rtl";
      break;
    default:
      element.removeAttribute("dir");
  }
};
goog.i18n.bidi.DirectionalString = function() {
};
goog.i18n.bidi.DirectionalString.prototype.implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide("goog.html.SafeUrl");
goog.require("goog.asserts");
goog.require("goog.fs.url");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeUrl = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = "about:invalid#zClosurez";
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.SafeUrl.prototype.toString = function() {
    return "SafeUrl{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeUrl.unwrap = function(safeUrl) {
  if (safeUrl instanceof goog.html.SafeUrl && safeUrl.constructor === goog.html.SafeUrl && safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeUrl, got '" + safeUrl + "' of type " + goog.typeOf(safeUrl));
    return "type_error:SafeUrl";
  }
};
goog.html.SafeUrl.fromConstant = function(url) {
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = /^(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm))$/i;
goog.html.SafeUrl.fromBlob = function(blob) {
  var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ? goog.fs.url.createObjectUrl(blob) : goog.html.SafeUrl.INNOCUOUS_STRING;
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function(dataUrl) {
  var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
  var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SafeUrl.fromTelUrl = function(telUrl) {
  if (!goog.string.caseInsensitiveStartsWith(telUrl, "tel:")) {
    telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(telUrl);
};
goog.html.SAFE_URL_PATTERN_ = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function(url) {
  if (url instanceof goog.html.SafeUrl) {
    return url;
  } else {
    if (url.implementsGoogStringTypedString) {
      url = url.getTypedStringValue();
    } else {
      url = String(url);
    }
  }
  if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
    url = goog.html.SafeUrl.INNOCUOUS_STRING;
  }
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var safeUrl = new goog.html.SafeUrl;
  safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
  return safeUrl;
};
goog.html.SafeUrl.ABOUT_BLANK = goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank");
goog.provide("goog.html.TrustedResourceUrl");
goog.require("goog.asserts");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.TrustedResourceUrl = function() {
  this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = "";
  this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.TrustedResourceUrl.prototype.getDirection = function() {
  return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
  goog.html.TrustedResourceUrl.prototype.toString = function() {
    return "TrustedResourceUrl{" + this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + "}";
  };
}
goog.html.TrustedResourceUrl.unwrap = function(trustedResourceUrl) {
  if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl && trustedResourceUrl.constructor === goog.html.TrustedResourceUrl && trustedResourceUrl.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type TrustedResourceUrl, got '" + trustedResourceUrl + "' of type " + goog.typeOf(trustedResourceUrl));
    return "type_error:TrustedResourceUrl";
  }
};
goog.html.TrustedResourceUrl.fromConstant = function(url) {
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.fromConstants = function(parts) {
  var unwrapped = "";
  for (var i = 0;i < parts.length;i++) {
    unwrapped += goog.string.Const.unwrap(parts[i]);
  }
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function(url) {
  var trustedResourceUrl = new goog.html.TrustedResourceUrl;
  trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = url;
  return trustedResourceUrl;
};
goog.provide("goog.html.SafeHtml");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.TagName");
goog.require("goog.dom.tags");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.i18n.bidi.Dir");
goog.require("goog.i18n.bidi.DirectionalString");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeHtml = function() {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = "";
  this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
  this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function() {
  return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeHtml.prototype.toString = function() {
    return "SafeHtml{" + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ + "}";
  };
}
goog.html.SafeHtml.unwrap = function(safeHtml) {
  if (safeHtml instanceof goog.html.SafeHtml && safeHtml.constructor === goog.html.SafeHtml && safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeHtml, got '" + safeHtml + "' of type " + goog.typeOf(safeHtml));
    return "type_error:SafeHtml";
  }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var dir = null;
  if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
    dir = textOrHtml.getDirection();
  }
  var textAsString;
  if (textOrHtml.implementsGoogStringTypedString) {
    textAsString = textOrHtml.getTypedStringValue();
  } else {
    textAsString = String(textOrHtml);
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function(textOrHtml) {
  if (textOrHtml instanceof goog.html.SafeHtml) {
    return textOrHtml;
  }
  var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet("action", "cite", "data", "formaction", "href", "manifest", "poster", "src");
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.APPLET, goog.dom.TagName.BASE, goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.MATH, goog.dom.TagName.META, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.SVG, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue;
goog.html.SafeHtml.create = function(tagName, opt_attributes, opt_content) {
  goog.html.SafeHtml.verifyTagName(tagName);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(tagName, opt_attributes, opt_content);
};
goog.html.SafeHtml.verifyTagName = function(tagName) {
  if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
    throw Error("Invalid tag name \x3c" + tagName + "\x3e.");
  }
  if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
    throw Error("Tag name \x3c" + tagName + "\x3e is not allowed for SafeHtml.");
  }
};
goog.html.SafeHtml.createIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  if (opt_src) {
    goog.html.TrustedResourceUrl.unwrap(opt_src);
  }
  var fixedAttributes = {};
  fixedAttributes["src"] = opt_src || null;
  fixedAttributes["srcdoc"] = opt_srcdoc && goog.html.SafeHtml.unwrap(opt_srcdoc);
  var defaultAttributes = {"sandbox":""};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.createSandboxIframe = function(opt_src, opt_srcdoc, opt_attributes, opt_content) {
  if (!goog.html.SafeHtml.canUseSandboxIframe()) {
    throw new Error("The browser does not support sandboxed iframes.");
  }
  var fixedAttributes = {};
  if (opt_src) {
    fixedAttributes["src"] = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(opt_src));
  } else {
    fixedAttributes["src"] = null;
  }
  fixedAttributes["srcdoc"] = opt_srcdoc || null;
  fixedAttributes["sandbox"] = "";
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, {}, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe", attributes, opt_content);
};
goog.html.SafeHtml.canUseSandboxIframe = function() {
  return goog.global["HTMLIFrameElement"] && "sandbox" in goog.global["HTMLIFrameElement"].prototype;
};
goog.html.SafeHtml.createScriptSrc = function(src, opt_attributes) {
  goog.html.TrustedResourceUrl.unwrap(src);
  var fixedAttributes = {"src":src};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script", attributes);
};
goog.html.SafeHtml.createStyle = function(styleSheet, opt_attributes) {
  var fixedAttributes = {"type":"text/css"};
  var defaultAttributes = {};
  var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
  var content = "";
  styleSheet = goog.array.concat(styleSheet);
  for (var i = 0;i < styleSheet.length;i++) {
    content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
  }
  var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style", attributes, htmlContent);
};
goog.html.SafeHtml.createMetaRefresh = function(url, opt_secs) {
  var unwrappedUrl = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(url));
  if (goog.labs.userAgent.browser.isIE() || goog.labs.userAgent.browser.isEdge()) {
    if (goog.string.contains(unwrappedUrl, ";")) {
      unwrappedUrl = "'" + unwrappedUrl.replace(/'/g, "%27") + "'";
    }
  }
  var attributes = {"http-equiv":"refresh", "content":(opt_secs || 0) + "; url\x3d" + unwrappedUrl};
  return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta", attributes);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function(tagName, name, value) {
  if (value instanceof goog.string.Const) {
    value = goog.string.Const.unwrap(value);
  } else {
    if (name.toLowerCase() == "style") {
      value = goog.html.SafeHtml.getStyleValue_(value);
    } else {
      if (/^on/i.test(name)) {
        throw Error('Attribute "' + name + '" requires goog.string.Const value, "' + value + '" given.');
      } else {
        if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
          if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
          } else {
            if (value instanceof goog.html.SafeUrl) {
              value = goog.html.SafeUrl.unwrap(value);
            } else {
              if (goog.isString(value)) {
                value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
              } else {
                throw Error('Attribute "' + name + '" on tag "' + tagName + '" requires goog.html.SafeUrl, goog.string.Const, or string,' + ' value "' + value + '" given.');
              }
            }
          }
        }
      }
    }
  }
  if (value.implementsGoogStringTypedString) {
    value = value.getTypedStringValue();
  }
  goog.asserts.assert(goog.isString(value) || goog.isNumber(value), "String or number value expected, got " + typeof value + " with value: " + value);
  return name + '\x3d"' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function(value) {
  if (!goog.isObject(value)) {
    throw Error('The "style" attribute requires goog.html.SafeStyle or map ' + "of style properties, " + typeof value + " given: " + value);
  }
  if (!(value instanceof goog.html.SafeStyle)) {
    value = goog.html.SafeStyle.create(value);
  }
  return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function(dir, tagName, opt_attributes, opt_content) {
  var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.concat = function(var_args) {
  var dir = goog.i18n.bidi.Dir.NEUTRAL;
  var content = "";
  var addArgument = function(argument) {
    if (goog.isArray(argument)) {
      goog.array.forEach(argument, addArgument);
    } else {
      var html = goog.html.SafeHtml.htmlEscape(argument);
      content += goog.html.SafeHtml.unwrap(html);
      var htmlDir = html.getDirection();
      if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
        dir = htmlDir;
      } else {
        if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
          dir = null;
        }
      }
    }
  };
  goog.array.forEach(arguments, addArgument);
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function(dir, var_args) {
  var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
  html.dir_ = dir;
  return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function(html, dir) {
  return (new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(html, dir) {
  this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
  this.dir_ = dir;
  return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function(tagName, opt_attributes, opt_content) {
  var dir = null;
  var result = "\x3c" + tagName;
  result += goog.html.SafeHtml.stringifyAttributes(tagName, opt_attributes);
  var content = opt_content;
  if (!goog.isDefAndNotNull(content)) {
    content = [];
  } else {
    if (!goog.isArray(content)) {
      content = [content];
    }
  }
  if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
    goog.asserts.assert(!content.length, "Void tag \x3c" + tagName + "\x3e does not allow content.");
    result += "\x3e";
  } else {
    var html = goog.html.SafeHtml.concat(content);
    result += "\x3e" + goog.html.SafeHtml.unwrap(html) + "\x3c/" + tagName + "\x3e";
    dir = html.getDirection();
  }
  var dirAttribute = opt_attributes && opt_attributes["dir"];
  if (dirAttribute) {
    if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
      dir = goog.i18n.bidi.Dir.NEUTRAL;
    } else {
      dir = null;
    }
  }
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.stringifyAttributes = function(tagName, opt_attributes) {
  var result = "";
  if (opt_attributes) {
    for (var name in opt_attributes) {
      if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
        throw Error('Invalid attribute name "' + name + '".');
      }
      var value = opt_attributes[name];
      if (!goog.isDefAndNotNull(value)) {
        continue;
      }
      result += " " + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
    }
  }
  return result;
};
goog.html.SafeHtml.combineAttributes = function(fixedAttributes, defaultAttributes, opt_attributes) {
  var combinedAttributes = {};
  var name;
  for (name in fixedAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = fixedAttributes[name];
  }
  for (name in defaultAttributes) {
    goog.asserts.assert(name.toLowerCase() == name, "Must be lower case");
    combinedAttributes[name] = defaultAttributes[name];
  }
  for (name in opt_attributes) {
    var nameLower = name.toLowerCase();
    if (nameLower in fixedAttributes) {
      throw Error('Cannot override "' + nameLower + '" attribute, got "' + name + '" with value "' + opt_attributes[name] + '"');
    }
    if (nameLower in defaultAttributes) {
      delete combinedAttributes[nameLower];
    }
    combinedAttributes[name] = opt_attributes[name];
  }
  return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3c!DOCTYPE html\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("", goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.BR = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("\x3cbr\x3e", goog.i18n.bidi.Dir.NEUTRAL);
goog.provide("goog.dom.safe");
goog.provide("goog.dom.safe.InsertAdjacentHtmlPosition");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.dom.safe.InsertAdjacentHtmlPosition = {AFTERBEGIN:"afterbegin", AFTEREND:"afterend", BEFOREBEGIN:"beforebegin", BEFOREEND:"beforeend"};
goog.dom.safe.insertAdjacentHtml = function(node, position, html) {
  node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setInnerHtml = function(elem, html) {
  elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function(elem, html) {
  elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.documentWrite = function(doc, html) {
  doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function(anchor, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setImageSrc = function(imageElement, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function(embed, url) {
  embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function(frame, url) {
  frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function(iframe, url) {
  iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLinkHrefAndRel = function(link, url, rel) {
  link.rel = rel;
  if (goog.string.caseInsensitiveContains(rel, "stylesheet")) {
    goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
    link.href = goog.html.TrustedResourceUrl.unwrap(url);
  } else {
    if (url instanceof goog.html.TrustedResourceUrl) {
      link.href = goog.html.TrustedResourceUrl.unwrap(url);
    } else {
      if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
      } else {
        link.href = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
      }
    }
  }
};
goog.dom.safe.setObjectData = function(object, url) {
  object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function(script, url) {
  script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setLocationHref = function(loc, url) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.openInWindow = function(url, opt_openerWin, opt_name, opt_specs, opt_replace) {
  var safeUrl;
  if (url instanceof goog.html.SafeUrl) {
    safeUrl = url;
  } else {
    safeUrl = goog.html.SafeUrl.sanitize(url);
  }
  var win = opt_openerWin || window;
  return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : "", opt_specs, opt_replace);
};
goog.provide("goog.html.SafeScript");
goog.require("goog.asserts");
goog.require("goog.string.Const");
goog.require("goog.string.TypedString");
goog.html.SafeScript = function() {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = "";
  this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function(script) {
  var scriptString = goog.string.Const.unwrap(script);
  if (scriptString.length === 0) {
    return goog.html.SafeScript.EMPTY;
  }
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.prototype.getTypedStringValue = function() {
  return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
  goog.html.SafeScript.prototype.toString = function() {
    return "SafeScript{" + this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + "}";
  };
}
goog.html.SafeScript.unwrap = function(safeScript) {
  if (safeScript instanceof goog.html.SafeScript && safeScript.constructor === goog.html.SafeScript && safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ === goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
    return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
  } else {
    goog.asserts.fail("expected object of type SafeScript, got '" + safeScript + "' of type " + goog.typeOf(safeScript));
    return "type_error:SafeScript";
  }
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse = function(script) {
  return (new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(script);
};
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function(script) {
  this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
  return this;
};
goog.html.SafeScript.EMPTY = goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("");
goog.provide("goog.html.uncheckedconversions");
goog.require("goog.asserts");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeScript");
goog.require("goog.html.SafeStyle");
goog.require("goog.html.SafeStyleSheet");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.TrustedResourceUrl");
goog.require("goog.string");
goog.require("goog.string.Const");
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract = function(justification, html, opt_dir) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
};
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract = function(justification, script) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmpty(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
};
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract = function(justification, style) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract = function(justification, styleSheet) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract = function(justification, url) {
  goog.asserts.assertString(goog.string.Const.unwrap(justification), "must provide justification");
  goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), "must provide non-empty justification");
  return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 0.000001);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = Math.sign || function(x) {
  if (x > 0) {
    return 1;
  }
  if (x < 0) {
    return -1;
  }
  return x;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return (goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.isNegativeZero = function(num) {
  return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num ? 1 : 0);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2e-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2e-15));
};
goog.provide("goog.math.Coordinate");
goog.require("goog.math");
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
  goog.math.Coordinate.prototype.toString = function() {
    return "(" + this.x + ", " + this.y + ")";
  };
}
goog.math.Coordinate.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x;
  var dy = a.y - b.y;
  return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function() {
  this.x = Math.ceil(this.x);
  this.y = Math.ceil(this.y);
  return this;
};
goog.math.Coordinate.prototype.floor = function() {
  this.x = Math.floor(this.x);
  this.y = Math.floor(this.y);
  return this;
};
goog.math.Coordinate.prototype.round = function() {
  this.x = Math.round(this.x);
  this.y = Math.round(this.y);
  return this;
};
goog.math.Coordinate.prototype.translate = function(tx, opt_ty) {
  if (tx instanceof goog.math.Coordinate) {
    this.x += tx.x;
    this.y += tx.y;
  } else {
    this.x += Number(tx);
    if (goog.isNumber(opt_ty)) {
      this.y += opt_ty;
    }
  }
  return this;
};
goog.math.Coordinate.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.x *= sx;
  this.y *= sy;
  return this;
};
goog.math.Coordinate.prototype.rotateRadians = function(radians, opt_center) {
  var center = opt_center || new goog.math.Coordinate(0, 0);
  var x = this.x;
  var y = this.y;
  var cos = Math.cos(radians);
  var sin = Math.sin(radians);
  this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
  this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function(degrees, opt_center) {
  this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide("goog.math.Size");
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height;
};
goog.math.Size.equals = function(a, b) {
  if (a == b) {
    return true;
  }
  if (!a || !b) {
    return false;
  }
  return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
  goog.math.Size.prototype.toString = function() {
    return "(" + this.width + " x " + this.height + ")";
  };
}
goog.math.Size.prototype.getLongest = function() {
  return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function() {
  return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function() {
  return !this.area();
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this;
};
goog.math.Size.prototype.fitsInside = function(target) {
  return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this;
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this;
};
goog.math.Size.prototype.scale = function(sx, opt_sy) {
  var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
  this.width *= sx;
  this.height *= sy;
  return this;
};
goog.math.Size.prototype.scaleToCover = function(target) {
  var s = this.aspectRatio() <= target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function(target) {
  var s = this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height;
  return this.scale(s);
};
goog.provide("goog.dom");
goog.provide("goog.dom.Appendable");
goog.provide("goog.dom.DomHelper");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.dom.BrowserFeature");
goog.require("goog.dom.NodeType");
goog.require("goog.dom.TagName");
goog.require("goog.dom.safe");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.math.Coordinate");
goog.require("goog.math.Size");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string.Unicode");
goog.require("goog.userAgent");
goog.define("goog.dom.ASSUME_QUIRKS_MODE", false);
goog.define("goog.dom.ASSUME_STANDARDS_MODE", false);
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper);
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function() {
  return document;
};
goog.dom.getElement = function(element) {
  return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function(doc, element) {
  return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function(doc, id) {
  goog.asserts.assertString(id);
  var element = goog.dom.getElementHelper_(doc, id);
  element = goog.asserts.assertElement(element, "No element found with id: " + id);
  return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  if (goog.dom.canUseQuerySelector_(parent)) {
    return parent.querySelectorAll("." + className);
  }
  return goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el);
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document;
  var retVal = null;
  if (parent.getElementsByClassName) {
    retVal = parent.getElementsByClassName(className)[0];
  } else {
    if (goog.dom.canUseQuerySelector_(parent)) {
      retVal = parent.querySelector("." + className);
    } else {
      retVal = goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)[0];
    }
  }
  return retVal || null;
};
goog.dom.getRequiredElementByClass = function(className, opt_root) {
  var retValue = goog.dom.getElementByClass(className, opt_root);
  return goog.asserts.assert(retValue, "No element found with className: " + className);
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc;
  var tagName = opt_tag && opt_tag != "*" ? opt_tag.toUpperCase() : "";
  if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    var query = tagName + (opt_class ? "." + opt_class : "");
    return parent.querySelectorAll(query);
  }
  if (opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if (tagName) {
      var arrayLike = {};
      var len = 0;
      for (var i = 0, el;el = els[i];i++) {
        if (tagName == el.nodeName) {
          arrayLike[len++] = el;
        }
      }
      arrayLike.length = len;
      return (arrayLike);
    } else {
      return els;
    }
  }
  var els = parent.getElementsByTagName(tagName || "*");
  if (opt_class) {
    var arrayLike = {};
    var len = 0;
    for (var i = 0, el;el = els[i];i++) {
      var className = el.className;
      if (typeof className.split == "function" && goog.array.contains(className.split(/\s+/), opt_class)) {
        arrayLike[len++] = el;
      }
    }
    arrayLike.length = len;
    return (arrayLike);
  } else {
    return els;
  }
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    if (key == "style") {
      element.style.cssText = val;
    } else {
      if (key == "class") {
        element.className = val;
      } else {
        if (key == "for") {
          element.htmlFor = val;
        } else {
          if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
          } else {
            if (goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-")) {
              element.setAttribute(key, val);
            } else {
              element[key] = val;
            }
          }
        }
      }
    }
  });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {"cellpadding":"cellPadding", "cellspacing":"cellSpacing", "colspan":"colSpan", "frameborder":"frameBorder", "height":"height", "maxlength":"maxLength", "nonce":"nonce", "role":"role", "rowspan":"rowSpan", "type":"type", "usemap":"useMap", "valign":"vAlign", "width":"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document;
  var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeightForWindow = function(win) {
  return goog.dom.getDocumentHeight_(win);
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document;
  var height = 0;
  if (doc) {
    var body = doc.body;
    var docEl = (doc.documentElement);
    if (!(docEl && body)) {
      return 0;
    }
    var vh = goog.dom.getViewportSize_(win).height;
    if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
    } else {
      var sh = docEl.scrollHeight;
      var oh = docEl.offsetHeight;
      if (docEl.clientHeight != oh) {
        sh = body.scrollHeight;
        oh = body.offsetHeight;
      }
      if (sh > vh) {
        height = sh > oh ? sh : oh;
      } else {
        height = sh < oh ? sh : oh;
      }
    }
  }
  return height;
};
goog.dom.getPageScroll = function(opt_window) {
  var win = opt_window || goog.global || window;
  return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc);
  var win = goog.dom.getWindow_(doc);
  if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher("10") && win.pageYOffset != el.scrollTop) {
    return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
  }
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  if (doc.scrollingElement) {
    return doc.scrollingElement;
  }
  if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
    return doc.documentElement;
  }
  return doc.body || doc.documentElement;
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView;
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0];
  var attributes = args[1];
  if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["\x3c", tagName];
    if (attributes.name) {
      tagNameArr.push(' name\x3d"', goog.string.htmlEscape(attributes.name), '"');
    }
    if (attributes.type) {
      tagNameArr.push(' type\x3d"', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone["type"];
      attributes = clone;
    }
    tagNameArr.push("\x3e");
    tagName = tagNameArr.join("");
  }
  var element = doc.createElement(tagName);
  if (attributes) {
    if (goog.isString(attributes)) {
      element.className = attributes;
    } else {
      if (goog.isArray(attributes)) {
        element.className = attributes.join(" ");
      } else {
        goog.dom.setProperties(element, attributes);
      }
    }
  }
  if (args.length > 2) {
    goog.dom.append_(doc, element, args, 2);
  }
  return element;
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    if (child) {
      parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
    }
  }
  for (var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
      goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
    } else {
      childHandler(arg);
    }
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name);
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(String(content));
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  var table = (doc.createElement(goog.dom.TagName.TABLE));
  var tbody = table.appendChild(doc.createElement(goog.dom.TagName.TBODY));
  for (var i = 0;i < rows;i++) {
    var tr = doc.createElement(goog.dom.TagName.TR);
    for (var j = 0;j < columns;j++) {
      var td = doc.createElement(goog.dom.TagName.TD);
      if (fillWithNbsp) {
        goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
      }
      tr.appendChild(td);
    }
    tbody.appendChild(tr);
  }
  return table;
};
goog.dom.constHtmlToNode = function(var_args) {
  var stringArray = goog.array.map(arguments, goog.string.Const.unwrap);
  var safeHtml = goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Constant HTML string, that gets turned into a " + "Node later, so it will be automatically balanced."), stringArray.join(""));
  return goog.dom.safeHtmlToNode(safeHtml);
};
goog.dom.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function(doc, html) {
  var tempDiv = doc.createElement(goog.dom.TagName.DIV);
  if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
    goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.BR, html));
    tempDiv.removeChild(tempDiv.firstChild);
  } else {
    goog.dom.safe.setInnerHtml(tempDiv, html);
  }
  return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function(doc, tempDiv) {
  if (tempDiv.childNodes.length == 1) {
    return tempDiv.removeChild(tempDiv.firstChild);
  } else {
    var fragment = doc.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function(doc) {
  if (goog.dom.COMPAT_MODE_KNOWN_) {
    return goog.dom.ASSUME_STANDARDS_MODE;
  }
  return doc.compatMode == "CSS1Compat";
};
goog.dom.canHaveChildren = function(node) {
  if (node.nodeType != goog.dom.NodeType.ELEMENT) {
    return false;
  }
  switch((node).tagName) {
    case goog.dom.TagName.APPLET:
    case goog.dom.TagName.AREA:
    case goog.dom.TagName.BASE:
    case goog.dom.TagName.BR:
    case goog.dom.TagName.COL:
    case goog.dom.TagName.COMMAND:
    case goog.dom.TagName.EMBED:
    case goog.dom.TagName.FRAME:
    case goog.dom.TagName.HR:
    case goog.dom.TagName.IMG:
    case goog.dom.TagName.INPUT:
    case goog.dom.TagName.IFRAME:
    case goog.dom.TagName.ISINDEX:
    case goog.dom.TagName.KEYGEN:
    case goog.dom.TagName.LINK:
    case goog.dom.TagName.NOFRAMES:
    case goog.dom.TagName.NOSCRIPT:
    case goog.dom.TagName.META:
    case goog.dom.TagName.OBJECT:
    case goog.dom.TagName.PARAM:
    case goog.dom.TagName.SCRIPT:
    case goog.dom.TagName.SOURCE:
    case goog.dom.TagName.STYLE:
    case goog.dom.TagName.TRACK:
    case goog.dom.TagName.WBR:
      return false;
  }
  return true;
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child);
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function(node) {
  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode);
  }
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  if (refNode.parentNode) {
    refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
  }
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  if (parent) {
    parent.replaceChild(newNode, oldNode);
  }
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if (element.removeNode) {
      return (element.removeNode(false));
    } else {
      while (child = element.firstChild) {
        parent.insertBefore(child, element);
      }
      return (goog.dom.removeNode(element));
    }
  }
};
goog.dom.getChildren = function(element) {
  if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && element.children != undefined) {
    return element.children;
  }
  return goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT;
  });
};
goog.dom.getFirstElementChild = function(node) {
  if (goog.isDef(node.firstElementChild)) {
    return (node).firstElementChild;
  }
  return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function(node) {
  if (goog.isDef(node.lastElementChild)) {
    return (node).lastElementChild;
  }
  return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function(node) {
  if (goog.isDef(node.nextElementSibling)) {
    return (node).nextElementSibling;
  }
  return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function(node) {
  if (goog.isDef(node.previousElementSibling)) {
    return (node).previousElementSibling;
  }
  return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function(node, forward) {
  while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
    node = forward ? node.nextSibling : node.previousSibling;
  }
  return (node);
};
goog.dom.getNextNode = function(node) {
  if (!node) {
    return null;
  }
  if (node.firstChild) {
    return node.firstChild;
  }
  while (node && !node.nextSibling) {
    node = node.parentNode;
  }
  return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function(node) {
  if (!node) {
    return null;
  }
  if (!node.previousSibling) {
    return node.parentNode;
  }
  node = node.previousSibling;
  while (node && node.lastChild) {
    node = node.lastChild;
  }
  return node;
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj["window"] == obj;
};
goog.dom.getParentElement = function(element) {
  var parent;
  if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher("9") && !goog.userAgent.isVersionOrHigher("10");
    if (!(isIe9 && goog.global["SVGElement"] && element instanceof goog.global["SVGElement"])) {
      parent = element.parentElement;
      if (parent) {
        return parent;
      }
    }
  }
  parent = element.parentNode;
  return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function(parent, descendant) {
  if (!parent || !descendant) {
    return false;
  }
  if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant);
  }
  if (typeof parent.compareDocumentPosition != "undefined") {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16);
  }
  while (descendant && parent != descendant) {
    descendant = descendant.parentNode;
  }
  return descendant == parent;
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if (node1 == node2) {
    return 0;
  }
  if (node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
  }
  if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
    if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return -1;
    }
    if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1;
    }
  }
  if ("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
    var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if (isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex;
    } else {
      var parent1 = node1.parentNode;
      var parent2 = node2.parentNode;
      if (parent1 == parent2) {
        return goog.dom.compareSiblingOrder_(node1, node2);
      }
      if (!isElement1 && goog.dom.contains(parent1, node2)) {
        return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
      }
      if (!isElement2 && goog.dom.contains(parent2, node1)) {
        return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
      }
      return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
    }
  }
  var doc = goog.dom.getOwnerDocument(node1);
  var range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(true);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(true);
  return range1.compareBoundaryPoints(goog.global["Range"].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if (parent == node) {
    return -1;
  }
  var sibling = node;
  while (sibling.parentNode != parent) {
    sibling = sibling.parentNode;
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  var s = node2;
  while (s = s.previousSibling) {
    if (s == node1) {
      return -1;
    }
  }
  return 1;
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if (!count) {
    return null;
  } else {
    if (count == 1) {
      return arguments[0];
    }
  }
  var paths = [];
  var minLength = Infinity;
  for (i = 0;i < count;i++) {
    var ancestors = [];
    var node = arguments[i];
    while (node) {
      ancestors.unshift(node);
      node = node.parentNode;
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length);
  }
  var output = null;
  for (i = 0;i < minLength;i++) {
    var first = paths[0][i];
    for (var j = 1;j < count;j++) {
      if (first != paths[j][i]) {
        return output;
      }
    }
    output = first;
  }
  return output;
};
goog.dom.getOwnerDocument = function(node) {
  goog.asserts.assert(node, "Node cannot be null or undefined.");
  return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document);
};
goog.dom.getFrameContentDocument = function(frame) {
  return frame.contentDocument || (frame).contentWindow.document;
};
goog.dom.getFrameContentWindow = function(frame) {
  try {
    return frame.contentWindow || (frame.contentDocument ? goog.dom.getWindow(frame.contentDocument) : null);
  } catch (e) {
  }
  return null;
};
goog.dom.setTextContent = function(node, text) {
  goog.asserts.assert(node != null, "goog.dom.setTextContent expects a non-null value for node");
  if ("textContent" in node) {
    node.textContent = text;
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      node.data = text;
    } else {
      if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
          node.removeChild(node.lastChild);
        }
        node.firstChild.data = text;
      } else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
      }
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  goog.asserts.assert(element !== null, "goog.dom.getOuterHtml expects a non-null value for element");
  if ("outerHTML" in element) {
    return element.outerHTML;
  } else {
    var doc = goog.dom.getOwnerDocument(element);
    var div = doc.createElement(goog.dom.TagName.DIV);
    div.appendChild(element.cloneNode(true));
    return div.innerHTML;
  }
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  var found = goog.dom.findNodes_(root, p, rv, true);
  return found ? rv[0] : undefined;
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, false);
  return rv;
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if (root != null) {
    var child = root.firstChild;
    while (child) {
      if (p(child)) {
        rv.push(child);
        if (findOne) {
          return true;
        }
      }
      if (goog.dom.findNodes_(child, p, rv, findOne)) {
        return true;
      }
      child = child.nextSibling;
    }
  }
  return false;
};
goog.dom.TAGS_TO_IGNORE_ = {"SCRIPT":1, "STYLE":1, "HEAD":1, "IFRAME":1, "OBJECT":1};
goog.dom.PREDEFINED_TAG_VALUES_ = {"IMG":" ", "BR":"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  return goog.dom.hasSpecifiedTabIndex_(element) && goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  if (enable) {
    element.tabIndex = 0;
  } else {
    element.tabIndex = -1;
    element.removeAttribute("tabIndex");
  }
};
goog.dom.isFocusable = function(element) {
  var focusable;
  if (goog.dom.nativelySupportsFocus_(element)) {
    focusable = !element.disabled && (!goog.dom.hasSpecifiedTabIndex_(element) || goog.dom.isTabIndexFocusable_(element));
  } else {
    focusable = goog.dom.isFocusableTabIndex(element);
  }
  return focusable && goog.userAgent.IE ? goog.dom.hasNonZeroBoundingRect_((element)) : focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  return goog.isDefAndNotNull(attrNode) && attrNode.specified;
};
goog.dom.isTabIndexFocusable_ = function(element) {
  var index = (element).tabIndex;
  return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function(element) {
  return element.tagName == goog.dom.TagName.A || element.tagName == goog.dom.TagName.INPUT || element.tagName == goog.dom.TagName.TEXTAREA || element.tagName == goog.dom.TagName.SELECT || element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function(element) {
  var rect;
  if (!goog.isFunction(element["getBoundingClientRect"]) || goog.userAgent.IE && element.parentElement == null) {
    rect = {"height":element.offsetHeight, "width":element.offsetWidth};
  } else {
    rect = element.getBoundingClientRect();
  }
  return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && node !== null && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText);
  } else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, true);
    textContent = buf.join("");
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
    textContent = textContent.replace(/ +/g, " ");
  }
  if (textContent != " ") {
    textContent = textContent.replace(/^\s*/, "");
  }
  return textContent;
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, false);
  return buf.join("");
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
  } else {
    if (node.nodeType == goog.dom.NodeType.TEXT) {
      if (normalizeWhitespace) {
        buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ""));
      } else {
        buf.push(node.nodeValue);
      }
    } else {
      if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
      } else {
        var child = node.firstChild;
        while (child) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace);
          child = child.nextSibling;
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
  var buf = [];
  while (node && node != root) {
    var cur = node;
    while (cur = cur.previousSibling) {
      buf.unshift(goog.dom.getTextContent(cur));
    }
    node = node.parentNode;
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length;
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  var stack = [parent], pos = 0, cur = null;
  while (stack.length > 0 && pos < offset) {
    cur = stack.pop();
    if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    } else {
      if (cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " ");
        pos += text.length;
      } else {
        if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        } else {
          for (var i = cur.childNodes.length - 1;i >= 0;i--) {
            stack.push(cur.childNodes[i]);
          }
        }
      }
    }
  }
  if (goog.isObject(opt_result)) {
    opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
    opt_result.node = cur;
  }
  return cur;
};
goog.dom.isNodeList = function(val) {
  if (val && typeof val.length == "number") {
    if (goog.isObject(val)) {
      return typeof val.item == "function" || typeof val.item == "string";
    } else {
      if (goog.isFunction(val)) {
        return typeof val.item == "function";
      }
    }
  }
  return false;
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class, opt_maxSearchSteps) {
  if (!opt_tag && !opt_class) {
    return null;
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return (goog.dom.getAncestor(element, function(node) {
    return (!tagName || node.nodeName == tagName) && (!opt_class || goog.isString(node.className) && goog.array.contains(node.className.split(/\s+/), opt_class));
  }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function(element, className, opt_maxSearchSteps) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  if (!opt_includeNode) {
    element = element.parentNode;
  }
  var steps = 0;
  while (element && (opt_maxSearchSteps == null || steps <= opt_maxSearchSteps)) {
    goog.asserts.assert(element.name != "parentNode");
    if (matcher(element)) {
      return element;
    }
    element = element.parentNode;
    steps++;
  }
  return null;
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement;
  } catch (e) {
  }
  return null;
};
goog.dom.getPixelRatio = function() {
  var win = goog.dom.getWindow();
  if (goog.isDef(win.devicePixelRatio)) {
    return win.devicePixelRatio;
  } else {
    if (win.matchMedia) {
      return goog.dom.matchesPixelRatio_(.75) || goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(2) || goog.dom.matchesPixelRatio_(3) || 1;
    }
  }
  return 1;
};
goog.dom.matchesPixelRatio_ = function(pixelRatio) {
  var win = goog.dom.getWindow();
  var query = "(-webkit-min-device-pixel-ratio: " + pixelRatio + ")," + "(min--moz-device-pixel-ratio: " + pixelRatio + ")," + "(min-resolution: " + pixelRatio + "dppx)";
  return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function(document) {
  this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function(id) {
  return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  var doc = opt_el || this.document_;
  return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function(className, opt_root) {
  var root = opt_root || this.document_;
  return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name);
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function(html) {
  return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.provide("goog.math.Integer");
goog.math.Integer = function(bits, sign) {
  this.bits_ = [];
  this.sign_ = sign;
  var top = true;
  for (var i = bits.length - 1;i >= 0;i--) {
    var val = bits[i] | 0;
    if (!top || val != sign) {
      this.bits_[i] = val;
      top = false;
    }
  }
};
goog.math.Integer.IntCache_ = {};
goog.math.Integer.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Integer.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Integer([value | 0], value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Integer.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Integer.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Integer.ZERO;
  } else {
    if (value < 0) {
      return goog.math.Integer.fromNumber(-value).negate();
    } else {
      var bits = [];
      var pow = 1;
      for (var i = 0;value >= pow;i++) {
        bits[i] = value / pow | 0;
        pow *= goog.math.Integer.TWO_PWR_32_DBL_;
      }
      return new goog.math.Integer(bits, 0);
    }
  }
};
goog.math.Integer.fromBits = function(bits) {
  var high = bits[bits.length - 1];
  return new goog.math.Integer(bits, high & 1 << 31 ? -1 : 0);
};
goog.math.Integer.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Integer.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character');
    }
  }
  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Integer.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Integer.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Integer.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Integer.fromNumber(value));
    }
  }
  return result;
};
goog.math.Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);
goog.math.Integer.ZERO = goog.math.Integer.fromInt(0);
goog.math.Integer.ONE = goog.math.Integer.fromInt(1);
goog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(1 << 24);
goog.math.Integer.prototype.toInt = function() {
  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;
};
goog.math.Integer.prototype.toNumber = function() {
  if (this.isNegative()) {
    return -this.negate().toNumber();
  } else {
    var val = 0;
    var pow = 1;
    for (var i = 0;i < this.bits_.length;i++) {
      val += this.getBitsUnsigned(i) * pow;
      pow *= goog.math.Integer.TWO_PWR_32_DBL_;
    }
    return val;
  }
};
goog.math.Integer.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  } else {
    if (this.isNegative()) {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.divide(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Integer.prototype.getBits = function(index) {
  if (index < 0) {
    return 0;
  } else {
    if (index < this.bits_.length) {
      return this.bits_[index];
    } else {
      return this.sign_;
    }
  }
};
goog.math.Integer.prototype.getBitsUnsigned = function(index) {
  var val = this.getBits(index);
  return val >= 0 ? val : goog.math.Integer.TWO_PWR_32_DBL_ + val;
};
goog.math.Integer.prototype.getSign = function() {
  return this.sign_;
};
goog.math.Integer.prototype.isZero = function() {
  if (this.sign_ != 0) {
    return false;
  }
  for (var i = 0;i < this.bits_.length;i++) {
    if (this.bits_[i] != 0) {
      return false;
    }
  }
  return true;
};
goog.math.Integer.prototype.isNegative = function() {
  return this.sign_ == -1;
};
goog.math.Integer.prototype.isOdd = function() {
  return this.bits_.length == 0 && this.sign_ == -1 || this.bits_.length > 0 && (this.bits_[0] & 1) != 0;
};
goog.math.Integer.prototype.equals = function(other) {
  if (this.sign_ != other.sign_) {
    return false;
  }
  var len = Math.max(this.bits_.length, other.bits_.length);
  for (var i = 0;i < len;i++) {
    if (this.getBits(i) != other.getBits(i)) {
      return false;
    }
  }
  return true;
};
goog.math.Integer.prototype.notEquals = function(other) {
  return !this.equals(other);
};
goog.math.Integer.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Integer.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Integer.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Integer.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Integer.prototype.compare = function(other) {
  var diff = this.subtract(other);
  if (diff.isNegative()) {
    return -1;
  } else {
    if (diff.isZero()) {
      return 0;
    } else {
      return +1;
    }
  }
};
goog.math.Integer.prototype.shorten = function(numBits) {
  var arr_index = numBits - 1 >> 5;
  var bit_index = (numBits - 1) % 32;
  var bits = [];
  for (var i = 0;i < arr_index;i++) {
    bits[i] = this.getBits(i);
  }
  var sigBits = bit_index == 31 ? 4294967295 : (1 << bit_index + 1) - 1;
  var val = this.getBits(arr_index) & sigBits;
  if (val & 1 << bit_index) {
    val |= 4294967295 - sigBits;
    bits[arr_index] = val;
    return new goog.math.Integer(bits, -1);
  } else {
    bits[arr_index] = val;
    return new goog.math.Integer(bits, 0);
  }
};
goog.math.Integer.prototype.negate = function() {
  return this.not().add(goog.math.Integer.ONE);
};
goog.math.Integer.prototype.add = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  var carry = 0;
  for (var i = 0;i <= len;i++) {
    var a1 = this.getBits(i) >>> 16;
    var a0 = this.getBits(i) & 65535;
    var b1 = other.getBits(i) >>> 16;
    var b0 = other.getBits(i) & 65535;
    var c0 = carry + a0 + b0;
    var c1 = (c0 >>> 16) + a1 + b1;
    carry = c1 >>> 16;
    c0 &= 65535;
    c1 &= 65535;
    arr[i] = c1 << 16 | c0;
  }
  return goog.math.Integer.fromBits(arr);
};
goog.math.Integer.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Integer.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Integer.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Integer.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Integer.TWO_PWR_24_) && other.lessThan(goog.math.Integer.TWO_PWR_24_)) {
    return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());
  }
  var len = this.bits_.length + other.bits_.length;
  var arr = [];
  for (var i = 0;i < 2 * len;i++) {
    arr[i] = 0;
  }
  for (var i = 0;i < this.bits_.length;i++) {
    for (var j = 0;j < other.bits_.length;j++) {
      var a1 = this.getBits(i) >>> 16;
      var a0 = this.getBits(i) & 65535;
      var b1 = other.getBits(j) >>> 16;
      var b0 = other.getBits(j) & 65535;
      arr[2 * i + 2 * j] += a0 * b0;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j);
      arr[2 * i + 2 * j + 1] += a1 * b0;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
      arr[2 * i + 2 * j + 1] += a0 * b1;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
      arr[2 * i + 2 * j + 2] += a1 * b1;
      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);
    }
  }
  for (var i = 0;i < len;i++) {
    arr[i] = arr[2 * i + 1] << 16 | arr[2 * i];
  }
  for (var i = len;i < 2 * len;i++) {
    arr[i] = 0;
  }
  return new goog.math.Integer(arr, 0);
};
goog.math.Integer.carry16_ = function(bits, index) {
  while ((bits[index] & 65535) != bits[index]) {
    bits[index + 1] += bits[index] >>> 16;
    bits[index] &= 65535;
  }
};
goog.math.Integer.prototype.slowDivide_ = function(other) {
  if (this.isNegative() || other.isNegative()) {
    throw Error("slowDivide_ only works with positive integers.");
  }
  var twoPower = goog.math.Integer.ONE;
  var multiple = other;
  while (multiple.lessThanOrEqual(this)) {
    twoPower = twoPower.shiftLeft(1);
    multiple = multiple.shiftLeft(1);
  }
  var res = twoPower.shiftRight(1);
  var total = multiple.shiftRight(1);
  var total2;
  multiple = multiple.shiftRight(2);
  twoPower = twoPower.shiftRight(2);
  while (!multiple.isZero()) {
    total2 = total.add(multiple);
    if (total2.lessThanOrEqual(this)) {
      res = res.add(twoPower);
      total = total2;
    }
    multiple = multiple.shiftRight(1);
    twoPower = twoPower.shiftRight(1);
  }
  return res;
};
goog.math.Integer.prototype.divide = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Integer.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().divide(other.negate());
    } else {
      return this.negate().divide(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.divide(other.negate()).negate();
    }
  }
  if (this.bits_.length > 30) {
    return this.slowDivide_(other);
  }
  var res = goog.math.Integer.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Integer.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Integer.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Integer.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Integer.prototype.modulo = function(other) {
  return this.subtract(this.divide(other).multiply(other));
};
goog.math.Integer.prototype.not = function() {
  var len = this.bits_.length;
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = ~this.bits_[i];
  }
  return new goog.math.Integer(arr, ~this.sign_);
};
goog.math.Integer.prototype.and = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = this.getBits(i) & other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ & other.sign_);
};
goog.math.Integer.prototype.or = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = this.getBits(i) | other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ | other.sign_);
};
goog.math.Integer.prototype.xor = function(other) {
  var len = Math.max(this.bits_.length, other.bits_.length);
  var arr = [];
  for (var i = 0;i < len;i++) {
    arr[i] = this.getBits(i) ^ other.getBits(i);
  }
  return new goog.math.Integer(arr, this.sign_ ^ other.sign_);
};
goog.math.Integer.prototype.shiftLeft = function(numBits) {
  var arr_delta = numBits >> 5;
  var bit_delta = numBits % 32;
  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);
  var arr = [];
  for (var i = 0;i < len;i++) {
    if (bit_delta > 0) {
      arr[i] = this.getBits(i - arr_delta) << bit_delta | this.getBits(i - arr_delta - 1) >>> 32 - bit_delta;
    } else {
      arr[i] = this.getBits(i - arr_delta);
    }
  }
  return new goog.math.Integer(arr, this.sign_);
};
goog.math.Integer.prototype.shiftRight = function(numBits) {
  var arr_delta = numBits >> 5;
  var bit_delta = numBits % 32;
  var len = this.bits_.length - arr_delta;
  var arr = [];
  for (var i = 0;i < len;i++) {
    if (bit_delta > 0) {
      arr[i] = this.getBits(i + arr_delta) >>> bit_delta | this.getBits(i + arr_delta + 1) << 32 - bit_delta;
    } else {
      arr[i] = this.getBits(i + arr_delta);
    }
  }
  return new goog.math.Integer(arr, this.sign_);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += String(a1);
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.objectProperty = function(prop, object) {
  return prop;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.reflect.cache = function(cacheObj, key, valueFn, opt_keyFn) {
  var storedKey = opt_keyFn ? opt_keyFn(key) : key;
  if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey)) {
    return cacheObj[storedKey];
  }
  return cacheObj[storedKey] = valueFn(key);
};
goog.provide("goog.math.Long");
goog.require("goog.reflect");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.valueCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {
      return new goog.math.Long(val | 0, val < 0 ? -1 : 0);
    });
  } else {
    return new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  }
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value)) {
    return goog.math.Long.getZero();
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.getMinValue();
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.getMaxValue();
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.getZero();
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.getZero = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.ZERO, function() {
    return goog.math.Long.fromInt(0);
  });
};
goog.math.Long.getOne = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.ONE, function() {
    return goog.math.Long.fromInt(1);
  });
};
goog.math.Long.getNegOne = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.NEG_ONE, function() {
    return goog.math.Long.fromInt(-1);
  });
};
goog.math.Long.getMaxValue = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE, function() {
    return goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
  });
};
goog.math.Long.getMinValue = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE, function() {
    return goog.math.Long.fromBits(0, 2147483648 | 0);
  });
};
goog.math.Long.getTwoPwr24 = function() {
  return goog.reflect.cache(goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24, function() {
    return goog.math.Long.fromInt(1 << 24);
  });
};
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.getMinValue())) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return (this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return -1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return -1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.getMinValue())) {
    return goog.math.Long.getMinValue();
  } else {
    return this.not().add(goog.math.Long.getOne());
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.getZero();
  } else {
    if (other.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    return other.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return this.isOdd() ? goog.math.Long.getMinValue() : goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.getTwoPwr24()) && other.lessThan(goog.math.Long.getTwoPwr24())) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.getZero();
    }
  }
  if (this.equals(goog.math.Long.getMinValue())) {
    if (other.equals(goog.math.Long.getOne()) || other.equals(goog.math.Long.getNegOne())) {
      return goog.math.Long.getMinValue();
    } else {
      if (other.equals(goog.math.Long.getMinValue())) {
        return goog.math.Long.getOne();
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.getZero())) {
          return other.isNegative() ? goog.math.Long.getOne() : goog.math.Long.getNegOne();
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.getMinValue())) {
      return goog.math.Long.getZero();
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.getZero();
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.getOne();
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.math.Long.ValueCacheId_ = {MAX_VALUE:1, MIN_VALUE:2, ZERO:3, ONE:4, NEG_ONE:5, TWO_PWR_24:6};
goog.provide("cljs.core");
goog.require("goog.math.Long");
goog.require("goog.math.Integer");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.9.521";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_warn_on_infer_STAR_ = false;
if (typeof cljs.core.PROTOCOL_SENTINEL !== "undefined") {
} else {
  cljs.core.PROTOCOL_SENTINEL = {};
}
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_namespace_maps_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__9721__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__9721 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9722__i = 0, G__9722__a = new Array(arguments.length - 0);
        while (G__9722__i < G__9722__a.length) {
          G__9722__a[G__9722__i] = arguments[G__9722__i + 0];
          ++G__9722__i;
        }
        args = new cljs.core.IndexedSeq(G__9722__a, 0);
      }
      return G__9721__delegate.call(this, args);
    };
    G__9721.cljs$lang$maxFixedArity = 0;
    G__9721.cljs$lang$applyTo = function(arglist__9723) {
      var args = cljs.core.seq(arglist__9723);
      return G__9721__delegate(args);
    };
    G__9721.cljs$core$IFn$_invoke$arity$variadic = G__9721__delegate;
    return G__9721;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__9724__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__9724 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9725__i = 0, G__9725__a = new Array(arguments.length - 0);
        while (G__9725__i < G__9725__a.length) {
          G__9725__a[G__9725__i] = arguments[G__9725__i + 0];
          ++G__9725__i;
        }
        args = new cljs.core.IndexedSeq(G__9725__a, 0);
      }
      return G__9724__delegate.call(this, args);
    };
    G__9724.cljs$lang$maxFixedArity = 0;
    G__9724.cljs$lang$applyTo = function(arglist__9726) {
      var args = cljs.core.seq(arglist__9726);
      return G__9724__delegate(args);
    };
    G__9724.cljs$core$IFn$_invoke$arity$variadic = G__9724__delegate;
    return G__9724;
  }();
  return null;
};
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return typeof x === "string" && 1 === x.length;
};
cljs.core.any_QMARK_ = function cljs$core$any_QMARK_(x) {
  return true;
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__7398__auto__ = ty;
    if (cljs.core.truth_(and__7398__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__7398__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4655__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4655__auto__)) {
    var s = temp__4655__auto__;
    return s;
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined" && !(performance.now == null)) {
    return performance.now();
  } else {
    if (typeof process !== "undefined" && !(process.hrtime == null)) {
      var t = process.hrtime();
      return (t[0] * 1.0E9 + t[1]) / 1000000.0;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args9727 = [];
  var len__8523__auto___9733 = arguments.length;
  var i__8524__auto___9734 = 0;
  while (true) {
    if (i__8524__auto___9734 < len__8523__auto___9733) {
      args9727.push(arguments[i__8524__auto___9734]);
      var G__9735 = i__8524__auto___9734 + 1;
      i__8524__auto___9734 = G__9735;
      continue;
    } else {
    }
    break;
  }
  var G__9732 = args9727.length;
  switch(G__9732) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args9727.slice(2), 0, null);
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = function(type, size, more_sizes) {
  var dims = more_sizes;
  var dimarray = new Array(size);
  var n__8333__auto___9737 = dimarray.length;
  var i_9738 = 0;
  while (true) {
    if (i_9738 < n__8333__auto___9737) {
      dimarray[i_9738] = cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array, null, dims) : cljs.core.apply.call(null, cljs.core.make_array, null, dims);
      var G__9739 = i_9738 + 1;
      i_9738 = G__9739;
      continue;
    } else {
    }
    break;
  }
  return dimarray;
};
cljs.core.make_array.cljs$lang$applyTo = function(seq9728) {
  var G__9729 = cljs.core.first(seq9728);
  var seq9728__$1 = cljs.core.next(seq9728);
  var G__9730 = cljs.core.first(seq9728__$1);
  var seq9728__$2 = cljs.core.next(seq9728__$1);
  return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(G__9729, G__9730, seq9728__$2);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__8333__auto___9740 = len;
  var i_9741 = 0;
  while (true) {
    if (i_9741 < n__8333__auto___9740) {
      new_arr[i_9741] = arr[i_9741];
      var G__9742 = i_9741 + 1;
      i_9741 = G__9742;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__9743 = i + 1;
      i = G__9743;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.aget = function cljs$core$aget(var_args) {
  var args9744 = [];
  var len__8523__auto___9753 = arguments.length;
  var i__8524__auto___9754 = 0;
  while (true) {
    if (i__8524__auto___9754 < len__8523__auto___9753) {
      args9744.push(arguments[i__8524__auto___9754]);
      var G__9755 = i__8524__auto___9754 + 1;
      i__8524__auto___9754 = G__9755;
      continue;
    } else {
    }
    break;
  }
  var G__9749 = args9744.length;
  switch(G__9749) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args9744.slice(2), 0, null);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__9750 = cljs.core.aget;
  var G__9751 = array[i];
  var G__9752 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__9750, G__9751, G__9752) : cljs.core.apply.call(null, G__9750, G__9751, G__9752);
};
cljs.core.aget.cljs$lang$applyTo = function(seq9745) {
  var G__9746 = cljs.core.first(seq9745);
  var seq9745__$1 = cljs.core.next(seq9745);
  var G__9747 = cljs.core.first(seq9745__$1);
  var seq9745__$2 = cljs.core.next(seq9745__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__9746, G__9747, seq9745__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args9757 = [];
  var len__8523__auto___9768 = arguments.length;
  var i__8524__auto___9769 = 0;
  while (true) {
    if (i__8524__auto___9769 < len__8523__auto___9768) {
      args9757.push(arguments[i__8524__auto___9769]);
      var G__9770 = i__8524__auto___9769 + 1;
      i__8524__auto___9769 = G__9770;
      continue;
    } else {
    }
    break;
  }
  var G__9763 = args9757.length;
  switch(G__9763) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args9757.slice(3), 0, null);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__9764 = cljs.core.aset;
  var G__9765 = array[idx];
  var G__9766 = idx2;
  var G__9767 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__9764, G__9765, G__9766, G__9767) : cljs.core.apply.call(null, G__9764, G__9765, G__9766, G__9767);
};
cljs.core.aset.cljs$lang$applyTo = function(seq9758) {
  var G__9759 = cljs.core.first(seq9758);
  var seq9758__$1 = cljs.core.next(seq9758);
  var G__9760 = cljs.core.first(seq9758__$1);
  var seq9758__$2 = cljs.core.next(seq9758__$1);
  var G__9761 = cljs.core.first(seq9758__$2);
  var seq9758__$3 = cljs.core.next(seq9758__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__9759, G__9760, G__9761, seq9758__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args9772 = [];
  var len__8523__auto___9778 = arguments.length;
  var i__8524__auto___9779 = 0;
  while (true) {
    if (i__8524__auto___9779 < len__8523__auto___9778) {
      args9772.push(arguments[i__8524__auto___9779]);
      var G__9780 = i__8524__auto___9779 + 1;
      i__8524__auto___9779 = G__9780;
      continue;
    } else {
    }
    break;
  }
  var G__9774 = args9772.length;
  switch(G__9774) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9772.length)].join(""));
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__9775 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__9776 = [];
  var G__9777 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__9775, G__9776, G__9777) : cljs.core.reduce.call(null, G__9775, G__9776, G__9777);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___9785 = arguments.length;
  var i__8524__auto___9786 = 0;
  while (true) {
    if (i__8524__auto___9786 < len__8523__auto___9785) {
      args__8530__auto__.push(arguments[i__8524__auto___9786]);
      var G__9787 = i__8524__auto___9786 + 1;
      i__8524__auto___9786 = G__9787;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 2 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(2), 0, null) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8531__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq9782) {
  var G__9783 = cljs.core.first(seq9782);
  var seq9782__$1 = cljs.core.next(seq9782);
  var G__9784 = cljs.core.first(seq9782__$1);
  var seq9782__$2 = cljs.core.next(seq9782__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__9783, G__9784, seq9782__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args9788 = [];
  var len__8523__auto___9791 = arguments.length;
  var i__8524__auto___9792 = 0;
  while (true) {
    if (i__8524__auto___9792 < len__8523__auto___9791) {
      args9788.push(arguments[i__8524__auto___9792]);
      var G__9793 = i__8524__auto___9792 + 1;
      i__8524__auto___9792 = G__9793;
      continue;
    } else {
    }
    break;
  }
  var G__9790 = args9788.length;
  switch(G__9790) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9788.length)].join(""));
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__8079__auto__.call(null, this$, a);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__8079__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__8079__auto__.call(null, this$, a, b);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__8079__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$4 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__8079__auto__.call(null, this$, a, b, c);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__8079__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$5 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__8079__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__8079__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$6 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__8079__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__8079__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$7 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__8079__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$8 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$9 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$10 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$11 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$12 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$13 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$14 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$15 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$16 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$17 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$18 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$19 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$20 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$21 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._invoke[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$22 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__8079__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__8079__auto____$1 = cljs.core._invoke["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__8079__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__8078__auto__ = value == null ? null : value;
    var m__8079__auto__ = cljs.core._clone[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__8079__auto__.call(null, value);
    } else {
      var m__8079__auto____$1 = cljs.core._clone["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__8079__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._count[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._count["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._empty[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._empty["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._conj[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__8079__auto__.call(null, coll, o);
    } else {
      var m__8079__auto____$1 = cljs.core._conj["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__8079__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args9795 = [];
  var len__8523__auto___9798 = arguments.length;
  var i__8524__auto___9799 = 0;
  while (true) {
    if (i__8524__auto___9799 < len__8523__auto___9798) {
      args9795.push(arguments[i__8524__auto___9799]);
      var G__9800 = i__8524__auto___9799 + 1;
      i__8524__auto___9799 = G__9800;
      continue;
    } else {
    }
    break;
  }
  var G__9797 = args9795.length;
  switch(G__9797) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9795.length)].join(""));
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._nth[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__8079__auto__.call(null, coll, n);
    } else {
      var m__8079__auto____$1 = cljs.core._nth["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__8079__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._nth[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__8079__auto__.call(null, coll, n, not_found);
    } else {
      var m__8079__auto____$1 = cljs.core._nth["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__8079__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._first[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._first["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._rest[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._rest["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._next[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._next["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args9802 = [];
  var len__8523__auto___9805 = arguments.length;
  var i__8524__auto___9806 = 0;
  while (true) {
    if (i__8524__auto___9806 < len__8523__auto___9805) {
      args9802.push(arguments[i__8524__auto___9806]);
      var G__9807 = i__8524__auto___9806 + 1;
      i__8524__auto___9806 = G__9807;
      continue;
    } else {
    }
    break;
  }
  var G__9804 = args9802.length;
  switch(G__9804) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9802.length)].join(""));
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._lookup[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__8079__auto__.call(null, o, k);
    } else {
      var m__8079__auto____$1 = cljs.core._lookup["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__8079__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._lookup[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__8079__auto__.call(null, o, k, not_found);
    } else {
      var m__8079__auto____$1 = cljs.core._lookup["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__8079__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__8079__auto__.call(null, coll, k);
    } else {
      var m__8079__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__8079__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._assoc[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__8079__auto__.call(null, coll, k, v);
    } else {
      var m__8079__auto____$1 = cljs.core._assoc["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__8079__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IFind = function() {
};
cljs.core._find = function cljs$core$_find(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IFind$_find$arity$2 == null)) {
    return coll.cljs$core$IFind$_find$arity$2(coll, k);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._find[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__8079__auto__.call(null, coll, k);
    } else {
      var m__8079__auto____$1 = cljs.core._find["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__8079__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IFind.-find", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._dissoc[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__8079__auto__.call(null, coll, k);
    } else {
      var m__8079__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__8079__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._key[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._key["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._val[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._val["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._disjoin[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__8079__auto__.call(null, coll, v);
    } else {
      var m__8079__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__8079__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._peek[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._peek["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._pop[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._pop["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._assoc_n[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__8079__auto__.call(null, coll, n, val);
    } else {
      var m__8079__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__8079__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._deref[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto__.call(null, o);
    } else {
      var m__8079__auto____$1 = cljs.core._deref["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__8079__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__8079__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__8079__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._meta[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto__.call(null, o);
    } else {
      var m__8079__auto____$1 = cljs.core._meta["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._with_meta[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__8079__auto__.call(null, o, meta);
    } else {
      var m__8079__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__8079__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args9809 = [];
  var len__8523__auto___9812 = arguments.length;
  var i__8524__auto___9813 = 0;
  while (true) {
    if (i__8524__auto___9813 < len__8523__auto___9812) {
      args9809.push(arguments[i__8524__auto___9813]);
      var G__9814 = i__8524__auto___9813 + 1;
      i__8524__auto___9813 = G__9814;
      continue;
    } else {
    }
    break;
  }
  var G__9811 = args9809.length;
  switch(G__9811) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9809.length)].join(""));
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._reduce[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__8079__auto__.call(null, coll, f);
    } else {
      var m__8079__auto____$1 = cljs.core._reduce["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__8079__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._reduce[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__8079__auto__.call(null, coll, f, start);
    } else {
      var m__8079__auto____$1 = cljs.core._reduce["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__8079__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._kv_reduce[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__8079__auto__.call(null, coll, f, init);
    } else {
      var m__8079__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__8079__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._equiv[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__8079__auto__.call(null, o, other);
    } else {
      var m__8079__auto____$1 = cljs.core._equiv["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__8079__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._hash[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto__.call(null, o);
    } else {
      var m__8079__auto____$1 = cljs.core._hash["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._seq[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto__.call(null, o);
    } else {
      var m__8079__auto____$1 = cljs.core._seq["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__8079__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._rseq[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._rseq["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._sorted_seq[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__8079__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__8079__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__8079__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__8079__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__8079__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__8079__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._entry_key[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__8079__auto__.call(null, coll, entry);
    } else {
      var m__8079__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__8079__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._comparator[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._comparator["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__8078__auto__ = writer == null ? null : writer;
    var m__8079__auto__ = cljs.core._write[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__8079__auto__.call(null, writer, s);
    } else {
      var m__8079__auto____$1 = cljs.core._write["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__8079__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__8078__auto__ = writer == null ? null : writer;
    var m__8079__auto__ = cljs.core._flush[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__8079__auto__.call(null, writer);
    } else {
      var m__8079__auto____$1 = cljs.core._flush["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__8079__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._pr_writer[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__8079__auto__.call(null, o, writer, opts);
    } else {
      var m__8079__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__8079__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(x) {
  if (!(x == null) && !(x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto__.call(null, x);
    } else {
      var m__8079__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", x);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._notify_watches[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__8079__auto__.call(null, this$, oldval, newval);
    } else {
      var m__8079__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__8079__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._add_watch[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__8079__auto__.call(null, this$, key, f);
    } else {
      var m__8079__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__8079__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = cljs.core._remove_watch[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__8079__auto__.call(null, this$, key);
    } else {
      var m__8079__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__8079__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._as_transient[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__8079__auto__.call(null, tcoll, val);
    } else {
      var m__8079__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__8079__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__8079__auto__.call(null, tcoll);
    } else {
      var m__8079__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__8079__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__8079__auto__.call(null, tcoll, key, val);
    } else {
      var m__8079__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__8079__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__8079__auto__.call(null, tcoll, key);
    } else {
      var m__8079__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__8079__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__8079__auto__.call(null, tcoll, n, val);
    } else {
      var m__8079__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__8079__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__8079__auto__.call(null, tcoll);
    } else {
      var m__8079__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__8079__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__8078__auto__ = tcoll == null ? null : tcoll;
    var m__8079__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__8079__auto__.call(null, tcoll, v);
    } else {
      var m__8079__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__8079__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._compare[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__8079__auto__.call(null, x, y);
    } else {
      var m__8079__auto____$1 = cljs.core._compare["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__8079__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._drop_first[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._chunked_first[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._chunked_rest[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._chunked_next[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._name[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto__.call(null, x);
    } else {
      var m__8079__auto____$1 = cljs.core._name["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._namespace[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto__.call(null, x);
    } else {
      var m__8079__auto____$1 = cljs.core._namespace["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__8079__auto__.call(null, o, new_value);
    } else {
      var m__8079__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__8079__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args9816 = [];
  var len__8523__auto___9819 = arguments.length;
  var i__8524__auto___9820 = 0;
  while (true) {
    if (i__8524__auto___9820 < len__8523__auto___9819) {
      args9816.push(arguments[i__8524__auto___9820]);
      var G__9821 = i__8524__auto___9820 + 1;
      i__8524__auto___9820 = G__9821;
      continue;
    } else {
    }
    break;
  }
  var G__9818 = args9816.length;
  switch(G__9818) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9816.length)].join(""));
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__8079__auto__.call(null, o, f);
    } else {
      var m__8079__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__8079__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__8079__auto__.call(null, o, f, a);
    } else {
      var m__8079__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__8079__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$4 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__8079__auto__.call(null, o, f, a, b);
    } else {
      var m__8079__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__8079__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$5 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__8079__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__8079__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__8079__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__8078__auto__ = o == null ? null : o;
    var m__8079__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__8079__auto__.call(null, o, new_value);
    } else {
      var m__8079__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__8079__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__8078__auto__ = coll == null ? null : coll;
    var m__8079__auto__ = cljs.core._iterator[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto__.call(null, coll);
    } else {
      var m__8079__auto____$1 = cljs.core._iterator["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__8079__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "sb", "sb", -1249746442, null)], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  return h1__$6 ^ h1__$6 >>> 16;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__9823 = i + 2;
        var G__9824 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__9823;
        h1 = G__9824;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__9827 = i + 1;
          var G__9828 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__9827;
          hash = G__9828;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  if (k == null) {
    return 0;
  } else {
    var h = cljs.core.string_hash_cache[k];
    if (typeof h === "number") {
      return h;
    } else {
      return cljs.core.add_to_string_hash_cache(k);
    }
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null) ^ 0;
  } else {
    if (typeof o === "number") {
      if (cljs.core.truth_(isFinite(o))) {
        return Math.floor(o) % 2147483647;
      } else {
        var G__9836 = o;
        switch(G__9836) {
          case Infinity:
            return 2146435072;
            break;
          case -Infinity:
            return -1048576;
            break;
          default:
            return 2146959360;
        }
      }
    } else {
      if (o === true) {
        return 1231;
      } else {
        if (o === false) {
          return 1237;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf() ^ 0;
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o) ^ 0;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(c, x) {
  return x instanceof c;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = cljs.core.not(a.ns);
      if (and__7398__auto__) {
        return b.ns;
      } else {
        return and__7398__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__9844 = a.ns;
            var G__9845 = b.ns;
            return goog.array.defaultCompare(G__9844, G__9845);
          }();
          if (0 === nsc) {
            var G__9846 = a.name;
            var G__9847 = b.name;
            return goog.array.defaultCompare(G__9846, G__9847);
          } else {
            return nsc;
          }
        }
      } else {
        var G__9848 = a.name;
        var G__9849 = b.name;
        return goog.array.defaultCompare(G__9848, G__9849);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__9851 = null;
  var G__9851__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__9851__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__9851 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9851__2.call(this, self__, coll);
      case 3:
        return G__9851__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9851.cljs$core$IFn$_invoke$arity$2 = G__9851__2;
  G__9851.cljs$core$IFn$_invoke$arity$3 = G__9851__3;
  return G__9851;
}();
cljs.core.Symbol.prototype.apply = function(self__, args9850) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9850)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__7850__auto__ = self__._hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "str", "str", -1564826950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, 
  "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args9852 = [];
  var len__8523__auto___9855 = arguments.length;
  var i__8524__auto___9856 = 0;
  while (true) {
    if (i__8524__auto___9856 < len__8523__auto___9855) {
      args9852.push(arguments[i__8524__auto___9856]);
      var G__9857 = i__8524__auto___9856 + 1;
      i__8524__auto___9856 = G__9857;
      continue;
    } else {
    }
    break;
  }
  var G__9854 = args9852.length;
  switch(G__9854) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9852.length)].join(""));
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx < 1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 6717441;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#'"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.sym)].join("");
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__9860 = this$__$1.sym;
    var G__9861 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__9860, G__9861) : cljs.core._EQ_.call(null, G__9860, G__9861);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash_symbol(self__.sym);
};
cljs.core.Var.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Var.prototype.call = function() {
  var G__9906 = null;
  var G__9906__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__9906__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__9906__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__9906__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__9906__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__9906__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__9906__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__9906__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__9906__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__9906__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__9906__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__9906__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__9906__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__9906__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__9906__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__9906__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__9906__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__9906__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__9906__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__9906__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__9906__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__9906__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__9862 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__9863 = a;
    var G__9864 = b;
    var G__9865 = c;
    var G__9866 = d;
    var G__9867 = e;
    var G__9868 = f;
    var G__9869 = g;
    var G__9870 = h;
    var G__9871 = i;
    var G__9872 = j;
    var G__9873 = k;
    var G__9874 = l;
    var G__9875 = m;
    var G__9876 = n;
    var G__9877 = o;
    var G__9878 = p;
    var G__9879 = q;
    var G__9880 = r;
    var G__9881 = s;
    var G__9882 = t;
    var G__9883 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__9862, G__9863, G__9864, G__9865, G__9866, G__9867, G__9868, G__9869, G__9870, G__9871, G__9872, G__9873, G__9874, G__9875, G__9876, G__9877, G__9878, G__9879, G__9880, G__9881, G__9882, G__9883) : cljs.core.apply.call(null, G__9862, G__9863, G__9864, G__9865, G__9866, G__9867, G__9868, G__9869, G__9870, G__9871, G__9872, G__9873, G__9874, G__9875, G__9876, G__9877, G__9878, G__9879, G__9880, 
    G__9881, G__9882, G__9883);
  };
  G__9906 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__9906__1.call(this, self__);
      case 2:
        return G__9906__2.call(this, self__, a);
      case 3:
        return G__9906__3.call(this, self__, a, b);
      case 4:
        return G__9906__4.call(this, self__, a, b, c);
      case 5:
        return G__9906__5.call(this, self__, a, b, c, d);
      case 6:
        return G__9906__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__9906__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__9906__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__9906__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__9906__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__9906__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__9906__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__9906__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__9906__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__9906__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__9906__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__9906__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__9906__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__9906__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__9906__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__9906__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__9906__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__9906.cljs$core$IFn$_invoke$arity$1 = G__9906__1;
  G__9906.cljs$core$IFn$_invoke$arity$2 = G__9906__2;
  G__9906.cljs$core$IFn$_invoke$arity$3 = G__9906__3;
  G__9906.cljs$core$IFn$_invoke$arity$4 = G__9906__4;
  G__9906.cljs$core$IFn$_invoke$arity$5 = G__9906__5;
  G__9906.cljs$core$IFn$_invoke$arity$6 = G__9906__6;
  G__9906.cljs$core$IFn$_invoke$arity$7 = G__9906__7;
  G__9906.cljs$core$IFn$_invoke$arity$8 = G__9906__8;
  G__9906.cljs$core$IFn$_invoke$arity$9 = G__9906__9;
  G__9906.cljs$core$IFn$_invoke$arity$10 = G__9906__10;
  G__9906.cljs$core$IFn$_invoke$arity$11 = G__9906__11;
  G__9906.cljs$core$IFn$_invoke$arity$12 = G__9906__12;
  G__9906.cljs$core$IFn$_invoke$arity$13 = G__9906__13;
  G__9906.cljs$core$IFn$_invoke$arity$14 = G__9906__14;
  G__9906.cljs$core$IFn$_invoke$arity$15 = G__9906__15;
  G__9906.cljs$core$IFn$_invoke$arity$16 = G__9906__16;
  G__9906.cljs$core$IFn$_invoke$arity$17 = G__9906__17;
  G__9906.cljs$core$IFn$_invoke$arity$18 = G__9906__18;
  G__9906.cljs$core$IFn$_invoke$arity$19 = G__9906__19;
  G__9906.cljs$core$IFn$_invoke$arity$20 = G__9906__20;
  G__9906.cljs$core$IFn$_invoke$arity$21 = G__9906__21;
  G__9906.cljs$core$IFn$_invoke$arity$22 = G__9906__22;
  return G__9906;
}();
cljs.core.Var.prototype.apply = function(self__, args9859) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9859)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__9884 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__9885 = a;
  var G__9886 = b;
  var G__9887 = c;
  var G__9888 = d;
  var G__9889 = e;
  var G__9890 = f;
  var G__9891 = g;
  var G__9892 = h;
  var G__9893 = i;
  var G__9894 = j;
  var G__9895 = k;
  var G__9896 = l;
  var G__9897 = m;
  var G__9898 = n;
  var G__9899 = o;
  var G__9900 = p;
  var G__9901 = q;
  var G__9902 = r;
  var G__9903 = s;
  var G__9904 = t;
  var G__9905 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__9884, G__9885, G__9886, G__9887, G__9888, G__9889, G__9890, G__9891, G__9892, G__9893, G__9894, G__9895, G__9896, G__9897, G__9898, G__9899, G__9900, G__9901, G__9902, G__9903, G__9904, G__9905) : cljs.core.apply.call(null, G__9884, G__9885, G__9886, G__9887, G__9888, G__9889, G__9890, G__9891, G__9892, G__9893, G__9894, G__9895, G__9896, G__9897, G__9898, G__9899, G__9900, G__9901, G__9902, 
  G__9903, G__9904, G__9905);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "sym", "sym", 195671222, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || cljs.core.PROTOCOL_SENTINEL === value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0, null);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0, null);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args9919 = [];
  var len__8523__auto___9925 = arguments.length;
  var i__8524__auto___9926 = 0;
  while (true) {
    if (i__8524__auto___9926 < len__8523__auto___9925) {
      args9919.push(arguments[i__8524__auto___9926]);
      var G__9927 = i__8524__auto___9926 + 1;
      i__8524__auto___9926 = G__9927;
      continue;
    } else {
    }
    break;
  }
  var G__9924 = args9919.length;
  switch(G__9924) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args9919.slice(2), 0, null);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__9929 = y;
        var G__9930 = cljs.core.first(more);
        var G__9931 = cljs.core.next(more);
        x = G__9929;
        y = G__9930;
        more = G__9931;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq9920) {
  var G__9921 = cljs.core.first(seq9920);
  var seq9920__$1 = cljs.core.next(seq9920);
  var G__9922 = cljs.core.first(seq9920__$1);
  var seq9920__$2 = cljs.core.next(seq9920__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__9921, G__9922, seq9920__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_rest", "_rest", -2100466189, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__9932 = n + 1;
      var G__9933 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__9934 = cljs.core.next(coll__$1);
      n = G__9932;
      hash_code = G__9933;
      coll__$1 = G__9934;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__9935 = n + 1;
      var G__9936 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__9937 = cljs.core.next(coll__$1);
      n = G__9935;
      hash_code = G__9936;
      coll__$1 = G__9937;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__9938 = this$__$1.valueOf();
    var G__9939 = other.valueOf();
    return goog.array.defaultCompare(G__9938, G__9939);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
cljs.core.Inst = function() {
};
cljs.core.inst_ms_STAR_ = function cljs$core$inst_ms_STAR_(inst) {
  if (!(inst == null) && !(inst.cljs$core$Inst$inst_ms_STAR_$arity$1 == null)) {
    return inst.cljs$core$Inst$inst_ms_STAR_$arity$1(inst);
  } else {
    var x__8078__auto__ = inst == null ? null : inst;
    var m__8079__auto__ = cljs.core.inst_ms_STAR_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__8079__auto__.call(null, inst);
    } else {
      var m__8079__auto____$1 = cljs.core.inst_ms_STAR_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(inst) : m__8079__auto____$1.call(null, inst);
      } else {
        throw cljs.core.missing_protocol("Inst.inst-ms*", inst);
      }
    }
  }
};
Date.prototype.cljs$core$Inst$ = cljs.core.PROTOCOL_SENTINEL;
Date.prototype.cljs$core$Inst$inst_ms_STAR_$arity$1 = function(inst) {
  var inst__$1 = this;
  return inst__$1.getTime();
};
cljs.core.inst_ms = function cljs$core$inst_ms(inst) {
  return cljs.core.inst_ms_STAR_(inst);
};
cljs.core.inst_QMARK_ = function cljs$core$inst_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$Inst$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.Inst, x);
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args9942 = [];
  var len__8523__auto___9951 = arguments.length;
  var i__8524__auto___9952 = 0;
  while (true) {
    if (i__8524__auto___9952 < len__8523__auto___9951) {
      args9942.push(arguments[i__8524__auto___9952]);
      var G__9953 = i__8524__auto___9952 + 1;
      i__8524__auto___9952 = G__9953;
      continue;
    } else {
    }
    break;
  }
  var G__9944 = args9942.length;
  switch(G__9944) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9942.length)].join(""));
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__9945 = val;
          var G__9946 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9945, G__9946) : f.call(null, G__9945, G__9946);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__9955 = nval;
          var G__9956 = n + 1;
          val = G__9955;
          n = G__9956;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9947 = val__$1;
        var G__9948 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9947, G__9948) : f.call(null, G__9947, G__9948);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9957 = nval;
        var G__9958 = n + 1;
        val__$1 = G__9957;
        n = G__9958;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9949 = val__$1;
        var G__9950 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9949, G__9950) : f.call(null, G__9949, G__9950);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9959 = nval;
        var G__9960 = n + 1;
        val__$1 = G__9959;
        n = G__9960;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args9961 = [];
  var len__8523__auto___9970 = arguments.length;
  var i__8524__auto___9971 = 0;
  while (true) {
    if (i__8524__auto___9971 < len__8523__auto___9970) {
      args9961.push(arguments[i__8524__auto___9971]);
      var G__9972 = i__8524__auto___9971 + 1;
      i__8524__auto___9971 = G__9972;
      continue;
    } else {
    }
    break;
  }
  var G__9963 = args9961.length;
  switch(G__9963) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9961.length)].join(""));
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__9964 = val;
          var G__9965 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9964, G__9965) : f.call(null, G__9964, G__9965);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__9974 = nval;
          var G__9975 = n + 1;
          val = G__9974;
          n = G__9975;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9966 = val__$1;
        var G__9967 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9966, G__9967) : f.call(null, G__9966, G__9967);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9976 = nval;
        var G__9977 = n + 1;
        val__$1 = G__9976;
        n = G__9977;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__9968 = val__$1;
        var G__9969 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9968, G__9969) : f.call(null, G__9968, G__9969);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__9978 = nval;
        var G__9979 = n + 1;
        val__$1 = G__9978;
        n = G__9979;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core._indexOf = function cljs$core$_indexOf(var_args) {
  var args9984 = [];
  var len__8523__auto___9987 = arguments.length;
  var i__8524__auto___9988 = 0;
  while (true) {
    if (i__8524__auto___9988 < len__8523__auto___9987) {
      args9984.push(arguments[i__8524__auto___9988]);
      var G__9989 = i__8524__auto___9988 + 1;
      i__8524__auto___9988 = G__9989;
      continue;
    } else {
    }
    break;
  }
  var G__9986 = args9984.length;
  switch(G__9986) {
    case 2:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9984.length)].join(""));
  }
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
};
cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (start >= len) {
    return -1;
  } else {
    var idx = start > 0 ? start : start < 0 ? function() {
      var x__7746__auto__ = 0;
      var y__7747__auto__ = start + len;
      return x__7746__auto__ > y__7747__auto__ ? x__7746__auto__ : y__7747__auto__;
    }() : start;
    while (true) {
      if (idx < len) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__9991 = idx + 1;
          idx = G__9991;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._indexOf.cljs$lang$maxFixedArity = 3;
cljs.core._lastIndexOf = function cljs$core$_lastIndexOf(var_args) {
  var args9992 = [];
  var len__8523__auto___9995 = arguments.length;
  var i__8524__auto___9996 = 0;
  while (true) {
    if (i__8524__auto___9996 < len__8523__auto___9995) {
      args9992.push(arguments[i__8524__auto___9996]);
      var G__9997 = i__8524__auto___9996 + 1;
      i__8524__auto___9996 = G__9997;
      continue;
    } else {
    }
    break;
  }
  var G__9994 = args9992.length;
  switch(G__9994) {
    case 2:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args9992.length)].join(""));
  }
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
};
cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = function(coll, x, start) {
  var len = cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll);
  if (len === 0) {
    return -1;
  } else {
    var idx = start > 0 ? function() {
      var x__7753__auto__ = len - 1;
      var y__7754__auto__ = start;
      return x__7753__auto__ < y__7754__auto__ ? x__7753__auto__ : y__7754__auto__;
    }() : start < 0 ? len + start : start;
    while (true) {
      if (idx >= 0) {
        if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, idx) : cljs.core.nth.call(null, coll, idx), x)) {
          return idx;
        } else {
          var G__9999 = idx - 1;
          idx = G__9999;
          continue;
        }
      } else {
        return -1;
      }
      break;
    }
  }
};
cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i, meta) {
  this.arr = arr;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 166592766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.indexOf = function() {
  var G__10000 = null;
  var G__10000__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10000__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10000 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10000__1.call(this, x);
      case 2:
        return G__10000__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10000.cljs$core$IFn$_invoke$arity$1 = G__10000__1;
  G__10000.cljs$core$IFn$_invoke$arity$2 = G__10000__2;
  return G__10000;
}();
cljs.core.IndexedSeq.prototype.lastIndexOf = function() {
  var G__10001 = null;
  var G__10001__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__10001__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10001 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10001__1.call(this, x);
      case 2:
        return G__10001__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10001.cljs$core$IFn$_invoke$arity$1 = G__10001__1;
  G__10001.cljs$core$IFn$_invoke$arity$2 = G__10001__2;
  return G__10001;
}();
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (0 <= i__$1 && i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    throw new Error("Index out of bounds");
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (0 <= i__$1 && i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, self__.meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__7746__auto__ = 0;
  var y__7747__auto__ = self__.arr.length - self__.i;
  return x__7746__auto__ > y__7747__auto__ ? x__7746__auto__ : y__7747__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = coll__$1.cljs$core$ICounted$_count$arity$1(null);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i, new_meta);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i, meta) {
  return new cljs.core.IndexedSeq(arr, i, meta);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args10002 = [];
  var len__8523__auto___10005 = arguments.length;
  var i__8524__auto___10006 = 0;
  while (true) {
    if (i__8524__auto___10006 < len__8523__auto___10005) {
      args10002.push(arguments[i__8524__auto___10006]);
      var G__10007 = i__8524__auto___10006 + 1;
      i__8524__auto___10006 = G__10007;
      continue;
    } else {
    }
    break;
  }
  var G__10004 = args10002.length;
  switch(G__10004) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10002.length)].join(""));
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i, null);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args10009 = [];
  var len__8523__auto___10012 = arguments.length;
  var i__8524__auto___10013 = 0;
  while (true) {
    if (i__8524__auto___10013 < len__8523__auto___10012) {
      args10009.push(arguments[i__8524__auto___10013]);
      var G__10014 = i__8524__auto___10013 + 1;
      i__8524__auto___10013 = G__10014;
      continue;
    } else {
    }
    break;
  }
  var G__10011 = args10009.length;
  switch(G__10011) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10009.length)].join(""));
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.indexOf = function() {
  var G__10018 = null;
  var G__10018__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10018__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10018 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10018__1.call(this, x);
      case 2:
        return G__10018__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10018.cljs$core$IFn$_invoke$arity$1 = G__10018__1;
  G__10018.cljs$core$IFn$_invoke$arity$2 = G__10018__2;
  return G__10018;
}();
cljs.core.RSeq.prototype.lastIndexOf = function() {
  var G__10019 = null;
  var G__10019__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null, coll));
  };
  var G__10019__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10019 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10019__1.call(this, x);
      case 2:
        return G__10019__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10019.cljs$core$IFn$_invoke$arity$1 = G__10019__1;
  G__10019.cljs$core$IFn$_invoke$arity$2 = G__10019__2;
  return G__10019;
}();
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__10016 = cljs.core.List.EMPTY;
  var G__10017 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__10016, G__10017) : cljs.core.with_meta.call(null, G__10016, G__10017);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ci", "ci", 2049808339, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__10020 = sn;
      s = G__10020;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args10021 = [];
  var len__8523__auto___10027 = arguments.length;
  var i__8524__auto___10028 = 0;
  while (true) {
    if (i__8524__auto___10028 < len__8523__auto___10027) {
      args10021.push(arguments[i__8524__auto___10028]);
      var G__10029 = i__8524__auto___10028 + 1;
      i__8524__auto___10028 = G__10029;
      continue;
    } else {
    }
    break;
  }
  var G__10026 = args10021.length;
  switch(G__10026) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10021.slice(2), 0, null);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    var x__8252__auto__ = x;
    return cljs.core._conj(cljs.core.List.EMPTY, x__8252__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__10031 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__10032 = cljs.core.first(xs);
      var G__10033 = cljs.core.next(xs);
      coll = G__10031;
      x = G__10032;
      xs = G__10033;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq10022) {
  var G__10023 = cljs.core.first(seq10022);
  var seq10022__$1 = cljs.core.next(seq10022);
  var G__10024 = cljs.core.first(seq10022__$1);
  var seq10022__$2 = cljs.core.next(seq10022__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__10023, G__10024, seq10022__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__10034 = cljs.core.next(s);
      var G__10035 = acc + 1;
      s = G__10034;
      acc = G__10035;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args10040 = [];
  var len__8523__auto___10043 = arguments.length;
  var i__8524__auto___10044 = 0;
  while (true) {
    if (i__8524__auto___10044 < len__8523__auto___10043) {
      args10040.push(arguments[i__8524__auto___10044]);
      var G__10045 = i__8524__auto___10044 + 1;
      i__8524__auto___10044 = G__10045;
      continue;
    } else {
    }
    break;
  }
  var G__10042 = args10040.length;
  switch(G__10042) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10040.length)].join(""));
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__10047 = cljs.core.next(coll);
            var G__10048 = n - 1;
            coll = G__10047;
            n = G__10048;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__10049 = cljs.core.next(coll);
            var G__10050 = n - 1;
            var G__10051 = not_found;
            coll = G__10049;
            n = G__10050;
            not_found = G__10051;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args10052 = [];
  var len__8523__auto___10059 = arguments.length;
  var i__8524__auto___10060 = 0;
  while (true) {
    if (i__8524__auto___10060 < len__8523__auto___10059) {
      args10052.push(arguments[i__8524__auto___10060]);
      var G__10061 = i__8524__auto___10060 + 1;
      i__8524__auto___10060 = G__10061;
      continue;
    } else {
    }
    break;
  }
  var G__10054 = args10052.length;
  switch(G__10054) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10052.length)].join(""));
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("Index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n >= 0 && n < coll.length) {
            return coll[n];
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (typeof coll === "string") {
            if (n >= 0 && n < coll.length) {
              return coll.charAt(n);
            } else {
              throw new Error("Index out of bounds");
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("nth not supported on this type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("Index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n >= 0 && n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n >= 0 && n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("nth not supported on this type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__10063 = n__$1 - 1;
      var G__10064 = cljs.core.rest(xs);
      n__$1 = G__10063;
      xs = G__10064;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args10065 = [];
  var len__8523__auto___10070 = arguments.length;
  var i__8524__auto___10071 = 0;
  while (true) {
    if (i__8524__auto___10071 < len__8523__auto___10070) {
      args10065.push(arguments[i__8524__auto___10071]);
      var G__10072 = i__8524__auto___10071 + 1;
      i__8524__auto___10071 = G__10072;
      continue;
    } else {
    }
    break;
  }
  var G__10067 = args10065.length;
  switch(G__10067) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10065.length)].join(""));
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (!(k == null) && k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (!(k == null) && k < o.length) {
            return o.charAt(k | 0);
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (!(k == null) && k >= 0 && k < o.length) {
          return o[k | 0];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (!(k == null) && k >= 0 && k < o.length) {
            return o.charAt(k | 0);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args10074 = [];
  var len__8523__auto___10081 = arguments.length;
  var i__8524__auto___10082 = 0;
  while (true) {
    if (i__8524__auto___10082 < len__8523__auto___10081) {
      args10074.push(arguments[i__8524__auto___10082]);
      var G__10083 = i__8524__auto___10082 + 1;
      i__8524__auto___10082 = G__10083;
      continue;
    } else {
    }
    break;
  }
  var G__10080 = args10074.length;
  switch(G__10080) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10074.slice(3), 0, null);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentArrayMap.createAsIfByAssoc([k, v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__10085 = ret;
      var G__10086 = cljs.core.first(kvs);
      var G__10087 = cljs.core.second(kvs);
      var G__10088 = cljs.core.nnext(kvs);
      coll = G__10085;
      k = G__10086;
      v = G__10087;
      kvs = G__10088;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq10075) {
  var G__10076 = cljs.core.first(seq10075);
  var seq10075__$1 = cljs.core.next(seq10075);
  var G__10077 = cljs.core.first(seq10075__$1);
  var seq10075__$2 = cljs.core.next(seq10075__$1);
  var G__10078 = cljs.core.first(seq10075__$2);
  var seq10075__$3 = cljs.core.next(seq10075__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__10076, G__10077, G__10078, seq10075__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args10089 = [];
  var len__8523__auto___10095 = arguments.length;
  var i__8524__auto___10096 = 0;
  while (true) {
    if (i__8524__auto___10096 < len__8523__auto___10095) {
      args10089.push(arguments[i__8524__auto___10096]);
      var G__10097 = i__8524__auto___10096 + 1;
      i__8524__auto___10096 = G__10097;
      continue;
    } else {
    }
    break;
  }
  var G__10094 = args10089.length;
  switch(G__10094) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10089.slice(2), 0, null);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__10099 = ret;
        var G__10100 = cljs.core.first(ks);
        var G__10101 = cljs.core.next(ks);
        coll = G__10099;
        k = G__10100;
        ks = G__10101;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq10090) {
  var G__10091 = cljs.core.first(seq10090);
  var seq10090__$1 = cljs.core.next(seq10090);
  var G__10092 = cljs.core.first(seq10090__$1);
  var seq10090__$2 = cljs.core.next(seq10090__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__10091, G__10092, seq10090__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__7410__auto__ = goog.isFunction(f);
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    if (!(f == null)) {
      if (false || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.MetaFn.prototype.call = function() {
  var G__10107 = null;
  var G__10107__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__10107__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__10107__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__10107__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__10107__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__10107__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__10107__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__10107__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__10107__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__10107__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__10107__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__10107__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__10107__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__10107__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__10107__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__10107__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__10107__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__10107__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__10107__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__10107__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__10107__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__10107__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__10107 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__10107__1.call(this, self__);
      case 2:
        return G__10107__2.call(this, self__, a);
      case 3:
        return G__10107__3.call(this, self__, a, b);
      case 4:
        return G__10107__4.call(this, self__, a, b, c);
      case 5:
        return G__10107__5.call(this, self__, a, b, c, d);
      case 6:
        return G__10107__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__10107__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__10107__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__10107__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__10107__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__10107__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__10107__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__10107__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__10107__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__10107__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__10107__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__10107__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__10107__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__10107__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__10107__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__10107__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__10107__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10107.cljs$core$IFn$_invoke$arity$1 = G__10107__1;
  G__10107.cljs$core$IFn$_invoke$arity$2 = G__10107__2;
  G__10107.cljs$core$IFn$_invoke$arity$3 = G__10107__3;
  G__10107.cljs$core$IFn$_invoke$arity$4 = G__10107__4;
  G__10107.cljs$core$IFn$_invoke$arity$5 = G__10107__5;
  G__10107.cljs$core$IFn$_invoke$arity$6 = G__10107__6;
  G__10107.cljs$core$IFn$_invoke$arity$7 = G__10107__7;
  G__10107.cljs$core$IFn$_invoke$arity$8 = G__10107__8;
  G__10107.cljs$core$IFn$_invoke$arity$9 = G__10107__9;
  G__10107.cljs$core$IFn$_invoke$arity$10 = G__10107__10;
  G__10107.cljs$core$IFn$_invoke$arity$11 = G__10107__11;
  G__10107.cljs$core$IFn$_invoke$arity$12 = G__10107__12;
  G__10107.cljs$core$IFn$_invoke$arity$13 = G__10107__13;
  G__10107.cljs$core$IFn$_invoke$arity$14 = G__10107__14;
  G__10107.cljs$core$IFn$_invoke$arity$15 = G__10107__15;
  G__10107.cljs$core$IFn$_invoke$arity$16 = G__10107__16;
  G__10107.cljs$core$IFn$_invoke$arity$17 = G__10107__17;
  G__10107.cljs$core$IFn$_invoke$arity$18 = G__10107__18;
  G__10107.cljs$core$IFn$_invoke$arity$19 = G__10107__19;
  G__10107.cljs$core$IFn$_invoke$arity$20 = G__10107__20;
  G__10107.cljs$core$IFn$_invoke$arity$21 = G__10107__21;
  G__10107.cljs$core$IFn$_invoke$arity$22 = G__10107__22;
  return G__10107;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args10106) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10106)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "afn", "afn", 216963467, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__7398__auto__ = !(o == null);
    if (and__7398__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__7398__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args10112 = [];
  var len__8523__auto___10118 = arguments.length;
  var i__8524__auto___10119 = 0;
  while (true) {
    if (i__8524__auto___10119 < len__8523__auto___10118) {
      args10112.push(arguments[i__8524__auto___10119]);
      var G__10120 = i__8524__auto___10119 + 1;
      i__8524__auto___10119 = G__10120;
      continue;
    } else {
    }
    break;
  }
  var G__10117 = args10112.length;
  switch(G__10117) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10112.slice(2), 0, null);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__10122 = ret;
        var G__10123 = cljs.core.first(ks);
        var G__10124 = cljs.core.next(ks);
        coll = G__10122;
        k = G__10123;
        ks = G__10124;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq10113) {
  var G__10114 = cljs.core.first(seq10113);
  var seq10113__$1 = cljs.core.next(seq10113);
  var G__10115 = cljs.core.first(seq10113__$1);
  var seq10113__$2 = cljs.core.next(seq10113__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__10114, G__10115, seq10113__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.ifind_QMARK_ = function cljs$core$ifind_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IFind$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IFind, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args10147 = [];
  var len__8523__auto___10153 = arguments.length;
  var i__8524__auto___10154 = 0;
  while (true) {
    if (i__8524__auto___10154 < len__8523__auto___10153) {
      args10147.push(arguments[i__8524__auto___10154]);
      var G__10155 = i__8524__auto___10154 + 1;
      i__8524__auto___10154 = G__10155;
      continue;
    } else {
    }
    break;
  }
  var G__10150 = args10147.length;
  switch(G__10150) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10147.slice(0), 0, null);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__8542__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq10148) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10148));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__10159_10161 = obj;
  var G__10160_10162 = function(G__10159_10161, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__10159_10161, keys);
  goog.object.forEach(G__10159_10161, G__10160_10162);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__10163 = i__$1 + 1;
      var G__10164 = j__$1 + 1;
      var G__10165 = len__$1 - 1;
      i__$1 = G__10163;
      j__$1 = G__10164;
      len__$1 = G__10165;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__10166 = i__$1 - 1;
      var G__10167 = j__$1 - 1;
      var G__10168 = len__$1 - 1;
      i__$1 = G__10166;
      j__$1 = G__10167;
      len__$1 = G__10168;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.boolean_QMARK_ = function cljs$core$boolean_QMARK_(x) {
  return x === true || x === false;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  var or__7410__auto__ = !(s == null) ? s.cljs$lang$protocol_mask$partition0$ & 8388608 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeqable$ ? true : !s.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    return cljs.core.array_QMARK_(s) || typeof s === "string";
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__7410__auto__ = cljs.core.fn_QMARK_(f);
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || cljs.core.PROTOCOL_SENTINEL === f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.int_QMARK_ = function cljs$core$int_QMARK_(x) {
  return cljs.core.integer_QMARK_(x) || x instanceof goog.math.Integer || x instanceof goog.math.Long;
};
cljs.core.pos_int_QMARK_ = function cljs$core$pos_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return x > 0;
  } else {
    if (x instanceof goog.math.Integer) {
      return cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero());
    } else {
      if (x instanceof goog.math.Long) {
        return cljs.core.not(x.isNegative()) && cljs.core.not(x.isZero());
      } else {
        return false;
      }
    }
  }
};
cljs.core.neg_int_QMARK_ = function cljs$core$neg_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return x < 0;
  } else {
    if (x instanceof goog.math.Integer) {
      return x.isNegative();
    } else {
      if (x instanceof goog.math.Long) {
        return x.isNegative();
      } else {
        return false;
      }
    }
  }
};
cljs.core.nat_int_QMARK_ = function cljs$core$nat_int_QMARK_(x) {
  if (cljs.core.integer_QMARK_(x)) {
    return !(x < 0) || x === 0;
  } else {
    if (x instanceof goog.math.Integer) {
      var or__7410__auto__ = cljs.core.not(x.isNegative());
      if (or__7410__auto__) {
        return or__7410__auto__;
      } else {
        return x.isZero();
      }
    } else {
      if (x instanceof goog.math.Long) {
        var or__7410__auto__ = cljs.core.not(x.isNegative());
        if (or__7410__auto__) {
          return or__7410__auto__;
        } else {
          return x.isZero();
        }
      } else {
        return false;
      }
    }
  }
};
cljs.core.float_QMARK_ = function cljs$core$float_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.double_QMARK_ = function cljs$core$double_QMARK_(x) {
  return typeof x === "number";
};
cljs.core.infinite_QMARK_ = function cljs$core$infinite_QMARK_(x) {
  return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    if (cljs.core.ifind_QMARK_(coll)) {
      return cljs.core._find(coll, k);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
    }
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args10181 = [];
  var len__8523__auto___10187 = arguments.length;
  var i__8524__auto___10188 = 0;
  while (true) {
    if (i__8524__auto___10188 < len__8523__auto___10187) {
      args10181.push(arguments[i__8524__auto___10188]);
      var G__10189 = i__8524__auto___10188 + 1;
      i__8524__auto___10188 = G__10189;
      continue;
    } else {
    }
    break;
  }
  var G__10186 = args10181.length;
  switch(G__10186) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10181.slice(2), 0, null);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.createAsIfByAssoc([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__10191 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__10192 = etc;
          s = G__10191;
          xs = G__10192;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq10182) {
  var G__10183 = cljs.core.first(seq10182);
  var seq10182__$1 = cljs.core.next(seq10182);
  var G__10184 = cljs.core.first(seq10182__$1);
  var seq10182__$2 = cljs.core.next(seq10182__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__10183, G__10184, seq10182__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args10195 = [];
  var len__8523__auto___10198 = arguments.length;
  var i__8524__auto___10199 = 0;
  while (true) {
    if (i__8524__auto___10199 < len__8523__auto___10198) {
      args10195.push(arguments[i__8524__auto___10199]);
      var G__10200 = i__8524__auto___10199 + 1;
      i__8524__auto___10199 = G__10200;
      continue;
    } else {
    }
    break;
  }
  var G__10197 = args10195.length;
  switch(G__10197) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10195.length)].join(""));
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__10202 = xs;
      var G__10203 = ys;
      var G__10204 = len;
      var G__10205 = n + 1;
      xs = G__10202;
      ys = G__10203;
      len = G__10204;
      n = G__10205;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function cljs$core$sort(var_args) {
  var args10206 = [];
  var len__8523__auto___10211 = arguments.length;
  var i__8524__auto___10212 = 0;
  while (true) {
    if (i__8524__auto___10212 < len__8523__auto___10211) {
      args10206.push(arguments[i__8524__auto___10212]);
      var G__10213 = i__8524__auto___10212 + 1;
      i__8524__auto___10212 = G__10213;
      continue;
    } else {
    }
    break;
  }
  var G__10208 = args10206.length;
  switch(G__10208) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10206.length)].join(""));
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__10209_10215 = a;
    var G__10210_10216 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__10209_10215, G__10210_10216);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args10217 = [];
  var len__8523__auto___10220 = arguments.length;
  var i__8524__auto___10221 = 0;
  while (true) {
    if (i__8524__auto___10221 < len__8523__auto___10220) {
      args10217.push(arguments[i__8524__auto___10221]);
      var G__10222 = i__8524__auto___10221 + 1;
      i__8524__auto___10221 = G__10222;
      continue;
    } else {
    }
    break;
  }
  var G__10219 = args10217.length;
  switch(G__10219) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10217.length)].join(""));
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args10224 = [];
  var len__8523__auto___10232 = arguments.length;
  var i__8524__auto___10233 = 0;
  while (true) {
    if (i__8524__auto___10233 < len__8523__auto___10232) {
      args10224.push(arguments[i__8524__auto___10233]);
      var G__10234 = i__8524__auto___10233 + 1;
      i__8524__auto___10233 = G__10234;
      continue;
    } else {
    }
    break;
  }
  var G__10226 = args10224.length;
  switch(G__10226) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10224.length)].join(""));
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4655__auto__ = cljs.core.seq(coll);
  if (temp__4655__auto__) {
    var s = temp__4655__auto__;
    var G__10227 = f;
    var G__10228 = cljs.core.first(s);
    var G__10229 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__10227, G__10228, G__10229) : cljs.core.reduce.call(null, G__10227, G__10228, G__10229);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__10230 = val__$1;
        var G__10231 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10230, G__10231) : f.call(null, G__10230, G__10231);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__10236 = nval;
        var G__10237 = cljs.core.next(coll__$1);
        val__$1 = G__10236;
        coll__$1 = G__10237;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args10238 = [];
  var len__8523__auto___10243 = arguments.length;
  var i__8524__auto___10244 = 0;
  while (true) {
    if (i__8524__auto___10244 < len__8523__auto___10243) {
      args10238.push(arguments[i__8524__auto___10244]);
      var G__10245 = i__8524__auto___10244 + 1;
      i__8524__auto___10244 = G__10245;
      continue;
    } else {
    }
    break;
  }
  var G__10240 = args10238.length;
  switch(G__10240) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10238.length)].join(""));
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args10247 = [];
  var len__8523__auto___10250 = arguments.length;
  var i__8524__auto___10251 = 0;
  while (true) {
    if (i__8524__auto___10251 < len__8523__auto___10250) {
      args10247.push(arguments[i__8524__auto___10251]);
      var G__10252 = i__8524__auto___10251 + 1;
      i__8524__auto___10251 = G__10252;
      continue;
    } else {
    }
    break;
  }
  var G__10249 = args10247.length;
  switch(G__10249) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10247.length)].join(""));
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__10254 = null;
    var G__10254__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__10254__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__10254__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__10254 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__10254__0.call(this);
        case 1:
          return G__10254__1.call(this, x);
        case 2:
          return G__10254__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10254.cljs$core$IFn$_invoke$arity$0 = G__10254__0;
    G__10254.cljs$core$IFn$_invoke$arity$1 = G__10254__1;
    G__10254.cljs$core$IFn$_invoke$arity$2 = G__10254__2;
    return G__10254;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args10255 = [];
  var len__8523__auto___10258 = arguments.length;
  var i__8524__auto___10259 = 0;
  while (true) {
    if (i__8524__auto___10259 < len__8523__auto___10258) {
      args10255.push(arguments[i__8524__auto___10259]);
      var G__10260 = i__8524__auto___10259 + 1;
      i__8524__auto___10259 = G__10260;
      continue;
    } else {
    }
    break;
  }
  var G__10257 = args10255.length;
  switch(G__10257) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10255.length)].join(""));
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args10262 = [];
  var len__8523__auto___10268 = arguments.length;
  var i__8524__auto___10269 = 0;
  while (true) {
    if (i__8524__auto___10269 < len__8523__auto___10268) {
      args10262.push(arguments[i__8524__auto___10269]);
      var G__10270 = i__8524__auto___10269 + 1;
      i__8524__auto___10269 = G__10270;
      continue;
    } else {
    }
    break;
  }
  var G__10267 = args10262.length;
  switch(G__10267) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10262.slice(2), 0, null);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq10263) {
  var G__10264 = cljs.core.first(seq10263);
  var seq10263__$1 = cljs.core.next(seq10263);
  var G__10265 = cljs.core.first(seq10263__$1);
  var seq10263__$2 = cljs.core.next(seq10263__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__10264, G__10265, seq10263__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args10272 = [];
  var len__8523__auto___10278 = arguments.length;
  var i__8524__auto___10279 = 0;
  while (true) {
    if (i__8524__auto___10279 < len__8523__auto___10278) {
      args10272.push(arguments[i__8524__auto___10279]);
      var G__10280 = i__8524__auto___10279 + 1;
      i__8524__auto___10279 = G__10280;
      continue;
    } else {
    }
    break;
  }
  var G__10277 = args10272.length;
  switch(G__10277) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10272.slice(2), 0, null);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq10273) {
  var G__10274 = cljs.core.first(seq10273);
  var seq10273__$1 = cljs.core.next(seq10273);
  var G__10275 = cljs.core.first(seq10273__$1);
  var seq10273__$2 = cljs.core.next(seq10273__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__10274, G__10275, seq10273__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args10282 = [];
  var len__8523__auto___10288 = arguments.length;
  var i__8524__auto___10289 = 0;
  while (true) {
    if (i__8524__auto___10289 < len__8523__auto___10288) {
      args10282.push(arguments[i__8524__auto___10289]);
      var G__10290 = i__8524__auto___10289 + 1;
      i__8524__auto___10289 = G__10290;
      continue;
    } else {
    }
    break;
  }
  var G__10287 = args10282.length;
  switch(G__10287) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10282.slice(2), 0, null);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq10283) {
  var G__10284 = cljs.core.first(seq10283);
  var seq10283__$1 = cljs.core.next(seq10283);
  var G__10285 = cljs.core.first(seq10283__$1);
  var seq10283__$2 = cljs.core.next(seq10283__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__10284, G__10285, seq10283__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args10292 = [];
  var len__8523__auto___10298 = arguments.length;
  var i__8524__auto___10299 = 0;
  while (true) {
    if (i__8524__auto___10299 < len__8523__auto___10298) {
      args10292.push(arguments[i__8524__auto___10299]);
      var G__10300 = i__8524__auto___10299 + 1;
      i__8524__auto___10299 = G__10300;
      continue;
    } else {
    }
    break;
  }
  var G__10297 = args10292.length;
  switch(G__10297) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10292.slice(2), 0, null);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq10293) {
  var G__10294 = cljs.core.first(seq10293);
  var seq10293__$1 = cljs.core.next(seq10293);
  var G__10295 = cljs.core.first(seq10293__$1);
  var seq10293__$2 = cljs.core.next(seq10293__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__10294, G__10295, seq10293__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args10302 = [];
  var len__8523__auto___10308 = arguments.length;
  var i__8524__auto___10309 = 0;
  while (true) {
    if (i__8524__auto___10309 < len__8523__auto___10308) {
      args10302.push(arguments[i__8524__auto___10309]);
      var G__10310 = i__8524__auto___10309 + 1;
      i__8524__auto___10309 = G__10310;
      continue;
    } else {
    }
    break;
  }
  var G__10307 = args10302.length;
  switch(G__10307) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10302.slice(2), 0, null);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__10312 = y;
        var G__10313 = cljs.core.first(more);
        var G__10314 = cljs.core.next(more);
        x = G__10312;
        y = G__10313;
        more = G__10314;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq10303) {
  var G__10304 = cljs.core.first(seq10303);
  var seq10303__$1 = cljs.core.next(seq10303);
  var G__10305 = cljs.core.first(seq10303__$1);
  var seq10303__$2 = cljs.core.next(seq10303__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__10304, G__10305, seq10303__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args10315 = [];
  var len__8523__auto___10321 = arguments.length;
  var i__8524__auto___10322 = 0;
  while (true) {
    if (i__8524__auto___10322 < len__8523__auto___10321) {
      args10315.push(arguments[i__8524__auto___10322]);
      var G__10323 = i__8524__auto___10322 + 1;
      i__8524__auto___10322 = G__10323;
      continue;
    } else {
    }
    break;
  }
  var G__10320 = args10315.length;
  switch(G__10320) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10315.slice(2), 0, null);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__10325 = y;
        var G__10326 = cljs.core.first(more);
        var G__10327 = cljs.core.next(more);
        x = G__10325;
        y = G__10326;
        more = G__10327;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq10316) {
  var G__10317 = cljs.core.first(seq10316);
  var seq10316__$1 = cljs.core.next(seq10316);
  var G__10318 = cljs.core.first(seq10316__$1);
  var seq10316__$2 = cljs.core.next(seq10316__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10317, G__10318, seq10316__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args10328 = [];
  var len__8523__auto___10334 = arguments.length;
  var i__8524__auto___10335 = 0;
  while (true) {
    if (i__8524__auto___10335 < len__8523__auto___10334) {
      args10328.push(arguments[i__8524__auto___10335]);
      var G__10336 = i__8524__auto___10335 + 1;
      i__8524__auto___10335 = G__10336;
      continue;
    } else {
    }
    break;
  }
  var G__10333 = args10328.length;
  switch(G__10333) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10328.slice(2), 0, null);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__10338 = y;
        var G__10339 = cljs.core.first(more);
        var G__10340 = cljs.core.next(more);
        x = G__10338;
        y = G__10339;
        more = G__10340;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq10329) {
  var G__10330 = cljs.core.first(seq10329);
  var seq10329__$1 = cljs.core.next(seq10329);
  var G__10331 = cljs.core.first(seq10329__$1);
  var seq10329__$2 = cljs.core.next(seq10329__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__10330, G__10331, seq10329__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args10341 = [];
  var len__8523__auto___10347 = arguments.length;
  var i__8524__auto___10348 = 0;
  while (true) {
    if (i__8524__auto___10348 < len__8523__auto___10347) {
      args10341.push(arguments[i__8524__auto___10348]);
      var G__10349 = i__8524__auto___10348 + 1;
      i__8524__auto___10348 = G__10349;
      continue;
    } else {
    }
    break;
  }
  var G__10346 = args10341.length;
  switch(G__10346) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10341.slice(2), 0, null);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__10351 = y;
        var G__10352 = cljs.core.first(more);
        var G__10353 = cljs.core.next(more);
        x = G__10351;
        y = G__10352;
        more = G__10353;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq10342) {
  var G__10343 = cljs.core.first(seq10342);
  var seq10342__$1 = cljs.core.next(seq10342);
  var G__10344 = cljs.core.first(seq10342__$1);
  var seq10342__$2 = cljs.core.next(seq10342__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10343, G__10344, seq10342__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args10354 = [];
  var len__8523__auto___10360 = arguments.length;
  var i__8524__auto___10361 = 0;
  while (true) {
    if (i__8524__auto___10361 < len__8523__auto___10360) {
      args10354.push(arguments[i__8524__auto___10361]);
      var G__10362 = i__8524__auto___10361 + 1;
      i__8524__auto___10361 = G__10362;
      continue;
    } else {
    }
    break;
  }
  var G__10359 = args10354.length;
  switch(G__10359) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10354.slice(2), 0, null);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__7746__auto__ = x;
  var y__7747__auto__ = y;
  return x__7746__auto__ > y__7747__auto__ ? x__7746__auto__ : y__7747__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__7746__auto__ = x;
    var y__7747__auto__ = y;
    return x__7746__auto__ > y__7747__auto__ ? x__7746__auto__ : y__7747__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq10355) {
  var G__10356 = cljs.core.first(seq10355);
  var seq10355__$1 = cljs.core.next(seq10355);
  var G__10357 = cljs.core.first(seq10355__$1);
  var seq10355__$2 = cljs.core.next(seq10355__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__10356, G__10357, seq10355__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args10364 = [];
  var len__8523__auto___10370 = arguments.length;
  var i__8524__auto___10371 = 0;
  while (true) {
    if (i__8524__auto___10371 < len__8523__auto___10370) {
      args10364.push(arguments[i__8524__auto___10371]);
      var G__10372 = i__8524__auto___10371 + 1;
      i__8524__auto___10371 = G__10372;
      continue;
    } else {
    }
    break;
  }
  var G__10369 = args10364.length;
  switch(G__10369) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10364.slice(2), 0, null);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__7753__auto__ = x;
  var y__7754__auto__ = y;
  return x__7753__auto__ < y__7754__auto__ ? x__7753__auto__ : y__7754__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__7753__auto__ = x;
    var y__7754__auto__ = y;
    return x__7753__auto__ < y__7754__auto__ ? x__7753__auto__ : y__7754__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq10365) {
  var G__10366 = cljs.core.first(seq10365);
  var seq10365__$1 = cljs.core.next(seq10365);
  var G__10367 = cljs.core.first(seq10365__$1);
  var seq10365__$2 = cljs.core.next(seq10365__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__10366, G__10367, seq10365__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args10374 = [];
  var len__8523__auto___10380 = arguments.length;
  var i__8524__auto___10381 = 0;
  while (true) {
    if (i__8524__auto___10381 < len__8523__auto___10380) {
      args10374.push(arguments[i__8524__auto___10381]);
      var G__10382 = i__8524__auto___10381 + 1;
      i__8524__auto___10381 = G__10382;
      continue;
    } else {
    }
    break;
  }
  var G__10379 = args10374.length;
  switch(G__10379) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10374.slice(2), 0, null);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq10375) {
  var G__10376 = cljs.core.first(seq10375);
  var seq10375__$1 = cljs.core.next(seq10375);
  var G__10377 = cljs.core.first(seq10375__$1);
  var seq10375__$2 = cljs.core.next(seq10375__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__10376, G__10377, seq10375__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args10384 = [];
  var len__8523__auto___10390 = arguments.length;
  var i__8524__auto___10391 = 0;
  while (true) {
    if (i__8524__auto___10391 < len__8523__auto___10390) {
      args10384.push(arguments[i__8524__auto___10391]);
      var G__10392 = i__8524__auto___10391 + 1;
      i__8524__auto___10391 = G__10392;
      continue;
    } else {
    }
    break;
  }
  var G__10389 = args10384.length;
  switch(G__10389) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10384.slice(2), 0, null);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq10385) {
  var G__10386 = cljs.core.first(seq10385);
  var seq10385__$1 = cljs.core.next(seq10385);
  var G__10387 = cljs.core.first(seq10385__$1);
  var seq10385__$2 = cljs.core.next(seq10385__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__10386, G__10387, seq10385__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args10394 = [];
  var len__8523__auto___10400 = arguments.length;
  var i__8524__auto___10401 = 0;
  while (true) {
    if (i__8524__auto___10401 < len__8523__auto___10400) {
      args10394.push(arguments[i__8524__auto___10401]);
      var G__10402 = i__8524__auto___10401 + 1;
      i__8524__auto___10401 = G__10402;
      continue;
    } else {
    }
    break;
  }
  var G__10399 = args10394.length;
  switch(G__10399) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10394.slice(2), 0, null);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq10395) {
  var G__10396 = cljs.core.first(seq10395);
  var seq10395__$1 = cljs.core.next(seq10395);
  var G__10397 = cljs.core.first(seq10395__$1);
  var seq10395__$2 = cljs.core.next(seq10395__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__10396, G__10397, seq10395__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args10404 = [];
  var len__8523__auto___10410 = arguments.length;
  var i__8524__auto___10411 = 0;
  while (true) {
    if (i__8524__auto___10411 < len__8523__auto___10410) {
      args10404.push(arguments[i__8524__auto___10411]);
      var G__10412 = i__8524__auto___10411 + 1;
      i__8524__auto___10411 = G__10412;
      continue;
    } else {
    }
    break;
  }
  var G__10409 = args10404.length;
  switch(G__10409) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10404.slice(2), 0, null);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq10405) {
  var G__10406 = cljs.core.first(seq10405);
  var seq10405__$1 = cljs.core.next(seq10405);
  var G__10407 = cljs.core.first(seq10405__$1);
  var seq10405__$2 = cljs.core.next(seq10405__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__10406, G__10407, seq10405__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args10414 = [];
  var len__8523__auto___10420 = arguments.length;
  var i__8524__auto___10421 = 0;
  while (true) {
    if (i__8524__auto___10421 < len__8523__auto___10420) {
      args10414.push(arguments[i__8524__auto___10421]);
      var G__10422 = i__8524__auto___10421 + 1;
      i__8524__auto___10421 = G__10422;
      continue;
    } else {
    }
    break;
  }
  var G__10419 = args10414.length;
  switch(G__10419) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10414.slice(2), 0, null);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq10415) {
  var G__10416 = cljs.core.first(seq10415);
  var seq10415__$1 = cljs.core.next(seq10415);
  var G__10417 = cljs.core.first(seq10415__$1);
  var seq10415__$2 = cljs.core.next(seq10415__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__10416, G__10417, seq10415__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args10424 = [];
  var len__8523__auto___10430 = arguments.length;
  var i__8524__auto___10431 = 0;
  while (true) {
    if (i__8524__auto___10431 < len__8523__auto___10430) {
      args10424.push(arguments[i__8524__auto___10431]);
      var G__10432 = i__8524__auto___10431 + 1;
      i__8524__auto___10431 = G__10432;
      continue;
    } else {
    }
    break;
  }
  var G__10429 = args10424.length;
  switch(G__10429) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10424.slice(2), 0, null);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq10425) {
  var G__10426 = cljs.core.first(seq10425);
  var seq10425__$1 = cljs.core.next(seq10425);
  var G__10427 = cljs.core.first(seq10425__$1);
  var seq10425__$2 = cljs.core.next(seq10425__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__10426, G__10427, seq10425__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args10434 = [];
  var len__8523__auto___10440 = arguments.length;
  var i__8524__auto___10441 = 0;
  while (true) {
    if (i__8524__auto___10441 < len__8523__auto___10440) {
      args10434.push(arguments[i__8524__auto___10441]);
      var G__10442 = i__8524__auto___10441 + 1;
      i__8524__auto___10441 = G__10442;
      continue;
    } else {
    }
    break;
  }
  var G__10439 = args10434.length;
  switch(G__10439) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10434.slice(2), 0, null);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq10435) {
  var G__10436 = cljs.core.first(seq10435);
  var seq10435__$1 = cljs.core.next(seq10435);
  var G__10437 = cljs.core.first(seq10435__$1);
  var seq10435__$2 = cljs.core.next(seq10435__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__10436, G__10437, seq10435__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args10444 = [];
  var len__8523__auto___10450 = arguments.length;
  var i__8524__auto___10451 = 0;
  while (true) {
    if (i__8524__auto___10451 < len__8523__auto___10450) {
      args10444.push(arguments[i__8524__auto___10451]);
      var G__10452 = i__8524__auto___10451 + 1;
      i__8524__auto___10451 = G__10452;
      continue;
    } else {
    }
    break;
  }
  var G__10449 = args10444.length;
  switch(G__10449) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10444.slice(2), 0, null);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq10445) {
  var G__10446 = cljs.core.first(seq10445);
  var seq10445__$1 = cljs.core.next(seq10445);
  var G__10447 = cljs.core.first(seq10445__$1);
  var seq10445__$2 = cljs.core.next(seq10445__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__10446, G__10447, seq10445__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args10454 = [];
  var len__8523__auto___10460 = arguments.length;
  var i__8524__auto___10461 = 0;
  while (true) {
    if (i__8524__auto___10461 < len__8523__auto___10460) {
      args10454.push(arguments[i__8524__auto___10461]);
      var G__10462 = i__8524__auto___10461 + 1;
      i__8524__auto___10461 = G__10462;
      continue;
    } else {
    }
    break;
  }
  var G__10459 = args10454.length;
  switch(G__10459) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10454.slice(2), 0, null);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq10455) {
  var G__10456 = cljs.core.first(seq10455);
  var seq10455__$1 = cljs.core.next(seq10455);
  var G__10457 = cljs.core.first(seq10455__$1);
  var seq10455__$2 = cljs.core.next(seq10455__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__10456, G__10457, seq10455__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args10464 = [];
  var len__8523__auto___10470 = arguments.length;
  var i__8524__auto___10471 = 0;
  while (true) {
    if (i__8524__auto___10471 < len__8523__auto___10470) {
      args10464.push(arguments[i__8524__auto___10471]);
      var G__10472 = i__8524__auto___10471 + 1;
      i__8524__auto___10471 = G__10472;
      continue;
    } else {
    }
    break;
  }
  var G__10469 = args10464.length;
  switch(G__10469) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10464.slice(2), 0, null);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq10465) {
  var G__10466 = cljs.core.first(seq10465);
  var seq10465__$1 = cljs.core.next(seq10465);
  var G__10467 = cljs.core.first(seq10465__$1);
  var seq10465__$2 = cljs.core.next(seq10465__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__10466, G__10467, seq10465__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args10474 = [];
  var len__8523__auto___10480 = arguments.length;
  var i__8524__auto___10481 = 0;
  while (true) {
    if (i__8524__auto___10481 < len__8523__auto___10480) {
      args10474.push(arguments[i__8524__auto___10481]);
      var G__10482 = i__8524__auto___10481 + 1;
      i__8524__auto___10481 = G__10482;
      continue;
    } else {
    }
    break;
  }
  var G__10479 = args10474.length;
  switch(G__10479) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10474.slice(2), 0, null);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq10475) {
  var G__10476 = cljs.core.first(seq10475);
  var seq10475__$1 = cljs.core.next(seq10475);
  var G__10477 = cljs.core.first(seq10475__$1);
  var seq10475__$2 = cljs.core.next(seq10475__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__10476, G__10477, seq10475__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args10484 = [];
  var len__8523__auto___10490 = arguments.length;
  var i__8524__auto___10491 = 0;
  while (true) {
    if (i__8524__auto___10491 < len__8523__auto___10490) {
      args10484.push(arguments[i__8524__auto___10491]);
      var G__10492 = i__8524__auto___10491 + 1;
      i__8524__auto___10491 = G__10492;
      continue;
    } else {
    }
    break;
  }
  var G__10489 = args10484.length;
  switch(G__10489) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10484.slice(2), 0, null);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__10494 = y;
        var G__10495 = cljs.core.first(more);
        var G__10496 = cljs.core.next(more);
        x = G__10494;
        y = G__10495;
        more = G__10496;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq10485) {
  var G__10486 = cljs.core.first(seq10485);
  var seq10485__$1 = cljs.core.next(seq10485);
  var G__10487 = cljs.core.first(seq10485__$1);
  var seq10485__$2 = cljs.core.next(seq10485__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10486, G__10487, seq10485__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(x) {
  return x > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(x) {
  return x === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__10497 = n__$1 - 1;
      var G__10498 = cljs.core.next(xs);
      n__$1 = G__10497;
      xs = G__10498;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args10499 = [];
  var len__8523__auto___10504 = arguments.length;
  var i__8524__auto___10505 = 0;
  while (true) {
    if (i__8524__auto___10505 < len__8523__auto___10504) {
      args10499.push(arguments[i__8524__auto___10505]);
      var G__10506 = i__8524__auto___10505 + 1;
      i__8524__auto___10505 = G__10506;
      continue;
    } else {
    }
    break;
  }
  var G__10503 = args10499.length;
  switch(G__10503) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10499.slice(1), 0, null);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8542__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__10508 = sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more))].join(""));
      var G__10509 = cljs.core.next(more);
      sb = G__10508;
      more = G__10509;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq10500) {
  var G__10501 = cljs.core.first(seq10500);
  var seq10500__$1 = cljs.core.next(seq10500);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__10501, seq10500__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args10510 = [];
  var len__8523__auto___10513 = arguments.length;
  var i__8524__auto___10514 = 0;
  while (true) {
    if (i__8524__auto___10514 < len__8523__auto___10513) {
      args10510.push(arguments[i__8524__auto___10514]);
      var G__10515 = i__8524__auto___10514 + 1;
      i__8524__auto___10514 = G__10515;
      continue;
    } else {
    }
    break;
  }
  var G__10512 = args10510.length;
  switch(G__10512) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10510.length)].join(""));
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__10517 = cljs.core.next(xs);
            var G__10518 = cljs.core.next(ys);
            xs = G__10517;
            ys = G__10518;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__10519 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__10520 = cljs.core.next(s);
        res = G__10519;
        s = G__10520;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__10521 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__10522 = cljs.core.next(s);
      h = G__10521;
      s = G__10522;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__10523 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__10524 = cljs.core.next(s__$1);
      h = G__10523;
      s__$1 = G__10524;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__10535_10545 = cljs.core.seq(fn_map);
  var chunk__10536_10546 = null;
  var count__10537_10547 = 0;
  var i__10538_10548 = 0;
  while (true) {
    if (i__10538_10548 < count__10537_10547) {
      var vec__10539_10549 = chunk__10536_10546.cljs$core$IIndexed$_nth$arity$2(null, i__10538_10548);
      var key_name_10550 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10539_10549, 0, null);
      var f_10551 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10539_10549, 1, null);
      var str_name_10552 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_10550) : cljs.core.name.call(null, key_name_10550);
      obj[str_name_10552] = f_10551;
      var G__10553 = seq__10535_10545;
      var G__10554 = chunk__10536_10546;
      var G__10555 = count__10537_10547;
      var G__10556 = i__10538_10548 + 1;
      seq__10535_10545 = G__10553;
      chunk__10536_10546 = G__10554;
      count__10537_10547 = G__10555;
      i__10538_10548 = G__10556;
      continue;
    } else {
      var temp__4657__auto___10557 = cljs.core.seq(seq__10535_10545);
      if (temp__4657__auto___10557) {
        var seq__10535_10558__$1 = temp__4657__auto___10557;
        if (cljs.core.chunked_seq_QMARK_(seq__10535_10558__$1)) {
          var c__8229__auto___10559 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__10535_10558__$1) : cljs.core.chunk_first.call(null, seq__10535_10558__$1);
          var G__10560 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__10535_10558__$1) : cljs.core.chunk_rest.call(null, seq__10535_10558__$1);
          var G__10561 = c__8229__auto___10559;
          var G__10562 = cljs.core.count(c__8229__auto___10559);
          var G__10563 = 0;
          seq__10535_10545 = G__10560;
          chunk__10536_10546 = G__10561;
          count__10537_10547 = G__10562;
          i__10538_10548 = G__10563;
          continue;
        } else {
          var vec__10542_10564 = cljs.core.first(seq__10535_10558__$1);
          var key_name_10565 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10542_10564, 0, null);
          var f_10566 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10542_10564, 1, null);
          var str_name_10567 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_10565) : cljs.core.name.call(null, key_name_10565);
          obj[str_name_10567] = f_10566;
          var G__10568 = cljs.core.next(seq__10535_10558__$1);
          var G__10569 = null;
          var G__10570 = 0;
          var G__10571 = 0;
          seq__10535_10545 = G__10568;
          chunk__10536_10546 = G__10569;
          count__10537_10547 = G__10570;
          i__10538_10548 = G__10571;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.indexOf = function() {
  var G__10572 = null;
  var G__10572__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10572__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10572 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10572__1.call(this, x);
      case 2:
        return G__10572__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10572.cljs$core$IFn$_invoke$arity$1 = G__10572__1;
  G__10572.cljs$core$IFn$_invoke$arity$2 = G__10572__2;
  return G__10572;
}();
cljs.core.List.prototype.lastIndexOf = function() {
  var G__10573 = null;
  var G__10573__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count);
  };
  var G__10573__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10573 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10573__1.call(this, x);
      case 2:
        return G__10573__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10573.cljs$core$IFn$_invoke$arity$1 = G__10573__1;
  G__10573.cljs$core$IFn$_invoke$arity$2 = G__10573__2;
  return G__10573;
}();
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ISeq$_rest$arity$1(null);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.indexOf = function() {
  var G__10576 = null;
  var G__10576__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10576__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10576 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10576__1.call(this, x);
      case 2:
        return G__10576__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10576.cljs$core$IFn$_invoke$arity$1 = G__10576__1;
  G__10576.cljs$core$IFn$_invoke$arity$2 = G__10576__2;
  return G__10576;
}();
cljs.core.EmptyList.prototype.lastIndexOf = function() {
  var G__10577 = null;
  var G__10577__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10577__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10577 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10577__1.call(this, x);
      case 2:
        return G__10577__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10577.cljs$core$IFn$_invoke$arity$1 = G__10577__1;
  G__10577.cljs$core$IFn$_invoke$arity$2 = G__10577__2;
  return G__10577;
}();
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(rev) {
  return cljs.core._rseq(rev);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___10581 = arguments.length;
  var i__8524__auto___10582 = 0;
  while (true) {
    if (i__8524__auto___10582 < len__8523__auto___10581) {
      args__8530__auto__.push(arguments[i__8524__auto___10582]);
      var G__10583 = i__8524__auto___10582 + 1;
      i__8524__auto___10582 = G__10583;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__10584 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__10584;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__10585 = i - 1;
      var G__10586 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__10585;
      r = G__10586;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq10580) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10580));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.indexOf = function() {
  var G__10587 = null;
  var G__10587__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10587__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10587 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10587__1.call(this, x);
      case 2:
        return G__10587__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10587.cljs$core$IFn$_invoke$arity$1 = G__10587__1;
  G__10587.cljs$core$IFn$_invoke$arity$2 = G__10587__2;
  return G__10587;
}();
cljs.core.Cons.prototype.lastIndexOf = function() {
  var G__10588 = null;
  var G__10588__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10588__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10588 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10588__1.call(this, x);
      case 2:
        return G__10588__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10588.cljs$core$IFn$_invoke$arity$1 = G__10588__1;
  G__10588.cljs$core$IFn$_invoke$arity$2 = G__10588__2;
  return G__10588;
}();
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, null);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.Symbol(null, "rest", "rest", 398835108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__7410__auto__ = coll == null;
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = cljs.core.not(a.ns);
      if (and__7398__auto__) {
        return b.ns;
      } else {
        return and__7398__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__10599 = a.ns;
            var G__10600 = b.ns;
            return goog.array.defaultCompare(G__10599, G__10600);
          }();
          if (0 === nsc) {
            var G__10601 = a.name;
            var G__10602 = b.name;
            return goog.array.defaultCompare(G__10601, G__10602);
          } else {
            return nsc;
          }
        }
      } else {
        var G__10603 = a.name;
        var G__10604 = b.name;
        return goog.array.defaultCompare(G__10603, G__10604);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__10606 = null;
  var G__10606__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__10606__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__10606 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10606__2.call(this, self__, coll);
      case 3:
        return G__10606__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10606.cljs$core$IFn$_invoke$arity$2 = G__10606__2;
  G__10606.cljs$core$IFn$_invoke$arity$3 = G__10606__3;
  return G__10606;
}();
cljs.core.Keyword.prototype.apply = function(self__, args10605) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10605)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__7850__auto__ = self__._hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "fqn", "fqn", -1749334463, null), cljs.core.with_meta(new cljs.core.Symbol(null, "_hash", "_hash", -2130838312, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Doesn't support namespace: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
  }
};
cljs.core.ident_QMARK_ = function cljs$core$ident_QMARK_(x) {
  return x instanceof cljs.core.Keyword || x instanceof cljs.core.Symbol;
};
cljs.core.simple_ident_QMARK_ = function cljs$core$simple_ident_QMARK_(x) {
  return cljs.core.ident_QMARK_(x) && cljs.core.namespace(x) == null;
};
cljs.core.qualified_ident_QMARK_ = function cljs$core$qualified_ident_QMARK_(x) {
  var and__7398__auto__ = cljs.core.ident_QMARK_(x);
  if (and__7398__auto__) {
    var and__7398__auto____$1 = cljs.core.namespace(x);
    if (cljs.core.truth_(and__7398__auto____$1)) {
      return true;
    } else {
      return and__7398__auto____$1;
    }
  } else {
    return and__7398__auto__;
  }
};
cljs.core.simple_symbol_QMARK_ = function cljs$core$simple_symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol && cljs.core.namespace(x) == null;
};
cljs.core.qualified_symbol_QMARK_ = function cljs$core$qualified_symbol_QMARK_(x) {
  var and__7398__auto__ = x instanceof cljs.core.Symbol;
  if (and__7398__auto__) {
    var and__7398__auto____$1 = cljs.core.namespace(x);
    if (cljs.core.truth_(and__7398__auto____$1)) {
      return true;
    } else {
      return and__7398__auto____$1;
    }
  } else {
    return and__7398__auto__;
  }
};
cljs.core.simple_keyword_QMARK_ = function cljs$core$simple_keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword && cljs.core.namespace(x) == null;
};
cljs.core.qualified_keyword_QMARK_ = function cljs$core$qualified_keyword_QMARK_(x) {
  var and__7398__auto__ = x instanceof cljs.core.Keyword;
  if (and__7398__auto__) {
    var and__7398__auto____$1 = cljs.core.namespace(x);
    if (cljs.core.truth_(and__7398__auto____$1)) {
      return true;
    } else {
      return and__7398__auto____$1;
    }
  } else {
    return and__7398__auto__;
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args10609 = [];
  var len__8523__auto___10612 = arguments.length;
  var i__8524__auto___10613 = 0;
  while (true) {
    if (i__8524__auto___10613 < len__8523__auto___10612) {
      args10609.push(arguments[i__8524__auto___10613]);
      var G__10614 = i__8524__auto___10613 + 1;
      i__8524__auto___10613 = G__10614;
      continue;
    } else {
    }
    break;
  }
  var G__10611 = args10609.length;
  switch(G__10611) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10609.length)].join(""));
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var ns__$1 = ns instanceof cljs.core.Keyword ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null, ns) : ns instanceof cljs.core.Symbol ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null, ns) : ns;
  var name__$1 = name instanceof cljs.core.Keyword ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name) : name instanceof cljs.core.Symbol ? cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name) : name;
  return new cljs.core.Keyword(ns__$1, name__$1, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns__$1) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/")].join("") : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$1)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.indexOf = function() {
  var G__10616 = null;
  var G__10616__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10616__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10616 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10616__1.call(this, x);
      case 2:
        return G__10616__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10616.cljs$core$IFn$_invoke$arity$1 = G__10616__1;
  G__10616.cljs$core$IFn$_invoke$arity$2 = G__10616__2;
  return G__10616;
}();
cljs.core.LazySeq.prototype.lastIndexOf = function() {
  var G__10617 = null;
  var G__10617__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10617__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10617 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10617__1.call(this, x);
      case 2:
        return G__10617__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10617.cljs$core$IFn$_invoke$arity$1 = G__10617__1;
  G__10617.cljs$core$IFn$_invoke$arity$2 = G__10617__2;
  return G__10617;
}();
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.not(self__.fn);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__10618 = ls.sval();
        ls = G__10618;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "fn", "fn", 465265323, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args10619 = [];
  var len__8523__auto___10622 = arguments.length;
  var i__8524__auto___10623 = 0;
  while (true) {
    if (i__8524__auto___10623 < len__8523__auto___10622) {
      args10619.push(arguments[i__8524__auto___10623]);
      var G__10624 = i__8524__auto___10623 + 1;
      i__8524__auto___10623 = G__10624;
      continue;
    } else {
    }
    break;
  }
  var G__10621 = args10619.length;
  switch(G__10621) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10619.length)].join(""));
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.indexOf = function() {
  var G__10626 = null;
  var G__10626__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10626__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10626 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10626__1.call(this, x);
      case 2:
        return G__10626__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10626.cljs$core$IFn$_invoke$arity$1 = G__10626__1;
  G__10626.cljs$core$IFn$_invoke$arity$2 = G__10626__2;
  return G__10626;
}();
cljs.core.ChunkedCons.prototype.lastIndexOf = function() {
  var G__10627 = null;
  var G__10627__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10627__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10627 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10627__1.call(this, x);
      case 2:
        return G__10627__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10627.cljs$core$IFn$_invoke$arity$1 = G__10627__1;
  G__10627.cljs$core$IFn$_invoke$arity$2 = G__10627__2;
  return G__10627;
}();
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "chunk", "chunk", 449371907, null), new cljs.core.Symbol(null, "more", "more", -418290273, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || cljs.core.PROTOCOL_SENTINEL === s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__10630 = cljs.core.next(s__$1);
      s__$1 = G__10630;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_10631 = 0;
  var xs_10632 = cljs.core.seq(coll);
  while (true) {
    if (xs_10632) {
      ret[i_10631] = cljs.core.to_array(cljs.core.first(xs_10632));
      var G__10633 = i_10631 + 1;
      var G__10634 = cljs.core.next(xs_10632);
      i_10631 = G__10633;
      xs_10632 = G__10634;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args10635 = [];
  var len__8523__auto___10638 = arguments.length;
  var i__8524__auto___10639 = 0;
  while (true) {
    if (i__8524__auto___10639 < len__8523__auto___10638) {
      args10635.push(arguments[i__8524__auto___10639]);
      var G__10640 = i__8524__auto___10639 + 1;
      i__8524__auto___10639 = G__10640;
      continue;
    } else {
    }
    break;
  }
  var G__10637 = args10635.length;
  switch(G__10637) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10635.length)].join(""));
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10642 = i + 1;
        var G__10643 = cljs.core.next(s__$1);
        i = G__10642;
        s__$1 = G__10643;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8333__auto___10644 = size;
    var i_10645 = 0;
    while (true) {
      if (i_10645 < n__8333__auto___10644) {
        a[i_10645] = init_val_or_seq;
        var G__10646 = i_10645 + 1;
        i_10645 = G__10646;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args10647 = [];
  var len__8523__auto___10650 = arguments.length;
  var i__8524__auto___10651 = 0;
  while (true) {
    if (i__8524__auto___10651 < len__8523__auto___10650) {
      args10647.push(arguments[i__8524__auto___10651]);
      var G__10652 = i__8524__auto___10651 + 1;
      i__8524__auto___10651 = G__10652;
      continue;
    } else {
    }
    break;
  }
  var G__10649 = args10647.length;
  switch(G__10649) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10647.length)].join(""));
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10654 = i + 1;
        var G__10655 = cljs.core.next(s__$1);
        i = G__10654;
        s__$1 = G__10655;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8333__auto___10656 = size;
    var i_10657 = 0;
    while (true) {
      if (i_10657 < n__8333__auto___10656) {
        a[i_10657] = init_val_or_seq;
        var G__10658 = i_10657 + 1;
        i_10657 = G__10658;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args10659 = [];
  var len__8523__auto___10662 = arguments.length;
  var i__8524__auto___10663 = 0;
  while (true) {
    if (i__8524__auto___10663 < len__8523__auto___10662) {
      args10659.push(arguments[i__8524__auto___10663]);
      var G__10664 = i__8524__auto___10663 + 1;
      i__8524__auto___10663 = G__10664;
      continue;
    } else {
    }
    break;
  }
  var G__10661 = args10659.length;
  switch(G__10661) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10659.length)].join(""));
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10666 = i + 1;
        var G__10667 = cljs.core.next(s__$1);
        i = G__10666;
        s__$1 = G__10667;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8333__auto___10668 = size;
    var i_10669 = 0;
    while (true) {
      if (i_10669 < n__8333__auto___10668) {
        a[i_10669] = init_val_or_seq;
        var G__10670 = i_10669 + 1;
        i_10669 = G__10670;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args10671 = [];
  var len__8523__auto___10674 = arguments.length;
  var i__8524__auto___10675 = 0;
  while (true) {
    if (i__8524__auto___10675 < len__8523__auto___10674) {
      args10671.push(arguments[i__8524__auto___10675]);
      var G__10676 = i__8524__auto___10675 + 1;
      i__8524__auto___10675 = G__10676;
      continue;
    } else {
    }
    break;
  }
  var G__10673 = args10671.length;
  switch(G__10673) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10671.length)].join(""));
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__10678 = i + 1;
        var G__10679 = cljs.core.next(s__$1);
        i = G__10678;
        s__$1 = G__10679;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__8333__auto___10680 = size;
    var i_10681 = 0;
    while (true) {
      if (i_10681 < n__8333__auto___10680) {
        a[i_10681] = init_val_or_seq;
        var G__10682 = i_10681 + 1;
        i_10681 = G__10682;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(n, coll) {
  if (cljs.core.counted_QMARK_(coll)) {
    return cljs.core.count(coll);
  } else {
    var i = 0;
    var s = cljs.core.seq(coll);
    while (true) {
      if (!(s == null) && i < n) {
        var G__10683 = i + 1;
        var G__10684 = cljs.core.next(s);
        i = G__10683;
        s = G__10684;
        continue;
      } else {
        return i;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), function() {
        var G__10686 = cljs.core.next(arglist);
        return cljs.core.spread.cljs$core$IFn$_invoke$arity$1 ? cljs.core.spread.cljs$core$IFn$_invoke$arity$1(G__10686) : cljs.core.spread.call(null, G__10686);
      }());
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args10687 = [];
  var len__8523__auto___10699 = arguments.length;
  var i__8524__auto___10700 = 0;
  while (true) {
    if (i__8524__auto___10700 < len__8523__auto___10699) {
      args10687.push(arguments[i__8524__auto___10700]);
      var G__10701 = i__8524__auto___10700 + 1;
      i__8524__auto___10700 = G__10701;
      continue;
    } else {
    }
    break;
  }
  var G__10692 = args10687.length;
  switch(G__10692) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10687.slice(2), 0, null);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq10688) {
  var G__10689 = cljs.core.first(seq10688);
  var seq10688__$1 = cljs.core.next(seq10688);
  var G__10690 = cljs.core.first(seq10688__$1);
  var seq10688__$2 = cljs.core.next(seq10688__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__10689, G__10690, seq10688__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args10703 = [];
  var len__8523__auto___10711 = arguments.length;
  var i__8524__auto___10712 = 0;
  while (true) {
    if (i__8524__auto___10712 < len__8523__auto___10711) {
      args10703.push(arguments[i__8524__auto___10712]);
      var G__10713 = i__8524__auto___10712 + 1;
      i__8524__auto___10712 = G__10713;
      continue;
    } else {
    }
    break;
  }
  var G__10710 = args10703.length;
  switch(G__10710) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10703.slice(4), 0, null);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8542__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq10704) {
  var G__10705 = cljs.core.first(seq10704);
  var seq10704__$1 = cljs.core.next(seq10704);
  var G__10706 = cljs.core.first(seq10704__$1);
  var seq10704__$2 = cljs.core.next(seq10704__$1);
  var G__10707 = cljs.core.first(seq10704__$2);
  var seq10704__$3 = cljs.core.next(seq10704__$2);
  var G__10708 = cljs.core.first(seq10704__$3);
  var seq10704__$4 = cljs.core.next(seq10704__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__10705, G__10706, G__10707, G__10708, seq10704__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args10715 = [];
  var len__8523__auto___10721 = arguments.length;
  var i__8524__auto___10722 = 0;
  while (true) {
    if (i__8524__auto___10722 < len__8523__auto___10721) {
      args10715.push(arguments[i__8524__auto___10722]);
      var G__10723 = i__8524__auto___10722 + 1;
      i__8524__auto___10722 = G__10723;
      continue;
    } else {
    }
    break;
  }
  var G__10720 = args10715.length;
  switch(G__10720) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10715.slice(2), 0, null);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(tcoll) {
  return tcoll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__10725 = ntcoll;
      var G__10726 = cljs.core.first(vals);
      var G__10727 = cljs.core.next(vals);
      tcoll = G__10725;
      val = G__10726;
      vals = G__10727;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq10716) {
  var G__10717 = cljs.core.first(seq10716);
  var seq10716__$1 = cljs.core.next(seq10716);
  var G__10718 = cljs.core.first(seq10716__$1);
  var seq10716__$2 = cljs.core.next(seq10716__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10717, G__10718, seq10716__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args10728 = [];
  var len__8523__auto___10735 = arguments.length;
  var i__8524__auto___10736 = 0;
  while (true) {
    if (i__8524__auto___10736 < len__8523__auto___10735) {
      args10728.push(arguments[i__8524__auto___10736]);
      var G__10737 = i__8524__auto___10736 + 1;
      i__8524__auto___10736 = G__10737;
      continue;
    } else {
    }
    break;
  }
  var G__10734 = args10728.length;
  switch(G__10734) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10728.slice(3), 0, null);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__10739 = ntcoll;
      var G__10740 = cljs.core.first(kvs);
      var G__10741 = cljs.core.second(kvs);
      var G__10742 = cljs.core.nnext(kvs);
      tcoll = G__10739;
      key = G__10740;
      val = G__10741;
      kvs = G__10742;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq10729) {
  var G__10730 = cljs.core.first(seq10729);
  var seq10729__$1 = cljs.core.next(seq10729);
  var G__10731 = cljs.core.first(seq10729__$1);
  var seq10729__$2 = cljs.core.next(seq10729__$1);
  var G__10732 = cljs.core.first(seq10729__$2);
  var seq10729__$3 = cljs.core.next(seq10729__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10730, G__10731, G__10732, seq10729__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args10743 = [];
  var len__8523__auto___10749 = arguments.length;
  var i__8524__auto___10750 = 0;
  while (true) {
    if (i__8524__auto___10750 < len__8523__auto___10749) {
      args10743.push(arguments[i__8524__auto___10750]);
      var G__10751 = i__8524__auto___10750 + 1;
      i__8524__auto___10750 = G__10751;
      continue;
    } else {
    }
    break;
  }
  var G__10748 = args10743.length;
  switch(G__10748) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10743.slice(2), 0, null);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__10753 = ntcoll;
      var G__10754 = cljs.core.first(ks);
      var G__10755 = cljs.core.next(ks);
      tcoll = G__10753;
      key = G__10754;
      ks = G__10755;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq10744) {
  var G__10745 = cljs.core.first(seq10744);
  var seq10744__$1 = cljs.core.next(seq10744);
  var G__10746 = cljs.core.first(seq10744__$1);
  var seq10744__$2 = cljs.core.next(seq10744__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10745, G__10746, seq10744__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args10756 = [];
  var len__8523__auto___10762 = arguments.length;
  var i__8524__auto___10763 = 0;
  while (true) {
    if (i__8524__auto___10763 < len__8523__auto___10762) {
      args10756.push(arguments[i__8524__auto___10763]);
      var G__10764 = i__8524__auto___10763 + 1;
      i__8524__auto___10763 = G__10764;
      continue;
    } else {
    }
    break;
  }
  var G__10761 = args10756.length;
  switch(G__10761) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10756.slice(2), 0, null);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__10766 = ntcoll;
      var G__10767 = cljs.core.first(vals);
      var G__10768 = cljs.core.next(vals);
      tcoll = G__10766;
      val = G__10767;
      vals = G__10768;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq10757) {
  var G__10758 = cljs.core.first(seq10757);
  var seq10757__$1 = cljs.core.next(seq10757);
  var G__10759 = cljs.core.first(seq10757__$1);
  var seq10757__$2 = cljs.core.next(seq10757__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10758, G__10759, seq10757__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a8377 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a8377);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a8377) : f.call(null, a8377);
      }
    } else {
      var b8378 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a8377, b8378);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a8377, b8378) : f.call(null, a8377, b8378);
        }
      } else {
        var c8379 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a8377, b8378, c8379);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a8377, b8378, c8379) : f.call(null, a8377, b8378, c8379);
          }
        } else {
          var d8380 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a8377, b8378, c8379, d8380);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a8377, b8378, c8379, d8380) : f.call(null, a8377, b8378, c8379, d8380);
            }
          } else {
            var e8381 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a8377, b8378, c8379, d8380, e8381);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a8377, b8378, c8379, d8380, e8381) : f.call(null, a8377, b8378, c8379, d8380, e8381);
              }
            } else {
              var f8382 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a8377, b8378, c8379, d8380, e8381, f8382);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a8377, b8378, c8379, d8380, e8381, f8382) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382);
                }
              } else {
                var g8383 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a8377, b8378, c8379, d8380, e8381, f8382, g8383);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a8377, b8378, c8379, d8380, e8381, f8382, g8383) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383);
                  }
                } else {
                  var h8384 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384);
                    }
                  } else {
                    var i8385 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385);
                      }
                    } else {
                      var j8386 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386);
                        }
                      } else {
                        var k8387 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387);
                          }
                        } else {
                          var l8388 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388);
                            }
                          } else {
                            var m8389 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389);
                              }
                            } else {
                              var n8390 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390);
                                }
                              } else {
                                var o8391 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391);
                                  }
                                } else {
                                  var p8392 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392);
                                    }
                                  } else {
                                    var q8393 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393);
                                      }
                                    } else {
                                      var r8394 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394);
                                        }
                                      } else {
                                        var s8395 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394, s8395);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394, s8395) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394, s8395);
                                          }
                                        } else {
                                          var t8396 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394, s8395, t8396);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394, s8395, t8396) : f.call(null, a8377, b8378, c8379, d8380, e8381, f8382, g8383, h8384, i8385, j8386, k8387, l8388, m8389, n8390, o8391, p8392, q8393, r8394, s8395, t8396);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args10769 = [];
  var len__8523__auto___10778 = arguments.length;
  var i__8524__auto___10779 = 0;
  while (true) {
    if (i__8524__auto___10779 < len__8523__auto___10778) {
      args10769.push(arguments[i__8524__auto___10779]);
      var G__10780 = i__8524__auto___10779 + 1;
      i__8524__auto___10779 = G__10780;
      continue;
    } else {
    }
    break;
  }
  var G__10777 = args10769.length;
  switch(G__10777) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10769.slice(5), 0, null);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__8542__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, args);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(fixed_arity + 1, arglist);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq10770) {
  var G__10771 = cljs.core.first(seq10770);
  var seq10770__$1 = cljs.core.next(seq10770);
  var G__10772 = cljs.core.first(seq10770__$1);
  var seq10770__$2 = cljs.core.next(seq10770__$1);
  var G__10773 = cljs.core.first(seq10770__$2);
  var seq10770__$3 = cljs.core.next(seq10770__$2);
  var G__10774 = cljs.core.first(seq10770__$3);
  var seq10770__$4 = cljs.core.next(seq10770__$3);
  var G__10775 = cljs.core.first(seq10770__$4);
  var seq10770__$5 = cljs.core.next(seq10770__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__10771, G__10772, G__10773, G__10774, G__10775, seq10770__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args10782 = [];
  var len__8523__auto___10807 = arguments.length;
  var i__8524__auto___10808 = 0;
  while (true) {
    if (i__8524__auto___10808 < len__8523__auto___10807) {
      args10782.push(arguments[i__8524__auto___10808]);
      var G__10809 = i__8524__auto___10808 + 1;
      i__8524__auto___10808 = G__10809;
      continue;
    } else {
    }
    break;
  }
  var G__10791 = args10782.length;
  switch(G__10791) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10782.slice(6), 0, null);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8542__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__10792 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10792) : f.call(null, G__10792);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__10793 = cljs.core.meta(obj);
    var G__10794 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10793, G__10794) : f.call(null, G__10793, G__10794);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__10795 = cljs.core.meta(obj);
    var G__10796 = a;
    var G__10797 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10795, G__10796, G__10797) : f.call(null, G__10795, G__10796, G__10797);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__10798 = cljs.core.meta(obj);
    var G__10799 = a;
    var G__10800 = b;
    var G__10801 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__10798, G__10799, G__10800, G__10801) : f.call(null, G__10798, G__10799, G__10800, G__10801);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__10802 = cljs.core.meta(obj);
    var G__10803 = a;
    var G__10804 = b;
    var G__10805 = c;
    var G__10806 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__10802, G__10803, G__10804, G__10805, G__10806) : f.call(null, G__10802, G__10803, G__10804, G__10805, G__10806);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq10783) {
  var G__10784 = cljs.core.first(seq10783);
  var seq10783__$1 = cljs.core.next(seq10783);
  var G__10785 = cljs.core.first(seq10783__$1);
  var seq10783__$2 = cljs.core.next(seq10783__$1);
  var G__10786 = cljs.core.first(seq10783__$2);
  var seq10783__$3 = cljs.core.next(seq10783__$2);
  var G__10787 = cljs.core.first(seq10783__$3);
  var seq10783__$4 = cljs.core.next(seq10783__$3);
  var G__10788 = cljs.core.first(seq10783__$4);
  var seq10783__$5 = cljs.core.next(seq10783__$4);
  var G__10789 = cljs.core.first(seq10783__$5);
  var seq10783__$6 = cljs.core.next(seq10783__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__10784, G__10785, G__10786, G__10787, G__10788, G__10789, seq10783__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args10811 = [];
  var len__8523__auto___10817 = arguments.length;
  var i__8524__auto___10818 = 0;
  while (true) {
    if (i__8524__auto___10818 < len__8523__auto___10817) {
      args10811.push(arguments[i__8524__auto___10818]);
      var G__10819 = i__8524__auto___10818 + 1;
      i__8524__auto___10818 = G__10819;
      continue;
    } else {
    }
    break;
  }
  var G__10816 = args10811.length;
  switch(G__10816) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10811.slice(2), 0, null);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq10812) {
  var G__10813 = cljs.core.first(seq10812);
  var seq10812__$1 = cljs.core.next(seq10812);
  var G__10814 = cljs.core.first(seq10812__$1);
  var seq10812__$2 = cljs.core.next(seq10812__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__10813, G__10814, seq10812__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core10824 !== "undefined") {
  } else {
    cljs.core.t_cljs$core10824 = function(meta10825) {
      this.meta10825 = meta10825;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core10824.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_10826, meta10825__$1) {
      var self__ = this;
      var _10826__$1 = this;
      return new cljs.core.t_cljs$core10824(meta10825__$1);
    };
    cljs.core.t_cljs$core10824.prototype.cljs$core$IMeta$_meta$arity$1 = function(_10826) {
      var self__ = this;
      var _10826__$1 = this;
      return self__.meta10825;
    };
    cljs.core.t_cljs$core10824.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core10824.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core10824.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core10824.getBasis = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta10825", "meta10825", 994335629, null)], null);
    };
    cljs.core.t_cljs$core10824.cljs$lang$type = true;
    cljs.core.t_cljs$core10824.cljs$lang$ctorStr = "cljs.core/t_cljs$core10824";
    cljs.core.t_cljs$core10824.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
      return cljs.core._write(writer__8022__auto__, "cljs.core/t_cljs$core10824");
    };
    cljs.core.__GT_t_cljs$core10824 = function cljs$core$nil_iter_$___GT_t_cljs$core10824(meta10825) {
      return new cljs.core.t_cljs$core10824(meta10825);
    };
  }
  return new cljs.core.t_cljs$core10824(cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (!this$.hasNext()) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "_seq", "_seq", -449557847, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "_next", "_next", 101877036, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.iterable_QMARK_(coll)) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot create iterator from "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = !(lt.stepper == null);
      if (and__7398__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__7398__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__10827 = lt;
        var G__10828 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__10827, G__10828) : self__.xform.call(null, G__10827, G__10828);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (!iter.hasNext()) {
        return false;
      } else {
        var G__10829 = cljs.core.next(iters__$1);
        iters__$1 = G__10829;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__8333__auto___10830 = self__.iters.length;
  var i_10831 = 0;
  while (true) {
    if (i_10831 < n__8333__auto___10830) {
      self__.nexts[i_10831] = self__.iters[i_10831].next();
      var G__10832 = i_10831 + 1;
      i_10831 = G__10832;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = !(lt.stepper == null);
      if (and__7398__auto__) {
        return this$.hasNext();
      } else {
        return and__7398__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "iters", "iters", 719353031, null), new cljs.core.Symbol(null, "nexts", "nexts", -1683579407, null)], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args10833 = [];
  var len__8523__auto___10836 = arguments.length;
  var i__8524__auto___10837 = 0;
  while (true) {
    if (i__8524__auto___10837 < len__8523__auto___10836) {
      args10833.push(arguments[i__8524__auto___10837]);
      var G__10838 = i__8524__auto___10837 + 1;
      i__8524__auto___10837 = G__10838;
      continue;
    } else {
    }
    break;
  }
  var G__10835 = args10833.length;
  switch(G__10835) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10833.length)].join(""));
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31850700;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.indexOf = function() {
  var G__10840 = null;
  var G__10840__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__10840__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10840 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10840__1.call(this, x);
      case 2:
        return G__10840__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10840.cljs$core$IFn$_invoke$arity$1 = G__10840__1;
  G__10840.cljs$core$IFn$_invoke$arity$2 = G__10840__2;
  return G__10840;
}();
cljs.core.LazyTransformer.prototype.lastIndexOf = function() {
  var G__10841 = null;
  var G__10841__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__10841__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__10841 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__10841__1.call(this, x);
      case 2:
        return G__10841__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__10841.cljs$core$IFn$_invoke$arity$1 = G__10841__1;
  G__10841.cljs$core$IFn$_invoke$arity$2 = G__10841__2;
  return G__10841;
}();
cljs.core.LazyTransformer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1.cljs$core$ISeqable$_seq$arity$1(null));
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "stepper", "stepper", 1159163296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "first", "first", 996428481, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  cljs.core.with_meta(new cljs.core.Symbol(null, "rest", "rest", 398835108, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null)], null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__10842_10846 = cljs.core.seq(colls);
  var chunk__10843_10847 = null;
  var count__10844_10848 = 0;
  var i__10845_10849 = 0;
  while (true) {
    if (i__10845_10849 < count__10844_10848) {
      var coll_10850 = chunk__10843_10847.cljs$core$IIndexed$_nth$arity$2(null, i__10845_10849);
      iters.push(cljs.core.iter(coll_10850));
      var G__10851 = seq__10842_10846;
      var G__10852 = chunk__10843_10847;
      var G__10853 = count__10844_10848;
      var G__10854 = i__10845_10849 + 1;
      seq__10842_10846 = G__10851;
      chunk__10843_10847 = G__10852;
      count__10844_10848 = G__10853;
      i__10845_10849 = G__10854;
      continue;
    } else {
      var temp__4657__auto___10855 = cljs.core.seq(seq__10842_10846);
      if (temp__4657__auto___10855) {
        var seq__10842_10856__$1 = temp__4657__auto___10855;
        if (cljs.core.chunked_seq_QMARK_(seq__10842_10856__$1)) {
          var c__8229__auto___10857 = cljs.core.chunk_first(seq__10842_10856__$1);
          var G__10858 = cljs.core.chunk_rest(seq__10842_10856__$1);
          var G__10859 = c__8229__auto___10857;
          var G__10860 = cljs.core.count(c__8229__auto___10857);
          var G__10861 = 0;
          seq__10842_10846 = G__10858;
          chunk__10843_10847 = G__10859;
          count__10844_10848 = G__10860;
          i__10845_10849 = G__10861;
          continue;
        } else {
          var coll_10862 = cljs.core.first(seq__10842_10856__$1);
          iters.push(cljs.core.iter(coll_10862));
          var G__10863 = cljs.core.next(seq__10842_10856__$1);
          var G__10864 = null;
          var G__10865 = 0;
          var G__10866 = 0;
          seq__10842_10846 = G__10863;
          chunk__10843_10847 = G__10864;
          count__10844_10848 = G__10865;
          i__10845_10849 = G__10866;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args10867 = [];
  var len__8523__auto___10873 = arguments.length;
  var i__8524__auto___10874 = 0;
  while (true) {
    if (i__8524__auto___10874 < len__8523__auto___10873) {
      args10867.push(arguments[i__8524__auto___10874]);
      var G__10875 = i__8524__auto___10874 + 1;
      i__8524__auto___10874 = G__10875;
      continue;
    } else {
    }
    break;
  }
  var G__10872 = args10867.length;
  switch(G__10872) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10867.slice(2), 0, null);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__7410__auto__ = cljs.core.seq(coll);
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq10868) {
  var G__10869 = cljs.core.first(seq10868);
  var seq10868__$1 = cljs.core.next(seq10868);
  var G__10870 = cljs.core.first(seq10868__$1);
  var seq10868__$2 = cljs.core.next(seq10868__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__10869, G__10870, seq10868__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__10878 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10878) : pred.call(null, G__10878);
      }())) {
        var G__10879 = pred;
        var G__10880 = cljs.core.next(coll);
        pred = G__10879;
        coll = G__10880;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__7410__auto__ = function() {
        var G__10884 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10884) : pred.call(null, G__10884);
      }();
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var G__10885 = pred;
        var G__10886 = cljs.core.next(coll);
        pred = G__10885;
        coll = G__10886;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Argument must be an integer: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__10887 = null;
    var G__10887__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__10887__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__10887__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__10887__3 = function() {
      var G__10888__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__10888 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__10889__i = 0, G__10889__a = new Array(arguments.length - 2);
          while (G__10889__i < G__10889__a.length) {
            G__10889__a[G__10889__i] = arguments[G__10889__i + 2];
            ++G__10889__i;
          }
          zs = new cljs.core.IndexedSeq(G__10889__a, 0);
        }
        return G__10888__delegate.call(this, x, y, zs);
      };
      G__10888.cljs$lang$maxFixedArity = 2;
      G__10888.cljs$lang$applyTo = function(arglist__10890) {
        var x = cljs.core.first(arglist__10890);
        arglist__10890 = cljs.core.next(arglist__10890);
        var y = cljs.core.first(arglist__10890);
        var zs = cljs.core.rest(arglist__10890);
        return G__10888__delegate(x, y, zs);
      };
      G__10888.cljs$core$IFn$_invoke$arity$variadic = G__10888__delegate;
      return G__10888;
    }();
    G__10887 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__10887__0.call(this);
        case 1:
          return G__10887__1.call(this, x);
        case 2:
          return G__10887__2.call(this, x, y);
        default:
          var G__10891 = null;
          if (arguments.length > 2) {
            var G__10892__i = 0, G__10892__a = new Array(arguments.length - 2);
            while (G__10892__i < G__10892__a.length) {
              G__10892__a[G__10892__i] = arguments[G__10892__i + 2];
              ++G__10892__i;
            }
            G__10891 = new cljs.core.IndexedSeq(G__10892__a, 0);
          }
          return G__10887__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__10891);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10887.cljs$lang$maxFixedArity = 2;
    G__10887.cljs$lang$applyTo = G__10887__3.cljs$lang$applyTo;
    G__10887.cljs$core$IFn$_invoke$arity$0 = G__10887__0;
    G__10887.cljs$core$IFn$_invoke$arity$1 = G__10887__1;
    G__10887.cljs$core$IFn$_invoke$arity$2 = G__10887__2;
    G__10887.cljs$core$IFn$_invoke$arity$variadic = G__10887__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__10887;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__10893__delegate = function(args) {
      return x;
    };
    var G__10893 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__10894__i = 0, G__10894__a = new Array(arguments.length - 0);
        while (G__10894__i < G__10894__a.length) {
          G__10894__a[G__10894__i] = arguments[G__10894__i + 0];
          ++G__10894__i;
        }
        args = new cljs.core.IndexedSeq(G__10894__a, 0);
      }
      return G__10893__delegate.call(this, args);
    };
    G__10893.cljs$lang$maxFixedArity = 0;
    G__10893.cljs$lang$applyTo = function(arglist__10895) {
      var args = cljs.core.seq(arglist__10895);
      return G__10893__delegate(args);
    };
    G__10893.cljs$core$IFn$_invoke$arity$variadic = G__10893__delegate;
    return G__10893;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args10896 = [];
  var len__8523__auto___10918 = arguments.length;
  var i__8524__auto___10919 = 0;
  while (true) {
    if (i__8524__auto___10919 < len__8523__auto___10918) {
      args10896.push(arguments[i__8524__auto___10919]);
      var G__10920 = i__8524__auto___10919 + 1;
      i__8524__auto___10919 = G__10920;
      continue;
    } else {
    }
    break;
  }
  var G__10902 = args10896.length;
  switch(G__10902) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10896.slice(3), 0, null);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10922 = null;
    var G__10922__0 = function() {
      var G__10903 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10903) : f.call(null, G__10903);
    };
    var G__10922__1 = function(x) {
      var G__10904 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10904) : f.call(null, G__10904);
    };
    var G__10922__2 = function(x, y) {
      var G__10905 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10905) : f.call(null, G__10905);
    };
    var G__10922__3 = function(x, y, z) {
      var G__10906 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10906) : f.call(null, G__10906);
    };
    var G__10922__4 = function() {
      var G__10923__delegate = function(x, y, z, args) {
        var G__10907 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10907) : f.call(null, G__10907);
      };
      var G__10923 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10924__i = 0, G__10924__a = new Array(arguments.length - 3);
          while (G__10924__i < G__10924__a.length) {
            G__10924__a[G__10924__i] = arguments[G__10924__i + 3];
            ++G__10924__i;
          }
          args = new cljs.core.IndexedSeq(G__10924__a, 0);
        }
        return G__10923__delegate.call(this, x, y, z, args);
      };
      G__10923.cljs$lang$maxFixedArity = 3;
      G__10923.cljs$lang$applyTo = function(arglist__10925) {
        var x = cljs.core.first(arglist__10925);
        arglist__10925 = cljs.core.next(arglist__10925);
        var y = cljs.core.first(arglist__10925);
        arglist__10925 = cljs.core.next(arglist__10925);
        var z = cljs.core.first(arglist__10925);
        var args = cljs.core.rest(arglist__10925);
        return G__10923__delegate(x, y, z, args);
      };
      G__10923.cljs$core$IFn$_invoke$arity$variadic = G__10923__delegate;
      return G__10923;
    }();
    G__10922 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10922__0.call(this);
        case 1:
          return G__10922__1.call(this, x);
        case 2:
          return G__10922__2.call(this, x, y);
        case 3:
          return G__10922__3.call(this, x, y, z);
        default:
          var G__10926 = null;
          if (arguments.length > 3) {
            var G__10927__i = 0, G__10927__a = new Array(arguments.length - 3);
            while (G__10927__i < G__10927__a.length) {
              G__10927__a[G__10927__i] = arguments[G__10927__i + 3];
              ++G__10927__i;
            }
            G__10926 = new cljs.core.IndexedSeq(G__10927__a, 0);
          }
          return G__10922__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10926);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10922.cljs$lang$maxFixedArity = 3;
    G__10922.cljs$lang$applyTo = G__10922__4.cljs$lang$applyTo;
    G__10922.cljs$core$IFn$_invoke$arity$0 = G__10922__0;
    G__10922.cljs$core$IFn$_invoke$arity$1 = G__10922__1;
    G__10922.cljs$core$IFn$_invoke$arity$2 = G__10922__2;
    G__10922.cljs$core$IFn$_invoke$arity$3 = G__10922__3;
    G__10922.cljs$core$IFn$_invoke$arity$variadic = G__10922__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10922;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10928 = null;
    var G__10928__0 = function() {
      var G__10908 = function() {
        var G__10909 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10909) : g.call(null, G__10909);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10908) : f.call(null, G__10908);
    };
    var G__10928__1 = function(x) {
      var G__10910 = function() {
        var G__10911 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10911) : g.call(null, G__10911);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10910) : f.call(null, G__10910);
    };
    var G__10928__2 = function(x, y) {
      var G__10912 = function() {
        var G__10913 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10913) : g.call(null, G__10913);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10912) : f.call(null, G__10912);
    };
    var G__10928__3 = function(x, y, z) {
      var G__10914 = function() {
        var G__10915 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10915) : g.call(null, G__10915);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10914) : f.call(null, G__10914);
    };
    var G__10928__4 = function() {
      var G__10929__delegate = function(x, y, z, args) {
        var G__10916 = function() {
          var G__10917 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__10917) : g.call(null, G__10917);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10916) : f.call(null, G__10916);
      };
      var G__10929 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10930__i = 0, G__10930__a = new Array(arguments.length - 3);
          while (G__10930__i < G__10930__a.length) {
            G__10930__a[G__10930__i] = arguments[G__10930__i + 3];
            ++G__10930__i;
          }
          args = new cljs.core.IndexedSeq(G__10930__a, 0);
        }
        return G__10929__delegate.call(this, x, y, z, args);
      };
      G__10929.cljs$lang$maxFixedArity = 3;
      G__10929.cljs$lang$applyTo = function(arglist__10931) {
        var x = cljs.core.first(arglist__10931);
        arglist__10931 = cljs.core.next(arglist__10931);
        var y = cljs.core.first(arglist__10931);
        arglist__10931 = cljs.core.next(arglist__10931);
        var z = cljs.core.first(arglist__10931);
        var args = cljs.core.rest(arglist__10931);
        return G__10929__delegate(x, y, z, args);
      };
      G__10929.cljs$core$IFn$_invoke$arity$variadic = G__10929__delegate;
      return G__10929;
    }();
    G__10928 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10928__0.call(this);
        case 1:
          return G__10928__1.call(this, x);
        case 2:
          return G__10928__2.call(this, x, y);
        case 3:
          return G__10928__3.call(this, x, y, z);
        default:
          var G__10932 = null;
          if (arguments.length > 3) {
            var G__10933__i = 0, G__10933__a = new Array(arguments.length - 3);
            while (G__10933__i < G__10933__a.length) {
              G__10933__a[G__10933__i] = arguments[G__10933__i + 3];
              ++G__10933__i;
            }
            G__10932 = new cljs.core.IndexedSeq(G__10933__a, 0);
          }
          return G__10928__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10932);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10928.cljs$lang$maxFixedArity = 3;
    G__10928.cljs$lang$applyTo = G__10928__4.cljs$lang$applyTo;
    G__10928.cljs$core$IFn$_invoke$arity$0 = G__10928__0;
    G__10928.cljs$core$IFn$_invoke$arity$1 = G__10928__1;
    G__10928.cljs$core$IFn$_invoke$arity$2 = G__10928__2;
    G__10928.cljs$core$IFn$_invoke$arity$3 = G__10928__3;
    G__10928.cljs$core$IFn$_invoke$arity$variadic = G__10928__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10928;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__10934__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__10935 = cljs.core.first(fs__$2).call(null, ret);
            var G__10936 = cljs.core.next(fs__$2);
            ret = G__10935;
            fs__$2 = G__10936;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__10934 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10937__i = 0, G__10937__a = new Array(arguments.length - 0);
          while (G__10937__i < G__10937__a.length) {
            G__10937__a[G__10937__i] = arguments[G__10937__i + 0];
            ++G__10937__i;
          }
          args = new cljs.core.IndexedSeq(G__10937__a, 0);
        }
        return G__10934__delegate.call(this, args);
      };
      G__10934.cljs$lang$maxFixedArity = 0;
      G__10934.cljs$lang$applyTo = function(arglist__10938) {
        var args = cljs.core.seq(arglist__10938);
        return G__10934__delegate(args);
      };
      G__10934.cljs$core$IFn$_invoke$arity$variadic = G__10934__delegate;
      return G__10934;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq10897) {
  var G__10898 = cljs.core.first(seq10897);
  var seq10897__$1 = cljs.core.next(seq10897);
  var G__10899 = cljs.core.first(seq10897__$1);
  var seq10897__$2 = cljs.core.next(seq10897__$1);
  var G__10900 = cljs.core.first(seq10897__$2);
  var seq10897__$3 = cljs.core.next(seq10897__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__10898, G__10899, G__10900, seq10897__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args10939 = [];
  var len__8523__auto___10947 = arguments.length;
  var i__8524__auto___10948 = 0;
  while (true) {
    if (i__8524__auto___10948 < len__8523__auto___10947) {
      args10939.push(arguments[i__8524__auto___10948]);
      var G__10949 = i__8524__auto___10948 + 1;
      i__8524__auto___10948 = G__10949;
      continue;
    } else {
    }
    break;
  }
  var G__10946 = args10939.length;
  switch(G__10946) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args10939.slice(4), 0, null);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8542__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__10951 = null;
    var G__10951__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__10951__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__10951__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__10951__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__10951__4 = function() {
      var G__10952__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__10952 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10953__i = 0, G__10953__a = new Array(arguments.length - 3);
          while (G__10953__i < G__10953__a.length) {
            G__10953__a[G__10953__i] = arguments[G__10953__i + 3];
            ++G__10953__i;
          }
          args = new cljs.core.IndexedSeq(G__10953__a, 0);
        }
        return G__10952__delegate.call(this, x, y, z, args);
      };
      G__10952.cljs$lang$maxFixedArity = 3;
      G__10952.cljs$lang$applyTo = function(arglist__10954) {
        var x = cljs.core.first(arglist__10954);
        arglist__10954 = cljs.core.next(arglist__10954);
        var y = cljs.core.first(arglist__10954);
        arglist__10954 = cljs.core.next(arglist__10954);
        var z = cljs.core.first(arglist__10954);
        var args = cljs.core.rest(arglist__10954);
        return G__10952__delegate(x, y, z, args);
      };
      G__10952.cljs$core$IFn$_invoke$arity$variadic = G__10952__delegate;
      return G__10952;
    }();
    G__10951 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10951__0.call(this);
        case 1:
          return G__10951__1.call(this, x);
        case 2:
          return G__10951__2.call(this, x, y);
        case 3:
          return G__10951__3.call(this, x, y, z);
        default:
          var G__10955 = null;
          if (arguments.length > 3) {
            var G__10956__i = 0, G__10956__a = new Array(arguments.length - 3);
            while (G__10956__i < G__10956__a.length) {
              G__10956__a[G__10956__i] = arguments[G__10956__i + 3];
              ++G__10956__i;
            }
            G__10955 = new cljs.core.IndexedSeq(G__10956__a, 0);
          }
          return G__10951__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10955);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10951.cljs$lang$maxFixedArity = 3;
    G__10951.cljs$lang$applyTo = G__10951__4.cljs$lang$applyTo;
    G__10951.cljs$core$IFn$_invoke$arity$0 = G__10951__0;
    G__10951.cljs$core$IFn$_invoke$arity$1 = G__10951__1;
    G__10951.cljs$core$IFn$_invoke$arity$2 = G__10951__2;
    G__10951.cljs$core$IFn$_invoke$arity$3 = G__10951__3;
    G__10951.cljs$core$IFn$_invoke$arity$variadic = G__10951__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10951;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__10957 = null;
    var G__10957__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__10957__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__10957__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__10957__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__10957__4 = function() {
      var G__10958__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__10958 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10959__i = 0, G__10959__a = new Array(arguments.length - 3);
          while (G__10959__i < G__10959__a.length) {
            G__10959__a[G__10959__i] = arguments[G__10959__i + 3];
            ++G__10959__i;
          }
          args = new cljs.core.IndexedSeq(G__10959__a, 0);
        }
        return G__10958__delegate.call(this, x, y, z, args);
      };
      G__10958.cljs$lang$maxFixedArity = 3;
      G__10958.cljs$lang$applyTo = function(arglist__10960) {
        var x = cljs.core.first(arglist__10960);
        arglist__10960 = cljs.core.next(arglist__10960);
        var y = cljs.core.first(arglist__10960);
        arglist__10960 = cljs.core.next(arglist__10960);
        var z = cljs.core.first(arglist__10960);
        var args = cljs.core.rest(arglist__10960);
        return G__10958__delegate(x, y, z, args);
      };
      G__10958.cljs$core$IFn$_invoke$arity$variadic = G__10958__delegate;
      return G__10958;
    }();
    G__10957 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10957__0.call(this);
        case 1:
          return G__10957__1.call(this, x);
        case 2:
          return G__10957__2.call(this, x, y);
        case 3:
          return G__10957__3.call(this, x, y, z);
        default:
          var G__10961 = null;
          if (arguments.length > 3) {
            var G__10962__i = 0, G__10962__a = new Array(arguments.length - 3);
            while (G__10962__i < G__10962__a.length) {
              G__10962__a[G__10962__i] = arguments[G__10962__i + 3];
              ++G__10962__i;
            }
            G__10961 = new cljs.core.IndexedSeq(G__10962__a, 0);
          }
          return G__10957__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10961);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10957.cljs$lang$maxFixedArity = 3;
    G__10957.cljs$lang$applyTo = G__10957__4.cljs$lang$applyTo;
    G__10957.cljs$core$IFn$_invoke$arity$0 = G__10957__0;
    G__10957.cljs$core$IFn$_invoke$arity$1 = G__10957__1;
    G__10957.cljs$core$IFn$_invoke$arity$2 = G__10957__2;
    G__10957.cljs$core$IFn$_invoke$arity$3 = G__10957__3;
    G__10957.cljs$core$IFn$_invoke$arity$variadic = G__10957__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10957;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__10963 = null;
    var G__10963__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__10963__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__10963__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__10963__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__10963__4 = function() {
      var G__10964__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__10964 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10965__i = 0, G__10965__a = new Array(arguments.length - 3);
          while (G__10965__i < G__10965__a.length) {
            G__10965__a[G__10965__i] = arguments[G__10965__i + 3];
            ++G__10965__i;
          }
          args = new cljs.core.IndexedSeq(G__10965__a, 0);
        }
        return G__10964__delegate.call(this, x, y, z, args);
      };
      G__10964.cljs$lang$maxFixedArity = 3;
      G__10964.cljs$lang$applyTo = function(arglist__10966) {
        var x = cljs.core.first(arglist__10966);
        arglist__10966 = cljs.core.next(arglist__10966);
        var y = cljs.core.first(arglist__10966);
        arglist__10966 = cljs.core.next(arglist__10966);
        var z = cljs.core.first(arglist__10966);
        var args = cljs.core.rest(arglist__10966);
        return G__10964__delegate(x, y, z, args);
      };
      G__10964.cljs$core$IFn$_invoke$arity$variadic = G__10964__delegate;
      return G__10964;
    }();
    G__10963 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10963__0.call(this);
        case 1:
          return G__10963__1.call(this, x);
        case 2:
          return G__10963__2.call(this, x, y);
        case 3:
          return G__10963__3.call(this, x, y, z);
        default:
          var G__10967 = null;
          if (arguments.length > 3) {
            var G__10968__i = 0, G__10968__a = new Array(arguments.length - 3);
            while (G__10968__i < G__10968__a.length) {
              G__10968__a[G__10968__i] = arguments[G__10968__i + 3];
              ++G__10968__i;
            }
            G__10967 = new cljs.core.IndexedSeq(G__10968__a, 0);
          }
          return G__10963__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10967);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10963.cljs$lang$maxFixedArity = 3;
    G__10963.cljs$lang$applyTo = G__10963__4.cljs$lang$applyTo;
    G__10963.cljs$core$IFn$_invoke$arity$0 = G__10963__0;
    G__10963.cljs$core$IFn$_invoke$arity$1 = G__10963__1;
    G__10963.cljs$core$IFn$_invoke$arity$2 = G__10963__2;
    G__10963.cljs$core$IFn$_invoke$arity$3 = G__10963__3;
    G__10963.cljs$core$IFn$_invoke$arity$variadic = G__10963__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10963;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__10969__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__10969 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__10970__i = 0, G__10970__a = new Array(arguments.length - 0);
        while (G__10970__i < G__10970__a.length) {
          G__10970__a[G__10970__i] = arguments[G__10970__i + 0];
          ++G__10970__i;
        }
        args = new cljs.core.IndexedSeq(G__10970__a, 0);
      }
      return G__10969__delegate.call(this, args);
    };
    G__10969.cljs$lang$maxFixedArity = 0;
    G__10969.cljs$lang$applyTo = function(arglist__10971) {
      var args = cljs.core.seq(arglist__10971);
      return G__10969__delegate(args);
    };
    G__10969.cljs$core$IFn$_invoke$arity$variadic = G__10969__delegate;
    return G__10969;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq10940) {
  var G__10941 = cljs.core.first(seq10940);
  var seq10940__$1 = cljs.core.next(seq10940);
  var G__10942 = cljs.core.first(seq10940__$1);
  var seq10940__$2 = cljs.core.next(seq10940__$1);
  var G__10943 = cljs.core.first(seq10940__$2);
  var seq10940__$3 = cljs.core.next(seq10940__$2);
  var G__10944 = cljs.core.first(seq10940__$3);
  var seq10940__$4 = cljs.core.next(seq10940__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__10941, G__10942, G__10943, G__10944, seq10940__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args10972 = [];
  var len__8523__auto___10991 = arguments.length;
  var i__8524__auto___10992 = 0;
  while (true) {
    if (i__8524__auto___10992 < len__8523__auto___10991) {
      args10972.push(arguments[i__8524__auto___10992]);
      var G__10993 = i__8524__auto___10992 + 1;
      i__8524__auto___10992 = G__10993;
      continue;
    } else {
    }
    break;
  }
  var G__10974 = args10972.length;
  switch(G__10974) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args10972.length)].join(""));
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__10995 = null;
    var G__10995__1 = function(a) {
      var G__10975 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__10975) : f.call(null, G__10975);
    };
    var G__10995__2 = function(a, b) {
      var G__10976 = a == null ? x : a;
      var G__10977 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10976, G__10977) : f.call(null, G__10976, G__10977);
    };
    var G__10995__3 = function(a, b, c) {
      var G__10978 = a == null ? x : a;
      var G__10979 = b;
      var G__10980 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10978, G__10979, G__10980) : f.call(null, G__10978, G__10979, G__10980);
    };
    var G__10995__4 = function() {
      var G__10996__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__10996 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__10997__i = 0, G__10997__a = new Array(arguments.length - 3);
          while (G__10997__i < G__10997__a.length) {
            G__10997__a[G__10997__i] = arguments[G__10997__i + 3];
            ++G__10997__i;
          }
          ds = new cljs.core.IndexedSeq(G__10997__a, 0);
        }
        return G__10996__delegate.call(this, a, b, c, ds);
      };
      G__10996.cljs$lang$maxFixedArity = 3;
      G__10996.cljs$lang$applyTo = function(arglist__10998) {
        var a = cljs.core.first(arglist__10998);
        arglist__10998 = cljs.core.next(arglist__10998);
        var b = cljs.core.first(arglist__10998);
        arglist__10998 = cljs.core.next(arglist__10998);
        var c = cljs.core.first(arglist__10998);
        var ds = cljs.core.rest(arglist__10998);
        return G__10996__delegate(a, b, c, ds);
      };
      G__10996.cljs$core$IFn$_invoke$arity$variadic = G__10996__delegate;
      return G__10996;
    }();
    G__10995 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__10995__1.call(this, a);
        case 2:
          return G__10995__2.call(this, a, b);
        case 3:
          return G__10995__3.call(this, a, b, c);
        default:
          var G__10999 = null;
          if (arguments.length > 3) {
            var G__11000__i = 0, G__11000__a = new Array(arguments.length - 3);
            while (G__11000__i < G__11000__a.length) {
              G__11000__a[G__11000__i] = arguments[G__11000__i + 3];
              ++G__11000__i;
            }
            G__10999 = new cljs.core.IndexedSeq(G__11000__a, 0);
          }
          return G__10995__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__10999);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__10995.cljs$lang$maxFixedArity = 3;
    G__10995.cljs$lang$applyTo = G__10995__4.cljs$lang$applyTo;
    G__10995.cljs$core$IFn$_invoke$arity$1 = G__10995__1;
    G__10995.cljs$core$IFn$_invoke$arity$2 = G__10995__2;
    G__10995.cljs$core$IFn$_invoke$arity$3 = G__10995__3;
    G__10995.cljs$core$IFn$_invoke$arity$variadic = G__10995__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10995;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__11001 = null;
    var G__11001__2 = function(a, b) {
      var G__10981 = a == null ? x : a;
      var G__10982 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10981, G__10982) : f.call(null, G__10981, G__10982);
    };
    var G__11001__3 = function(a, b, c) {
      var G__10983 = a == null ? x : a;
      var G__10984 = b == null ? y : b;
      var G__10985 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10983, G__10984, G__10985) : f.call(null, G__10983, G__10984, G__10985);
    };
    var G__11001__4 = function() {
      var G__11002__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__11002 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__11003__i = 0, G__11003__a = new Array(arguments.length - 3);
          while (G__11003__i < G__11003__a.length) {
            G__11003__a[G__11003__i] = arguments[G__11003__i + 3];
            ++G__11003__i;
          }
          ds = new cljs.core.IndexedSeq(G__11003__a, 0);
        }
        return G__11002__delegate.call(this, a, b, c, ds);
      };
      G__11002.cljs$lang$maxFixedArity = 3;
      G__11002.cljs$lang$applyTo = function(arglist__11004) {
        var a = cljs.core.first(arglist__11004);
        arglist__11004 = cljs.core.next(arglist__11004);
        var b = cljs.core.first(arglist__11004);
        arglist__11004 = cljs.core.next(arglist__11004);
        var c = cljs.core.first(arglist__11004);
        var ds = cljs.core.rest(arglist__11004);
        return G__11002__delegate(a, b, c, ds);
      };
      G__11002.cljs$core$IFn$_invoke$arity$variadic = G__11002__delegate;
      return G__11002;
    }();
    G__11001 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__11001__2.call(this, a, b);
        case 3:
          return G__11001__3.call(this, a, b, c);
        default:
          var G__11005 = null;
          if (arguments.length > 3) {
            var G__11006__i = 0, G__11006__a = new Array(arguments.length - 3);
            while (G__11006__i < G__11006__a.length) {
              G__11006__a[G__11006__i] = arguments[G__11006__i + 3];
              ++G__11006__i;
            }
            G__11005 = new cljs.core.IndexedSeq(G__11006__a, 0);
          }
          return G__11001__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__11005);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__11001.cljs$lang$maxFixedArity = 3;
    G__11001.cljs$lang$applyTo = G__11001__4.cljs$lang$applyTo;
    G__11001.cljs$core$IFn$_invoke$arity$2 = G__11001__2;
    G__11001.cljs$core$IFn$_invoke$arity$3 = G__11001__3;
    G__11001.cljs$core$IFn$_invoke$arity$variadic = G__11001__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__11001;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__11007 = null;
    var G__11007__2 = function(a, b) {
      var G__10986 = a == null ? x : a;
      var G__10987 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10986, G__10987) : f.call(null, G__10986, G__10987);
    };
    var G__11007__3 = function(a, b, c) {
      var G__10988 = a == null ? x : a;
      var G__10989 = b == null ? y : b;
      var G__10990 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__10988, G__10989, G__10990) : f.call(null, G__10988, G__10989, G__10990);
    };
    var G__11007__4 = function() {
      var G__11008__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__11008 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__11009__i = 0, G__11009__a = new Array(arguments.length - 3);
          while (G__11009__i < G__11009__a.length) {
            G__11009__a[G__11009__i] = arguments[G__11009__i + 3];
            ++G__11009__i;
          }
          ds = new cljs.core.IndexedSeq(G__11009__a, 0);
        }
        return G__11008__delegate.call(this, a, b, c, ds);
      };
      G__11008.cljs$lang$maxFixedArity = 3;
      G__11008.cljs$lang$applyTo = function(arglist__11010) {
        var a = cljs.core.first(arglist__11010);
        arglist__11010 = cljs.core.next(arglist__11010);
        var b = cljs.core.first(arglist__11010);
        arglist__11010 = cljs.core.next(arglist__11010);
        var c = cljs.core.first(arglist__11010);
        var ds = cljs.core.rest(arglist__11010);
        return G__11008__delegate(a, b, c, ds);
      };
      G__11008.cljs$core$IFn$_invoke$arity$variadic = G__11008__delegate;
      return G__11008;
    }();
    G__11007 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__11007__2.call(this, a, b);
        case 3:
          return G__11007__3.call(this, a, b, c);
        default:
          var G__11011 = null;
          if (arguments.length > 3) {
            var G__11012__i = 0, G__11012__a = new Array(arguments.length - 3);
            while (G__11012__i < G__11012__a.length) {
              G__11012__a[G__11012__i] = arguments[G__11012__i + 3];
              ++G__11012__i;
            }
            G__11011 = new cljs.core.IndexedSeq(G__11012__a, 0);
          }
          return G__11007__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__11011);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__11007.cljs$lang$maxFixedArity = 3;
    G__11007.cljs$lang$applyTo = G__11007__4.cljs$lang$applyTo;
    G__11007.cljs$core$IFn$_invoke$arity$2 = G__11007__2;
    G__11007.cljs$core$IFn$_invoke$arity$3 = G__11007__3;
    G__11007.cljs$core$IFn$_invoke$arity$variadic = G__11007__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__11007;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args11013 = [];
  var len__8523__auto___11044 = arguments.length;
  var i__8524__auto___11045 = 0;
  while (true) {
    if (i__8524__auto___11045 < len__8523__auto___11044) {
      args11013.push(arguments[i__8524__auto___11045]);
      var G__11046 = i__8524__auto___11045 + 1;
      i__8524__auto___11045 = G__11046;
      continue;
    } else {
    }
    break;
  }
  var G__11015 = args11013.length;
  switch(G__11015) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11013.length)].join(""));
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__11048 = null;
        var G__11048__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11048__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11048__2 = function(result, input) {
          var G__11016 = result;
          var G__11017 = function() {
            var G__11018 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__11019 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11018, G__11019) : f.call(null, G__11018, G__11019);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__11016, G__11017) : rf.call(null, G__11016, G__11017);
        };
        G__11048 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11048__0.call(this);
            case 1:
              return G__11048__1.call(this, result);
            case 2:
              return G__11048__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11048.cljs$core$IFn$_invoke$arity$0 = G__11048__0;
        G__11048.cljs$core$IFn$_invoke$arity$1 = G__11048__1;
        G__11048.cljs$core$IFn$_invoke$arity$2 = G__11048__2;
        return G__11048;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__8333__auto___11049 = size;
          var i_11050 = 0;
          while (true) {
            if (i_11050 < n__8333__auto___11049) {
              cljs.core.chunk_append(b, function() {
                var G__11040 = idx + i_11050;
                var G__11041 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11050);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11040, G__11041) : f.call(null, G__11040, G__11041);
              }());
              var G__11051 = i_11050 + 1;
              i_11050 = G__11051;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__11042 = idx;
            var G__11043 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11042, G__11043) : f.call(null, G__11042, G__11043);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args11052 = [];
  var len__8523__auto___11057 = arguments.length;
  var i__8524__auto___11058 = 0;
  while (true) {
    if (i__8524__auto___11058 < len__8523__auto___11057) {
      args11052.push(arguments[i__8524__auto___11058]);
      var G__11059 = i__8524__auto___11058 + 1;
      i__8524__auto___11058 = G__11059;
      continue;
    } else {
    }
    break;
  }
  var G__11054 = args11052.length;
  switch(G__11054) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11052.length)].join(""));
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__11061 = null;
      var G__11061__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11061__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__11061__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__11061 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__11061__0.call(this);
          case 1:
            return G__11061__1.call(this, result);
          case 2:
            return G__11061__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__11061.cljs$core$IFn$_invoke$arity$0 = G__11061__0;
      G__11061.cljs$core$IFn$_invoke$arity$1 = G__11061__1;
      G__11061.cljs$core$IFn$_invoke$arity$2 = G__11061__2;
      return G__11061;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__8333__auto___11062 = size;
        var i_11063 = 0;
        while (true) {
          if (i_11063 < n__8333__auto___11062) {
            var x_11064 = function() {
              var G__11055 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11063);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11055) : f.call(null, G__11055);
            }();
            if (x_11064 == null) {
            } else {
              cljs.core.chunk_append(b, x_11064);
            }
            var G__11065 = i_11063 + 1;
            i_11063 = G__11065;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__11056 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11056) : f.call(null, G__11056);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11066 = cljs.core.seq(self__.watches);
  var chunk__11067 = null;
  var count__11068 = 0;
  var i__11069 = 0;
  while (true) {
    if (i__11069 < count__11068) {
      var vec__11070 = chunk__11067.cljs$core$IIndexed$_nth$arity$2(null, i__11069);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11070, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11070, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__11076 = seq__11066;
      var G__11077 = chunk__11067;
      var G__11078 = count__11068;
      var G__11079 = i__11069 + 1;
      seq__11066 = G__11076;
      chunk__11067 = G__11077;
      count__11068 = G__11078;
      i__11069 = G__11079;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11066);
      if (temp__4657__auto__) {
        var seq__11066__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11066__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__11066__$1);
          var G__11080 = cljs.core.chunk_rest(seq__11066__$1);
          var G__11081 = c__8229__auto__;
          var G__11082 = cljs.core.count(c__8229__auto__);
          var G__11083 = 0;
          seq__11066 = G__11080;
          chunk__11067 = G__11081;
          count__11068 = G__11082;
          i__11069 = G__11083;
          continue;
        } else {
          var vec__11073 = cljs.core.first(seq__11066__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11073, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11073, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__11084 = cljs.core.next(seq__11066__$1);
          var G__11085 = null;
          var G__11086 = 0;
          var G__11087 = 0;
          seq__11066 = G__11084;
          chunk__11067 = G__11085;
          count__11068 = G__11086;
          i__11069 = G__11087;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "validator", "validator", -325659154, null), new cljs.core.Symbol(null, "watches", "watches", 1367433992, null)], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args11088 = [];
  var len__8523__auto___11096 = arguments.length;
  var i__8524__auto___11097 = 0;
  while (true) {
    if (i__8524__auto___11097 < len__8523__auto___11096) {
      args11088.push(arguments[i__8524__auto___11097]);
      var G__11098 = i__8524__auto___11097 + 1;
      i__8524__auto___11097 = G__11098;
      continue;
    } else {
    }
    break;
  }
  var G__11092 = args11088.length;
  switch(G__11092) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11088.slice(1), 0, null);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8542__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__11093) {
  var map__11094 = p__11093;
  var map__11094__$1 = (!(map__11094 == null) ? map__11094.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__11094.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__11094) : map__11094;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11094__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__11094__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq11089) {
  var G__11090 = cljs.core.first(seq11089);
  var seq11089__$1 = cljs.core.next(seq11089);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__11090, seq11089__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error("Validator rejected reference state");
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args11100 = [];
  var len__8523__auto___11114 = arguments.length;
  var i__8524__auto___11115 = 0;
  while (true) {
    if (i__8524__auto___11115 < len__8523__auto___11114) {
      args11100.push(arguments[i__8524__auto___11115]);
      var G__11116 = i__8524__auto___11115 + 1;
      i__8524__auto___11115 = G__11116;
      continue;
    } else {
    }
    break;
  }
  var G__11107 = args11100.length;
  switch(G__11107) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11100.slice(4), 0, null);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8542__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__11108 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11108) : f.call(null, G__11108);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__11109 = a.state;
      var G__11110 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11109, G__11110) : f.call(null, G__11109, G__11110);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__11111 = a.state;
      var G__11112 = x;
      var G__11113 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11111, G__11112, G__11113) : f.call(null, G__11111, G__11112, G__11113);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq11101) {
  var G__11102 = cljs.core.first(seq11101);
  var seq11101__$1 = cljs.core.next(seq11101);
  var G__11103 = cljs.core.first(seq11101__$1);
  var seq11101__$2 = cljs.core.next(seq11101__$1);
  var G__11104 = cljs.core.first(seq11101__$2);
  var seq11101__$3 = cljs.core.next(seq11101__$2);
  var G__11105 = cljs.core.first(seq11101__$3);
  var seq11101__$4 = cljs.core.next(seq11101__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__11102, G__11103, G__11104, G__11105, seq11101__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "state", "state", -348086572, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args11118 = [];
  var len__8523__auto___11149 = arguments.length;
  var i__8524__auto___11150 = 0;
  while (true) {
    if (i__8524__auto___11150 < len__8523__auto___11149) {
      args11118.push(arguments[i__8524__auto___11150]);
      var G__11151 = i__8524__auto___11150 + 1;
      i__8524__auto___11150 = G__11151;
      continue;
    } else {
    }
    break;
  }
  var G__11120 = args11118.length;
  switch(G__11120) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11118.length)].join(""));
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__11153 = null;
        var G__11153__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11153__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11153__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__11153 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11153__0.call(this);
            case 1:
              return G__11153__1.call(this, result);
            case 2:
              return G__11153__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11153.cljs$core$IFn$_invoke$arity$0 = G__11153__0;
        G__11153.cljs$core$IFn$_invoke$arity$1 = G__11153__1;
        G__11153.cljs$core$IFn$_invoke$arity$2 = G__11153__2;
        return G__11153;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll__$1);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__8333__auto___11154 = size;
          var i_11155 = 0;
          while (true) {
            if (i_11155 < n__8333__auto___11154) {
              var x_11156 = function() {
                var G__11145 = idx + i_11155;
                var G__11146 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11155);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11145, G__11146) : f.call(null, G__11145, G__11146);
              }();
              if (x_11156 == null) {
              } else {
                cljs.core.chunk_append(b, x_11156);
              }
              var G__11157 = i_11155 + 1;
              i_11155 = G__11157;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__11147 = idx;
            var G__11148 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11147, G__11148) : f.call(null, G__11147, G__11148);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args11164 = [];
  var len__8523__auto___11171 = arguments.length;
  var i__8524__auto___11172 = 0;
  while (true) {
    if (i__8524__auto___11172 < len__8523__auto___11171) {
      args11164.push(arguments[i__8524__auto___11172]);
      var G__11173 = i__8524__auto___11172 + 1;
      i__8524__auto___11172 = G__11173;
      continue;
    } else {
    }
    break;
  }
  var G__11170 = args11164.length;
  switch(G__11170) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11164.slice(3), 0, null);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__11175__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__7398__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__7398__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__7398__auto__;
          }
        }());
      };
      var G__11175 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11176__i = 0, G__11176__a = new Array(arguments.length - 3);
          while (G__11176__i < G__11176__a.length) {
            G__11176__a[G__11176__i] = arguments[G__11176__i + 3];
            ++G__11176__i;
          }
          args = new cljs.core.IndexedSeq(G__11176__a, 0);
        }
        return G__11175__delegate.call(this, x, y, z, args);
      };
      G__11175.cljs$lang$maxFixedArity = 3;
      G__11175.cljs$lang$applyTo = function(arglist__11177) {
        var x = cljs.core.first(arglist__11177);
        arglist__11177 = cljs.core.next(arglist__11177);
        var y = cljs.core.first(arglist__11177);
        arglist__11177 = cljs.core.next(arglist__11177);
        var z = cljs.core.first(arglist__11177);
        var args = cljs.core.rest(arglist__11177);
        return G__11175__delegate(x, y, z, args);
      };
      G__11175.cljs$core$IFn$_invoke$arity$variadic = G__11175__delegate;
      return G__11175;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__11178 = null;
          if (arguments.length > 3) {
            var G__11179__i = 0, G__11179__a = new Array(arguments.length - 3);
            while (G__11179__i < G__11179__a.length) {
              G__11179__a[G__11179__i] = arguments[G__11179__i + 3];
              ++G__11179__i;
            }
            G__11178 = new cljs.core.IndexedSeq(G__11179__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11178);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            var and__7398__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__7398__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__7398__auto____$2;
            }
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            var and__7398__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__7398__auto____$2)) {
              var and__7398__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__7398__auto____$3)) {
                var and__7398__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__7398__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__7398__auto____$4;
                }
              } else {
                return and__7398__auto____$3;
              }
            } else {
              return and__7398__auto____$2;
            }
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__11180__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__7398__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__7398__auto__)) {
            return cljs.core.every_QMARK_(function(and__7398__auto__) {
              return function(p1__11158_SHARP_) {
                var and__7398__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11158_SHARP_) : p1.call(null, p1__11158_SHARP_);
                if (cljs.core.truth_(and__7398__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11158_SHARP_) : p2.call(null, p1__11158_SHARP_);
                } else {
                  return and__7398__auto____$1;
                }
              };
            }(and__7398__auto__), args);
          } else {
            return and__7398__auto__;
          }
        }());
      };
      var G__11180 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11181__i = 0, G__11181__a = new Array(arguments.length - 3);
          while (G__11181__i < G__11181__a.length) {
            G__11181__a[G__11181__i] = arguments[G__11181__i + 3];
            ++G__11181__i;
          }
          args = new cljs.core.IndexedSeq(G__11181__a, 0);
        }
        return G__11180__delegate.call(this, x, y, z, args);
      };
      G__11180.cljs$lang$maxFixedArity = 3;
      G__11180.cljs$lang$applyTo = function(arglist__11182) {
        var x = cljs.core.first(arglist__11182);
        arglist__11182 = cljs.core.next(arglist__11182);
        var y = cljs.core.first(arglist__11182);
        arglist__11182 = cljs.core.next(arglist__11182);
        var z = cljs.core.first(arglist__11182);
        var args = cljs.core.rest(arglist__11182);
        return G__11180__delegate(x, y, z, args);
      };
      G__11180.cljs$core$IFn$_invoke$arity$variadic = G__11180__delegate;
      return G__11180;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__11183 = null;
          if (arguments.length > 3) {
            var G__11184__i = 0, G__11184__a = new Array(arguments.length - 3);
            while (G__11184__i < G__11184__a.length) {
              G__11184__a[G__11184__i] = arguments[G__11184__i + 3];
              ++G__11184__i;
            }
            G__11183 = new cljs.core.IndexedSeq(G__11184__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11183);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            var and__7398__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__7398__auto____$2)) {
              var and__7398__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__7398__auto____$3)) {
                var and__7398__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__7398__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__7398__auto____$4;
                }
              } else {
                return and__7398__auto____$3;
              }
            } else {
              return and__7398__auto____$2;
            }
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__7398__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            var and__7398__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__7398__auto____$2)) {
              var and__7398__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__7398__auto____$3)) {
                var and__7398__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__7398__auto____$4)) {
                  var and__7398__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__7398__auto____$5)) {
                    var and__7398__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__7398__auto____$6)) {
                      var and__7398__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__7398__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__7398__auto____$7;
                      }
                    } else {
                      return and__7398__auto____$6;
                    }
                  } else {
                    return and__7398__auto____$5;
                  }
                } else {
                  return and__7398__auto____$4;
                }
              } else {
                return and__7398__auto____$3;
              }
            } else {
              return and__7398__auto____$2;
            }
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__11185__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__7398__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__7398__auto__)) {
            return cljs.core.every_QMARK_(function(and__7398__auto__) {
              return function(p1__11159_SHARP_) {
                var and__7398__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11159_SHARP_) : p1.call(null, p1__11159_SHARP_);
                if (cljs.core.truth_(and__7398__auto____$1)) {
                  var and__7398__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11159_SHARP_) : p2.call(null, p1__11159_SHARP_);
                  if (cljs.core.truth_(and__7398__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__11159_SHARP_) : p3.call(null, p1__11159_SHARP_);
                  } else {
                    return and__7398__auto____$2;
                  }
                } else {
                  return and__7398__auto____$1;
                }
              };
            }(and__7398__auto__), args);
          } else {
            return and__7398__auto__;
          }
        }());
      };
      var G__11185 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11186__i = 0, G__11186__a = new Array(arguments.length - 3);
          while (G__11186__i < G__11186__a.length) {
            G__11186__a[G__11186__i] = arguments[G__11186__i + 3];
            ++G__11186__i;
          }
          args = new cljs.core.IndexedSeq(G__11186__a, 0);
        }
        return G__11185__delegate.call(this, x, y, z, args);
      };
      G__11185.cljs$lang$maxFixedArity = 3;
      G__11185.cljs$lang$applyTo = function(arglist__11187) {
        var x = cljs.core.first(arglist__11187);
        arglist__11187 = cljs.core.next(arglist__11187);
        var y = cljs.core.first(arglist__11187);
        arglist__11187 = cljs.core.next(arglist__11187);
        var z = cljs.core.first(arglist__11187);
        var args = cljs.core.rest(arglist__11187);
        return G__11185__delegate(x, y, z, args);
      };
      G__11185.cljs$core$IFn$_invoke$arity$variadic = G__11185__delegate;
      return G__11185;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__11188 = null;
          if (arguments.length > 3) {
            var G__11189__i = 0, G__11189__a = new Array(arguments.length - 3);
            while (G__11189__i < G__11189__a.length) {
              G__11189__a[G__11189__i] = arguments[G__11189__i + 3];
              ++G__11189__i;
            }
            G__11188 = new cljs.core.IndexedSeq(G__11189__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11188);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__11160_SHARP_) {
            return p1__11160_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11160_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11160_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__11161_SHARP_) {
            var and__7398__auto__ = p1__11161_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11161_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11161_SHARP_.call(null, x);
            if (cljs.core.truth_(and__7398__auto__)) {
              return p1__11161_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11161_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11161_SHARP_.call(null, y);
            } else {
              return and__7398__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__11162_SHARP_) {
            var and__7398__auto__ = p1__11162_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11162_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11162_SHARP_.call(null, x);
            if (cljs.core.truth_(and__7398__auto__)) {
              var and__7398__auto____$1 = p1__11162_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11162_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11162_SHARP_.call(null, y);
              if (cljs.core.truth_(and__7398__auto____$1)) {
                return p1__11162_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11162_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__11162_SHARP_.call(null, z);
              } else {
                return and__7398__auto____$1;
              }
            } else {
              return and__7398__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__11190__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__7398__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__7398__auto__)) {
              return cljs.core.every_QMARK_(function(and__7398__auto__, ps__$1) {
                return function(p1__11163_SHARP_) {
                  return cljs.core.every_QMARK_(p1__11163_SHARP_, args);
                };
              }(and__7398__auto__, ps__$1), ps__$1);
            } else {
              return and__7398__auto__;
            }
          }());
        };
        var G__11190 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__11191__i = 0, G__11191__a = new Array(arguments.length - 3);
            while (G__11191__i < G__11191__a.length) {
              G__11191__a[G__11191__i] = arguments[G__11191__i + 3];
              ++G__11191__i;
            }
            args = new cljs.core.IndexedSeq(G__11191__a, 0);
          }
          return G__11190__delegate.call(this, x, y, z, args);
        };
        G__11190.cljs$lang$maxFixedArity = 3;
        G__11190.cljs$lang$applyTo = function(arglist__11192) {
          var x = cljs.core.first(arglist__11192);
          arglist__11192 = cljs.core.next(arglist__11192);
          var y = cljs.core.first(arglist__11192);
          arglist__11192 = cljs.core.next(arglist__11192);
          var z = cljs.core.first(arglist__11192);
          var args = cljs.core.rest(arglist__11192);
          return G__11190__delegate(x, y, z, args);
        };
        G__11190.cljs$core$IFn$_invoke$arity$variadic = G__11190__delegate;
        return G__11190;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__11193 = null;
            if (arguments.length > 3) {
              var G__11194__i = 0, G__11194__a = new Array(arguments.length - 3);
              while (G__11194__i < G__11194__a.length) {
                G__11194__a[G__11194__i] = arguments[G__11194__i + 3];
                ++G__11194__i;
              }
              G__11193 = new cljs.core.IndexedSeq(G__11194__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11193);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq11165) {
  var G__11166 = cljs.core.first(seq11165);
  var seq11165__$1 = cljs.core.next(seq11165);
  var G__11167 = cljs.core.first(seq11165__$1);
  var seq11165__$2 = cljs.core.next(seq11165__$1);
  var G__11168 = cljs.core.first(seq11165__$2);
  var seq11165__$3 = cljs.core.next(seq11165__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__11166, G__11167, G__11168, seq11165__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args11201 = [];
  var len__8523__auto___11208 = arguments.length;
  var i__8524__auto___11209 = 0;
  while (true) {
    if (i__8524__auto___11209 < len__8523__auto___11208) {
      args11201.push(arguments[i__8524__auto___11209]);
      var G__11210 = i__8524__auto___11209 + 1;
      i__8524__auto___11209 = G__11210;
      continue;
    } else {
    }
    break;
  }
  var G__11207 = args11201.length;
  switch(G__11207) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11201.slice(3), 0, null);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__7410__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__7410__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__11212__delegate = function(x, y, z, args) {
        var or__7410__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__11212 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11213__i = 0, G__11213__a = new Array(arguments.length - 3);
          while (G__11213__i < G__11213__a.length) {
            G__11213__a[G__11213__i] = arguments[G__11213__i + 3];
            ++G__11213__i;
          }
          args = new cljs.core.IndexedSeq(G__11213__a, 0);
        }
        return G__11212__delegate.call(this, x, y, z, args);
      };
      G__11212.cljs$lang$maxFixedArity = 3;
      G__11212.cljs$lang$applyTo = function(arglist__11214) {
        var x = cljs.core.first(arglist__11214);
        arglist__11214 = cljs.core.next(arglist__11214);
        var y = cljs.core.first(arglist__11214);
        arglist__11214 = cljs.core.next(arglist__11214);
        var z = cljs.core.first(arglist__11214);
        var args = cljs.core.rest(arglist__11214);
        return G__11212__delegate(x, y, z, args);
      };
      G__11212.cljs$core$IFn$_invoke$arity$variadic = G__11212__delegate;
      return G__11212;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__11215 = null;
          if (arguments.length > 3) {
            var G__11216__i = 0, G__11216__a = new Array(arguments.length - 3);
            while (G__11216__i < G__11216__a.length) {
              G__11216__a[G__11216__i] = arguments[G__11216__i + 3];
              ++G__11216__i;
            }
            G__11215 = new cljs.core.IndexedSeq(G__11216__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11215);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__7410__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__7410__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          var or__7410__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__7410__auto____$2)) {
            return or__7410__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__7410__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          var or__7410__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__7410__auto____$2)) {
            return or__7410__auto____$2;
          } else {
            var or__7410__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__7410__auto____$3)) {
              return or__7410__auto____$3;
            } else {
              var or__7410__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__7410__auto____$4)) {
                return or__7410__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__11217__delegate = function(x, y, z, args) {
        var or__7410__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return cljs.core.some(function(or__7410__auto__) {
            return function(p1__11195_SHARP_) {
              var or__7410__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11195_SHARP_) : p1.call(null, p1__11195_SHARP_);
              if (cljs.core.truth_(or__7410__auto____$1)) {
                return or__7410__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11195_SHARP_) : p2.call(null, p1__11195_SHARP_);
              }
            };
          }(or__7410__auto__), args);
        }
      };
      var G__11217 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11218__i = 0, G__11218__a = new Array(arguments.length - 3);
          while (G__11218__i < G__11218__a.length) {
            G__11218__a[G__11218__i] = arguments[G__11218__i + 3];
            ++G__11218__i;
          }
          args = new cljs.core.IndexedSeq(G__11218__a, 0);
        }
        return G__11217__delegate.call(this, x, y, z, args);
      };
      G__11217.cljs$lang$maxFixedArity = 3;
      G__11217.cljs$lang$applyTo = function(arglist__11219) {
        var x = cljs.core.first(arglist__11219);
        arglist__11219 = cljs.core.next(arglist__11219);
        var y = cljs.core.first(arglist__11219);
        arglist__11219 = cljs.core.next(arglist__11219);
        var z = cljs.core.first(arglist__11219);
        var args = cljs.core.rest(arglist__11219);
        return G__11217__delegate(x, y, z, args);
      };
      G__11217.cljs$core$IFn$_invoke$arity$variadic = G__11217__delegate;
      return G__11217;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__11220 = null;
          if (arguments.length > 3) {
            var G__11221__i = 0, G__11221__a = new Array(arguments.length - 3);
            while (G__11221__i < G__11221__a.length) {
              G__11221__a[G__11221__i] = arguments[G__11221__i + 3];
              ++G__11221__i;
            }
            G__11220 = new cljs.core.IndexedSeq(G__11221__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11220);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__7410__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__7410__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          var or__7410__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__7410__auto____$2)) {
            return or__7410__auto____$2;
          } else {
            var or__7410__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__7410__auto____$3)) {
              return or__7410__auto____$3;
            } else {
              var or__7410__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__7410__auto____$4)) {
                return or__7410__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__7410__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          var or__7410__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__7410__auto____$2)) {
            return or__7410__auto____$2;
          } else {
            var or__7410__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__7410__auto____$3)) {
              return or__7410__auto____$3;
            } else {
              var or__7410__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__7410__auto____$4)) {
                return or__7410__auto____$4;
              } else {
                var or__7410__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__7410__auto____$5)) {
                  return or__7410__auto____$5;
                } else {
                  var or__7410__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__7410__auto____$6)) {
                    return or__7410__auto____$6;
                  } else {
                    var or__7410__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__7410__auto____$7)) {
                      return or__7410__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__11222__delegate = function(x, y, z, args) {
        var or__7410__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return cljs.core.some(function(or__7410__auto__) {
            return function(p1__11196_SHARP_) {
              var or__7410__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__11196_SHARP_) : p1.call(null, p1__11196_SHARP_);
              if (cljs.core.truth_(or__7410__auto____$1)) {
                return or__7410__auto____$1;
              } else {
                var or__7410__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__11196_SHARP_) : p2.call(null, p1__11196_SHARP_);
                if (cljs.core.truth_(or__7410__auto____$2)) {
                  return or__7410__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__11196_SHARP_) : p3.call(null, p1__11196_SHARP_);
                }
              }
            };
          }(or__7410__auto__), args);
        }
      };
      var G__11222 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__11223__i = 0, G__11223__a = new Array(arguments.length - 3);
          while (G__11223__i < G__11223__a.length) {
            G__11223__a[G__11223__i] = arguments[G__11223__i + 3];
            ++G__11223__i;
          }
          args = new cljs.core.IndexedSeq(G__11223__a, 0);
        }
        return G__11222__delegate.call(this, x, y, z, args);
      };
      G__11222.cljs$lang$maxFixedArity = 3;
      G__11222.cljs$lang$applyTo = function(arglist__11224) {
        var x = cljs.core.first(arglist__11224);
        arglist__11224 = cljs.core.next(arglist__11224);
        var y = cljs.core.first(arglist__11224);
        arglist__11224 = cljs.core.next(arglist__11224);
        var z = cljs.core.first(arglist__11224);
        var args = cljs.core.rest(arglist__11224);
        return G__11222__delegate(x, y, z, args);
      };
      G__11222.cljs$core$IFn$_invoke$arity$variadic = G__11222__delegate;
      return G__11222;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__11225 = null;
          if (arguments.length > 3) {
            var G__11226__i = 0, G__11226__a = new Array(arguments.length - 3);
            while (G__11226__i < G__11226__a.length) {
              G__11226__a[G__11226__i] = arguments[G__11226__i + 3];
              ++G__11226__i;
            }
            G__11225 = new cljs.core.IndexedSeq(G__11226__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11225);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__11197_SHARP_) {
            return p1__11197_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11197_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11197_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__11198_SHARP_) {
            var or__7410__auto__ = p1__11198_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11198_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11198_SHARP_.call(null, x);
            if (cljs.core.truth_(or__7410__auto__)) {
              return or__7410__auto__;
            } else {
              return p1__11198_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11198_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11198_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__11199_SHARP_) {
            var or__7410__auto__ = p1__11199_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11199_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__11199_SHARP_.call(null, x);
            if (cljs.core.truth_(or__7410__auto__)) {
              return or__7410__auto__;
            } else {
              var or__7410__auto____$1 = p1__11199_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11199_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__11199_SHARP_.call(null, y);
              if (cljs.core.truth_(or__7410__auto____$1)) {
                return or__7410__auto____$1;
              } else {
                return p1__11199_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__11199_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__11199_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__11227__delegate = function(x, y, z, args) {
          var or__7410__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return cljs.core.some(function(or__7410__auto__, ps__$1) {
              return function(p1__11200_SHARP_) {
                return cljs.core.some(p1__11200_SHARP_, args);
              };
            }(or__7410__auto__, ps__$1), ps__$1);
          }
        };
        var G__11227 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__11228__i = 0, G__11228__a = new Array(arguments.length - 3);
            while (G__11228__i < G__11228__a.length) {
              G__11228__a[G__11228__i] = arguments[G__11228__i + 3];
              ++G__11228__i;
            }
            args = new cljs.core.IndexedSeq(G__11228__a, 0);
          }
          return G__11227__delegate.call(this, x, y, z, args);
        };
        G__11227.cljs$lang$maxFixedArity = 3;
        G__11227.cljs$lang$applyTo = function(arglist__11229) {
          var x = cljs.core.first(arglist__11229);
          arglist__11229 = cljs.core.next(arglist__11229);
          var y = cljs.core.first(arglist__11229);
          arglist__11229 = cljs.core.next(arglist__11229);
          var z = cljs.core.first(arglist__11229);
          var args = cljs.core.rest(arglist__11229);
          return G__11227__delegate(x, y, z, args);
        };
        G__11227.cljs$core$IFn$_invoke$arity$variadic = G__11227__delegate;
        return G__11227;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__11230 = null;
            if (arguments.length > 3) {
              var G__11231__i = 0, G__11231__a = new Array(arguments.length - 3);
              while (G__11231__i < G__11231__a.length) {
                G__11231__a[G__11231__i] = arguments[G__11231__i + 3];
                ++G__11231__i;
              }
              G__11230 = new cljs.core.IndexedSeq(G__11231__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__11230);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq11202) {
  var G__11203 = cljs.core.first(seq11202);
  var seq11202__$1 = cljs.core.next(seq11202);
  var G__11204 = cljs.core.first(seq11202__$1);
  var seq11202__$2 = cljs.core.next(seq11202__$1);
  var G__11205 = cljs.core.first(seq11202__$2);
  var seq11202__$3 = cljs.core.next(seq11202__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__11203, G__11204, G__11205, seq11202__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args11233 = [];
  var len__8523__auto___11253 = arguments.length;
  var i__8524__auto___11254 = 0;
  while (true) {
    if (i__8524__auto___11254 < len__8523__auto___11253) {
      args11233.push(arguments[i__8524__auto___11254]);
      var G__11255 = i__8524__auto___11254 + 1;
      i__8524__auto___11254 = G__11255;
      continue;
    } else {
    }
    break;
  }
  var G__11240 = args11233.length;
  switch(G__11240) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11233.slice(4), 0, null);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8542__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__11257 = null;
      var G__11257__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11257__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__11257__2 = function(result, input) {
        var G__11241 = result;
        var G__11242 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__11241, G__11242) : rf.call(null, G__11241, G__11242);
      };
      var G__11257__3 = function() {
        var G__11258__delegate = function(result, input, inputs) {
          var G__11243 = result;
          var G__11244 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__11243, G__11244) : rf.call(null, G__11243, G__11244);
        };
        var G__11258 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__11259__i = 0, G__11259__a = new Array(arguments.length - 2);
            while (G__11259__i < G__11259__a.length) {
              G__11259__a[G__11259__i] = arguments[G__11259__i + 2];
              ++G__11259__i;
            }
            inputs = new cljs.core.IndexedSeq(G__11259__a, 0);
          }
          return G__11258__delegate.call(this, result, input, inputs);
        };
        G__11258.cljs$lang$maxFixedArity = 2;
        G__11258.cljs$lang$applyTo = function(arglist__11260) {
          var result = cljs.core.first(arglist__11260);
          arglist__11260 = cljs.core.next(arglist__11260);
          var input = cljs.core.first(arglist__11260);
          var inputs = cljs.core.rest(arglist__11260);
          return G__11258__delegate(result, input, inputs);
        };
        G__11258.cljs$core$IFn$_invoke$arity$variadic = G__11258__delegate;
        return G__11258;
      }();
      G__11257 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__11257__0.call(this);
          case 1:
            return G__11257__1.call(this, result);
          case 2:
            return G__11257__2.call(this, result, input);
          default:
            var G__11261 = null;
            if (arguments.length > 2) {
              var G__11262__i = 0, G__11262__a = new Array(arguments.length - 2);
              while (G__11262__i < G__11262__a.length) {
                G__11262__a[G__11262__i] = arguments[G__11262__i + 2];
                ++G__11262__i;
              }
              G__11261 = new cljs.core.IndexedSeq(G__11262__a, 0);
            }
            return G__11257__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__11261);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__11257.cljs$lang$maxFixedArity = 2;
      G__11257.cljs$lang$applyTo = G__11257__3.cljs$lang$applyTo;
      G__11257.cljs$core$IFn$_invoke$arity$0 = G__11257__0;
      G__11257.cljs$core$IFn$_invoke$arity$1 = G__11257__1;
      G__11257.cljs$core$IFn$_invoke$arity$2 = G__11257__2;
      G__11257.cljs$core$IFn$_invoke$arity$variadic = G__11257__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__11257;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__8333__auto___11263 = size;
        var i_11264 = 0;
        while (true) {
          if (i_11264 < n__8333__auto___11263) {
            cljs.core.chunk_append(b, function() {
              var G__11245 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11264);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11245) : f.call(null, G__11245);
            }());
            var G__11265 = i_11264 + 1;
            i_11264 = G__11265;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__11246 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11246) : f.call(null, G__11246);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__11247 = cljs.core.first(s1);
        var G__11248 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11247, G__11248) : f.call(null, G__11247, G__11248);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__11249 = cljs.core.first(s1);
        var G__11250 = cljs.core.first(s2);
        var G__11251 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11249, G__11250, G__11251) : f.call(null, G__11249, G__11250, G__11251);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__11232_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__11232_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq11234) {
  var G__11235 = cljs.core.first(seq11234);
  var seq11234__$1 = cljs.core.next(seq11234);
  var G__11236 = cljs.core.first(seq11234__$1);
  var seq11234__$2 = cljs.core.next(seq11234__$1);
  var G__11237 = cljs.core.first(seq11234__$2);
  var seq11234__$3 = cljs.core.next(seq11234__$2);
  var G__11238 = cljs.core.first(seq11234__$3);
  var seq11234__$4 = cljs.core.next(seq11234__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__11235, G__11236, G__11237, G__11238, seq11234__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args11266 = [];
  var len__8523__auto___11269 = arguments.length;
  var i__8524__auto___11270 = 0;
  while (true) {
    if (i__8524__auto___11270 < len__8523__auto___11269) {
      args11266.push(arguments[i__8524__auto___11270]);
      var G__11271 = i__8524__auto___11270 + 1;
      i__8524__auto___11270 = G__11271;
      continue;
    } else {
    }
    break;
  }
  var G__11268 = args11266.length;
  switch(G__11268) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11266.length)].join(""));
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__11273 = null;
        var G__11273__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11273__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11273__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__11273 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11273__0.call(this);
            case 1:
              return G__11273__1.call(this, result);
            case 2:
              return G__11273__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11273.cljs$core$IFn$_invoke$arity$0 = G__11273__0;
        G__11273.cljs$core$IFn$_invoke$arity$1 = G__11273__1;
        G__11273.cljs$core$IFn$_invoke$arity$2 = G__11273__2;
        return G__11273;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4657__auto__ = cljs.core.seq(coll);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args11274 = [];
  var len__8523__auto___11277 = arguments.length;
  var i__8524__auto___11278 = 0;
  while (true) {
    if (i__8524__auto___11278 < len__8523__auto___11277) {
      args11274.push(arguments[i__8524__auto___11278]);
      var G__11279 = i__8524__auto___11278 + 1;
      i__8524__auto___11278 = G__11279;
      continue;
    } else {
    }
    break;
  }
  var G__11276 = args11274.length;
  switch(G__11276) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11274.length)].join(""));
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__11281 = null;
        var G__11281__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11281__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11281__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11281 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11281__0.call(this);
            case 1:
              return G__11281__1.call(this, result);
            case 2:
              return G__11281__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11281.cljs$core$IFn$_invoke$arity$0 = G__11281__0;
        G__11281.cljs$core$IFn$_invoke$arity$1 = G__11281__1;
        G__11281.cljs$core$IFn$_invoke$arity$2 = G__11281__2;
        return G__11281;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__11282 = n__$1 - 1;
        var G__11283 = cljs.core.rest(s);
        n__$1 = G__11282;
        coll__$1 = G__11283;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args11284 = [];
  var len__8523__auto___11287 = arguments.length;
  var i__8524__auto___11288 = 0;
  while (true) {
    if (i__8524__auto___11288 < len__8523__auto___11287) {
      args11284.push(arguments[i__8524__auto___11288]);
      var G__11289 = i__8524__auto___11288 + 1;
      i__8524__auto___11288 = G__11289;
      continue;
    } else {
    }
    break;
  }
  var G__11286 = args11284.length;
  switch(G__11286) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11284.length)].join(""));
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__11291 = cljs.core.next(s);
      var G__11292 = cljs.core.next(lead);
      s = G__11291;
      lead = G__11292;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args11293 = [];
  var len__8523__auto___11298 = arguments.length;
  var i__8524__auto___11299 = 0;
  while (true) {
    if (i__8524__auto___11299 < len__8523__auto___11298) {
      args11293.push(arguments[i__8524__auto___11299]);
      var G__11300 = i__8524__auto___11299 + 1;
      i__8524__auto___11299 = G__11300;
      continue;
    } else {
    }
    break;
  }
  var G__11295 = args11293.length;
  switch(G__11295) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11293.length)].join(""));
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__11302 = null;
        var G__11302__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11302__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11302__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__7398__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__7398__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__7398__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11302 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11302__0.call(this);
            case 1:
              return G__11302__1.call(this, result);
            case 2:
              return G__11302__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11302.cljs$core$IFn$_invoke$arity$0 = G__11302__0;
        G__11302.cljs$core$IFn$_invoke$arity$1 = G__11302__1;
        G__11302.cljs$core$IFn$_invoke$arity$2 = G__11302__2;
        return G__11302;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__7398__auto__ = s;
        if (and__7398__auto__) {
          var G__11297 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__11297) : pred__$1.call(null, G__11297);
        } else {
          return and__7398__auto__;
        }
      }())) {
        var G__11303 = pred__$1;
        var G__11304 = cljs.core.rest(s);
        pred__$1 = G__11303;
        coll__$1 = G__11304;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs.core.cycle.cljs$core$IFn$_invoke$arity$1 ? cljs.core.cycle.cljs$core$IFn$_invoke$arity$1(s) : cljs.core.cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args11305 = [];
  var len__8523__auto___11308 = arguments.length;
  var i__8524__auto___11309 = 0;
  while (true) {
    if (i__8524__auto___11309 < len__8523__auto___11308) {
      args11305.push(arguments[i__8524__auto___11309]);
      var G__11310 = i__8524__auto___11309 + 1;
      i__8524__auto___11309 = G__11310;
      continue;
    } else {
    }
    break;
  }
  var G__11307 = args11305.length;
  switch(G__11307) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11305.length)].join(""));
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args11312 = [];
  var len__8523__auto___11315 = arguments.length;
  var i__8524__auto___11316 = 0;
  while (true) {
    if (i__8524__auto___11316 < len__8523__auto___11315) {
      args11312.push(arguments[i__8524__auto___11316]);
      var G__11317 = i__8524__auto___11316 + 1;
      i__8524__auto___11316 = G__11317;
      continue;
    } else {
    }
    break;
  }
  var G__11314 = args11312.length;
  switch(G__11314) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11312.length)].join(""));
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    var G__11321 = f;
    var G__11322 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.iterate.cljs$core$IFn$_invoke$arity$2 ? cljs.core.iterate.cljs$core$IFn$_invoke$arity$2(G__11321, G__11322) : cljs.core.iterate.call(null, G__11321, G__11322);
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args11323 = [];
  var len__8523__auto___11329 = arguments.length;
  var i__8524__auto___11330 = 0;
  while (true) {
    if (i__8524__auto___11330 < len__8523__auto___11329) {
      args11323.push(arguments[i__8524__auto___11330]);
      var G__11331 = i__8524__auto___11330 + 1;
      i__8524__auto___11330 = G__11331;
      continue;
    } else {
    }
    break;
  }
  var G__11328 = args11323.length;
  switch(G__11328) {
    case 0:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11323.slice(2), 0, null);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.List.EMPTY;
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$1 = function(c1) {
  return new cljs.core.LazySeq(null, function() {
    return c1;
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq11324) {
  var G__11325 = cljs.core.first(seq11324);
  var seq11324__$1 = cljs.core.next(seq11324);
  var G__11326 = cljs.core.first(seq11324__$1);
  var seq11324__$2 = cljs.core.next(seq11324__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__11325, G__11326, seq11324__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args11333 = [];
  var len__8523__auto___11336 = arguments.length;
  var i__8524__auto___11337 = 0;
  while (true) {
    if (i__8524__auto___11337 < len__8523__auto___11336) {
      args11333.push(arguments[i__8524__auto___11337]);
      var G__11338 = i__8524__auto___11337 + 1;
      i__8524__auto___11337 = G__11338;
      continue;
    } else {
    }
    break;
  }
  var G__11335 = args11333.length;
  switch(G__11335) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11333.length)].join(""));
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__11340 = null;
        var G__11340__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__11340__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__11340__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__11340 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__11340__0.call(this);
            case 1:
              return G__11340__1.call(this, result);
            case 2:
              return G__11340__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__11340.cljs$core$IFn$_invoke$arity$0 = G__11340__0;
        G__11340.cljs$core$IFn$_invoke$arity$1 = G__11340__1;
        G__11340.cljs$core$IFn$_invoke$arity$2 = G__11340__2;
        return G__11340;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4655__auto__ = cljs.core.seq(coll);
      if (temp__4655__auto__) {
        var coll__$1 = temp__4655__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args11349 = [];
  var len__8523__auto___11354 = arguments.length;
  var i__8524__auto___11355 = 0;
  while (true) {
    if (i__8524__auto___11355 < len__8523__auto___11354) {
      args11349.push(arguments[i__8524__auto___11355]);
      var G__11356 = i__8524__auto___11355 + 1;
      i__8524__auto___11355 = G__11356;
      continue;
    } else {
    }
    break;
  }
  var G__11353 = args11349.length;
  switch(G__11353) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11349.slice(1), 0, null);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8542__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq11350) {
  var G__11351 = cljs.core.first(seq11350);
  var seq11350__$1 = cljs.core.next(seq11350);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__11351, seq11350__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args11358 = [];
  var len__8523__auto___11362 = arguments.length;
  var i__8524__auto___11363 = 0;
  while (true) {
    if (i__8524__auto___11363 < len__8523__auto___11362) {
      args11358.push(arguments[i__8524__auto___11363]);
      var G__11364 = i__8524__auto___11363 + 1;
      i__8524__auto___11363 = G__11364;
      continue;
    } else {
    }
    break;
  }
  var G__11360 = args11358.length;
  switch(G__11360) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11358.length)].join(""));
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__11366 = null;
      var G__11366__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__11366__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__11366__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__11366 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__11366__0.call(this);
          case 1:
            return G__11366__1.call(this, result);
          case 2:
            return G__11366__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__11366.cljs$core$IFn$_invoke$arity$0 = G__11366__0;
      G__11366.cljs$core$IFn$_invoke$arity$1 = G__11366__1;
      G__11366.cljs$core$IFn$_invoke$arity$2 = G__11366__2;
      return G__11366;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__8333__auto___11367 = size;
        var i_11368 = 0;
        while (true) {
          if (i_11368 < n__8333__auto___11367) {
            if (cljs.core.truth_(function() {
              var G__11361 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11368);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__11361) : pred.call(null, G__11361);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_11368));
            } else {
            }
            var G__11369 = i_11368 + 1;
            i_11368 = G__11369;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args11370 = [];
  var len__8523__auto___11373 = arguments.length;
  var i__8524__auto___11374 = 0;
  while (true) {
    if (i__8524__auto___11374 < len__8523__auto___11373) {
      args11370.push(arguments[i__8524__auto___11374]);
      var G__11375 = i__8524__auto___11374 + 1;
      i__8524__auto___11374 = G__11375;
      continue;
    } else {
    }
    break;
  }
  var G__11372 = args11370.length;
  switch(G__11372) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11370.length)].join(""));
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__11377_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__11377_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args11378 = [];
  var len__8523__auto___11383 = arguments.length;
  var i__8524__auto___11384 = 0;
  while (true) {
    if (i__8524__auto___11384 < len__8523__auto___11383) {
      args11378.push(arguments[i__8524__auto___11384]);
      var G__11385 = i__8524__auto___11384 + 1;
      i__8524__auto___11384 = G__11385;
      continue;
    } else {
    }
    break;
  }
  var G__11380 = args11378.length;
  switch(G__11380) {
    case 0:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11378.length)].join(""));
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.into.cljs$core$IFn$_invoke$arity$1 = function(to) {
  return to;
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args11387 = [];
  var len__8523__auto___11395 = arguments.length;
  var i__8524__auto___11396 = 0;
  while (true) {
    if (i__8524__auto___11396 < len__8523__auto___11395) {
      args11387.push(arguments[i__8524__auto___11396]);
      var G__11397 = i__8524__auto___11396 + 1;
      i__8524__auto___11396 = G__11397;
      continue;
    } else {
    }
    break;
  }
  var G__11394 = args11387.length;
  switch(G__11394) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11387.slice(4), 0, null);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__8542__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq11388) {
  var G__11389 = cljs.core.first(seq11388);
  var seq11388__$1 = cljs.core.next(seq11388);
  var G__11390 = cljs.core.first(seq11388__$1);
  var seq11388__$2 = cljs.core.next(seq11388__$1);
  var G__11391 = cljs.core.first(seq11388__$2);
  var seq11388__$3 = cljs.core.next(seq11388__$2);
  var G__11392 = cljs.core.first(seq11388__$3);
  var seq11388__$4 = cljs.core.next(seq11388__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__11389, G__11390, G__11391, G__11392, seq11388__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args11399 = [];
  var len__8523__auto___11402 = arguments.length;
  var i__8524__auto___11403 = 0;
  while (true) {
    if (i__8524__auto___11403 < len__8523__auto___11402) {
      args11399.push(arguments[i__8524__auto___11403]);
      var G__11404 = i__8524__auto___11403 + 1;
      i__8524__auto___11403 = G__11404;
      continue;
    } else {
    }
    break;
  }
  var G__11401 = args11399.length;
  switch(G__11401) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11399.length)].join(""));
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        var x__8252__auto__ = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad));
        return cljs.core._conj(cljs.core.List.EMPTY, x__8252__auto__);
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args11406 = [];
  var len__8523__auto___11409 = arguments.length;
  var i__8524__auto___11410 = 0;
  while (true) {
    if (i__8524__auto___11410 < len__8523__auto___11409) {
      args11406.push(arguments[i__8524__auto___11410]);
      var G__11411 = i__8524__auto___11410 + 1;
      i__8524__auto___11410 = G__11411;
      continue;
    } else {
    }
    break;
  }
  var G__11408 = args11406.length;
  switch(G__11408) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11406.length)].join(""));
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get, m, ks);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (!(ks__$1 == null)) {
      var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
      if (sentinel === m__$2) {
        return not_found;
      } else {
        var G__11413 = sentinel;
        var G__11414 = m__$2;
        var G__11415 = cljs.core.next(ks__$1);
        sentinel = G__11413;
        m__$1 = G__11414;
        ks__$1 = G__11415;
        continue;
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__11416, v) {
  var vec__11423 = p__11416;
  var seq__11424 = cljs.core.seq(vec__11423);
  var first__11425 = cljs.core.first(seq__11424);
  var seq__11424__$1 = cljs.core.next(seq__11424);
  var k = first__11425;
  var ks = seq__11424__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11426 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11427 = ks;
      var G__11428 = v;
      return cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3 ? cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3(G__11426, G__11427, G__11428) : cljs.core.assoc_in.call(null, G__11426, G__11427, G__11428);
    }());
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args11429 = [];
  var len__8523__auto___11469 = arguments.length;
  var i__8524__auto___11470 = 0;
  while (true) {
    if (i__8524__auto___11470 < len__8523__auto___11469) {
      args11429.push(arguments[i__8524__auto___11470]);
      var G__11471 = i__8524__auto___11470 + 1;
      i__8524__auto___11470 = G__11471;
      continue;
    } else {
    }
    break;
  }
  var G__11438 = args11429.length;
  switch(G__11438) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11429.slice(6), 0, null);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8542__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__11439, f) {
  var vec__11440 = p__11439;
  var seq__11441 = cljs.core.seq(vec__11440);
  var first__11442 = cljs.core.first(seq__11441);
  var seq__11441__$1 = cljs.core.next(seq__11441);
  var k = first__11442;
  var ks = seq__11441__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11443 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11443) : f.call(null, G__11443);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__11444, f, a) {
  var vec__11445 = p__11444;
  var seq__11446 = cljs.core.seq(vec__11445);
  var first__11447 = cljs.core.first(seq__11446);
  var seq__11446__$1 = cljs.core.next(seq__11446);
  var k = first__11447;
  var ks = seq__11446__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11448 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11449 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11448, G__11449) : f.call(null, G__11448, G__11449);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__11450, f, a, b) {
  var vec__11451 = p__11450;
  var seq__11452 = cljs.core.seq(vec__11451);
  var first__11453 = cljs.core.first(seq__11452);
  var seq__11452__$1 = cljs.core.next(seq__11452);
  var k = first__11453;
  var ks = seq__11452__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11454 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11455 = a;
      var G__11456 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11454, G__11455, G__11456) : f.call(null, G__11454, G__11455, G__11456);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__11457, f, a, b, c) {
  var vec__11458 = p__11457;
  var seq__11459 = cljs.core.seq(vec__11458);
  var first__11460 = cljs.core.first(seq__11459);
  var seq__11459__$1 = cljs.core.next(seq__11459);
  var k = first__11460;
  var ks = seq__11459__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__11461 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__11462 = a;
      var G__11463 = b;
      var G__11464 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__11461, G__11462, G__11463, G__11464) : f.call(null, G__11461, G__11462, G__11463, G__11464);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__11465, f, a, b, c, args) {
  var vec__11466 = p__11465;
  var seq__11467 = cljs.core.seq(vec__11466);
  var first__11468 = cljs.core.first(seq__11467);
  var seq__11467__$1 = cljs.core.next(seq__11467);
  var k = first__11468;
  var ks = seq__11467__$1;
  if (ks) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq11430) {
  var G__11431 = cljs.core.first(seq11430);
  var seq11430__$1 = cljs.core.next(seq11430);
  var G__11432 = cljs.core.first(seq11430__$1);
  var seq11430__$2 = cljs.core.next(seq11430__$1);
  var G__11433 = cljs.core.first(seq11430__$2);
  var seq11430__$3 = cljs.core.next(seq11430__$2);
  var G__11434 = cljs.core.first(seq11430__$3);
  var seq11430__$4 = cljs.core.next(seq11430__$3);
  var G__11435 = cljs.core.first(seq11430__$4);
  var seq11430__$5 = cljs.core.next(seq11430__$4);
  var G__11436 = cljs.core.first(seq11430__$5);
  var seq11430__$6 = cljs.core.next(seq11430__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__11431, G__11432, G__11433, G__11434, G__11435, G__11436, seq11430__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args11473 = [];
  var len__8523__auto___11493 = arguments.length;
  var i__8524__auto___11494 = 0;
  while (true) {
    if (i__8524__auto___11494 < len__8523__auto___11493) {
      args11473.push(arguments[i__8524__auto___11494]);
      var G__11495 = i__8524__auto___11494 + 1;
      i__8524__auto___11494 = G__11495;
      continue;
    } else {
    }
    break;
  }
  var G__11482 = args11473.length;
  switch(G__11482) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args11473.slice(6), 0, null);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8542__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11483 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__11483) : f.call(null, G__11483);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11484 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__11485 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11484, G__11485) : f.call(null, G__11484, G__11485);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11486 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__11487 = x;
    var G__11488 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11486, G__11487, G__11488) : f.call(null, G__11486, G__11487, G__11488);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__11489 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__11490 = x;
    var G__11491 = y;
    var G__11492 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__11489, G__11490, G__11491, G__11492) : f.call(null, G__11489, G__11490, G__11491, G__11492);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq11474) {
  var G__11475 = cljs.core.first(seq11474);
  var seq11474__$1 = cljs.core.next(seq11474);
  var G__11476 = cljs.core.first(seq11474__$1);
  var seq11474__$2 = cljs.core.next(seq11474__$1);
  var G__11477 = cljs.core.first(seq11474__$2);
  var seq11474__$3 = cljs.core.next(seq11474__$2);
  var G__11478 = cljs.core.first(seq11474__$3);
  var seq11474__$4 = cljs.core.next(seq11474__$3);
  var G__11479 = cljs.core.first(seq11474__$4);
  var seq11474__$5 = cljs.core.next(seq11474__$4);
  var G__11480 = cljs.core.first(seq11474__$5);
  var seq11474__$6 = cljs.core.next(seq11474__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__11475, G__11476, G__11477, G__11478, G__11479, G__11480, seq11474__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__11497 = ll - 5;
      var G__11498 = r;
      ll = G__11497;
      ret = G__11498;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = function() {
        var G__11503 = pv;
        var G__11504 = level - 5;
        var G__11505 = child;
        var G__11506 = tailnode;
        return cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4(G__11503, G__11504, G__11505, G__11506) : cljs.core.push_tail.call(null, G__11503, G__11504, G__11505, G__11506);
      }();
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No item "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(i), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" in vector of length "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__11507 = cljs.core.pv_aget(node, 0);
      var G__11508 = level - 5;
      node = G__11507;
      level = G__11508;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__11509 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__11510 = level - 5;
        node = G__11509;
        level = G__11510;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, function() {
      var G__11516 = pv;
      var G__11517 = level - 5;
      var G__11518 = cljs.core.pv_aget(node, subidx);
      var G__11519 = i;
      var G__11520 = val;
      return cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5 ? cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5(G__11516, G__11517, G__11518, G__11519, G__11520) : cljs.core.do_assoc.call(null, G__11516, G__11517, G__11518, G__11519, G__11520);
    }());
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = function() {
      var G__11524 = pv;
      var G__11525 = level - 5;
      var G__11526 = cljs.core.pv_aget(node, subidx);
      return cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3(G__11524, G__11525, G__11526) : cljs.core.pop_tail.call(null, G__11524, G__11525, G__11526);
    }();
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "base", "base", 1825810849, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null)], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, k)], null);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.indexOf = function() {
  var G__11537 = null;
  var G__11537__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11537__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11537 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11537__1.call(this, x);
      case 2:
        return G__11537__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11537.cljs$core$IFn$_invoke$arity$1 = G__11537__1;
  G__11537.cljs$core$IFn$_invoke$arity$2 = G__11537__2;
  return G__11537;
}();
cljs.core.PersistentVector.prototype.lastIndexOf = function() {
  var G__11538 = null;
  var G__11538__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11538__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11538 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11538__1.call(this, x);
      case 2:
        return G__11538__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11538.cljs$core$IFn$_invoke$arity$1 = G__11538__1;
  G__11538.cljs$core$IFn$_invoke$arity$2 = G__11538__2;
  return G__11538;
}();
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__11528 = init__$2;
              var G__11529 = j + i;
              var G__11530 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11528, G__11529, G__11530) : f.call(null, G__11528, G__11529, G__11530);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__11539 = j + 1;
              var G__11540 = init__$3;
              j = G__11539;
              init__$2 = G__11540;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11541 = i + len;
        var G__11542 = init__$2;
        i = G__11541;
        init__$1 = G__11542;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return coll__$1.cljs$core$ICollection$_conj$arity$2(null, val);
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds  [0,"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt), cljs.core.str.cljs$core$IFn$_invoke$arity$1("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = coll__$1.cljs$core$IIterable$_iterator$arity$1(null);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (me_iter.hasNext()) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__11531 = init__$2;
              var G__11532 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__11531, G__11532) : f.call(null, G__11531, G__11532);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__11543 = j + 1;
              var G__11544 = init__$3;
              j = G__11543;
              init__$2 = G__11544;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11545 = i + len;
        var G__11546 = init__$2;
        i = G__11545;
        init__$1 = G__11546;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0, null);
    } else {
      var G__11533 = coll__$1;
      var G__11534 = cljs.core.first_array_for_longvec(coll__$1);
      var G__11535 = 0;
      var G__11536 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11533, G__11534, G__11535, G__11536) : cljs.core.chunked_seq.call(null, G__11533, G__11534, G__11535, G__11536);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__8333__auto___11547 = len;
    var i_11548 = 0;
    while (true) {
      if (i_11548 < n__8333__auto___11547) {
        new_tail[i_11548] = self__.tail[i_11548];
        var G__11549 = i_11548 + 1;
        i_11548 = G__11549;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__11550 = null;
  var G__11550__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__11550__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__11550 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11550__2.call(this, self__, k);
      case 3:
        return G__11550__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11550.cljs$core$IFn$_invoke$arity$2 = G__11550__2;
  G__11550.cljs$core$IFn$_invoke$arity$3 = G__11550__3;
  return G__11550;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args11527) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11527)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.Symbol(null, "tail", "tail", 494507963, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__11551 = i + 1;
        var G__11552 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__11551;
        out = G__11552;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___11554 = arguments.length;
  var i__8524__auto___11555 = 0;
  while (true) {
    if (i__8524__auto___11555 < len__8523__auto___11554) {
      args__8530__auto__.push(arguments[i__8524__auto___11555]);
      var G__11556 = i__8524__auto___11555 + 1;
      i__8524__auto___11555 = G__11556;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq11553) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq11553));
};
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.indexOf = function() {
  var G__11579 = null;
  var G__11579__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11579__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11579 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11579__1.call(this, x);
      case 2:
        return G__11579__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11579.cljs$core$IFn$_invoke$arity$1 = G__11579__1;
  G__11579.cljs$core$IFn$_invoke$arity$2 = G__11579__2;
  return G__11579;
}();
cljs.core.ChunkedSeq.prototype.lastIndexOf = function() {
  var G__11580 = null;
  var G__11580__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11580__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11580 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11580__1.call(this, x);
      case 2:
        return G__11580__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11580.cljs$core$IFn$_invoke$arity$1 = G__11580__1;
  G__11580.cljs$core$IFn$_invoke$arity$2 = G__11580__2;
  return G__11580;
}();
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__11557 = self__.vec;
      var G__11558 = self__.node;
      var G__11559 = self__.i;
      var G__11560 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11557, G__11558, G__11559, G__11560) : cljs.core.chunked_seq.call(null, G__11557, G__11558, G__11559, G__11560);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return coll__$1.cljs$core$IChunkedNext$_chunked_next$arity$1(null);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__11561 = self__.vec;
    var G__11562 = self__.i + self__.off;
    var G__11563 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__11561, G__11562, G__11563) : cljs.core.subvec.call(null, G__11561, G__11562, G__11563);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__11564 = self__.vec;
    var G__11565 = self__.i + self__.off;
    var G__11566 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__11564, G__11565, G__11566) : cljs.core.subvec.call(null, G__11564, G__11565, G__11566);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__11567 = self__.vec;
      var G__11568 = self__.node;
      var G__11569 = self__.i;
      var G__11570 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11567, G__11568, G__11569, G__11570) : cljs.core.chunked_seq.call(null, G__11567, G__11568, G__11569, G__11570);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return coll__$1.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__11571 = self__.vec;
    var G__11572 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__11573 = end;
    var G__11574 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11571, G__11572, G__11573, G__11574) : cljs.core.chunked_seq.call(null, G__11571, G__11572, G__11573, G__11574);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__11575 = self__.vec;
    var G__11576 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__11577 = end;
    var G__11578 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__11575, G__11576, G__11577, G__11578) : cljs.core.chunked_seq.call(null, G__11575, G__11576, G__11577, G__11578);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "vec", "vec", 982683596, null), new cljs.core.Symbol(null, "node", "node", -2073234571, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "off", "off", -2047994980, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args11581 = [];
  var len__8523__auto___11584 = arguments.length;
  var i__8524__auto___11585 = 0;
  while (true) {
    if (i__8524__auto___11585 < len__8523__auto___11584) {
      args11581.push(arguments[i__8524__auto___11585]);
      var G__11586 = i__8524__auto___11585 + 1;
      i__8524__auto___11585 = G__11586;
      continue;
    } else {
    }
    break;
  }
  var G__11583 = args11581.length;
  switch(G__11583) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11581.length)].join(""));
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IFind$_find$arity$2 = function(coll, key) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, key)], null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.indexOf = function() {
  var G__11608 = null;
  var G__11608__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11608__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__11608 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__11608__1.call(this, x);
      case 2:
        return G__11608__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11608.cljs$core$IFn$_invoke$arity$1 = G__11608__1;
  G__11608.cljs$core$IFn$_invoke$arity$2 = G__11608__2;
  return G__11608;
}();
cljs.core.Subvec.prototype.lastIndexOf = function() {
  var G__11609 = null;
  var G__11609__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11609__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__11609 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__11609__1.call(this, x);
      case 2:
        return G__11609__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11609.cljs$core$IFn$_invoke$arity$1 = G__11609__1;
  G__11609.cljs$core$IFn$_invoke$arity$2 = G__11609__2;
  return G__11609;
}();
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__11589 = init__$1;
        var G__11590 = j;
        var G__11591 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11589, G__11590, G__11591) : f.call(null, G__11589, G__11590, G__11591);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11610 = i + 1;
        var G__11611 = j + 1;
        var G__11612 = init__$2;
        i = G__11610;
        j = G__11611;
        init__$1 = G__11612;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  if (n < 0 || self__.end + 1 <= v_pos) {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds [0,"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll__$1.cljs$core$ICounted$_count$arity$1(null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("]")].join(""));
  } else {
    var G__11592 = self__.meta;
    var G__11593 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
    var G__11594 = self__.start;
    var G__11595 = function() {
      var x__7746__auto__ = self__.end;
      var y__7747__auto__ = v_pos + 1;
      return x__7746__auto__ > y__7747__auto__ ? x__7746__auto__ : y__7747__auto__;
    }();
    var G__11596 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__11592, G__11593, G__11594, G__11595, G__11596) : cljs.core.build_subvec.call(null, G__11592, G__11593, G__11594, G__11595, G__11596);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ranged_iterator(self__.v, self__.start, self__.end);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__11597 = self__.meta;
    var G__11598 = self__.v;
    var G__11599 = self__.start;
    var G__11600 = self__.end - 1;
    var G__11601 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__11597, G__11598, G__11599, G__11600, G__11601) : cljs.core.build_subvec.call(null, G__11597, G__11598, G__11599, G__11600, G__11601);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__11603 = self__.meta;
  var G__11604 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__11605 = self__.start;
  var G__11606 = self__.end + 1;
  var G__11607 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__11603, G__11604, G__11605, G__11606, G__11607) : cljs.core.build_subvec.call(null, G__11603, G__11604, G__11605, G__11606, G__11607);
};
cljs.core.Subvec.prototype.call = function() {
  var G__11613 = null;
  var G__11613__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__11613__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__11613 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11613__2.call(this, self__, k);
      case 3:
        return G__11613__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11613.cljs$core$IFn$_invoke$arity$2 = G__11613__2;
  G__11613.cljs$core$IFn$_invoke$arity$3 = G__11613__3;
  return G__11613;
}();
cljs.core.Subvec.prototype.apply = function(self__, args11588) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11588)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "v", "v", 1661996586, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__11614 = meta;
      var G__11615 = v.v;
      var G__11616 = v.start + start;
      var G__11617 = v.start + end;
      var G__11618 = __hash;
      meta = G__11614;
      v = G__11615;
      start = G__11616;
      end = G__11617;
      __hash = G__11618;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args11619 = [];
  var len__8523__auto___11622 = arguments.length;
  var i__8524__auto___11623 = 0;
  while (true) {
    if (i__8524__auto___11623 < len__8523__auto___11622) {
      args11619.push(arguments[i__8524__auto___11623]);
      var G__11624 = i__8524__auto___11623 + 1;
      i__8524__auto___11623 = G__11624;
      continue;
    } else {
    }
    break;
  }
  var G__11621 = args11619.length;
  switch(G__11621) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11619.length)].join(""));
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      var G__11634 = tv;
      var G__11635 = level - 5;
      var G__11636 = child;
      var G__11637 = tail_node;
      return cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4(G__11634, G__11635, G__11636, G__11637) : cljs.core.tv_push_tail.call(null, G__11634, G__11635, G__11636, G__11637);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = function() {
      var G__11641 = tv;
      var G__11642 = level - 5;
      var G__11643 = cljs.core.pv_aget(node__$1, subidx);
      return cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3(G__11641, G__11642, G__11643) : cljs.core.tv_pop_tail.call(null, G__11641, G__11642, G__11643);
    }();
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__11644 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__11645 = level - 5;
        node = G__11644;
        level = G__11645;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return tcoll__$1.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(null, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return tcoll__$1.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, val);
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds for TransientVector of length"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return coll__$1.cljs$core$IIndexed$_nth$arity$2(null, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return coll__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__11649 = null;
  var G__11649__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11649__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11649 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11649__2.call(this, self__, k);
      case 3:
        return G__11649__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11649.cljs$core$IFn$_invoke$arity$2 = G__11649__2;
  G__11649.cljs$core$IFn$_invoke$arity$3 = G__11649__3;
  return G__11649;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args11646) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11646)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "shift", "shift", -1657295705, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "tail", "tail", 494507963, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__7410__auto__ = !(self__.fseq == null) && cljs.core.seq(self__.fseq);
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    var and__7398__auto__ = !(self__.riter == null);
    if (and__7398__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__7398__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.fseq == null)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (!(self__.riter == null) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "fseq", "fseq", -1466412450, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "riter", "riter", -237834262, null)], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.indexOf = function() {
  var G__11650 = null;
  var G__11650__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11650__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11650 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11650__1.call(this, x);
      case 2:
        return G__11650__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11650.cljs$core$IFn$_invoke$arity$1 = G__11650__1;
  G__11650.cljs$core$IFn$_invoke$arity$2 = G__11650__2;
  return G__11650;
}();
cljs.core.PersistentQueueSeq.prototype.lastIndexOf = function() {
  var G__11651 = null;
  var G__11651__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11651__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11651 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11651__1.call(this, x);
      case 2:
        return G__11651__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11651.cljs$core$IFn$_invoke$arity$1 = G__11651__1;
  G__11651.cljs$core$IFn$_invoke$arity$2 = G__11651__2;
  return G__11651;
}();
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4655__auto__ = cljs.core.next(self__.front);
  if (temp__4655__auto__) {
    var f1 = temp__4655__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.indexOf = function() {
  var G__11652 = null;
  var G__11652__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11652__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11652 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11652__1.call(this, x);
      case 2:
        return G__11652__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11652.cljs$core$IFn$_invoke$arity$1 = G__11652__1;
  G__11652.cljs$core$IFn$_invoke$arity$2 = G__11652__2;
  return G__11652;
}();
cljs.core.PersistentQueue.prototype.lastIndexOf = function() {
  var G__11653 = null;
  var G__11653__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, self__.count.cljs$core$IFn$_invoke$arity$1 ? self__.count.cljs$core$IFn$_invoke$arity$1(coll) : self__.count.call(null, coll));
  };
  var G__11653__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11653 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11653__1.call(this, x);
      case 2:
        return G__11653__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11653.cljs$core$IFn$_invoke$arity$1 = G__11653__1;
  G__11653.cljs$core$IFn$_invoke$arity$2 = G__11653__2;
  return G__11653;
}();
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4655__auto__ = cljs.core.next(self__.front);
    if (temp__4655__auto__) {
      var f1 = temp__4655__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__7410__auto__ = self__.front;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__7410__auto__ = self__.rear;
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.Symbol(null, "front", "front", 117022539, null), new cljs.core.Symbol(null, "rear", "rear", -900164830, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__11654 = i + incr;
        i = G__11654;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__11655 = i + 1;
      var G__11656 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__11655;
      out = G__11656;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_11661 = 0;
  while (true) {
    if (i_11661 < l) {
      var k_11662 = ks[i_11661];
      new_obj[k_11662] = obj[k_11662];
      var G__11663 = i_11661 + 1;
      i_11661 = G__11663;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ObjMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, k)], null);
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__11666 = init__$1;
        var G__11667 = k;
        var G__11668 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11666, G__11667, G__11668) : f.call(null, G__11666, G__11667, G__11668);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11669 = cljs.core.rest(keys__$1);
        var G__11670 = init__$2;
        keys__$1 = G__11669;
        init__$1 = G__11670;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__11664_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__11664_SHARP_, self__.strobj[p1__11664_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__11671 = null;
  var G__11671__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11671__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11671 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11671__2.call(this, self__, k);
      case 3:
        return G__11671__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11671.cljs$core$IFn$_invoke$arity$2 = G__11671__2;
  G__11671.cljs$core$IFn$_invoke$arity$3 = G__11671__3;
  return G__11671;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args11665) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11665)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "keys", "keys", -1586012071, null), new cljs.core.Symbol(null, "strobj", "strobj", 1088091283, null), new cljs.core.Symbol(null, "update-count", "update-count", -411982269, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__7410__auto__ = self__.i < self__.base_count;
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "record", "record", 861424668, null), new cljs.core.Symbol(null, "base-count", "base-count", -1180647182, null), new cljs.core.Symbol(null, "fields", "fields", -291534703, null), new cljs.core.Symbol(null, 
  "ext-map-iter", "ext-map-iter", -1215982757, null)], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__11674 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11674, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11674, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__11677 = i + 2;
        i = G__11677;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__11678 = i + 2;
        i = G__11678;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__11679 = i + 2;
        i = G__11679;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__11680 = i + 2;
        i = G__11680;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__11681 = i + 2;
        i = G__11681;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_11682 = 0;
  while (true) {
    if (i_11682 < l) {
      narr[i_11682] = arr[i_11682];
      var G__11683 = i_11682 + 1;
      i_11682 = G__11683;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.indexOf = function() {
  var G__11684 = null;
  var G__11684__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11684__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11684 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11684__1.call(this, x);
      case 2:
        return G__11684__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11684.cljs$core$IFn$_invoke$arity$1 = G__11684__1;
  G__11684.cljs$core$IFn$_invoke$arity$2 = G__11684__2;
  return G__11684;
}();
cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = function() {
  var G__11685 = null;
  var G__11685__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11685__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11685 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11685__1.call(this, x);
      case 2:
        return G__11685__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11685.cljs$core$IFn$_invoke$arity$1 = G__11685__1;
  G__11685.cljs$core$IFn$_invoke$arity$2 = G__11685__2;
  return G__11685;
}();
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null)], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1, k)], null);
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11687 = cljs.core.seq(coll);
  var chunk__11688 = null;
  var count__11689 = 0;
  var i__11690 = 0;
  while (true) {
    if (i__11690 < count__11689) {
      var vec__11691 = chunk__11688.cljs$core$IIndexed$_nth$arity$2(null, i__11690);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11691, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11691, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11704 = seq__11687;
      var G__11705 = chunk__11688;
      var G__11706 = count__11689;
      var G__11707 = i__11690 + 1;
      seq__11687 = G__11704;
      chunk__11688 = G__11705;
      count__11689 = G__11706;
      i__11690 = G__11707;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11687);
      if (temp__4657__auto__) {
        var seq__11687__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11687__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__11687__$1);
          var G__11708 = cljs.core.chunk_rest(seq__11687__$1);
          var G__11709 = c__8229__auto__;
          var G__11710 = cljs.core.count(c__8229__auto__);
          var G__11711 = 0;
          seq__11687 = G__11708;
          chunk__11688 = G__11709;
          count__11689 = G__11710;
          i__11690 = G__11711;
          continue;
        } else {
          var vec__11694 = cljs.core.first(seq__11687__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11694, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11694, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11712 = cljs.core.next(seq__11687__$1);
          var G__11713 = null;
          var G__11714 = 0;
          var G__11715 = 0;
          seq__11687 = G__11712;
          chunk__11688 = G__11713;
          count__11689 = G__11714;
          i__11690 = G__11715;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__11697 = init__$1;
        var G__11698 = self__.arr[i];
        var G__11699 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11697, G__11698, G__11699) : f.call(null, G__11697, G__11698, G__11699);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11716 = i + 2;
        var G__11717 = init__$2;
        i = G__11716;
        init__$1 = G__11717;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__11718 = i + 2;
              i = G__11718;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__11719 = s + 2;
            var G__11720 = d;
            s = G__11719;
            d = G__11720;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__11721 = s + 2;
            var G__11722 = d + 2;
            s = G__11721;
            d = G__11722;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__11703 = cljs.core.aclone(self__.arr);
        G__11703[idx + 1] = v;
        return G__11703;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__11723 = ret.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__11724 = cljs.core.next(es);
          ret = G__11723;
          es = G__11724;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__11725 = null;
  var G__11725__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11725__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11725 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11725__2.call(this, self__, k);
      case 3:
        return G__11725__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11725.cljs$core$IFn$_invoke$arity$2 = G__11725__2;
  G__11725.cljs$core$IFn$_invoke$arity$3 = G__11725__3;
  return G__11725;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args11686) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11686)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_11726 = 0;
    while (true) {
      if (i_11726 < arr__$1.length) {
        var k_11727 = arr__$1[i_11726];
        var v_11728 = arr__$1[i_11726 + 1];
        var idx_11729 = cljs.core.array_index_of(ret, k_11727);
        if (idx_11729 === -1) {
          ret.push(k_11727);
          ret.push(v_11728);
        } else {
        }
        var G__11730 = i_11726 + 2;
        i_11726 = G__11730;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var cnt = arr__$2.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
};
cljs.core.PersistentArrayMap.createWithCheck = function(arr) {
  var ret = [];
  var i_11732 = 0;
  while (true) {
    if (i_11732 < arr.length) {
      var k_11733 = arr[i_11732];
      var v_11734 = arr[i_11732 + 1];
      var idx_11735 = cljs.core.array_index_of(ret, k_11733);
      if (idx_11735 === -1) {
        var G__11731_11736 = ret;
        G__11731_11736.push(k_11733);
        G__11731_11736.push(v_11734);
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(k_11733)].join(""));
      }
      var G__11737 = i_11732 + 2;
      i_11732 = G__11737;
      continue;
    } else {
    }
    break;
  }
  var cnt = arr.length / 2;
  return new cljs.core.PersistentArrayMap(null, cnt, arr, null);
};
cljs.core.PersistentArrayMap.createAsIfByAssoc = function(arr) {
  var ret = [];
  var i_11739 = 0;
  while (true) {
    if (i_11739 < arr.length) {
      var k_11740 = arr[i_11739];
      var v_11741 = arr[i_11739 + 1];
      var idx_11742 = cljs.core.array_index_of(ret, k_11740);
      if (idx_11742 === -1) {
        var G__11738_11743 = ret;
        G__11738_11743.push(k_11740);
        G__11738_11743.push(v_11741);
      } else {
        ret[idx_11742 + 1] = v_11741;
      }
      var G__11744 = i_11739 + 2;
      i_11739 = G__11744;
      continue;
    } else {
    }
    break;
  }
  return new cljs.core.PersistentArrayMap(null, ret.length / 2, ret, null);
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__11747 = cljs.core.next(es);
          var G__11748 = tcoll__$2.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__11747;
          tcoll__$2 = G__11748;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__11746_11749 = self__.arr;
      G__11746_11749.pop();
      G__11746_11749.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "editable?", "editable?", -164945806, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "len", "len", -1230778691, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), 
  new cljs.core.Symbol(null, "arr", "arr", 2115492975, null)], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__11750 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__11751 = i + 2;
      out = G__11750;
      i = G__11751;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args11752 = [];
  var len__8523__auto___11757 = arguments.length;
  var i__8524__auto___11758 = 0;
  while (true) {
    if (i__8524__auto___11758 < len__8523__auto___11757) {
      args11752.push(arguments[i__8524__auto___11758]);
      var G__11759 = i__8524__auto___11758 + 1;
      i__8524__auto___11758 = G__11759;
      continue;
    } else {
    }
    break;
  }
  var G__11754 = args11752.length;
  switch(G__11754) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11752.length)].join(""));
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__11755 = cljs.core.aclone(arr);
  G__11755[i] = a;
  return G__11755;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__11756 = cljs.core.aclone(arr);
  G__11756[i] = a;
  G__11756[j] = b;
  return G__11756;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args11761 = [];
  var len__8523__auto___11764 = arguments.length;
  var i__8524__auto___11765 = 0;
  while (true) {
    if (i__8524__auto___11765 < len__8523__auto___11764) {
      args11761.push(arguments[i__8524__auto___11765]);
      var G__11766 = i__8524__auto___11765 + 1;
      i__8524__auto___11765 = G__11766;
      continue;
    } else {
    }
    break;
  }
  var G__11763 = args11761.length;
  switch(G__11763) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11761.length)].join(""));
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__11771 = init__$1;
          var G__11772 = k;
          var G__11773 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11771, G__11772, G__11773) : f.call(null, G__11771, G__11772, G__11773);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__11774 = i + 2;
        var G__11775 = init__$2;
        i = G__11774;
        init__$1 = G__11775;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = !(key == null) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : !(node_or_val == null) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__7410__auto__ = !(self__.next_entry == null);
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    var or__7410__auto____$1 = !(self__.next_iter == null);
    if (or__7410__auto____$1) {
      return or__7410__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (!(self__.next_entry == null)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (!(self__.next_iter == null)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-entry", "next-entry", 1091342476, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_.val = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_11789 = 0;
        var j_11790 = 0;
        while (true) {
          if (i_11789 < 32) {
            if ((self__.bitmap >>> i_11789 & 1) === 0) {
              var G__11791 = i_11789 + 1;
              var G__11792 = j_11790;
              i_11789 = G__11791;
              j_11790 = G__11792;
              continue;
            } else {
              nodes[i_11789] = !(self__.arr[j_11790] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_11790]), self__.arr[j_11790], self__.arr[j_11790 + 1], added_leaf_QMARK_) : self__.arr[j_11790 + 1];
              var G__11793 = i_11789 + 1;
              var G__11794 = j_11790 + 2;
              i_11789 = G__11793;
              j_11790 = G__11794;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__11776 = edit__$1;
          var G__11777 = shift + 5;
          var G__11778 = key_or_nil;
          var G__11779 = val_or_node;
          var G__11780 = hash;
          var G__11781 = key;
          var G__11782 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__11776, G__11777, G__11778, G__11779, G__11780, G__11781, G__11782) : cljs.core.create_node.call(null, G__11776, G__11777, G__11778, G__11779, G__11780, G__11781, G__11782);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_11795 = 0;
      var j_11796 = 0;
      while (true) {
        if (i_11795 < 32) {
          if ((self__.bitmap >>> i_11795 & 1) === 0) {
            var G__11797 = i_11795 + 1;
            var G__11798 = j_11796;
            i_11795 = G__11797;
            j_11796 = G__11798;
            continue;
          } else {
            nodes[i_11795] = !(self__.arr[j_11796] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_11796]), self__.arr[j_11796], self__.arr[j_11796 + 1], added_leaf_QMARK_) : self__.arr[j_11796 + 1];
            var G__11799 = i_11795 + 1;
            var G__11800 = j_11796 + 2;
            i_11795 = G__11799;
            j_11796 = G__11800;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__11783 = shift + 5;
          var G__11784 = key_or_nil;
          var G__11785 = val_or_node;
          var G__11786 = hash;
          var G__11787 = key;
          var G__11788 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__11783, G__11784, G__11785, G__11786, G__11787, G__11788) : cljs.core.create_node.call(null, G__11783, G__11784, G__11785, G__11786, G__11787, G__11788);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "bitmap", "bitmap", 501334601, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__11801 = i + 1;
        var G__11802 = j + 2;
        var G__11803 = bitmap | 1 << i;
        i = G__11801;
        j = G__11802;
        bitmap = G__11803;
        continue;
      } else {
        var G__11804 = i + 1;
        var G__11805 = j;
        var G__11806 = bitmap;
        i = G__11804;
        j = G__11805;
        bitmap = G__11806;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(!(self__.next_iter == null) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (!(node == null)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "next-iter", "next-iter", 1526626239, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__11807 = i + 1;
          var G__11808 = init__$2;
          i = G__11807;
          init__$1 = G__11808;
          continue;
        }
      } else {
        var G__11809 = i + 1;
        var G__11810 = init__$1;
        i = G__11809;
        init__$1 = G__11810;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__11811 = i + 2;
        i = G__11811;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_.val = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx + 1], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "edit", "edit", -1302639, null), cljs.core.with_meta(new cljs.core.Symbol(null, "collision-hash", "collision-hash", -35831342, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args11812 = [];
  var len__8523__auto___11815 = arguments.length;
  var i__8524__auto___11816 = 0;
  while (true) {
    if (i__8524__auto___11816 < len__8523__auto___11815) {
      args11812.push(arguments[i__8524__auto___11816]);
      var G__11817 = i__8524__auto___11816 + 1;
      i__8524__auto___11816 = G__11817;
      continue;
    } else {
    }
    break;
  }
  var G__11814 = args11812.length;
  switch(G__11814) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11812.length)].join(""));
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.indexOf = function() {
  var G__11825 = null;
  var G__11825__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11825__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11825 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11825__1.call(this, x);
      case 2:
        return G__11825__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11825.cljs$core$IFn$_invoke$arity$1 = G__11825__1;
  G__11825.cljs$core$IFn$_invoke$arity$2 = G__11825__2;
  return G__11825;
}();
cljs.core.NodeSeq.prototype.lastIndexOf = function() {
  var G__11826 = null;
  var G__11826__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11826__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11826 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11826__1.call(this, x);
      case 2:
        return G__11826__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11826.cljs$core$IFn$_invoke$arity$1 = G__11826__1;
  G__11826.cljs$core$IFn$_invoke$arity$2 = G__11826__2;
  return G__11826;
}();
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var ret = self__.s == null ? function() {
    var G__11819 = self__.nodes;
    var G__11820 = self__.i + 2;
    var G__11821 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__11819, G__11820, G__11821) : cljs.core.create_inode_seq.call(null, G__11819, G__11820, G__11821);
  }() : function() {
    var G__11822 = self__.nodes;
    var G__11823 = self__.i;
    var G__11824 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__11822, G__11823, G__11824) : cljs.core.create_inode_seq.call(null, G__11822, G__11823, G__11824);
  }();
  if (!(ret == null)) {
    return ret;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args11827 = [];
  var len__8523__auto___11830 = arguments.length;
  var i__8524__auto___11831 = 0;
  while (true) {
    if (i__8524__auto___11831 < len__8523__auto___11830) {
      args11827.push(arguments[i__8524__auto___11831]);
      var G__11832 = i__8524__auto___11831 + 1;
      i__8524__auto___11831 = G__11832;
      continue;
    } else {
    }
    break;
  }
  var G__11829 = args11827.length;
  switch(G__11829) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11827.length)].join(""));
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4655__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4655__auto__)) {
            var node = temp__4655__auto__;
            var temp__4655__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4655__auto____$1)) {
              var node_seq = temp__4655__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__11834 = j + 2;
              j = G__11834;
              continue;
            }
          } else {
            var G__11835 = j + 2;
            j = G__11835;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.indexOf = function() {
  var G__11840 = null;
  var G__11840__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11840__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11840 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11840__1.call(this, x);
      case 2:
        return G__11840__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11840.cljs$core$IFn$_invoke$arity$1 = G__11840__1;
  G__11840.cljs$core$IFn$_invoke$arity$2 = G__11840__2;
  return G__11840;
}();
cljs.core.ArrayNodeSeq.prototype.lastIndexOf = function() {
  var G__11841 = null;
  var G__11841__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11841__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11841 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11841__1.call(this, x);
      case 2:
        return G__11841__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11841.cljs$core$IFn$_invoke$arity$1 = G__11841__1;
  G__11841.cljs$core$IFn$_invoke$arity$2 = G__11841__2;
  return G__11841;
}();
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var ret = function() {
    var G__11836 = null;
    var G__11837 = self__.nodes;
    var G__11838 = self__.i;
    var G__11839 = cljs.core.next(self__.s);
    return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__11836, G__11837, G__11838, G__11839) : cljs.core.create_array_node_seq.call(null, G__11836, G__11837, G__11838, G__11839);
  }();
  if (!(ret == null)) {
    return ret;
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "nodes", "nodes", -459054278, null), new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.Symbol(null, "s", "s", -948495851, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 
  875778266), true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args11842 = [];
  var len__8523__auto___11845 = arguments.length;
  var i__8524__auto___11846 = 0;
  while (true) {
    if (i__8524__auto___11846 < len__8523__auto___11845) {
      args11842.push(arguments[i__8524__auto___11846]);
      var G__11847 = i__8524__auto___11846 + 1;
      i__8524__auto___11846 = G__11847;
      continue;
    } else {
    }
    break;
  }
  var G__11844 = args11842.length;
  switch(G__11844) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args11842.length)].join(""));
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4655__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4655__auto__)) {
          var nj = temp__4655__auto__;
          var temp__4655__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4655__auto____$1)) {
            var ns = temp__4655__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__11849 = j + 1;
            j = G__11849;
            continue;
          }
        } else {
          var G__11850 = j + 1;
          j = G__11850;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return !self__.seen || self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null);
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.Symbol(null, "root-iter", "root-iter", 1974672108, null), cljs.core.with_meta(new cljs.core.Symbol(null, "seen", "seen", 1121531738, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null);
  } else {
    return self__.root.inode_find(0, cljs.core.hash(k), k, null);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11852 = cljs.core.seq(coll);
  var chunk__11853 = null;
  var count__11854 = 0;
  var i__11855 = 0;
  while (true) {
    if (i__11855 < count__11854) {
      var vec__11856 = chunk__11853.cljs$core$IIndexed$_nth$arity$2(null, i__11855);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11856, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11856, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__11864 = seq__11852;
      var G__11865 = chunk__11853;
      var G__11866 = count__11854;
      var G__11867 = i__11855 + 1;
      seq__11852 = G__11864;
      chunk__11853 = G__11865;
      count__11854 = G__11866;
      i__11855 = G__11867;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11852);
      if (temp__4657__auto__) {
        var seq__11852__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11852__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__11852__$1);
          var G__11868 = cljs.core.chunk_rest(seq__11852__$1);
          var G__11869 = c__8229__auto__;
          var G__11870 = cljs.core.count(c__8229__auto__);
          var G__11871 = 0;
          seq__11852 = G__11868;
          chunk__11853 = G__11869;
          count__11854 = G__11870;
          i__11855 = G__11871;
          continue;
        } else {
          var vec__11859 = cljs.core.first(seq__11852__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11859, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11859, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__11872 = cljs.core.next(seq__11852__$1);
          var G__11873 = null;
          var G__11874 = 0;
          var G__11875 = 0;
          seq__11852 = G__11872;
          chunk__11853 = G__11873;
          count__11854 = G__11874;
          i__11855 = G__11875;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter();
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__11876 = ret.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__11877 = cljs.core.next(es);
          ret = G__11876;
          es = G__11877;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__11878 = null;
  var G__11878__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11878__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11878 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11878__2.call(this, self__, k);
      case 3:
        return G__11878__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11878.cljs$core$IFn$_invoke$arity$2 = G__11878__2;
  G__11878.cljs$core$IFn$_invoke$arity$3 = G__11878__3;
  return G__11878;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args11851) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11851)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "root", "root", 1191874074, null), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", 
  "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__11879 = i + 2;
      var G__11880 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__11879;
      ret = G__11880;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__11881 = i + 1;
      var G__11882 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__11881;
      out = G__11882;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.createWithCheck = function(arr) {
  var len = arr.length;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i_11883 = 0;
  while (true) {
    if (i_11883 < len) {
      cljs.core._assoc_BANG_(ret, arr[i_11883], arr[i_11883 + 1]);
      if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._count(ret), i_11883 / 2 + 1)) {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(arr[i_11883])].join(""));
      } else {
        var G__11884 = i_11883 + 2;
        i_11883 = G__11884;
        continue;
      }
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(ret);
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4655__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          var G__11886 = cljs.core.next(es);
          var G__11887 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__11886;
          tcoll__$1 = G__11887;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (removed_leaf_QMARK_.val) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "edit", "edit", -1302639, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "root", "root", 1191874074, null), new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "count", "count", -514511684, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "has-nil?", "has-nil?", 825886722, null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, 
  "boolean", "boolean", -278886877, null), new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "nil-val", "nil-val", -513933559, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__11888 = ascending_QMARK_ ? t.left : t.right;
      var G__11889 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__11888;
      stack__$1 = G__11889;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.indexOf = function() {
  var G__11890 = null;
  var G__11890__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11890__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11890 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11890__1.call(this, x);
      case 2:
        return G__11890__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11890.cljs$core$IFn$_invoke$arity$1 = G__11890__1;
  G__11890.cljs$core$IFn$_invoke$arity$2 = G__11890__2;
  return G__11890;
}();
cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = function() {
  var G__11891 = null;
  var G__11891__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11891__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11891 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11891__1.call(this, x);
      case 2:
        return G__11891__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11891.cljs$core$IFn$_invoke$arity$1 = G__11891__1;
  G__11891.cljs$core$IFn$_invoke$arity$2 = G__11891__2;
  return G__11891;
}();
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "stack", "stack", 847125597, null), cljs.core.with_meta(new cljs.core.Symbol(null, "ascending?", "ascending?", -1938452653, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)), new cljs.core.Symbol(null, 
  "cnt", "cnt", 1924510325, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? function() {
    var G__11901 = node.left;
    var G__11902 = f;
    var G__11903 = init;
    return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__11901, G__11902, G__11903) : cljs.core.tree_map_kv_reduce.call(null, G__11901, G__11902, G__11903);
  }() : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__11904 = init__$1;
      var G__11905 = node.key;
      var G__11906 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__11904, G__11905, G__11906) : f.call(null, G__11904, G__11905, G__11906);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? function() {
        var G__11907 = node.right;
        var G__11908 = f;
        var G__11909 = init__$2;
        return cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__11907, G__11908, G__11909) : cljs.core.tree_map_kv_reduce.call(null, G__11907, G__11908, G__11909);
      }() : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null);
};
cljs.core.BlackNode.prototype.lastIndexOf = function() {
  var G__11911 = null;
  var G__11911__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11911__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11911 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11911__1.call(this, x);
      case 2:
        return G__11911__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11911.cljs$core$IFn$_invoke$arity$1 = G__11911__1;
  G__11911.cljs$core$IFn$_invoke$arity$2 = G__11911__2;
  return G__11911;
}();
cljs.core.BlackNode.prototype.indexOf = function() {
  var G__11912 = null;
  var G__11912__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11912__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11912 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11912__1.call(this, x);
      case 2:
        return G__11912__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11912.cljs$core$IFn$_invoke$arity$1 = G__11912__1;
  G__11912.cljs$core$IFn$_invoke$arity$2 = G__11912__2;
  return G__11912;
}();
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  var x__8252__auto__ = self__.key;
  return cljs.core._conj(function() {
    var x__8252__auto____$1 = self__.val;
    return cljs.core._conj(cljs.core.List.EMPTY, x__8252__auto____$1);
  }(), x__8252__auto__);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__11913 = null;
  var G__11913__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11913__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11913 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11913__2.call(this, self__, k);
      case 3:
        return G__11913__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11913.cljs$core$IFn$_invoke$arity$2 = G__11913__2;
  G__11913.cljs$core$IFn$_invoke$arity$3 = G__11913__3;
  return G__11913;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args11910) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11910)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IFind$_find$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null);
};
cljs.core.RedNode.prototype.lastIndexOf = function() {
  var G__11915 = null;
  var G__11915__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__11915__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11915 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11915__1.call(this, x);
      case 2:
        return G__11915__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11915.cljs$core$IFn$_invoke$arity$1 = G__11915__1;
  G__11915.cljs$core$IFn$_invoke$arity$2 = G__11915__2;
  return G__11915;
}();
cljs.core.RedNode.prototype.indexOf = function() {
  var G__11916 = null;
  var G__11916__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__11916__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__11916 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__11916__1.call(this, x);
      case 2:
        return G__11916__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11916.cljs$core$IFn$_invoke$arity$1 = G__11916__1;
  G__11916.cljs$core$IFn$_invoke$arity$2 = G__11916__2;
  return G__11916;
}();
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return node__$1.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  var x__8252__auto__ = self__.key;
  return cljs.core._conj(function() {
    var x__8252__auto____$1 = self__.val;
    return cljs.core._conj(cljs.core.List.EMPTY, x__8252__auto____$1);
  }(), x__8252__auto__);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__11917 = null;
  var G__11917__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__11917__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__11917 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11917__2.call(this, self__, k);
      case 3:
        return G__11917__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__11917.cljs$core$IFn$_invoke$arity$2 = G__11917__2;
  G__11917.cljs$core$IFn$_invoke$arity$3 = G__11917__3;
  return G__11917;
}();
cljs.core.RedNode.prototype.apply = function(self__, args11914) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11914)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "key", "key", 124488940, null), new cljs.core.Symbol(null, "val", "val", 1769233139, null), new cljs.core.Symbol(null, "left", "left", 1241415590, null), new cljs.core.Symbol(null, "right", "right", 1187949694, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__11930 = k;
      var G__11931 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__11930, G__11931) : comp.call(null, G__11930, G__11931);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = function() {
          var G__11932 = comp;
          var G__11933 = tree.left;
          var G__11934 = k;
          var G__11935 = v;
          var G__11936 = found;
          return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__11932, G__11933, G__11934, G__11935, G__11936) : cljs.core.tree_map_add.call(null, G__11932, G__11933, G__11934, G__11935, G__11936);
        }();
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = function() {
          var G__11937 = comp;
          var G__11938 = tree.right;
          var G__11939 = k;
          var G__11940 = v;
          var G__11941 = found;
          return cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__11937, G__11938, G__11939, G__11940, G__11941) : cljs.core.tree_map_add.call(null, G__11937, G__11938, G__11939, G__11940, G__11941);
        }();
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = function() {
            var G__11950 = left.right;
            var G__11951 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11950, G__11951) : cljs.core.tree_map_append.call(null, G__11950, G__11951);
          }();
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, function() {
            var G__11952 = left.right;
            var G__11953 = right;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11952, G__11953) : cljs.core.tree_map_append.call(null, G__11952, G__11953);
          }(), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, function() {
            var G__11954 = left;
            var G__11955 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11954, G__11955) : cljs.core.tree_map_append.call(null, G__11954, G__11955);
          }(), right.right, null);
        } else {
          var app = function() {
            var G__11956 = left.right;
            var G__11957 = right.left;
            return cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__11956, G__11957) : cljs.core.tree_map_append.call(null, G__11956, G__11957);
          }();
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__11968 = k;
      var G__11969 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__11968, G__11969) : comp.call(null, G__11968, G__11969);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = function() {
          var G__11970 = comp;
          var G__11971 = tree.left;
          var G__11972 = k;
          var G__11973 = found;
          return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__11970, G__11971, G__11972, G__11973) : cljs.core.tree_map_remove.call(null, G__11970, G__11971, G__11972, G__11973);
        }();
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = function() {
          var G__11974 = comp;
          var G__11975 = tree.right;
          var G__11976 = k;
          var G__11977 = found;
          return cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__11974, G__11975, G__11976, G__11977) : cljs.core.tree_map_remove.call(null, G__11974, G__11975, G__11976, G__11977);
        }();
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, function() {
        var G__11986 = comp;
        var G__11987 = tree.left;
        var G__11988 = k;
        var G__11989 = v;
        return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__11986, G__11987, G__11988, G__11989) : cljs.core.tree_map_replace.call(null, G__11986, G__11987, G__11988, G__11989);
      }(), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, function() {
        var G__11990 = comp;
        var G__11991 = tree.right;
        var G__11992 = k;
        var G__11993 = v;
        return cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__11990, G__11991, G__11992, G__11993) : cljs.core.tree_map_replace.call(null, G__11990, G__11991, G__11992, G__11993);
      }());
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$_find$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.entry_at(k);
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__11995 = cljs.core.seq(coll);
  var chunk__11996 = null;
  var count__11997 = 0;
  var i__11998 = 0;
  while (true) {
    if (i__11998 < count__11997) {
      var vec__11999 = chunk__11996.cljs$core$IIndexed$_nth$arity$2(null, i__11998);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11999, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__11999, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__12009 = seq__11995;
      var G__12010 = chunk__11996;
      var G__12011 = count__11997;
      var G__12012 = i__11998 + 1;
      seq__11995 = G__12009;
      chunk__11996 = G__12010;
      count__11997 = G__12011;
      i__11998 = G__12012;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__11995);
      if (temp__4657__auto__) {
        var seq__11995__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__11995__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__11995__$1);
          var G__12013 = cljs.core.chunk_rest(seq__11995__$1);
          var G__12014 = c__8229__auto__;
          var G__12015 = cljs.core.count(c__8229__auto__);
          var G__12016 = 0;
          seq__11995 = G__12013;
          chunk__11996 = G__12014;
          count__11997 = G__12015;
          i__11998 = G__12016;
          continue;
        } else {
          var vec__12002 = cljs.core.first(seq__11995__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12002, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12002, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__12017 = cljs.core.next(seq__11995__$1);
          var G__12018 = null;
          var G__12019 = 0;
          var G__12020 = 0;
          seq__11995 = G__12017;
          chunk__11996 = G__12018;
          count__11997 = G__12019;
          i__11998 = G__12020;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__12005 = k;
        var G__12006 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__12005, G__12006) : self__.comp.call(null, G__12005, G__12006);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__12021 = t.left;
          t = G__12021;
          continue;
        } else {
          var G__12022 = t.right;
          t = G__12022;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__12023 = ret.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__12024 = cljs.core.next(es);
          ret = G__12023;
          es = G__12024;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__12025 = null;
  var G__12025__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12025__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12025 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12025__2.call(this, self__, k);
      case 3:
        return G__12025__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12025.cljs$core$IFn$_invoke$arity$2 = G__12025__2;
  G__12025.cljs$core$IFn$_invoke$arity$3 = G__12025__3;
  return G__12025;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args11994) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args11994)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__12007 = k;
          var G__12008 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__12007, G__12008) : self__.comp.call(null, G__12007, G__12008);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__12026 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__12027 = t.left;
              stack = G__12026;
              t = G__12027;
              continue;
            } else {
              var G__12028 = stack;
              var G__12029 = t.right;
              stack = G__12028;
              t = G__12029;
              continue;
            }
          } else {
            if (c > 0) {
              var G__12030 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__12031 = t.right;
              stack = G__12030;
              t = G__12031;
              continue;
            } else {
              var G__12032 = stack;
              var G__12033 = t.left;
              stack = G__12032;
              t = G__12033;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "comp", "comp", -1462482139, null), new cljs.core.Symbol(null, "tree", "tree", 1444219499, null), new cljs.core.Symbol(null, "cnt", "cnt", 1924510325, null), new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12035 = arguments.length;
  var i__8524__auto___12036 = 0;
  while (true) {
    if (i__8524__auto___12036 < len__8523__auto___12035) {
      args__8530__auto__.push(arguments[i__8524__auto___12036]);
      var G__12037 = i__8524__auto___12036 + 1;
      i__8524__auto___12036 = G__12037;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__12038 = cljs.core.nnext(in$);
      var G__12039 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__12038;
      out = G__12039;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq12034) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12034));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12041 = arguments.length;
  var i__8524__auto___12042 = 0;
  while (true) {
    if (i__8524__auto___12042 < len__8523__auto___12041) {
      args__8530__auto__.push(arguments[i__8524__auto___12042]);
      var G__12043 = i__8524__auto___12042 + 1;
      i__8524__auto___12042 = G__12043;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.createAsIfByAssoc(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq12040) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12040));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12047 = arguments.length;
  var i__8524__auto___12048 = 0;
  while (true) {
    if (i__8524__auto___12048 < len__8523__auto___12047) {
      args__8530__auto__.push(arguments[i__8524__auto___12048]);
      var G__12049 = i__8524__auto___12048 + 1;
      i__8524__auto___12048 = G__12049;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__12050 = cljs.core.nnext(kvs);
      kvs = G__12050;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq12044) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12044));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12052 = arguments.length;
  var i__8524__auto___12053 = 0;
  while (true) {
    if (i__8524__auto___12053 < len__8523__auto___12052) {
      args__8530__auto__.push(arguments[i__8524__auto___12053]);
      var G__12054 = i__8524__auto___12053 + 1;
      i__8524__auto___12053 = G__12054;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__12055 = cljs.core.nnext(in$);
      var G__12056 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__12055;
      out = G__12056;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq12051) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12051));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12059 = arguments.length;
  var i__8524__auto___12060 = 0;
  while (true) {
    if (i__8524__auto___12060 < len__8523__auto___12059) {
      args__8530__auto__.push(arguments[i__8524__auto___12060]);
      var G__12061 = i__8524__auto___12060 + 1;
      i__8524__auto___12060 = G__12061;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__12062 = cljs.core.nnext(in$);
      var G__12063 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__12062;
      out = G__12063;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq12057) {
  var G__12058 = cljs.core.first(seq12057);
  var seq12057__$1 = cljs.core.next(seq12057);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__12058, seq12057__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.indexOf = function() {
  var G__12066 = null;
  var G__12066__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__12066__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__12066 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12066__1.call(this, x);
      case 2:
        return G__12066__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12066.cljs$core$IFn$_invoke$arity$1 = G__12066__1;
  G__12066.cljs$core$IFn$_invoke$arity$2 = G__12066__2;
  return G__12066;
}();
cljs.core.KeySeq.prototype.lastIndexOf = function() {
  var G__12067 = null;
  var G__12067__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__12067__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__12067 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12067__1.call(this, x);
      case 2:
        return G__12067__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12067.cljs$core$IFn$_invoke$arity$1 = G__12067__1;
  G__12067.cljs$core$IFn$_invoke$arity$2 = G__12067__2;
  return G__12067;
}();
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.indexOf = function() {
  var G__12070 = null;
  var G__12070__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__12070__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__12070 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12070__1.call(this, x);
      case 2:
        return G__12070__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12070.cljs$core$IFn$_invoke$arity$1 = G__12070__1;
  G__12070.cljs$core$IFn$_invoke$arity$2 = G__12070__2;
  return G__12070;
}();
cljs.core.ValSeq.prototype.lastIndexOf = function() {
  var G__12071 = null;
  var G__12071__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__12071__2 = function(x, start) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start);
  };
  G__12071 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12071__1.call(this, x);
      case 2:
        return G__12071__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12071.cljs$core$IFn$_invoke$arity$1 = G__12071__1;
  G__12071.cljs$core$IFn$_invoke$arity$2 = G__12071__2;
  return G__12071;
}();
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "mseq", "mseq", 1602647196, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "_meta", "_meta", -1716892533, null)], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4657__auto__ = cljs.core.seq(hash_map);
  if (temp__4657__auto__) {
    var mseq = temp__4657__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12075 = arguments.length;
  var i__8524__auto___12076 = 0;
  while (true) {
    if (i__8524__auto___12076 < len__8523__auto___12075) {
      args__8530__auto__.push(arguments[i__8524__auto___12076]);
      var G__12077 = i__8524__auto___12076 + 1;
      i__8524__auto___12076 = G__12077;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__12072_SHARP_, p2__12073_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__7410__auto__ = p1__12072_SHARP_;
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__12073_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq12074) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12074));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12082 = arguments.length;
  var i__8524__auto___12083 = 0;
  while (true) {
    if (i__8524__auto___12083 < len__8523__auto___12082) {
      args__8530__auto__.push(arguments[i__8524__auto___12083]);
      var G__12084 = i__8524__auto___12083 + 1;
      i__8524__auto___12083 = G__12084;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__12080 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__12081 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12080, G__12081) : f.call(null, G__12080, G__12081);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__7410__auto__ = m1;
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq12078) {
  var G__12079 = cljs.core.first(seq12078);
  var seq12078__$1 = cljs.core.next(seq12078);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__12079, seq12078__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__12085 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__12086 = cljs.core.next(keys);
      ret = G__12085;
      keys = G__12086;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "iter", "iter", -1346195486, null)], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12089 = cljs.core.seq(coll);
  var chunk__12090 = null;
  var count__12091 = 0;
  var i__12092 = 0;
  while (true) {
    if (i__12092 < count__12091) {
      var vec__12093 = chunk__12090.cljs$core$IIndexed$_nth$arity$2(null, i__12092);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12093, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12093, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__12099 = seq__12089;
      var G__12100 = chunk__12090;
      var G__12101 = count__12091;
      var G__12102 = i__12092 + 1;
      seq__12089 = G__12099;
      chunk__12090 = G__12100;
      count__12091 = G__12101;
      i__12092 = G__12102;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__12089);
      if (temp__4657__auto__) {
        var seq__12089__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__12089__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__12089__$1);
          var G__12103 = cljs.core.chunk_rest(seq__12089__$1);
          var G__12104 = c__8229__auto__;
          var G__12105 = cljs.core.count(c__8229__auto__);
          var G__12106 = 0;
          seq__12089 = G__12103;
          chunk__12090 = G__12104;
          count__12091 = G__12105;
          i__12092 = G__12106;
          continue;
        } else {
          var vec__12096 = cljs.core.first(seq__12089__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12096, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12096, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__12107 = cljs.core.next(seq__12089__$1);
          var G__12108 = null;
          var G__12109 = 0;
          var G__12110 = 0;
          seq__12089 = G__12107;
          chunk__12090 = G__12108;
          count__12091 = G__12109;
          i__12092 = G__12110;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__12087_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__12087_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__12111 = null;
  var G__12111__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12111__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12111 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12111__2.call(this, self__, k);
      case 3:
        return G__12111__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12111.cljs$core$IFn$_invoke$arity$2 = G__12111__2;
  G__12111.cljs$core$IFn$_invoke$arity$3 = G__12111__3;
  return G__12111;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args12088) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12088)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "hash-map", "hash-map", -439030950, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12112 = i + 1;
        var G__12113 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__12112;
        out = G__12113;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__12114 = i + 1;
        var G__12115 = cljs.core._conj_BANG_(out, items[i]);
        i = G__12114;
        out = G__12115;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.createWithCheck = function(items) {
  var len = items.length;
  var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
  var n__8333__auto___12116 = len;
  var i_12117 = 0;
  while (true) {
    if (i_12117 < n__8333__auto___12116) {
      cljs.core._conj_BANG_(t, items[i_12117]);
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(t), i_12117 + 1)) {
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(items[i_12117])].join(""));
      }
      var G__12118 = i_12117 + 1;
      i_12117 = G__12118;
      continue;
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(t);
};
cljs.core.PersistentHashSet.createAsIfByAssoc = function(items) {
  var len = items.length;
  var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
  var n__8333__auto___12119 = len;
  var i_12120 = 0;
  while (true) {
    if (i_12120 < n__8333__auto___12119) {
      cljs.core._conj_BANG_(t, items[i_12120]);
      var G__12121 = i_12120 + 1;
      i_12120 = G__12121;
      continue;
    } else {
    }
    break;
  }
  return cljs.core._persistent_BANG_(t);
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__12123 = null;
  var G__12123__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__12123__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__12123 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12123__2.call(this, self__, k);
      case 3:
        return G__12123__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12123.cljs$core$IFn$_invoke$arity$2 = G__12123__2;
  G__12123.cljs$core$IFn$_invoke$arity$3 = G__12123__3;
  return G__12123;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args12122) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12122)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "transient-map", "transient-map", 351764893, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__12126 = cljs.core.seq(coll);
  var chunk__12127 = null;
  var count__12128 = 0;
  var i__12129 = 0;
  while (true) {
    if (i__12129 < count__12128) {
      var vec__12130 = chunk__12127.cljs$core$IIndexed$_nth$arity$2(null, i__12129);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12130, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12130, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__12136 = seq__12126;
      var G__12137 = chunk__12127;
      var G__12138 = count__12128;
      var G__12139 = i__12129 + 1;
      seq__12126 = G__12136;
      chunk__12127 = G__12137;
      count__12128 = G__12138;
      i__12129 = G__12139;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__12126);
      if (temp__4657__auto__) {
        var seq__12126__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__12126__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__12126__$1);
          var G__12140 = cljs.core.chunk_rest(seq__12126__$1);
          var G__12141 = c__8229__auto__;
          var G__12142 = cljs.core.count(c__8229__auto__);
          var G__12143 = 0;
          seq__12126 = G__12140;
          chunk__12127 = G__12141;
          count__12128 = G__12142;
          i__12129 = G__12143;
          continue;
        } else {
          var vec__12133 = cljs.core.first(seq__12126__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12133, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12133, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__12144 = cljs.core.next(seq__12126__$1);
          var G__12145 = null;
          var G__12146 = 0;
          var G__12147 = 0;
          seq__12126 = G__12144;
          chunk__12127 = G__12145;
          count__12128 = G__12146;
          i__12129 = G__12147;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__12124_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__12124_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__12148 = null;
  var G__12148__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12148__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12148 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12148__2.call(this, self__, k);
      case 3:
        return G__12148__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12148.cljs$core$IFn$_invoke$arity$2 = G__12148__2;
  G__12148.cljs$core$IFn$_invoke$arity$3 = G__12148__3;
  return G__12148;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args12125) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12125)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "tree-map", "tree-map", 1373073049, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__8327__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__8327__auto__.length) {
        var G__12149 = i + 1;
        var G__12150 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__12149;
        res = G__12150;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.PersistentHashSet.createAsIfByAssoc(in$.arr);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__12151 = cljs.core.next(in$__$1);
          var G__12152 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__12151;
          out = G__12152;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args12153 = [];
  var len__8523__auto___12157 = arguments.length;
  var i__8524__auto___12158 = 0;
  while (true) {
    if (i__8524__auto___12158 < len__8523__auto___12157) {
      args12153.push(arguments[i__8524__auto___12158]);
      var G__12159 = i__8524__auto___12158 + 1;
      i__8524__auto___12158 = G__12159;
      continue;
    } else {
    }
    break;
  }
  var G__12156 = args12153.length;
  switch(G__12156) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args12153.slice(0), 0, null);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__8542__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq12154) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12154));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12162 = arguments.length;
  var i__8524__auto___12163 = 0;
  while (true) {
    if (i__8524__auto___12163 < len__8523__auto___12162) {
      args__8530__auto__.push(arguments[i__8524__auto___12163]);
      var G__12164 = i__8524__auto___12163 + 1;
      i__8524__auto___12163 = G__12164;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq12161) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12161));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12167 = arguments.length;
  var i__8524__auto___12168 = 0;
  while (true) {
    if (i__8524__auto___12168 < len__8523__auto___12167) {
      args__8530__auto__.push(arguments[i__8524__auto___12168]);
      var G__12169 = i__8524__auto___12168 + 1;
      i__8524__auto___12168 = G__12169;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq12165) {
  var G__12166 = cljs.core.first(seq12165);
  var seq12165__$1 = cljs.core.next(seq12165);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__12166, seq12165__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args12172 = [];
  var len__8523__auto___12175 = arguments.length;
  var i__8524__auto___12176 = 0;
  while (true) {
    if (i__8524__auto___12176 < len__8523__auto___12175) {
      args12172.push(arguments[i__8524__auto___12176]);
      var G__12177 = i__8524__auto___12176 + 1;
      i__8524__auto___12176 = G__12177;
      continue;
    } else {
    }
    break;
  }
  var G__12174 = args12172.length;
  switch(G__12174) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12172.length)].join(""));
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__12170_SHARP_) {
    var temp__4655__auto__ = cljs.core.find(smap, p1__12170_SHARP_);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var e = temp__4655__auto__;
      return cljs.core.val(e);
    } else {
      return p1__12170_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4655__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4655__auto__)) {
          var e = temp__4655__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__12171_SHARP_) {
      var temp__4655__auto__ = cljs.core.find(smap, p1__12171_SHARP_);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var e = temp__4655__auto__;
        return cljs.core.second(e);
      } else {
        return p1__12171_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args12179 = [];
  var len__8523__auto___12192 = arguments.length;
  var i__8524__auto___12193 = 0;
  while (true) {
    if (i__8524__auto___12193 < len__8523__auto___12192) {
      args12179.push(arguments[i__8524__auto___12193]);
      var G__12194 = i__8524__auto___12193 + 1;
      i__8524__auto___12193 = G__12194;
      continue;
    } else {
    }
    break;
  }
  var G__12181 = args12179.length;
  switch(G__12181) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12179.length)].join(""));
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__12196 = null;
        var G__12196__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12196__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__12196__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__12196 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12196__0.call(this);
            case 1:
              return G__12196__1.call(this, result);
            case 2:
              return G__12196__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12196.cljs$core$IFn$_invoke$arity$0 = G__12196__0;
        G__12196.cljs$core$IFn$_invoke$arity$1 = G__12196__1;
        G__12196.cljs$core$IFn$_invoke$arity$2 = G__12196__2;
        return G__12196;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__12188, seen__$1) {
        while (true) {
          var vec__12189 = p__12188;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12189, 0, null);
          var xs__$1 = vec__12189;
          var temp__4657__auto__ = cljs.core.seq(xs__$1);
          if (temp__4657__auto__) {
            var s = temp__4657__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__12197 = cljs.core.rest(s);
              var G__12198 = seen__$1;
              p__12188 = G__12197;
              seen__$1 = G__12198;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__12199 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__12200 = cljs.core.next(s__$1);
      ret = G__12199;
      s__$1 = G__12200;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Doesn't support name: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__12203 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__12204 = cljs.core.next(ks);
      var G__12205 = cljs.core.next(vs);
      map = G__12203;
      ks = G__12204;
      vs = G__12205;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args12208 = [];
  var len__8523__auto___12215 = arguments.length;
  var i__8524__auto___12216 = 0;
  while (true) {
    if (i__8524__auto___12216 < len__8523__auto___12215) {
      args12208.push(arguments[i__8524__auto___12216]);
      var G__12217 = i__8524__auto___12216 + 1;
      i__8524__auto___12216 = G__12217;
      continue;
    } else {
    }
    break;
  }
  var G__12214 = args12208.length;
  switch(G__12214) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args12208.slice(3), 0, null);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12206_SHARP_, p2__12207_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__12206_SHARP_, p2__12207_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq12209) {
  var G__12210 = cljs.core.first(seq12209);
  var seq12209__$1 = cljs.core.next(seq12209);
  var G__12211 = cljs.core.first(seq12209__$1);
  var seq12209__$2 = cljs.core.next(seq12209__$1);
  var G__12212 = cljs.core.first(seq12209__$2);
  var seq12209__$3 = cljs.core.next(seq12209__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__12210, G__12211, G__12212, seq12209__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args12221 = [];
  var len__8523__auto___12228 = arguments.length;
  var i__8524__auto___12229 = 0;
  while (true) {
    if (i__8524__auto___12229 < len__8523__auto___12228) {
      args12221.push(arguments[i__8524__auto___12229]);
      var G__12230 = i__8524__auto___12229 + 1;
      i__8524__auto___12229 = G__12230;
      continue;
    } else {
    }
    break;
  }
  var G__12227 = args12221.length;
  switch(G__12227) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args12221.slice(3), 0, null);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12219_SHARP_, p2__12220_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__12219_SHARP_, p2__12220_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq12222) {
  var G__12223 = cljs.core.first(seq12222);
  var seq12222__$1 = cljs.core.next(seq12222);
  var G__12224 = cljs.core.first(seq12222__$1);
  var seq12222__$2 = cljs.core.next(seq12222__$1);
  var G__12225 = cljs.core.first(seq12222__$2);
  var seq12222__$3 = cljs.core.next(seq12222__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__12223, G__12224, G__12225, seq12222__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args12232 = [];
  var len__8523__auto___12235 = arguments.length;
  var i__8524__auto___12236 = 0;
  while (true) {
    if (i__8524__auto___12236 < len__8523__auto___12235) {
      args12232.push(arguments[i__8524__auto___12236]);
      var G__12237 = i__8524__auto___12236 + 1;
      i__8524__auto___12236 = G__12237;
      continue;
    } else {
    }
    break;
  }
  var G__12234 = args12232.length;
  switch(G__12234) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12232.length)].join(""));
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__12239 = null;
        var G__12239__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12239__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__12239__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__12239 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12239__0.call(this);
            case 1:
              return G__12239__1.call(this, result);
            case 2:
              return G__12239__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12239.cljs$core$IFn$_invoke$arity$0 = G__12239__0;
        G__12239.cljs$core$IFn$_invoke$arity$1 = G__12239__1;
        G__12239.cljs$core$IFn$_invoke$arity$2 = G__12239__2;
        return G__12239;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args12240 = [];
  var len__8523__auto___12244 = arguments.length;
  var i__8524__auto___12245 = 0;
  while (true) {
    if (i__8524__auto___12245 < len__8523__auto___12244) {
      args12240.push(arguments[i__8524__auto___12245]);
      var G__12246 = i__8524__auto___12245 + 1;
      i__8524__auto___12245 = G__12246;
      continue;
    } else {
    }
    break;
  }
  var G__12242 = args12240.length;
  switch(G__12242) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12240.length)].join(""));
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__12248 = null;
      var G__12248__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__12248__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__12248__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__12248 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12248__0.call(this);
          case 1:
            return G__12248__1.call(this, result);
          case 2:
            return G__12248__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12248.cljs$core$IFn$_invoke$arity$0 = G__12248__0;
      G__12248.cljs$core$IFn$_invoke$arity$1 = G__12248__1;
      G__12248.cljs$core$IFn$_invoke$arity$2 = G__12248__2;
      return G__12248;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      if (cljs.core.truth_(function() {
        var G__12243 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__12243) : pred.call(null, G__12243);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__12253 = function() {
      var G__12255 = cljs.core._entry_key(sc, e);
      var G__12256 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__12255, G__12256) : comp.call(null, G__12255, G__12256);
    }();
    var G__12254 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__12253, G__12254) : test.call(null, G__12253, G__12254);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args12257 = [];
  var len__8523__auto___12266 = arguments.length;
  var i__8524__auto___12267 = 0;
  while (true) {
    if (i__8524__auto___12267 < len__8523__auto___12266) {
      args12257.push(arguments[i__8524__auto___12267]);
      var G__12268 = i__8524__auto___12267 + 1;
      i__8524__auto___12267 = G__12268;
      continue;
    } else {
    }
    break;
  }
  var G__12259 = args12257.length;
  switch(G__12259) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12257.length)].join(""));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__12260 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12260, 0, null);
      var s = vec__12260;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__12263 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12263, 0, null);
    var s = vec__12263;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args12270 = [];
  var len__8523__auto___12279 = arguments.length;
  var i__8524__auto___12280 = 0;
  while (true) {
    if (i__8524__auto___12280 < len__8523__auto___12279) {
      args12270.push(arguments[i__8524__auto___12280]);
      var G__12281 = i__8524__auto___12280 + 1;
      i__8524__auto___12280 = G__12281;
      continue;
    } else {
    }
    break;
  }
  var G__12272 = args12270.length;
  switch(G__12272) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12270.length)].join(""));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var vec__12273 = temp__4657__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12273, 0, null);
      var s = vec__12273;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4657__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__12276 = temp__4657__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12276, 0, null);
    var s = vec__12276;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "i", "i", 253690212, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null)], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.indexOf = function() {
  var G__12284 = null;
  var G__12284__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, 0);
  };
  var G__12284__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__12284 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__12284__1.call(this, x);
      case 2:
        return G__12284__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12284.cljs$core$IFn$_invoke$arity$1 = G__12284__1;
  G__12284.cljs$core$IFn$_invoke$arity$2 = G__12284__2;
  return G__12284;
}();
cljs.core.Range.prototype.lastIndexOf = function() {
  var G__12285 = null;
  var G__12285__1 = function(x) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, cljs.core.count(coll));
  };
  var G__12285__2 = function(x, start__$1) {
    var self__ = this;
    var coll = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll, x, start__$1);
  };
  G__12285 = function(x, start__$1) {
    switch(arguments.length) {
      case 1:
        return G__12285__1.call(this, x);
      case 2:
        return G__12285__2.call(this, x, start__$1);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12285.cljs$core$IFn$_invoke$arity$1 = G__12285__1;
  G__12285.cljs$core$IFn$_invoke$arity$2 = G__12285__2;
  return G__12285;
}();
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < rng__$1.cljs$core$ICounted$_count$arity$1(null)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < rng__$1.cljs$core$ICounted$_count$arity$1(null)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(rng__$1.cljs$core$ISeqable$_seq$arity$1(null))) {
    return 0;
  } else {
    var G__12283 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__12283);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__12286 = i + self__.step;
        var G__12287 = ret__$1;
        i = G__12286;
        ret = G__12287;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (rng__$1.cljs$core$ISeqable$_seq$arity$1(null) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(rng__$1.cljs$core$ISeqable$_seq$arity$1(null) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta", "meta", -1154898805, null), new cljs.core.Symbol(null, "start", "start", 1285322546, null), new cljs.core.Symbol(null, "end", "end", 1372345569, null), new cljs.core.Symbol(null, "step", "step", -1365547645, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", 
  "mutable", 875778266), true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args12288 = [];
  var len__8523__auto___12291 = arguments.length;
  var i__8524__auto___12292 = 0;
  while (true) {
    if (i__8524__auto___12292 < len__8523__auto___12291) {
      args12288.push(arguments[i__8524__auto___12292]);
      var G__12293 = i__8524__auto___12292 + 1;
      i__8524__auto___12292 = G__12293;
      continue;
    } else {
    }
    break;
  }
  var G__12290 = args12288.length;
  switch(G__12290) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12288.length)].join(""));
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args12295 = [];
  var len__8523__auto___12298 = arguments.length;
  var i__8524__auto___12299 = 0;
  while (true) {
    if (i__8524__auto___12299 < len__8523__auto___12298) {
      args12295.push(arguments[i__8524__auto___12299]);
      var G__12300 = i__8524__auto___12299 + 1;
      i__8524__auto___12299 = G__12300;
      continue;
    } else {
    }
    break;
  }
  var G__12297 = args12295.length;
  switch(G__12297) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12295.length)].join(""));
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__12302 = null;
        var G__12302__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12302__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__12302__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__12302 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12302__0.call(this);
            case 1:
              return G__12302__1.call(this, result);
            case 2:
              return G__12302__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12302.cljs$core$IFn$_invoke$arity$0 = G__12302__0;
        G__12302.cljs$core$IFn$_invoke$arity$1 = G__12302__1;
        G__12302.cljs$core$IFn$_invoke$arity$2 = G__12302__2;
        return G__12302;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error("Assert failed: (number? n)");
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args12304 = [];
  var len__8523__auto___12307 = arguments.length;
  var i__8524__auto___12308 = 0;
  while (true) {
    if (i__8524__auto___12308 < len__8523__auto___12307) {
      args12304.push(arguments[i__8524__auto___12308]);
      var G__12309 = i__8524__auto___12308 + 1;
      i__8524__auto___12308 = G__12309;
      continue;
    } else {
    }
    break;
  }
  var G__12306 = args12304.length;
  switch(G__12306) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12304.length)].join(""));
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(a, pa) {
      return function() {
        var G__12311 = null;
        var G__12311__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12311__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__12311__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__12311 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12311__0.call(this);
            case 1:
              return G__12311__1.call(this, result);
            case 2:
              return G__12311__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12311.cljs$core$IFn$_invoke$arity$0 = G__12311__0;
        G__12311.cljs$core$IFn$_invoke$arity$1 = G__12311__1;
        G__12311.cljs$core$IFn$_invoke$arity$2 = G__12311__2;
        return G__12311;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4657__auto__ = cljs.core.seq(coll);
    if (temp__4657__auto__) {
      var s = temp__4657__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4657__auto__) {
        return function(p1__12303_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__12303_SHARP_) : f.call(null, p1__12303_SHARP_));
        };
      }(fst, fv, s, temp__4657__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args12312 = [];
  var len__8523__auto___12317 = arguments.length;
  var i__8524__auto___12318 = 0;
  while (true) {
    if (i__8524__auto___12318 < len__8523__auto___12317) {
      args12312.push(arguments[i__8524__auto___12318]);
      var G__12319 = i__8524__auto___12318 + 1;
      i__8524__auto___12318 = G__12319;
      continue;
    } else {
    }
    break;
  }
  var G__12314 = args12312.length;
  switch(G__12314) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12312.length)].join(""));
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4655__auto__ = cljs.core.seq(coll);
    if (temp__4655__auto__) {
      var s = temp__4655__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      var x__8252__auto__ = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
      return cljs.core._conj(cljs.core.List.EMPTY, x__8252__auto__);
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  if (cljs.core.reduced_QMARK_(init)) {
    var x__8252__auto__ = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init) : cljs.core.deref.call(null, init);
    return cljs.core._conj(cljs.core.List.EMPTY, x__8252__auto__);
  } else {
    return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
      var temp__4657__auto__ = cljs.core.seq(coll);
      if (temp__4657__auto__) {
        var s = temp__4657__auto__;
        return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
          var G__12315 = init;
          var G__12316 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__12315, G__12316) : f.call(null, G__12315, G__12316);
        }(), cljs.core.rest(s));
      } else {
        return null;
      }
    }, null, null));
  }
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args12331 = [];
  var len__8523__auto___12338 = arguments.length;
  var i__8524__auto___12339 = 0;
  while (true) {
    if (i__8524__auto___12339 < len__8523__auto___12338) {
      args12331.push(arguments[i__8524__auto___12339]);
      var G__12340 = i__8524__auto___12339 + 1;
      i__8524__auto___12339 = G__12340;
      continue;
    } else {
    }
    break;
  }
  var G__12337 = args12331.length;
  switch(G__12337) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args12331.slice(3), 0, null);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8542__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__12342 = null;
    var G__12342__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__12342__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__12342__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__12342__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__12342__4 = function() {
      var G__12343__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__12343 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__12344__i = 0, G__12344__a = new Array(arguments.length - 3);
          while (G__12344__i < G__12344__a.length) {
            G__12344__a[G__12344__i] = arguments[G__12344__i + 3];
            ++G__12344__i;
          }
          args = new cljs.core.IndexedSeq(G__12344__a, 0);
        }
        return G__12343__delegate.call(this, x, y, z, args);
      };
      G__12343.cljs$lang$maxFixedArity = 3;
      G__12343.cljs$lang$applyTo = function(arglist__12345) {
        var x = cljs.core.first(arglist__12345);
        arglist__12345 = cljs.core.next(arglist__12345);
        var y = cljs.core.first(arglist__12345);
        arglist__12345 = cljs.core.next(arglist__12345);
        var z = cljs.core.first(arglist__12345);
        var args = cljs.core.rest(arglist__12345);
        return G__12343__delegate(x, y, z, args);
      };
      G__12343.cljs$core$IFn$_invoke$arity$variadic = G__12343__delegate;
      return G__12343;
    }();
    G__12342 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__12342__0.call(this);
        case 1:
          return G__12342__1.call(this, x);
        case 2:
          return G__12342__2.call(this, x, y);
        case 3:
          return G__12342__3.call(this, x, y, z);
        default:
          var G__12346 = null;
          if (arguments.length > 3) {
            var G__12347__i = 0, G__12347__a = new Array(arguments.length - 3);
            while (G__12347__i < G__12347__a.length) {
              G__12347__a[G__12347__i] = arguments[G__12347__i + 3];
              ++G__12347__i;
            }
            G__12346 = new cljs.core.IndexedSeq(G__12347__a, 0);
          }
          return G__12342__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12346);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__12342.cljs$lang$maxFixedArity = 3;
    G__12342.cljs$lang$applyTo = G__12342__4.cljs$lang$applyTo;
    G__12342.cljs$core$IFn$_invoke$arity$0 = G__12342__0;
    G__12342.cljs$core$IFn$_invoke$arity$1 = G__12342__1;
    G__12342.cljs$core$IFn$_invoke$arity$2 = G__12342__2;
    G__12342.cljs$core$IFn$_invoke$arity$3 = G__12342__3;
    G__12342.cljs$core$IFn$_invoke$arity$variadic = G__12342__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__12342;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__12348 = null;
    var G__12348__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__12348__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__12348__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__12348__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__12348__4 = function() {
      var G__12349__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__12349 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__12350__i = 0, G__12350__a = new Array(arguments.length - 3);
          while (G__12350__i < G__12350__a.length) {
            G__12350__a[G__12350__i] = arguments[G__12350__i + 3];
            ++G__12350__i;
          }
          args = new cljs.core.IndexedSeq(G__12350__a, 0);
        }
        return G__12349__delegate.call(this, x, y, z, args);
      };
      G__12349.cljs$lang$maxFixedArity = 3;
      G__12349.cljs$lang$applyTo = function(arglist__12351) {
        var x = cljs.core.first(arglist__12351);
        arglist__12351 = cljs.core.next(arglist__12351);
        var y = cljs.core.first(arglist__12351);
        arglist__12351 = cljs.core.next(arglist__12351);
        var z = cljs.core.first(arglist__12351);
        var args = cljs.core.rest(arglist__12351);
        return G__12349__delegate(x, y, z, args);
      };
      G__12349.cljs$core$IFn$_invoke$arity$variadic = G__12349__delegate;
      return G__12349;
    }();
    G__12348 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__12348__0.call(this);
        case 1:
          return G__12348__1.call(this, x);
        case 2:
          return G__12348__2.call(this, x, y);
        case 3:
          return G__12348__3.call(this, x, y, z);
        default:
          var G__12352 = null;
          if (arguments.length > 3) {
            var G__12353__i = 0, G__12353__a = new Array(arguments.length - 3);
            while (G__12353__i < G__12353__a.length) {
              G__12353__a[G__12353__i] = arguments[G__12353__i + 3];
              ++G__12353__i;
            }
            G__12352 = new cljs.core.IndexedSeq(G__12353__a, 0);
          }
          return G__12348__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12352);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__12348.cljs$lang$maxFixedArity = 3;
    G__12348.cljs$lang$applyTo = G__12348__4.cljs$lang$applyTo;
    G__12348.cljs$core$IFn$_invoke$arity$0 = G__12348__0;
    G__12348.cljs$core$IFn$_invoke$arity$1 = G__12348__1;
    G__12348.cljs$core$IFn$_invoke$arity$2 = G__12348__2;
    G__12348.cljs$core$IFn$_invoke$arity$3 = G__12348__3;
    G__12348.cljs$core$IFn$_invoke$arity$variadic = G__12348__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__12348;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__12354 = null;
    var G__12354__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__12354__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__12354__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__12354__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__12354__4 = function() {
      var G__12355__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__12355 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__12356__i = 0, G__12356__a = new Array(arguments.length - 3);
          while (G__12356__i < G__12356__a.length) {
            G__12356__a[G__12356__i] = arguments[G__12356__i + 3];
            ++G__12356__i;
          }
          args = new cljs.core.IndexedSeq(G__12356__a, 0);
        }
        return G__12355__delegate.call(this, x, y, z, args);
      };
      G__12355.cljs$lang$maxFixedArity = 3;
      G__12355.cljs$lang$applyTo = function(arglist__12357) {
        var x = cljs.core.first(arglist__12357);
        arglist__12357 = cljs.core.next(arglist__12357);
        var y = cljs.core.first(arglist__12357);
        arglist__12357 = cljs.core.next(arglist__12357);
        var z = cljs.core.first(arglist__12357);
        var args = cljs.core.rest(arglist__12357);
        return G__12355__delegate(x, y, z, args);
      };
      G__12355.cljs$core$IFn$_invoke$arity$variadic = G__12355__delegate;
      return G__12355;
    }();
    G__12354 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__12354__0.call(this);
        case 1:
          return G__12354__1.call(this, x);
        case 2:
          return G__12354__2.call(this, x, y);
        case 3:
          return G__12354__3.call(this, x, y, z);
        default:
          var G__12358 = null;
          if (arguments.length > 3) {
            var G__12359__i = 0, G__12359__a = new Array(arguments.length - 3);
            while (G__12359__i < G__12359__a.length) {
              G__12359__a[G__12359__i] = arguments[G__12359__i + 3];
              ++G__12359__i;
            }
            G__12358 = new cljs.core.IndexedSeq(G__12359__a, 0);
          }
          return G__12354__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12358);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__12354.cljs$lang$maxFixedArity = 3;
    G__12354.cljs$lang$applyTo = G__12354__4.cljs$lang$applyTo;
    G__12354.cljs$core$IFn$_invoke$arity$0 = G__12354__0;
    G__12354.cljs$core$IFn$_invoke$arity$1 = G__12354__1;
    G__12354.cljs$core$IFn$_invoke$arity$2 = G__12354__2;
    G__12354.cljs$core$IFn$_invoke$arity$3 = G__12354__3;
    G__12354.cljs$core$IFn$_invoke$arity$variadic = G__12354__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__12354;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__12360 = null;
      var G__12360__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12321_SHARP_, p2__12322_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12321_SHARP_, p2__12322_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__12322_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__12322_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12360__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12323_SHARP_, p2__12324_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12323_SHARP_, p2__12324_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__12324_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__12324_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12360__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12325_SHARP_, p2__12326_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12325_SHARP_, p2__12326_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__12326_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__12326_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12360__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__12327_SHARP_, p2__12328_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12327_SHARP_, p2__12328_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__12328_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__12328_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__12360__4 = function() {
        var G__12361__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__12329_SHARP_, p2__12330_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__12329_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__12330_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__12361 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__12362__i = 0, G__12362__a = new Array(arguments.length - 3);
            while (G__12362__i < G__12362__a.length) {
              G__12362__a[G__12362__i] = arguments[G__12362__i + 3];
              ++G__12362__i;
            }
            args = new cljs.core.IndexedSeq(G__12362__a, 0);
          }
          return G__12361__delegate.call(this, x, y, z, args);
        };
        G__12361.cljs$lang$maxFixedArity = 3;
        G__12361.cljs$lang$applyTo = function(arglist__12363) {
          var x = cljs.core.first(arglist__12363);
          arglist__12363 = cljs.core.next(arglist__12363);
          var y = cljs.core.first(arglist__12363);
          arglist__12363 = cljs.core.next(arglist__12363);
          var z = cljs.core.first(arglist__12363);
          var args = cljs.core.rest(arglist__12363);
          return G__12361__delegate(x, y, z, args);
        };
        G__12361.cljs$core$IFn$_invoke$arity$variadic = G__12361__delegate;
        return G__12361;
      }();
      G__12360 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12360__0.call(this);
          case 1:
            return G__12360__1.call(this, x);
          case 2:
            return G__12360__2.call(this, x, y);
          case 3:
            return G__12360__3.call(this, x, y, z);
          default:
            var G__12364 = null;
            if (arguments.length > 3) {
              var G__12365__i = 0, G__12365__a = new Array(arguments.length - 3);
              while (G__12365__i < G__12365__a.length) {
                G__12365__a[G__12365__i] = arguments[G__12365__i + 3];
                ++G__12365__i;
              }
              G__12364 = new cljs.core.IndexedSeq(G__12365__a, 0);
            }
            return G__12360__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__12364);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12360.cljs$lang$maxFixedArity = 3;
      G__12360.cljs$lang$applyTo = G__12360__4.cljs$lang$applyTo;
      G__12360.cljs$core$IFn$_invoke$arity$0 = G__12360__0;
      G__12360.cljs$core$IFn$_invoke$arity$1 = G__12360__1;
      G__12360.cljs$core$IFn$_invoke$arity$2 = G__12360__2;
      G__12360.cljs$core$IFn$_invoke$arity$3 = G__12360__3;
      G__12360.cljs$core$IFn$_invoke$arity$variadic = G__12360__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__12360;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq12332) {
  var G__12333 = cljs.core.first(seq12332);
  var seq12332__$1 = cljs.core.next(seq12332);
  var G__12334 = cljs.core.first(seq12332__$1);
  var seq12332__$2 = cljs.core.next(seq12332__$1);
  var G__12335 = cljs.core.first(seq12332__$2);
  var seq12332__$3 = cljs.core.next(seq12332__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__12333, G__12334, G__12335, seq12332__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args12366 = [];
  var len__8523__auto___12369 = arguments.length;
  var i__8524__auto___12370 = 0;
  while (true) {
    if (i__8524__auto___12370 < len__8523__auto___12369) {
      args12366.push(arguments[i__8524__auto___12370]);
      var G__12371 = i__8524__auto___12370 + 1;
      i__8524__auto___12370 = G__12371;
      continue;
    } else {
    }
    break;
  }
  var G__12368 = args12366.length;
  switch(G__12368) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12366.length)].join(""));
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__12373 = cljs.core.next(coll);
      coll = G__12373;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__12374 = n - 1;
      var G__12375 = cljs.core.next(coll);
      n = G__12374;
      coll = G__12375;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args12376 = [];
  var len__8523__auto___12379 = arguments.length;
  var i__8524__auto___12380 = 0;
  while (true) {
    if (i__8524__auto___12380 < len__8523__auto___12379) {
      args12376.push(arguments[i__8524__auto___12380]);
      var G__12381 = i__8524__auto___12380 + 1;
      i__8524__auto___12380 = G__12381;
      continue;
    } else {
    }
    break;
  }
  var G__12378 = args12376.length;
  switch(G__12378) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12376.length)].join(""));
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs.core.re_seq.cljs$core$IFn$_invoke$arity$2 ? cljs.core.re_seq.cljs$core$IFn$_invoke$arity$2(re, post_match) : cljs.core.re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__12386 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12386, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12386, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__7410__auto__ = flags;
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_12396 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if ((new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__7410__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__7410__auto__)) {
              return or__7410__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__12397_12403 = cljs.core.first(coll);
          var G__12398_12404 = writer;
          var G__12399_12405 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12397_12403, G__12398_12404, G__12399_12405) : print_one.call(null, G__12397_12403, G__12398_12404, G__12399_12405);
        } else {
        }
        var coll_12406__$1 = cljs.core.next(coll);
        var n_12407 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_12406__$1 && (n_12407 == null || !(n_12407 === 0))) {
            cljs.core._write(writer, sep);
            var G__12400_12408 = cljs.core.first(coll_12406__$1);
            var G__12401_12409 = writer;
            var G__12402_12410 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12400_12408, G__12401_12409, G__12402_12410) : print_one.call(null, G__12400_12408, G__12401_12409, G__12402_12410);
            var G__12411 = cljs.core.next(coll_12406__$1);
            var G__12412 = n_12407 - 1;
            coll_12406__$1 = G__12411;
            n_12407 = G__12412;
            continue;
          } else {
            if (cljs.core.seq(coll_12406__$1) && n_12407 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__7410__auto__ = (new cljs.core.Keyword(null, "more-marker", "more-marker", -14717935)).cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__7410__auto__)) {
                  return or__7410__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_12396;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12419 = arguments.length;
  var i__8524__auto___12420 = 0;
  while (true) {
    if (i__8524__auto___12420 < len__8523__auto___12419) {
      args__8530__auto__.push(arguments[i__8524__auto___12420]);
      var G__12421 = i__8524__auto___12420 + 1;
      i__8524__auto___12420 = G__12421;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__12415 = cljs.core.seq(ss);
  var chunk__12416 = null;
  var count__12417 = 0;
  var i__12418 = 0;
  while (true) {
    if (i__12418 < count__12417) {
      var s = chunk__12416.cljs$core$IIndexed$_nth$arity$2(null, i__12418);
      cljs.core._write(writer, s);
      var G__12422 = seq__12415;
      var G__12423 = chunk__12416;
      var G__12424 = count__12417;
      var G__12425 = i__12418 + 1;
      seq__12415 = G__12422;
      chunk__12416 = G__12423;
      count__12417 = G__12424;
      i__12418 = G__12425;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__12415);
      if (temp__4657__auto__) {
        var seq__12415__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__12415__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__12415__$1);
          var G__12426 = cljs.core.chunk_rest(seq__12415__$1);
          var G__12427 = c__8229__auto__;
          var G__12428 = cljs.core.count(c__8229__auto__);
          var G__12429 = 0;
          seq__12415 = G__12426;
          chunk__12416 = G__12427;
          count__12417 = G__12428;
          i__12418 = G__12429;
          continue;
        } else {
          var s = cljs.core.first(seq__12415__$1);
          cljs.core._write(writer, s);
          var G__12430 = cljs.core.next(seq__12415__$1);
          var G__12431 = null;
          var G__12432 = 0;
          var G__12433 = 0;
          seq__12415 = G__12430;
          chunk__12416 = G__12431;
          count__12417 = G__12432;
          i__12418 = G__12433;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq12413) {
  var G__12414 = cljs.core.first(seq12413);
  var seq12413__$1 = cljs.core.next(seq12413);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__12414, seq12413__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj12435 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj12435;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1('"'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join("");
};
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__7398__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964)));
  if (and__7398__auto__) {
    var and__7398__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IMeta$ ? true : false : false;
    if (and__7398__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__7398__auto____$1;
    }
  } else {
    return and__7398__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__12450_12458 = cljs.core.meta(obj);
      var G__12451_12459 = writer;
      var G__12452_12460 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__12450_12458, G__12451_12459, G__12452_12460) : cljs.core.pr_writer.call(null, G__12450_12458, G__12451_12459, G__12452_12460);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__12454 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__12455 = cljs.core.pr_writer;
            var G__12456 = writer;
            var G__12457 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__12454, G__12455, G__12456, G__12457) : cljs.core.print_map.call(null, G__12454, G__12455, G__12456, G__12457);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__7410__auto__ = name == null;
                    if (or__7410__auto__) {
                      return or__7410__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__12461 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1("0"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join("");
                          ns = G__12461;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                      } else {
                        var name = obj.constructor.name;
                        var name__$1 = cljs.core.truth_(function() {
                          var or__7410__auto__ = name == null;
                          if (or__7410__auto__) {
                            return or__7410__auto__;
                          } else {
                            return goog.string.isEmpty(name);
                          }
                        }()) ? "Object" : name;
                        return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(""), "]"], 0));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "alt-impl", "alt-impl", 670969595)).cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var alt_impl = temp__4655__auto__;
    var G__12465 = obj;
    var G__12466 = writer;
    var G__12467 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, new cljs.core.Keyword(null, "fallback-impl", "fallback-impl", -1501286995), cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__12465, G__12466, G__12467) : alt_impl.call(null, G__12465, G__12466, G__12467);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__12472 = cljs.core.seq(cljs.core.next(objs));
  var chunk__12473 = null;
  var count__12474 = 0;
  var i__12475 = 0;
  while (true) {
    if (i__12475 < count__12474) {
      var obj = chunk__12473.cljs$core$IIndexed$_nth$arity$2(null, i__12475);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__12476 = seq__12472;
      var G__12477 = chunk__12473;
      var G__12478 = count__12474;
      var G__12479 = i__12475 + 1;
      seq__12472 = G__12476;
      chunk__12473 = G__12477;
      count__12474 = G__12478;
      i__12475 = G__12479;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq(seq__12472);
      if (temp__4657__auto__) {
        var seq__12472__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__12472__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first(seq__12472__$1);
          var G__12480 = cljs.core.chunk_rest(seq__12472__$1);
          var G__12481 = c__8229__auto__;
          var G__12482 = cljs.core.count(c__8229__auto__);
          var G__12483 = 0;
          seq__12472 = G__12480;
          chunk__12473 = G__12481;
          count__12474 = G__12482;
          i__12475 = G__12483;
          continue;
        } else {
          var obj = cljs.core.first(seq__12472__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__12484 = cljs.core.next(seq__12472__$1);
          var G__12485 = null;
          var G__12486 = 0;
          var G__12487 = 0;
          seq__12472 = G__12484;
          chunk__12473 = G__12485;
          count__12474 = G__12486;
          i__12475 = G__12487;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args12488 = [];
  var len__8523__auto___12491 = arguments.length;
  var i__8524__auto___12492 = 0;
  while (true) {
    if (i__8524__auto___12492 < len__8523__auto___12491) {
      args12488.push(arguments[i__8524__auto___12492]);
      var G__12493 = i__8524__auto___12492 + 1;
      i__8524__auto___12492 = G__12493;
      continue;
    } else {
    }
    break;
  }
  var G__12490 = args12488.length;
  switch(G__12490) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12488.length)].join(""));
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12496 = arguments.length;
  var i__8524__auto___12497 = 0;
  while (true) {
    if (i__8524__auto___12497 < len__8523__auto___12496) {
      args__8530__auto__.push(arguments[i__8524__auto___12497]);
      var G__12498 = i__8524__auto___12497 + 1;
      i__8524__auto___12497 = G__12498;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq12495) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12495));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12500 = arguments.length;
  var i__8524__auto___12501 = 0;
  while (true) {
    if (i__8524__auto___12501 < len__8523__auto___12500) {
      args__8530__auto__.push(arguments[i__8524__auto___12501]);
      var G__12502 = i__8524__auto___12501 + 1;
      i__8524__auto___12501 = G__12502;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq12499) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12499));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12504 = arguments.length;
  var i__8524__auto___12505 = 0;
  while (true) {
    if (i__8524__auto___12505 < len__8523__auto___12504) {
      args__8530__auto__.push(arguments[i__8524__auto___12505]);
      var G__12506 = i__8524__auto___12505 + 1;
      i__8524__auto___12505 = G__12506;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq12503) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12503));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__12507__i = 0, G__12507__a = new Array(arguments.length - 0);
      while (G__12507__i < G__12507__a.length) {
        G__12507__a[G__12507__i] = arguments[G__12507__i + 0];
        ++G__12507__i;
      }
      objs = new cljs.core.IndexedSeq(G__12507__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__12508) {
    var objs = cljs.core.seq(arglist__12508);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12510 = arguments.length;
  var i__8524__auto___12511 = 0;
  while (true) {
    if (i__8524__auto___12511 < len__8523__auto___12510) {
      args__8530__auto__.push(arguments[i__8524__auto___12511]);
      var G__12512 = i__8524__auto___12511 + 1;
      i__8524__auto___12511 = G__12512;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq12509) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12509));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12514 = arguments.length;
  var i__8524__auto___12515 = 0;
  while (true) {
    if (i__8524__auto___12515 < len__8523__auto___12514) {
      args__8530__auto__.push(arguments[i__8524__auto___12515]);
      var G__12516 = i__8524__auto___12515 + 1;
      i__8524__auto___12515 = G__12516;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  if (cljs.core._STAR_print_newline_STAR_) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq12513) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12513));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12518 = arguments.length;
  var i__8524__auto___12519 = 0;
  while (true) {
    if (i__8524__auto___12519 < len__8523__auto___12518) {
      args__8530__auto__.push(arguments[i__8524__auto___12519]);
      var G__12520 = i__8524__auto___12519 + 1;
      i__8524__auto___12519 = G__12520;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq12517) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12517));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12522 = arguments.length;
  var i__8524__auto___12523 = 0;
  while (true) {
    if (i__8524__auto___12523 < len__8523__auto___12522) {
      args__8530__auto__.push(arguments[i__8524__auto___12523]);
      var G__12524 = i__8524__auto___12523 + 1;
      i__8524__auto___12523 = G__12524;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core._STAR_print_newline_STAR_) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq12521) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12521));
};
cljs.core.strip_ns = function cljs$core$strip_ns(named) {
  if (named instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
  } else {
    return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(null, cljs.core.name(named));
  }
};
cljs.core.lift_ns = function cljs$core$lift_ns(m) {
  if (cljs.core._STAR_print_namespace_maps_STAR_) {
    var ns = null;
    var G__12550 = cljs.core.seq(m);
    var vec__12551 = G__12550;
    var seq__12552 = cljs.core.seq(vec__12551);
    var first__12553 = cljs.core.first(seq__12552);
    var seq__12552__$1 = cljs.core.next(seq__12552);
    var vec__12554 = first__12553;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12554, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12554, 1, null);
    var entry = vec__12554;
    var entries = seq__12552__$1;
    var lm = cljs.core.empty(m);
    var ns__$1 = ns;
    var G__12550__$1 = G__12550;
    var lm__$1 = lm;
    while (true) {
      var ns__$2 = ns__$1;
      var vec__12557 = G__12550__$1;
      var seq__12558 = cljs.core.seq(vec__12557);
      var first__12559 = cljs.core.first(seq__12558);
      var seq__12558__$1 = cljs.core.next(seq__12558);
      var vec__12560 = first__12559;
      var k__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12560, 0, null);
      var v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12560, 1, null);
      var entry__$1 = vec__12560;
      var entries__$1 = seq__12558__$1;
      var lm__$2 = lm__$1;
      if (cljs.core.truth_(entry__$1)) {
        if (k__$1 instanceof cljs.core.Keyword || k__$1 instanceof cljs.core.Symbol) {
          if (cljs.core.truth_(ns__$2)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ns__$2, cljs.core.namespace(k__$1))) {
              var G__12563 = ns__$2;
              var G__12564 = entries__$1;
              var G__12565 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2, cljs.core.strip_ns(k__$1), v__$1);
              ns__$1 = G__12563;
              G__12550__$1 = G__12564;
              lm__$1 = G__12565;
              continue;
            } else {
              return null;
            }
          } else {
            var temp__4657__auto__ = cljs.core.namespace(k__$1);
            if (cljs.core.truth_(temp__4657__auto__)) {
              var new_ns = temp__4657__auto__;
              var G__12566 = new_ns;
              var G__12567 = entries__$1;
              var G__12568 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2, cljs.core.strip_ns(k__$1), v__$1);
              ns__$1 = G__12566;
              G__12550__$1 = G__12567;
              lm__$1 = G__12568;
              continue;
            } else {
              return null;
            }
          }
        } else {
          return null;
        }
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns__$2, lm__$2], null);
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.print_prefix_map = function cljs$core$print_prefix_map(prefix, m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__12575_12581 = cljs.core.key(e);
    var G__12576_12582 = w;
    var G__12577_12583 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12575_12581, G__12576_12582, G__12577_12583) : print_one.call(null, G__12575_12581, G__12576_12582, G__12577_12583);
    cljs.core._write(w, " ");
    var G__12578 = cljs.core.val(e);
    var G__12579 = w;
    var G__12580 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__12578, G__12579, G__12580) : print_one.call(null, G__12578, G__12579, G__12580);
  }, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix), cljs.core.str.cljs$core$IFn$_invoke$arity$1("{")].join(""), ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  var vec__12587 = cljs.core.lift_ns(m);
  var ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12587, 0, null);
  var lift_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12587, 1, null);
  if (cljs.core.truth_(ns)) {
    return cljs.core.print_prefix_map([cljs.core.str.cljs$core$IFn$_invoke$arity$1("#:"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""), lift_map, print_one, writer, opts);
  } else {
    return cljs.core.print_prefix_map(null, m, print_one, writer, opts);
  }
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "val", "val", 128701612), a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12593 = arguments.length;
  var i__8524__auto___12594 = 0;
  while (true) {
    if (i__8524__auto___12594 < len__8523__auto___12593) {
      args__8530__auto__.push(arguments[i__8524__auto___12594]);
      var G__12595 = i__8524__auto___12594 + 1;
      i__8524__auto___12594 = G__12595;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 2 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(2), 0, null) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8531__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq12590) {
  var G__12591 = cljs.core.first(seq12590);
  var seq12590__$1 = cljs.core.next(seq12590);
  var G__12592 = cljs.core.first(seq12590__$1);
  var seq12590__$2 = cljs.core.next(seq12590__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12591, G__12592, seq12590__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args12596 = [];
  var len__8523__auto___12599 = arguments.length;
  var i__8524__auto___12600 = 0;
  while (true) {
    if (i__8524__auto___12600 < len__8523__auto___12599) {
      args12596.push(arguments[i__8524__auto___12600]);
      var G__12601 = i__8524__auto___12600 + 1;
      i__8524__auto___12600 = G__12601;
      continue;
    } else {
    }
    break;
  }
  var G__12598 = args12596.length;
  switch(G__12598) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12596.length)].join(""));
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(x) {
  var self__ = this;
  var x__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "f", "f", 43394975, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "value", "value", 1946509744, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(x) {
  return cljs.core._realized_QMARK_(x);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__12603_SHARP_, p2__12604_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__12603_SHARP_, p2__12604_SHARP_) : rf.call(null, p1__12603_SHARP_, p2__12604_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__12605 = null;
      var G__12605__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__12605__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__12605__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__12605 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12605__0.call(this);
          case 1:
            return G__12605__1.call(this, result);
          case 2:
            return G__12605__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12605.cljs$core$IFn$_invoke$arity$0 = G__12605__0;
      G__12605.cljs$core$IFn$_invoke$arity$1 = G__12605__1;
      G__12605.cljs$core$IFn$_invoke$arity$2 = G__12605__2;
      return G__12605;
    }();
  }(rf1);
};
cljs.core.halt_when = function cljs$core$halt_when(var_args) {
  var args12606 = [];
  var len__8523__auto___12611 = arguments.length;
  var i__8524__auto___12612 = 0;
  while (true) {
    if (i__8524__auto___12612 < len__8523__auto___12611) {
      args12606.push(arguments[i__8524__auto___12612]);
      var G__12613 = i__8524__auto___12612 + 1;
      i__8524__auto___12612 = G__12613;
      continue;
    } else {
    }
    break;
  }
  var G__12608 = args12606.length;
  switch(G__12608) {
    case 1:
      return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12606.length)].join(""));
  }
};
cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(pred, null);
};
cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2 = function(pred, retf) {
  return function(rf) {
    return function() {
      var G__12615 = null;
      var G__12615__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__12615__1 = function(result) {
        if (cljs.core.map_QMARK_(result) && cljs.core.contains_QMARK_(result, new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715))) {
          return (new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715)).cljs$core$IFn$_invoke$arity$1(result);
        } else {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        }
      };
      var G__12615__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return cljs.core.reduced(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("cljs.core", "halt", "cljs.core/halt", -1049036715), cljs.core.truth_(retf) ? function() {
            var G__12609 = rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
            var G__12610 = input;
            return retf.cljs$core$IFn$_invoke$arity$2 ? retf.cljs$core$IFn$_invoke$arity$2(G__12609, G__12610) : retf.call(null, G__12609, G__12610);
          }() : input], null));
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        }
      };
      G__12615 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__12615__0.call(this);
          case 1:
            return G__12615__1.call(this, result);
          case 2:
            return G__12615__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      G__12615.cljs$core$IFn$_invoke$arity$0 = G__12615__0;
      G__12615.cljs$core$IFn$_invoke$arity$1 = G__12615__1;
      G__12615.cljs$core$IFn$_invoke$arity$2 = G__12615__2;
      return G__12615;
    }();
  };
};
cljs.core.halt_when.cljs$lang$maxFixedArity = 2;
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args12616 = [];
  var len__8523__auto___12619 = arguments.length;
  var i__8524__auto___12620 = 0;
  while (true) {
    if (i__8524__auto___12620 < len__8523__auto___12619) {
      args12616.push(arguments[i__8524__auto___12620]);
      var G__12621 = i__8524__auto___12620 + 1;
      i__8524__auto___12620 = G__12621;
      continue;
    } else {
    }
    break;
  }
  var G__12618 = args12616.length;
  switch(G__12618) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12616.length)].join(""));
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
    return function(pa) {
      return function() {
        var G__12623 = null;
        var G__12623__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__12623__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__12623__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__12623 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__12623__0.call(this);
            case 1:
              return G__12623__1.call(this, result);
            case 2:
              return G__12623__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        G__12623.cljs$core$IFn$_invoke$arity$0 = G__12623__0;
        G__12623.cljs$core$IFn$_invoke$arity$1 = G__12623__1;
        G__12623.cljs$core$IFn$_invoke$arity$2 = G__12623__2;
        return G__12623;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args12624 = [];
  var len__8523__auto___12627 = arguments.length;
  var i__8524__auto___12628 = 0;
  while (true) {
    if (i__8524__auto___12628 < len__8523__auto___12627) {
      args12624.push(arguments[i__8524__auto___12628]);
      var G__12629 = i__8524__auto___12628 + 1;
      i__8524__auto___12628 = G__12629;
      continue;
    } else {
    }
    break;
  }
  var G__12626 = args12624.length;
  switch(G__12626) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12624.length)].join(""));
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.indexOf = function() {
  var G__12631 = null;
  var G__12631__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, 0);
  };
  var G__12631__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__12631 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12631__1.call(this, x);
      case 2:
        return G__12631__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12631.cljs$core$IFn$_invoke$arity$1 = G__12631__1;
  G__12631.cljs$core$IFn$_invoke$arity$2 = G__12631__2;
  return G__12631;
}();
cljs.core.Eduction.prototype.lastIndexOf = function() {
  var G__12632 = null;
  var G__12632__1 = function(x) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, cljs.core.count(coll__$1));
  };
  var G__12632__2 = function(x, start) {
    var self__ = this;
    var coll__$1 = this;
    return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1, x, start);
  };
  G__12632 = function(x, start) {
    switch(arguments.length) {
      case 1:
        return G__12632__1.call(this, x);
      case 2:
        return G__12632__2.call(this, x, start);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12632.cljs$core$IFn$_invoke$arity$1 = G__12632__1;
  G__12632.cljs$core$IFn$_invoke$arity$2 = G__12632__2;
  return G__12632;
}();
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "xform", "xform", -85179481, null), new cljs.core.Symbol(null, "coll", "coll", -1006698606, null)], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__8424__auto__ = this;
  return cljs.core.es6_iterator(this__8424__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12634 = arguments.length;
  var i__8524__auto___12635 = 0;
  while (true) {
    if (i__8524__auto___12635 < len__8523__auto___12634) {
      args__8530__auto__.push(arguments[i__8524__auto___12635]);
      var G__12636 = i__8524__auto___12635 + 1;
      i__8524__auto___12635 = G__12636;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 0 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(0), 0, null) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__8531__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq12633) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq12633));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12638_SHARP_, p2__12637_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__12637_SHARP_) : proc.call(null, p2__12637_SHARP_);
  }, null, coll);
  return null;
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto__.call(null, x);
    } else {
      var m__8079__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._key__GT_js[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto__.call(null, x);
    } else {
      var m__8079__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__8079__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || cljs.core.PROTOCOL_SENTINEL === k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__12661_12675 = cljs.core.seq(x);
            var chunk__12662_12676 = null;
            var count__12663_12677 = 0;
            var i__12664_12678 = 0;
            while (true) {
              if (i__12664_12678 < count__12663_12677) {
                var vec__12665_12679 = chunk__12662_12676.cljs$core$IIndexed$_nth$arity$2(null, i__12664_12678);
                var k_12680 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12665_12679, 0, null);
                var v_12681 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12665_12679, 1, null);
                m[cljs.core.key__GT_js(k_12680)] = cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(v_12681) : cljs.core.clj__GT_js.call(null, v_12681);
                var G__12682 = seq__12661_12675;
                var G__12683 = chunk__12662_12676;
                var G__12684 = count__12663_12677;
                var G__12685 = i__12664_12678 + 1;
                seq__12661_12675 = G__12682;
                chunk__12662_12676 = G__12683;
                count__12663_12677 = G__12684;
                i__12664_12678 = G__12685;
                continue;
              } else {
                var temp__4657__auto___12686 = cljs.core.seq(seq__12661_12675);
                if (temp__4657__auto___12686) {
                  var seq__12661_12687__$1 = temp__4657__auto___12686;
                  if (cljs.core.chunked_seq_QMARK_(seq__12661_12687__$1)) {
                    var c__8229__auto___12688 = cljs.core.chunk_first(seq__12661_12687__$1);
                    var G__12689 = cljs.core.chunk_rest(seq__12661_12687__$1);
                    var G__12690 = c__8229__auto___12688;
                    var G__12691 = cljs.core.count(c__8229__auto___12688);
                    var G__12692 = 0;
                    seq__12661_12675 = G__12689;
                    chunk__12662_12676 = G__12690;
                    count__12663_12677 = G__12691;
                    i__12664_12678 = G__12692;
                    continue;
                  } else {
                    var vec__12668_12693 = cljs.core.first(seq__12661_12687__$1);
                    var k_12694 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12668_12693, 0, null);
                    var v_12695 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12668_12693, 1, null);
                    m[cljs.core.key__GT_js(k_12694)] = cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(v_12695) : cljs.core.clj__GT_js.call(null, v_12695);
                    var G__12696 = cljs.core.next(seq__12661_12687__$1);
                    var G__12697 = null;
                    var G__12698 = 0;
                    var G__12699 = 0;
                    seq__12661_12675 = G__12696;
                    chunk__12662_12676 = G__12697;
                    count__12663_12677 = G__12698;
                    i__12664_12678 = G__12699;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__12671_12700 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.clj__GT_js, x));
              var chunk__12672_12701 = null;
              var count__12673_12702 = 0;
              var i__12674_12703 = 0;
              while (true) {
                if (i__12674_12703 < count__12673_12702) {
                  var x_12704__$1 = chunk__12672_12701.cljs$core$IIndexed$_nth$arity$2(null, i__12674_12703);
                  arr.push(x_12704__$1);
                  var G__12705 = seq__12671_12700;
                  var G__12706 = chunk__12672_12701;
                  var G__12707 = count__12673_12702;
                  var G__12708 = i__12674_12703 + 1;
                  seq__12671_12700 = G__12705;
                  chunk__12672_12701 = G__12706;
                  count__12673_12702 = G__12707;
                  i__12674_12703 = G__12708;
                  continue;
                } else {
                  var temp__4657__auto___12709 = cljs.core.seq(seq__12671_12700);
                  if (temp__4657__auto___12709) {
                    var seq__12671_12710__$1 = temp__4657__auto___12709;
                    if (cljs.core.chunked_seq_QMARK_(seq__12671_12710__$1)) {
                      var c__8229__auto___12711 = cljs.core.chunk_first(seq__12671_12710__$1);
                      var G__12712 = cljs.core.chunk_rest(seq__12671_12710__$1);
                      var G__12713 = c__8229__auto___12711;
                      var G__12714 = cljs.core.count(c__8229__auto___12711);
                      var G__12715 = 0;
                      seq__12671_12700 = G__12712;
                      chunk__12672_12701 = G__12713;
                      count__12673_12702 = G__12714;
                      i__12674_12703 = G__12715;
                      continue;
                    } else {
                      var x_12716__$1 = cljs.core.first(seq__12671_12710__$1);
                      arr.push(x_12716__$1);
                      var G__12717 = cljs.core.next(seq__12671_12710__$1);
                      var G__12718 = null;
                      var G__12719 = 0;
                      var G__12720 = 0;
                      seq__12671_12700 = G__12717;
                      chunk__12672_12701 = G__12718;
                      count__12673_12702 = G__12719;
                      i__12674_12703 = G__12720;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__8078__auto__ = x == null ? null : x;
    var m__8079__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__8079__auto__.call(null, x, options);
    } else {
      var m__8079__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__8079__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args12721 = [];
  var len__8523__auto___12746 = arguments.length;
  var i__8524__auto___12747 = 0;
  while (true) {
    if (i__8524__auto___12747 < len__8523__auto___12746) {
      args12721.push(arguments[i__8524__auto___12747]);
      var G__12748 = i__8524__auto___12747 + 1;
      i__8524__auto___12747 = G__12748;
      continue;
    } else {
    }
    break;
  }
  var G__12725 = args12721.length;
  switch(G__12725) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args12721.slice(1), 0, null);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8542__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__12726 = opts;
  var map__12726__$1 = (!(map__12726 == null) ? map__12726.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__12726.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__12726) : map__12726;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__12726__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__12726, map__12726__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__8198__auto__ = function(map__12726, map__12726__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__12740(s__12741) {
                      return new cljs.core.LazySeq(null, function(map__12726, map__12726__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__12741__$1 = s__12741;
                          while (true) {
                            var temp__4657__auto__ = cljs.core.seq(s__12741__$1);
                            if (temp__4657__auto__) {
                              var s__12741__$2 = temp__4657__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__12741__$2)) {
                                var c__8196__auto__ = cljs.core.chunk_first(s__12741__$2);
                                var size__8197__auto__ = cljs.core.count(c__8196__auto__);
                                var b__12743 = cljs.core.chunk_buffer(size__8197__auto__);
                                if (function() {
                                  var i__12742 = 0;
                                  while (true) {
                                    if (i__12742 < size__8197__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__8196__auto__, i__12742);
                                      cljs.core.chunk_append(b__12743, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__12750 = i__12742 + 1;
                                      i__12742 = G__12750;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__12743), cljs$core$thisfn_$_iter__12740(cljs.core.chunk_rest(s__12741__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__12743), null);
                                }
                              } else {
                                var k = cljs.core.first(s__12741__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__12740(cljs.core.rest(s__12741__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__12726, map__12726__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__12726, map__12726__$1, keywordize_keys, keyfn);
                  return iter__8198__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__12726, map__12726__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq12722) {
  var G__12723 = cljs.core.first(seq12722);
  var seq12722__$1 = cljs.core.next(seq12722);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__12723, seq12722__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__12752 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12752) : cljs.core.atom.call(null, G__12752);
  }();
  return function(mem) {
    return function() {
      var G__12753__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__12753 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__12754__i = 0, G__12754__a = new Array(arguments.length - 0);
          while (G__12754__i < G__12754__a.length) {
            G__12754__a[G__12754__i] = arguments[G__12754__i + 0];
            ++G__12754__i;
          }
          args = new cljs.core.IndexedSeq(G__12754__a, 0);
        }
        return G__12753__delegate.call(this, args);
      };
      G__12753.cljs$lang$maxFixedArity = 0;
      G__12753.cljs$lang$applyTo = function(arglist__12755) {
        var args = cljs.core.seq(arglist__12755);
        return G__12753__delegate(args);
      };
      G__12753.cljs$core$IFn$_invoke$arity$variadic = G__12753__delegate;
      return G__12753;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args12756 = [];
  var len__8523__auto___12761 = arguments.length;
  var i__8524__auto___12762 = 0;
  while (true) {
    if (i__8524__auto___12762 < len__8523__auto___12761) {
      args12756.push(arguments[i__8524__auto___12762]);
      var G__12763 = i__8524__auto___12762 + 1;
      i__8524__auto___12762 = G__12763;
      continue;
    } else {
    }
    break;
  }
  var G__12760 = args12756.length;
  switch(G__12760) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args12756.slice(1), 0, null);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8542__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__12765 = ret;
      f = G__12765;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq12757) {
  var G__12758 = cljs.core.first(seq12757);
  var seq12757__$1 = cljs.core.next(seq12757);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__12758, seq12757__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args12766 = [];
  var len__8523__auto___12769 = arguments.length;
  var i__8524__auto___12770 = 0;
  while (true) {
    if (i__8524__auto___12770 < len__8523__auto___12769) {
      args12766.push(arguments[i__8524__auto___12770]);
      var G__12771 = i__8524__auto___12770 + 1;
      i__8524__auto___12770 = G__12771;
      continue;
    } else {
    }
    break;
  }
  var G__12768 = args12766.length;
  switch(G__12768) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12766.length)].join(""));
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__12774 = Math.random() * n;
  return Math.floor(G__12774);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__12776 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12776) : cljs.core.atom.call(null, G__12776);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___12779 = arguments.length;
  var i__8524__auto___12780 = 0;
  while (true) {
    if (i__8524__auto___12780 < len__8523__auto___12779) {
      args__8530__auto__.push(arguments[i__8524__auto___12780]);
      var G__12781 = i__8524__auto___12780 + 1;
      i__8524__auto___12780 = G__12781;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq12777) {
  var G__12778 = cljs.core.first(seq12777);
  var seq12777__$1 = cljs.core.next(seq12777);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__12778, seq12777__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args12782 = [];
  var len__8523__auto___12786 = arguments.length;
  var i__8524__auto___12787 = 0;
  while (true) {
    if (i__8524__auto___12787 < len__8523__auto___12786) {
      args12782.push(arguments[i__8524__auto___12787]);
      var G__12788 = i__8524__auto___12787 + 1;
      i__8524__auto___12787 = G__12788;
      continue;
    } else {
    }
    break;
  }
  var G__12784 = args12782.length;
  switch(G__12784) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12782.length)].join(""));
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__12785 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12785) : cljs.core.deref.call(null, G__12785);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__7410__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__7410__auto__) {
    return or__7410__auto__;
  } else {
    var or__7410__auto____$1 = cljs.core.contains_QMARK_((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__7410__auto____$1) {
      return or__7410__auto____$1;
    } else {
      var and__7398__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__7398__auto__) {
        var and__7398__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__7398__auto____$1) {
          var and__7398__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__7398__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__12790 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__12791 = i + 1;
                ret = G__12790;
                i = G__12791;
                continue;
              }
              break;
            }
          } else {
            return and__7398__auto____$2;
          }
        } else {
          return and__7398__auto____$1;
        }
      } else {
        return and__7398__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args12792 = [];
  var len__8523__auto___12796 = arguments.length;
  var i__8524__auto___12797 = 0;
  while (true) {
    if (i__8524__auto___12797 < len__8523__auto___12796) {
      args12792.push(arguments[i__8524__auto___12797]);
      var G__12798 = i__8524__auto___12797 + 1;
      i__8524__auto___12797 = G__12798;
      continue;
    } else {
    }
    break;
  }
  var G__12794 = args12792.length;
  switch(G__12794) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12792.length)].join(""));
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__12795 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12795) : cljs.core.deref.call(null, G__12795);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args12800 = [];
  var len__8523__auto___12804 = arguments.length;
  var i__8524__auto___12805 = 0;
  while (true) {
    if (i__8524__auto___12805 < len__8523__auto___12804) {
      args12800.push(arguments[i__8524__auto___12805]);
      var G__12806 = i__8524__auto___12805 + 1;
      i__8524__auto___12805 = G__12806;
      continue;
    } else {
    }
    break;
  }
  var G__12802 = args12800.length;
  switch(G__12802) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12800.length)].join(""));
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__12803 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12803) : cljs.core.deref.call(null, G__12803);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args12808 = [];
  var len__8523__auto___12812 = arguments.length;
  var i__8524__auto___12813 = 0;
  while (true) {
    if (i__8524__auto___12813 < len__8523__auto___12812) {
      args12808.push(arguments[i__8524__auto___12813]);
      var G__12814 = i__8524__auto___12813 + 1;
      i__8524__auto___12813 = G__12814;
      continue;
    } else {
    }
    break;
  }
  var G__12810 = args12808.length;
  switch(G__12810) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12808.length)].join(""));
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__12811 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__12811) : cljs.core.deref.call(null, G__12811);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args12816 = [];
  var len__8523__auto___12819 = arguments.length;
  var i__8524__auto___12820 = 0;
  while (true) {
    if (i__8524__auto___12820 < len__8523__auto___12819) {
      args12816.push(arguments[i__8524__auto___12820]);
      var G__12821 = i__8524__auto___12820 + 1;
      i__8524__auto___12820 = G__12821;
      continue;
    } else {
    }
    break;
  }
  var G__12818 = args12816.length;
  switch(G__12818) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12816.length)].join(""));
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error("Assert failed: (namespace parent)");
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error("Assert failed: (not\x3d tag parent)");
  }
  var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
  var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__7410__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), cljs.core.str.cljs$core$IFn$_invoke$arity$1("already has"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), cljs.core.str.cljs$core$IFn$_invoke$arity$1("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cyclic derivation:"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent), cljs.core.str.cljs$core$IFn$_invoke$arity$1("has"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), cljs.core.str.cljs$core$IFn$_invoke$arity$1("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf((new cljs.core.Keyword(null, 
    "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf((new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args12826 = [];
  var len__8523__auto___12829 = arguments.length;
  var i__8524__auto___12830 = 0;
  while (true) {
    if (i__8524__auto___12830 < len__8523__auto___12829) {
      args12826.push(arguments[i__8524__auto___12830]);
      var G__12831 = i__8524__auto___12830 + 1;
      i__8524__auto___12830 = G__12831;
      continue;
    } else {
    }
    break;
  }
  var G__12828 = args12826.length;
  switch(G__12828) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12826.length)].join(""));
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__12823_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__12823_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__12823_SHARP_), cljs.core.second(p1__12823_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__12824_SHARP_, p2__12825_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__12824_SHARP_, p2__12825_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__7410__auto__ = cljs.core.truth_(function() {
    var and__7398__auto__ = xprefs;
    if (cljs.core.truth_(and__7398__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__7398__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    var or__7410__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(function() {
            var G__12848 = x;
            var G__12849 = cljs.core.first(ps);
            var G__12850 = prefer_table;
            return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__12848, G__12849, G__12850) : cljs.core.prefers_STAR_.call(null, G__12848, G__12849, G__12850);
          }())) {
          } else {
          }
          var G__12857 = cljs.core.rest(ps);
          ps = G__12857;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__7410__auto____$1)) {
      return or__7410__auto____$1;
    } else {
      var or__7410__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(function() {
              var G__12854 = cljs.core.first(ps);
              var G__12855 = y;
              var G__12856 = prefer_table;
              return cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__12854, G__12855, G__12856) : cljs.core.prefers_STAR_.call(null, G__12854, G__12855, G__12856);
            }())) {
            } else {
            }
            var G__12858 = cljs.core.rest(ps);
            ps = G__12858;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__7410__auto____$2)) {
        return or__7410__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table, hierarchy) {
  var or__7410__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(hierarchy, x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__12863) {
    var vec__12864 = p__12863;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12864, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12864, 1, null);
    var e = vec__12864;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__7410__auto__ = be == null;
        if (or__7410__auto__) {
          return or__7410__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy));
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy)))) {
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Multiple methods in multimethod '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("' match dispatch value: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" -\x3e "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(k), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" and "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(be2)), 
        cljs.core.str.cljs$core$IFn$_invoke$arity$1(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$7 ? cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$7(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) : cljs.core.find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._reset[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto__.call(null, mf);
    } else {
      var m__8079__auto____$1 = cljs.core._reset["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._add_method[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__8079__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__8079__auto____$1 = cljs.core._add_method["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__8079__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._remove_method[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__8079__auto__.call(null, mf, dispatch_val);
    } else {
      var m__8079__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__8079__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._prefer_method[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__8079__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__8079__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__8079__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._get_method[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__8079__auto__.call(null, mf, dispatch_val);
    } else {
      var m__8079__auto____$1 = cljs.core._get_method["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__8079__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._methods[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto__.call(null, mf);
    } else {
      var m__8079__auto____$1 = cljs.core._methods["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._prefers[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto__.call(null, mf);
    } else {
      var m__8079__auto____$1 = cljs.core._prefers["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto__.call(null, mf);
    } else {
      var m__8079__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__8078__auto__ = mf == null ? null : mf;
    var m__8079__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto__.call(null, mf);
    } else {
      var m__8079__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__8079__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__8079__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No method in multimethod '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("' for dispatch value: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12868 = null;
  var G__12868__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__12868__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__12868__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__12868__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__12868__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__12868__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__12868__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__12868__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__12868__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__12868__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__12868__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__12868__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__12868__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__12868__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__12868__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__12868__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__12868__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__12868__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__12868__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__12868__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__12868__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__12868__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__12868 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__12868__1.call(this, self__);
      case 2:
        return G__12868__2.call(this, self__, a);
      case 3:
        return G__12868__3.call(this, self__, a, b);
      case 4:
        return G__12868__4.call(this, self__, a, b, c);
      case 5:
        return G__12868__5.call(this, self__, a, b, c, d);
      case 6:
        return G__12868__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__12868__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__12868__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__12868__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__12868__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__12868__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__12868__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__12868__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__12868__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__12868__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__12868__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__12868__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__12868__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__12868__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__12868__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__12868__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__12868__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + (arguments.length - 1));
  };
  G__12868.cljs$core$IFn$_invoke$arity$1 = G__12868__1;
  G__12868.cljs$core$IFn$_invoke$arity$2 = G__12868__2;
  G__12868.cljs$core$IFn$_invoke$arity$3 = G__12868__3;
  G__12868.cljs$core$IFn$_invoke$arity$4 = G__12868__4;
  G__12868.cljs$core$IFn$_invoke$arity$5 = G__12868__5;
  G__12868.cljs$core$IFn$_invoke$arity$6 = G__12868__6;
  G__12868.cljs$core$IFn$_invoke$arity$7 = G__12868__7;
  G__12868.cljs$core$IFn$_invoke$arity$8 = G__12868__8;
  G__12868.cljs$core$IFn$_invoke$arity$9 = G__12868__9;
  G__12868.cljs$core$IFn$_invoke$arity$10 = G__12868__10;
  G__12868.cljs$core$IFn$_invoke$arity$11 = G__12868__11;
  G__12868.cljs$core$IFn$_invoke$arity$12 = G__12868__12;
  G__12868.cljs$core$IFn$_invoke$arity$13 = G__12868__13;
  G__12868.cljs$core$IFn$_invoke$arity$14 = G__12868__14;
  G__12868.cljs$core$IFn$_invoke$arity$15 = G__12868__15;
  G__12868.cljs$core$IFn$_invoke$arity$16 = G__12868__16;
  G__12868.cljs$core$IFn$_invoke$arity$17 = G__12868__17;
  G__12868.cljs$core$IFn$_invoke$arity$18 = G__12868__18;
  G__12868.cljs$core$IFn$_invoke$arity$19 = G__12868__19;
  G__12868.cljs$core$IFn$_invoke$arity$20 = G__12868__20;
  G__12868.cljs$core$IFn$_invoke$arity$21 = G__12868__21;
  G__12868.cljs$core$IFn$_invoke$arity$22 = G__12868__22;
  return G__12868;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args12867) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args12867)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Preference conflict in multimethod '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("': "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is already preferred to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4655__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var target_fn = temp__4655__auto__;
    return target_fn;
  } else {
    var temp__4655__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var target_fn = temp__4655__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "name", "name", -810760592, null), new cljs.core.Symbol(null, "dispatch-fn", "dispatch-fn", -1401088155, null), new cljs.core.Symbol(null, "default-dispatch-val", "default-dispatch-val", -1231201266, null), new cljs.core.Symbol(null, "hierarchy", "hierarchy", 587061186, null), new cljs.core.Symbol(null, "method-table", "method-table", -1878263165, null), new cljs.core.Symbol(null, 
  "prefer-table", "prefer-table", 462168584, null), new cljs.core.Symbol(null, "method-cache", "method-cache", 1230193905, null), new cljs.core.Symbol(null, "cached-hierarchy", "cached-hierarchy", -1085460203, null)], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.IUUID = function() {
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.cljs$core$IUUID$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1('#uuid "'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__12869 = self__.uuid;
  var G__12870 = other.uuid;
  return goog.array.defaultCompare(G__12869, G__12870);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(16).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(16)).toString(16);
  return cljs.core.uuid([cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("4"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhex), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), 
  cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex())].join(""));
};
cljs.core.uuid_QMARK_ = function cljs$core$uuid_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IUUID$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args12873 = [];
  var len__8523__auto___12876 = arguments.length;
  var i__8524__auto___12877 = 0;
  while (true) {
    if (i__8524__auto___12877 < len__8523__auto___12876) {
      args12873.push(arguments[i__8524__auto___12877]);
      var G__12878 = i__8524__auto___12877 + 1;
      i__8524__auto___12877 = G__12878;
      continue;
    } else {
    }
    break;
  }
  var G__12875 = args12873.length;
  switch(G__12875) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12873.length)].join(""));
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "ns*", "ns*", 1840949383, null), null, new cljs.core.Symbol(null, "finally", "finally", -1065347064, null), null, new cljs.core.Symbol(null, 
  "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, 
  null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "var", "var", 870848730, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, 
  "catch", "catch", -1616370245, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return new cljs.core.Keyword(null, "ok", "ok", 967785236);
  } else {
    return new cljs.core.Keyword(null, "no-test", "no-test", -1679482642);
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.cljs$core$ILookup$_lookup$arity$3(null, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__12880 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__12880) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.tag), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? tag)");
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["arguments", "abstract", "await", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", 
"throw", "throws", "transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null", "constructor"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__12882_SHARP_, p2__12883_SHARP_) {
      goog.object.set(p1__12882_SHARP_, p2__12883_SHARP_, true);
      return p1__12882_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__12886 = cljs.core.next(ks__$1);
          var G__12887 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
            var G__12885 = ret;
            if (!(ret === "")) {
              return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__12885), cljs.core.str.cljs$core$IFn$_invoke$arity$1("|")].join("");
            } else {
              return G__12885;
            }
          }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__12886;
          ret = G__12887;
          continue;
        } else {
          return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_12888 = 0;
  while (true) {
    if (i_12888 < name.length) {
      var c_12889 = name.charAt(i_12888);
      var sub_12890 = goog.object.get(cljs.core.CHAR_MAP, c_12889);
      if (!(sub_12890 == null)) {
        sb.append(sub_12890);
      } else {
        sb.append(c_12889);
      }
      var G__12891 = i_12888 + 1;
      i_12888 = G__12891;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE_), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4655__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var match = temp__4655__auto__;
      var vec__12895 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__12895, 0, null);
      var G__12898 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__12899 = r.lastIndex;
      ret = G__12898;
      last_match_end = G__12899;
      continue;
    } else {
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "obj", "obj", -1672671807, null), new cljs.core.Symbol(null, "name", "name", -810760592, null)], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write(writer__8022__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__12904 = function() {
          var G__12902 = ctxt;
          var G__12903 = cljs.core.first(xs);
          return goog.object.get(G__12902, G__12903);
        }();
        var G__12905 = cljs.core.next(xs);
        ctxt = G__12904;
        xs = G__12905;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__12909 = cljs.core._STAR_target_STAR_;
  switch(G__12909) {
    case "nodejs":
      if (cljs.core.truth_(COMPILED)) {
        return cljs.core.find_ns_obj_STAR_(function() {
          try {
            var G__12911 = cljs.core.first(segs);
            return eval(G__12911);
          } catch (e12910) {
            if (e12910 instanceof ReferenceError) {
              var e = e12910;
              return null;
            } else {
              throw e12910;
            }
          }
        }(), cljs.core.next(segs));
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("find-ns-obj not supported for target "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_target_STAR_)].join(""));
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args12913 = [];
  var len__8523__auto___12916 = arguments.length;
  var i__8524__auto___12917 = 0;
  while (true) {
    if (i__8524__auto___12917 < len__8523__auto___12916) {
      args12913.push(arguments[i__8524__auto___12917]);
      var G__12918 = i__8524__auto___12917 + 1;
      i__8524__auto___12917 = G__12918;
      continue;
    } else {
    }
    break;
  }
  var G__12915 = args12913.length;
  switch(G__12915) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12913.length)].join(""));
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__12921 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12921) : cljs.core.atom.call(null, G__12921);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__12923 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__12923) : cljs.core.atom.call(null, G__12923);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_str), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("om.util");
goog.require("cljs.core");
om.util.force_children = function om$util$force_children(x) {
  var G__14940 = x;
  if (cljs.core.seq_QMARK_.call(null, x)) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, om.util.force_children), G__14940);
  } else {
    return G__14940;
  }
};
om.util.union_QMARK_ = function om$util$union_QMARK_(expr) {
  var expr__$1 = function() {
    var G__14942 = expr;
    if (cljs.core.seq_QMARK_.call(null, expr)) {
      return cljs.core.first.call(null, G__14942);
    } else {
      return G__14942;
    }
  }();
  return cljs.core.map_QMARK_.call(null, expr__$1) && cljs.core.map_QMARK_.call(null, cljs.core.second.call(null, cljs.core.first.call(null, expr__$1)));
};
om.util.join_QMARK_ = function om$util$join_QMARK_(x) {
  var x__$1 = cljs.core.seq_QMARK_.call(null, x) ? cljs.core.first.call(null, x) : x;
  return cljs.core.map_QMARK_.call(null, x__$1);
};
om.util.ident_QMARK_ = function om$util$ident_QMARK_(x) {
  return cljs.core.vector_QMARK_.call(null, x) && 2 === cljs.core.count.call(null, x) && cljs.core.nth.call(null, x, 0) instanceof cljs.core.Keyword;
};
om.util.join_entry = function om$util$join_entry(expr) {
  if (cljs.core.seq_QMARK_.call(null, expr)) {
    return cljs.core.ffirst.call(null, expr);
  } else {
    return cljs.core.first.call(null, expr);
  }
};
om.util.join_key = function om$util$join_key(expr) {
  if (cljs.core.map_QMARK_.call(null, expr)) {
    return cljs.core.ffirst.call(null, expr);
  } else {
    if (cljs.core.seq_QMARK_.call(null, expr)) {
      return om.util.join_key.call(null, cljs.core.first.call(null, expr));
    } else {
      return expr;
    }
  }
};
om.util.join_value = function om$util$join_value(join) {
  return cljs.core.second.call(null, om.util.join_entry.call(null, join));
};
om.util.unique_ident_QMARK_ = function om$util$unique_ident_QMARK_(x) {
  return om.util.ident_QMARK_.call(null, x) && cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1201019570, null), cljs.core.second.call(null, x));
};
om.util.recursion_QMARK_ = function om$util$recursion_QMARK_(x) {
  return cljs.core.symbol_identical_QMARK_.call(null, new cljs.core.Symbol(null, "...", "...", -1926939749, null), x) || typeof x === "number";
};
om.util.mutation_QMARK_ = function om$util$mutation_QMARK_(expr) {
  var expr__$1 = function() {
    var G__14944 = expr;
    if (cljs.core.seq_QMARK_.call(null, expr)) {
      return cljs.core.first.call(null, G__14944);
    } else {
      return G__14944;
    }
  }();
  return expr__$1 instanceof cljs.core.Symbol;
};
om.util.mutation_key = function om$util$mutation_key(expr) {
  if (cljs.core.first.call(null, expr) instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? (first expr))");
  }
  return cljs.core.first.call(null, expr);
};
goog.provide("om.dom");
goog.require("cljs.core");
goog.require("om.util");
goog.require("goog.object");
om.dom.a = function om$dom$a(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16430 = arguments.length;
  var i__8524__auto___16431 = 0;
  while (true) {
    if (i__8524__auto___16431 < len__8523__auto___16430) {
      args__8530__auto__.push(arguments[i__8524__auto___16431]);
      var G__16432 = i__8524__auto___16431 + 1;
      i__8524__auto___16431 = G__16432;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.a.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.a.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.a.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.a.cljs$lang$maxFixedArity = 1;
om.dom.a.cljs$lang$applyTo = function(seq16178) {
  var G__16179 = cljs.core.first.call(null, seq16178);
  var seq16178__$1 = cljs.core.next.call(null, seq16178);
  return om.dom.a.cljs$core$IFn$_invoke$arity$variadic(G__16179, seq16178__$1);
};
om.dom.abbr = function om$dom$abbr(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16433 = arguments.length;
  var i__8524__auto___16434 = 0;
  while (true) {
    if (i__8524__auto___16434 < len__8523__auto___16433) {
      args__8530__auto__.push(arguments[i__8524__auto___16434]);
      var G__16435 = i__8524__auto___16434 + 1;
      i__8524__auto___16434 = G__16435;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.abbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.abbr.cljs$lang$maxFixedArity = 1;
om.dom.abbr.cljs$lang$applyTo = function(seq16180) {
  var G__16181 = cljs.core.first.call(null, seq16180);
  var seq16180__$1 = cljs.core.next.call(null, seq16180);
  return om.dom.abbr.cljs$core$IFn$_invoke$arity$variadic(G__16181, seq16180__$1);
};
om.dom.address = function om$dom$address(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16436 = arguments.length;
  var i__8524__auto___16437 = 0;
  while (true) {
    if (i__8524__auto___16437 < len__8523__auto___16436) {
      args__8530__auto__.push(arguments[i__8524__auto___16437]);
      var G__16438 = i__8524__auto___16437 + 1;
      i__8524__auto___16437 = G__16438;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.address.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.address.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.address.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.address.cljs$lang$maxFixedArity = 1;
om.dom.address.cljs$lang$applyTo = function(seq16182) {
  var G__16183 = cljs.core.first.call(null, seq16182);
  var seq16182__$1 = cljs.core.next.call(null, seq16182);
  return om.dom.address.cljs$core$IFn$_invoke$arity$variadic(G__16183, seq16182__$1);
};
om.dom.area = function om$dom$area(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16439 = arguments.length;
  var i__8524__auto___16440 = 0;
  while (true) {
    if (i__8524__auto___16440 < len__8523__auto___16439) {
      args__8530__auto__.push(arguments[i__8524__auto___16440]);
      var G__16441 = i__8524__auto___16440 + 1;
      i__8524__auto___16440 = G__16441;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.area.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.area.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.area.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.area.cljs$lang$maxFixedArity = 1;
om.dom.area.cljs$lang$applyTo = function(seq16184) {
  var G__16185 = cljs.core.first.call(null, seq16184);
  var seq16184__$1 = cljs.core.next.call(null, seq16184);
  return om.dom.area.cljs$core$IFn$_invoke$arity$variadic(G__16185, seq16184__$1);
};
om.dom.article = function om$dom$article(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16442 = arguments.length;
  var i__8524__auto___16443 = 0;
  while (true) {
    if (i__8524__auto___16443 < len__8523__auto___16442) {
      args__8530__auto__.push(arguments[i__8524__auto___16443]);
      var G__16444 = i__8524__auto___16443 + 1;
      i__8524__auto___16443 = G__16444;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.article.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.article.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.article.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.article.cljs$lang$maxFixedArity = 1;
om.dom.article.cljs$lang$applyTo = function(seq16186) {
  var G__16187 = cljs.core.first.call(null, seq16186);
  var seq16186__$1 = cljs.core.next.call(null, seq16186);
  return om.dom.article.cljs$core$IFn$_invoke$arity$variadic(G__16187, seq16186__$1);
};
om.dom.aside = function om$dom$aside(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16445 = arguments.length;
  var i__8524__auto___16446 = 0;
  while (true) {
    if (i__8524__auto___16446 < len__8523__auto___16445) {
      args__8530__auto__.push(arguments[i__8524__auto___16446]);
      var G__16447 = i__8524__auto___16446 + 1;
      i__8524__auto___16446 = G__16447;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.aside.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.aside.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.aside.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.aside.cljs$lang$maxFixedArity = 1;
om.dom.aside.cljs$lang$applyTo = function(seq16188) {
  var G__16189 = cljs.core.first.call(null, seq16188);
  var seq16188__$1 = cljs.core.next.call(null, seq16188);
  return om.dom.aside.cljs$core$IFn$_invoke$arity$variadic(G__16189, seq16188__$1);
};
om.dom.audio = function om$dom$audio(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16448 = arguments.length;
  var i__8524__auto___16449 = 0;
  while (true) {
    if (i__8524__auto___16449 < len__8523__auto___16448) {
      args__8530__auto__.push(arguments[i__8524__auto___16449]);
      var G__16450 = i__8524__auto___16449 + 1;
      i__8524__auto___16449 = G__16450;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.audio.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.audio.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.audio.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.audio.cljs$lang$maxFixedArity = 1;
om.dom.audio.cljs$lang$applyTo = function(seq16190) {
  var G__16191 = cljs.core.first.call(null, seq16190);
  var seq16190__$1 = cljs.core.next.call(null, seq16190);
  return om.dom.audio.cljs$core$IFn$_invoke$arity$variadic(G__16191, seq16190__$1);
};
om.dom.b = function om$dom$b(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16451 = arguments.length;
  var i__8524__auto___16452 = 0;
  while (true) {
    if (i__8524__auto___16452 < len__8523__auto___16451) {
      args__8530__auto__.push(arguments[i__8524__auto___16452]);
      var G__16453 = i__8524__auto___16452 + 1;
      i__8524__auto___16452 = G__16453;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.b.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.b.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.b.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.b.cljs$lang$maxFixedArity = 1;
om.dom.b.cljs$lang$applyTo = function(seq16192) {
  var G__16193 = cljs.core.first.call(null, seq16192);
  var seq16192__$1 = cljs.core.next.call(null, seq16192);
  return om.dom.b.cljs$core$IFn$_invoke$arity$variadic(G__16193, seq16192__$1);
};
om.dom.base = function om$dom$base(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16454 = arguments.length;
  var i__8524__auto___16455 = 0;
  while (true) {
    if (i__8524__auto___16455 < len__8523__auto___16454) {
      args__8530__auto__.push(arguments[i__8524__auto___16455]);
      var G__16456 = i__8524__auto___16455 + 1;
      i__8524__auto___16455 = G__16456;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.base.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.base.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.base.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.base.cljs$lang$maxFixedArity = 1;
om.dom.base.cljs$lang$applyTo = function(seq16194) {
  var G__16195 = cljs.core.first.call(null, seq16194);
  var seq16194__$1 = cljs.core.next.call(null, seq16194);
  return om.dom.base.cljs$core$IFn$_invoke$arity$variadic(G__16195, seq16194__$1);
};
om.dom.bdi = function om$dom$bdi(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16457 = arguments.length;
  var i__8524__auto___16458 = 0;
  while (true) {
    if (i__8524__auto___16458 < len__8523__auto___16457) {
      args__8530__auto__.push(arguments[i__8524__auto___16458]);
      var G__16459 = i__8524__auto___16458 + 1;
      i__8524__auto___16458 = G__16459;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.bdi.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.bdi.cljs$lang$maxFixedArity = 1;
om.dom.bdi.cljs$lang$applyTo = function(seq16196) {
  var G__16197 = cljs.core.first.call(null, seq16196);
  var seq16196__$1 = cljs.core.next.call(null, seq16196);
  return om.dom.bdi.cljs$core$IFn$_invoke$arity$variadic(G__16197, seq16196__$1);
};
om.dom.bdo = function om$dom$bdo(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16460 = arguments.length;
  var i__8524__auto___16461 = 0;
  while (true) {
    if (i__8524__auto___16461 < len__8523__auto___16460) {
      args__8530__auto__.push(arguments[i__8524__auto___16461]);
      var G__16462 = i__8524__auto___16461 + 1;
      i__8524__auto___16461 = G__16462;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.bdo.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.bdo.cljs$lang$maxFixedArity = 1;
om.dom.bdo.cljs$lang$applyTo = function(seq16198) {
  var G__16199 = cljs.core.first.call(null, seq16198);
  var seq16198__$1 = cljs.core.next.call(null, seq16198);
  return om.dom.bdo.cljs$core$IFn$_invoke$arity$variadic(G__16199, seq16198__$1);
};
om.dom.big = function om$dom$big(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16463 = arguments.length;
  var i__8524__auto___16464 = 0;
  while (true) {
    if (i__8524__auto___16464 < len__8523__auto___16463) {
      args__8530__auto__.push(arguments[i__8524__auto___16464]);
      var G__16465 = i__8524__auto___16464 + 1;
      i__8524__auto___16464 = G__16465;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.big.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.big.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.big.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.big.cljs$lang$maxFixedArity = 1;
om.dom.big.cljs$lang$applyTo = function(seq16200) {
  var G__16201 = cljs.core.first.call(null, seq16200);
  var seq16200__$1 = cljs.core.next.call(null, seq16200);
  return om.dom.big.cljs$core$IFn$_invoke$arity$variadic(G__16201, seq16200__$1);
};
om.dom.blockquote = function om$dom$blockquote(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16466 = arguments.length;
  var i__8524__auto___16467 = 0;
  while (true) {
    if (i__8524__auto___16467 < len__8523__auto___16466) {
      args__8530__auto__.push(arguments[i__8524__auto___16467]);
      var G__16468 = i__8524__auto___16467 + 1;
      i__8524__auto___16467 = G__16468;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.blockquote.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.blockquote.cljs$lang$maxFixedArity = 1;
om.dom.blockquote.cljs$lang$applyTo = function(seq16202) {
  var G__16203 = cljs.core.first.call(null, seq16202);
  var seq16202__$1 = cljs.core.next.call(null, seq16202);
  return om.dom.blockquote.cljs$core$IFn$_invoke$arity$variadic(G__16203, seq16202__$1);
};
om.dom.body = function om$dom$body(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16469 = arguments.length;
  var i__8524__auto___16470 = 0;
  while (true) {
    if (i__8524__auto___16470 < len__8523__auto___16469) {
      args__8530__auto__.push(arguments[i__8524__auto___16470]);
      var G__16471 = i__8524__auto___16470 + 1;
      i__8524__auto___16470 = G__16471;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.body.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.body.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.body.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.body.cljs$lang$maxFixedArity = 1;
om.dom.body.cljs$lang$applyTo = function(seq16204) {
  var G__16205 = cljs.core.first.call(null, seq16204);
  var seq16204__$1 = cljs.core.next.call(null, seq16204);
  return om.dom.body.cljs$core$IFn$_invoke$arity$variadic(G__16205, seq16204__$1);
};
om.dom.br = function om$dom$br(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16472 = arguments.length;
  var i__8524__auto___16473 = 0;
  while (true) {
    if (i__8524__auto___16473 < len__8523__auto___16472) {
      args__8530__auto__.push(arguments[i__8524__auto___16473]);
      var G__16474 = i__8524__auto___16473 + 1;
      i__8524__auto___16473 = G__16474;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.br.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.br.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.br.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.br.cljs$lang$maxFixedArity = 1;
om.dom.br.cljs$lang$applyTo = function(seq16206) {
  var G__16207 = cljs.core.first.call(null, seq16206);
  var seq16206__$1 = cljs.core.next.call(null, seq16206);
  return om.dom.br.cljs$core$IFn$_invoke$arity$variadic(G__16207, seq16206__$1);
};
om.dom.button = function om$dom$button(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16475 = arguments.length;
  var i__8524__auto___16476 = 0;
  while (true) {
    if (i__8524__auto___16476 < len__8523__auto___16475) {
      args__8530__auto__.push(arguments[i__8524__auto___16476]);
      var G__16477 = i__8524__auto___16476 + 1;
      i__8524__auto___16476 = G__16477;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.button.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.button.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.button.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.button.cljs$lang$maxFixedArity = 1;
om.dom.button.cljs$lang$applyTo = function(seq16208) {
  var G__16209 = cljs.core.first.call(null, seq16208);
  var seq16208__$1 = cljs.core.next.call(null, seq16208);
  return om.dom.button.cljs$core$IFn$_invoke$arity$variadic(G__16209, seq16208__$1);
};
om.dom.canvas = function om$dom$canvas(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16478 = arguments.length;
  var i__8524__auto___16479 = 0;
  while (true) {
    if (i__8524__auto___16479 < len__8523__auto___16478) {
      args__8530__auto__.push(arguments[i__8524__auto___16479]);
      var G__16480 = i__8524__auto___16479 + 1;
      i__8524__auto___16479 = G__16480;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.canvas.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.canvas.cljs$lang$maxFixedArity = 1;
om.dom.canvas.cljs$lang$applyTo = function(seq16210) {
  var G__16211 = cljs.core.first.call(null, seq16210);
  var seq16210__$1 = cljs.core.next.call(null, seq16210);
  return om.dom.canvas.cljs$core$IFn$_invoke$arity$variadic(G__16211, seq16210__$1);
};
om.dom.caption = function om$dom$caption(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16481 = arguments.length;
  var i__8524__auto___16482 = 0;
  while (true) {
    if (i__8524__auto___16482 < len__8523__auto___16481) {
      args__8530__auto__.push(arguments[i__8524__auto___16482]);
      var G__16483 = i__8524__auto___16482 + 1;
      i__8524__auto___16482 = G__16483;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.caption.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.caption.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.caption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.caption.cljs$lang$maxFixedArity = 1;
om.dom.caption.cljs$lang$applyTo = function(seq16212) {
  var G__16213 = cljs.core.first.call(null, seq16212);
  var seq16212__$1 = cljs.core.next.call(null, seq16212);
  return om.dom.caption.cljs$core$IFn$_invoke$arity$variadic(G__16213, seq16212__$1);
};
om.dom.cite = function om$dom$cite(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16484 = arguments.length;
  var i__8524__auto___16485 = 0;
  while (true) {
    if (i__8524__auto___16485 < len__8523__auto___16484) {
      args__8530__auto__.push(arguments[i__8524__auto___16485]);
      var G__16486 = i__8524__auto___16485 + 1;
      i__8524__auto___16485 = G__16486;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.cite.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.cite.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.cite.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.cite.cljs$lang$maxFixedArity = 1;
om.dom.cite.cljs$lang$applyTo = function(seq16214) {
  var G__16215 = cljs.core.first.call(null, seq16214);
  var seq16214__$1 = cljs.core.next.call(null, seq16214);
  return om.dom.cite.cljs$core$IFn$_invoke$arity$variadic(G__16215, seq16214__$1);
};
om.dom.code = function om$dom$code(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16487 = arguments.length;
  var i__8524__auto___16488 = 0;
  while (true) {
    if (i__8524__auto___16488 < len__8523__auto___16487) {
      args__8530__auto__.push(arguments[i__8524__auto___16488]);
      var G__16489 = i__8524__auto___16488 + 1;
      i__8524__auto___16488 = G__16489;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.code.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.code.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.code.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.code.cljs$lang$maxFixedArity = 1;
om.dom.code.cljs$lang$applyTo = function(seq16216) {
  var G__16217 = cljs.core.first.call(null, seq16216);
  var seq16216__$1 = cljs.core.next.call(null, seq16216);
  return om.dom.code.cljs$core$IFn$_invoke$arity$variadic(G__16217, seq16216__$1);
};
om.dom.col = function om$dom$col(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16490 = arguments.length;
  var i__8524__auto___16491 = 0;
  while (true) {
    if (i__8524__auto___16491 < len__8523__auto___16490) {
      args__8530__auto__.push(arguments[i__8524__auto___16491]);
      var G__16492 = i__8524__auto___16491 + 1;
      i__8524__auto___16491 = G__16492;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.col.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.col.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.col.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.col.cljs$lang$maxFixedArity = 1;
om.dom.col.cljs$lang$applyTo = function(seq16218) {
  var G__16219 = cljs.core.first.call(null, seq16218);
  var seq16218__$1 = cljs.core.next.call(null, seq16218);
  return om.dom.col.cljs$core$IFn$_invoke$arity$variadic(G__16219, seq16218__$1);
};
om.dom.colgroup = function om$dom$colgroup(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16493 = arguments.length;
  var i__8524__auto___16494 = 0;
  while (true) {
    if (i__8524__auto___16494 < len__8523__auto___16493) {
      args__8530__auto__.push(arguments[i__8524__auto___16494]);
      var G__16495 = i__8524__auto___16494 + 1;
      i__8524__auto___16494 = G__16495;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.colgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.colgroup.cljs$lang$maxFixedArity = 1;
om.dom.colgroup.cljs$lang$applyTo = function(seq16220) {
  var G__16221 = cljs.core.first.call(null, seq16220);
  var seq16220__$1 = cljs.core.next.call(null, seq16220);
  return om.dom.colgroup.cljs$core$IFn$_invoke$arity$variadic(G__16221, seq16220__$1);
};
om.dom.data = function om$dom$data(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16496 = arguments.length;
  var i__8524__auto___16497 = 0;
  while (true) {
    if (i__8524__auto___16497 < len__8523__auto___16496) {
      args__8530__auto__.push(arguments[i__8524__auto___16497]);
      var G__16498 = i__8524__auto___16497 + 1;
      i__8524__auto___16497 = G__16498;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.data.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.data.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.data.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.data.cljs$lang$maxFixedArity = 1;
om.dom.data.cljs$lang$applyTo = function(seq16222) {
  var G__16223 = cljs.core.first.call(null, seq16222);
  var seq16222__$1 = cljs.core.next.call(null, seq16222);
  return om.dom.data.cljs$core$IFn$_invoke$arity$variadic(G__16223, seq16222__$1);
};
om.dom.datalist = function om$dom$datalist(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16499 = arguments.length;
  var i__8524__auto___16500 = 0;
  while (true) {
    if (i__8524__auto___16500 < len__8523__auto___16499) {
      args__8530__auto__.push(arguments[i__8524__auto___16500]);
      var G__16501 = i__8524__auto___16500 + 1;
      i__8524__auto___16500 = G__16501;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.datalist.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.datalist.cljs$lang$maxFixedArity = 1;
om.dom.datalist.cljs$lang$applyTo = function(seq16224) {
  var G__16225 = cljs.core.first.call(null, seq16224);
  var seq16224__$1 = cljs.core.next.call(null, seq16224);
  return om.dom.datalist.cljs$core$IFn$_invoke$arity$variadic(G__16225, seq16224__$1);
};
om.dom.dd = function om$dom$dd(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16502 = arguments.length;
  var i__8524__auto___16503 = 0;
  while (true) {
    if (i__8524__auto___16503 < len__8523__auto___16502) {
      args__8530__auto__.push(arguments[i__8524__auto___16503]);
      var G__16504 = i__8524__auto___16503 + 1;
      i__8524__auto___16503 = G__16504;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.dd.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.dd.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.dd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.dd.cljs$lang$maxFixedArity = 1;
om.dom.dd.cljs$lang$applyTo = function(seq16226) {
  var G__16227 = cljs.core.first.call(null, seq16226);
  var seq16226__$1 = cljs.core.next.call(null, seq16226);
  return om.dom.dd.cljs$core$IFn$_invoke$arity$variadic(G__16227, seq16226__$1);
};
om.dom.del = function om$dom$del(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16505 = arguments.length;
  var i__8524__auto___16506 = 0;
  while (true) {
    if (i__8524__auto___16506 < len__8523__auto___16505) {
      args__8530__auto__.push(arguments[i__8524__auto___16506]);
      var G__16507 = i__8524__auto___16506 + 1;
      i__8524__auto___16506 = G__16507;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.del.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.del.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.del.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.del.cljs$lang$maxFixedArity = 1;
om.dom.del.cljs$lang$applyTo = function(seq16228) {
  var G__16229 = cljs.core.first.call(null, seq16228);
  var seq16228__$1 = cljs.core.next.call(null, seq16228);
  return om.dom.del.cljs$core$IFn$_invoke$arity$variadic(G__16229, seq16228__$1);
};
om.dom.details = function om$dom$details(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16508 = arguments.length;
  var i__8524__auto___16509 = 0;
  while (true) {
    if (i__8524__auto___16509 < len__8523__auto___16508) {
      args__8530__auto__.push(arguments[i__8524__auto___16509]);
      var G__16510 = i__8524__auto___16509 + 1;
      i__8524__auto___16509 = G__16510;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.details.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.details.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.details.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.details.cljs$lang$maxFixedArity = 1;
om.dom.details.cljs$lang$applyTo = function(seq16230) {
  var G__16231 = cljs.core.first.call(null, seq16230);
  var seq16230__$1 = cljs.core.next.call(null, seq16230);
  return om.dom.details.cljs$core$IFn$_invoke$arity$variadic(G__16231, seq16230__$1);
};
om.dom.dfn = function om$dom$dfn(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16511 = arguments.length;
  var i__8524__auto___16512 = 0;
  while (true) {
    if (i__8524__auto___16512 < len__8523__auto___16511) {
      args__8530__auto__.push(arguments[i__8524__auto___16512]);
      var G__16513 = i__8524__auto___16512 + 1;
      i__8524__auto___16512 = G__16513;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.dfn.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.dfn.cljs$lang$maxFixedArity = 1;
om.dom.dfn.cljs$lang$applyTo = function(seq16232) {
  var G__16233 = cljs.core.first.call(null, seq16232);
  var seq16232__$1 = cljs.core.next.call(null, seq16232);
  return om.dom.dfn.cljs$core$IFn$_invoke$arity$variadic(G__16233, seq16232__$1);
};
om.dom.dialog = function om$dom$dialog(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16514 = arguments.length;
  var i__8524__auto___16515 = 0;
  while (true) {
    if (i__8524__auto___16515 < len__8523__auto___16514) {
      args__8530__auto__.push(arguments[i__8524__auto___16515]);
      var G__16516 = i__8524__auto___16515 + 1;
      i__8524__auto___16515 = G__16516;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.dialog.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.dialog.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.dialog.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.dialog.cljs$lang$maxFixedArity = 1;
om.dom.dialog.cljs$lang$applyTo = function(seq16234) {
  var G__16235 = cljs.core.first.call(null, seq16234);
  var seq16234__$1 = cljs.core.next.call(null, seq16234);
  return om.dom.dialog.cljs$core$IFn$_invoke$arity$variadic(G__16235, seq16234__$1);
};
om.dom.div = function om$dom$div(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16517 = arguments.length;
  var i__8524__auto___16518 = 0;
  while (true) {
    if (i__8524__auto___16518 < len__8523__auto___16517) {
      args__8530__auto__.push(arguments[i__8524__auto___16518]);
      var G__16519 = i__8524__auto___16518 + 1;
      i__8524__auto___16518 = G__16519;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.div.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.div.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.div.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.div.cljs$lang$maxFixedArity = 1;
om.dom.div.cljs$lang$applyTo = function(seq16236) {
  var G__16237 = cljs.core.first.call(null, seq16236);
  var seq16236__$1 = cljs.core.next.call(null, seq16236);
  return om.dom.div.cljs$core$IFn$_invoke$arity$variadic(G__16237, seq16236__$1);
};
om.dom.dl = function om$dom$dl(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16520 = arguments.length;
  var i__8524__auto___16521 = 0;
  while (true) {
    if (i__8524__auto___16521 < len__8523__auto___16520) {
      args__8530__auto__.push(arguments[i__8524__auto___16521]);
      var G__16522 = i__8524__auto___16521 + 1;
      i__8524__auto___16521 = G__16522;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.dl.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.dl.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.dl.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.dl.cljs$lang$maxFixedArity = 1;
om.dom.dl.cljs$lang$applyTo = function(seq16238) {
  var G__16239 = cljs.core.first.call(null, seq16238);
  var seq16238__$1 = cljs.core.next.call(null, seq16238);
  return om.dom.dl.cljs$core$IFn$_invoke$arity$variadic(G__16239, seq16238__$1);
};
om.dom.dt = function om$dom$dt(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16523 = arguments.length;
  var i__8524__auto___16524 = 0;
  while (true) {
    if (i__8524__auto___16524 < len__8523__auto___16523) {
      args__8530__auto__.push(arguments[i__8524__auto___16524]);
      var G__16525 = i__8524__auto___16524 + 1;
      i__8524__auto___16524 = G__16525;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.dt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.dt.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.dt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.dt.cljs$lang$maxFixedArity = 1;
om.dom.dt.cljs$lang$applyTo = function(seq16240) {
  var G__16241 = cljs.core.first.call(null, seq16240);
  var seq16240__$1 = cljs.core.next.call(null, seq16240);
  return om.dom.dt.cljs$core$IFn$_invoke$arity$variadic(G__16241, seq16240__$1);
};
om.dom.em = function om$dom$em(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16526 = arguments.length;
  var i__8524__auto___16527 = 0;
  while (true) {
    if (i__8524__auto___16527 < len__8523__auto___16526) {
      args__8530__auto__.push(arguments[i__8524__auto___16527]);
      var G__16528 = i__8524__auto___16527 + 1;
      i__8524__auto___16527 = G__16528;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.em.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.em.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.em.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.em.cljs$lang$maxFixedArity = 1;
om.dom.em.cljs$lang$applyTo = function(seq16244) {
  var G__16245 = cljs.core.first.call(null, seq16244);
  var seq16244__$1 = cljs.core.next.call(null, seq16244);
  return om.dom.em.cljs$core$IFn$_invoke$arity$variadic(G__16245, seq16244__$1);
};
om.dom.embed = function om$dom$embed(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16529 = arguments.length;
  var i__8524__auto___16530 = 0;
  while (true) {
    if (i__8524__auto___16530 < len__8523__auto___16529) {
      args__8530__auto__.push(arguments[i__8524__auto___16530]);
      var G__16531 = i__8524__auto___16530 + 1;
      i__8524__auto___16530 = G__16531;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.embed.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.embed.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.embed.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.embed.cljs$lang$maxFixedArity = 1;
om.dom.embed.cljs$lang$applyTo = function(seq16246) {
  var G__16247 = cljs.core.first.call(null, seq16246);
  var seq16246__$1 = cljs.core.next.call(null, seq16246);
  return om.dom.embed.cljs$core$IFn$_invoke$arity$variadic(G__16247, seq16246__$1);
};
om.dom.fieldset = function om$dom$fieldset(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16532 = arguments.length;
  var i__8524__auto___16533 = 0;
  while (true) {
    if (i__8524__auto___16533 < len__8523__auto___16532) {
      args__8530__auto__.push(arguments[i__8524__auto___16533]);
      var G__16534 = i__8524__auto___16533 + 1;
      i__8524__auto___16533 = G__16534;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.fieldset.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.fieldset.cljs$lang$maxFixedArity = 1;
om.dom.fieldset.cljs$lang$applyTo = function(seq16248) {
  var G__16249 = cljs.core.first.call(null, seq16248);
  var seq16248__$1 = cljs.core.next.call(null, seq16248);
  return om.dom.fieldset.cljs$core$IFn$_invoke$arity$variadic(G__16249, seq16248__$1);
};
om.dom.figcaption = function om$dom$figcaption(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16535 = arguments.length;
  var i__8524__auto___16536 = 0;
  while (true) {
    if (i__8524__auto___16536 < len__8523__auto___16535) {
      args__8530__auto__.push(arguments[i__8524__auto___16536]);
      var G__16537 = i__8524__auto___16536 + 1;
      i__8524__auto___16536 = G__16537;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.figcaption.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.figcaption.cljs$lang$maxFixedArity = 1;
om.dom.figcaption.cljs$lang$applyTo = function(seq16250) {
  var G__16251 = cljs.core.first.call(null, seq16250);
  var seq16250__$1 = cljs.core.next.call(null, seq16250);
  return om.dom.figcaption.cljs$core$IFn$_invoke$arity$variadic(G__16251, seq16250__$1);
};
om.dom.figure = function om$dom$figure(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16538 = arguments.length;
  var i__8524__auto___16539 = 0;
  while (true) {
    if (i__8524__auto___16539 < len__8523__auto___16538) {
      args__8530__auto__.push(arguments[i__8524__auto___16539]);
      var G__16540 = i__8524__auto___16539 + 1;
      i__8524__auto___16539 = G__16540;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.figure.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.figure.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.figure.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.figure.cljs$lang$maxFixedArity = 1;
om.dom.figure.cljs$lang$applyTo = function(seq16252) {
  var G__16253 = cljs.core.first.call(null, seq16252);
  var seq16252__$1 = cljs.core.next.call(null, seq16252);
  return om.dom.figure.cljs$core$IFn$_invoke$arity$variadic(G__16253, seq16252__$1);
};
om.dom.footer = function om$dom$footer(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16541 = arguments.length;
  var i__8524__auto___16542 = 0;
  while (true) {
    if (i__8524__auto___16542 < len__8523__auto___16541) {
      args__8530__auto__.push(arguments[i__8524__auto___16542]);
      var G__16543 = i__8524__auto___16542 + 1;
      i__8524__auto___16542 = G__16543;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.footer.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.footer.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.footer.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.footer.cljs$lang$maxFixedArity = 1;
om.dom.footer.cljs$lang$applyTo = function(seq16254) {
  var G__16255 = cljs.core.first.call(null, seq16254);
  var seq16254__$1 = cljs.core.next.call(null, seq16254);
  return om.dom.footer.cljs$core$IFn$_invoke$arity$variadic(G__16255, seq16254__$1);
};
om.dom.form = function om$dom$form(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16544 = arguments.length;
  var i__8524__auto___16545 = 0;
  while (true) {
    if (i__8524__auto___16545 < len__8523__auto___16544) {
      args__8530__auto__.push(arguments[i__8524__auto___16545]);
      var G__16546 = i__8524__auto___16545 + 1;
      i__8524__auto___16545 = G__16546;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.form.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.form.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.form.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.form.cljs$lang$maxFixedArity = 1;
om.dom.form.cljs$lang$applyTo = function(seq16256) {
  var G__16257 = cljs.core.first.call(null, seq16256);
  var seq16256__$1 = cljs.core.next.call(null, seq16256);
  return om.dom.form.cljs$core$IFn$_invoke$arity$variadic(G__16257, seq16256__$1);
};
om.dom.h1 = function om$dom$h1(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16547 = arguments.length;
  var i__8524__auto___16548 = 0;
  while (true) {
    if (i__8524__auto___16548 < len__8523__auto___16547) {
      args__8530__auto__.push(arguments[i__8524__auto___16548]);
      var G__16549 = i__8524__auto___16548 + 1;
      i__8524__auto___16548 = G__16549;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.h1.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.h1.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.h1.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.h1.cljs$lang$maxFixedArity = 1;
om.dom.h1.cljs$lang$applyTo = function(seq16258) {
  var G__16259 = cljs.core.first.call(null, seq16258);
  var seq16258__$1 = cljs.core.next.call(null, seq16258);
  return om.dom.h1.cljs$core$IFn$_invoke$arity$variadic(G__16259, seq16258__$1);
};
om.dom.h2 = function om$dom$h2(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16550 = arguments.length;
  var i__8524__auto___16551 = 0;
  while (true) {
    if (i__8524__auto___16551 < len__8523__auto___16550) {
      args__8530__auto__.push(arguments[i__8524__auto___16551]);
      var G__16552 = i__8524__auto___16551 + 1;
      i__8524__auto___16551 = G__16552;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.h2.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.h2.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.h2.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.h2.cljs$lang$maxFixedArity = 1;
om.dom.h2.cljs$lang$applyTo = function(seq16260) {
  var G__16261 = cljs.core.first.call(null, seq16260);
  var seq16260__$1 = cljs.core.next.call(null, seq16260);
  return om.dom.h2.cljs$core$IFn$_invoke$arity$variadic(G__16261, seq16260__$1);
};
om.dom.h3 = function om$dom$h3(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16553 = arguments.length;
  var i__8524__auto___16554 = 0;
  while (true) {
    if (i__8524__auto___16554 < len__8523__auto___16553) {
      args__8530__auto__.push(arguments[i__8524__auto___16554]);
      var G__16555 = i__8524__auto___16554 + 1;
      i__8524__auto___16554 = G__16555;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.h3.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.h3.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.h3.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.h3.cljs$lang$maxFixedArity = 1;
om.dom.h3.cljs$lang$applyTo = function(seq16262) {
  var G__16263 = cljs.core.first.call(null, seq16262);
  var seq16262__$1 = cljs.core.next.call(null, seq16262);
  return om.dom.h3.cljs$core$IFn$_invoke$arity$variadic(G__16263, seq16262__$1);
};
om.dom.h4 = function om$dom$h4(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16556 = arguments.length;
  var i__8524__auto___16557 = 0;
  while (true) {
    if (i__8524__auto___16557 < len__8523__auto___16556) {
      args__8530__auto__.push(arguments[i__8524__auto___16557]);
      var G__16558 = i__8524__auto___16557 + 1;
      i__8524__auto___16557 = G__16558;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.h4.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.h4.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.h4.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.h4.cljs$lang$maxFixedArity = 1;
om.dom.h4.cljs$lang$applyTo = function(seq16264) {
  var G__16265 = cljs.core.first.call(null, seq16264);
  var seq16264__$1 = cljs.core.next.call(null, seq16264);
  return om.dom.h4.cljs$core$IFn$_invoke$arity$variadic(G__16265, seq16264__$1);
};
om.dom.h5 = function om$dom$h5(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16559 = arguments.length;
  var i__8524__auto___16560 = 0;
  while (true) {
    if (i__8524__auto___16560 < len__8523__auto___16559) {
      args__8530__auto__.push(arguments[i__8524__auto___16560]);
      var G__16561 = i__8524__auto___16560 + 1;
      i__8524__auto___16560 = G__16561;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.h5.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.h5.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.h5.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.h5.cljs$lang$maxFixedArity = 1;
om.dom.h5.cljs$lang$applyTo = function(seq16266) {
  var G__16267 = cljs.core.first.call(null, seq16266);
  var seq16266__$1 = cljs.core.next.call(null, seq16266);
  return om.dom.h5.cljs$core$IFn$_invoke$arity$variadic(G__16267, seq16266__$1);
};
om.dom.h6 = function om$dom$h6(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16562 = arguments.length;
  var i__8524__auto___16563 = 0;
  while (true) {
    if (i__8524__auto___16563 < len__8523__auto___16562) {
      args__8530__auto__.push(arguments[i__8524__auto___16563]);
      var G__16564 = i__8524__auto___16563 + 1;
      i__8524__auto___16563 = G__16564;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.h6.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.h6.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.h6.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.h6.cljs$lang$maxFixedArity = 1;
om.dom.h6.cljs$lang$applyTo = function(seq16268) {
  var G__16269 = cljs.core.first.call(null, seq16268);
  var seq16268__$1 = cljs.core.next.call(null, seq16268);
  return om.dom.h6.cljs$core$IFn$_invoke$arity$variadic(G__16269, seq16268__$1);
};
om.dom.head = function om$dom$head(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16565 = arguments.length;
  var i__8524__auto___16566 = 0;
  while (true) {
    if (i__8524__auto___16566 < len__8523__auto___16565) {
      args__8530__auto__.push(arguments[i__8524__auto___16566]);
      var G__16567 = i__8524__auto___16566 + 1;
      i__8524__auto___16566 = G__16567;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.head.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.head.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.head.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.head.cljs$lang$maxFixedArity = 1;
om.dom.head.cljs$lang$applyTo = function(seq16270) {
  var G__16271 = cljs.core.first.call(null, seq16270);
  var seq16270__$1 = cljs.core.next.call(null, seq16270);
  return om.dom.head.cljs$core$IFn$_invoke$arity$variadic(G__16271, seq16270__$1);
};
om.dom.header = function om$dom$header(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16568 = arguments.length;
  var i__8524__auto___16569 = 0;
  while (true) {
    if (i__8524__auto___16569 < len__8523__auto___16568) {
      args__8530__auto__.push(arguments[i__8524__auto___16569]);
      var G__16570 = i__8524__auto___16569 + 1;
      i__8524__auto___16569 = G__16570;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.header.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.header.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.header.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.header.cljs$lang$maxFixedArity = 1;
om.dom.header.cljs$lang$applyTo = function(seq16272) {
  var G__16273 = cljs.core.first.call(null, seq16272);
  var seq16272__$1 = cljs.core.next.call(null, seq16272);
  return om.dom.header.cljs$core$IFn$_invoke$arity$variadic(G__16273, seq16272__$1);
};
om.dom.hr = function om$dom$hr(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16571 = arguments.length;
  var i__8524__auto___16572 = 0;
  while (true) {
    if (i__8524__auto___16572 < len__8523__auto___16571) {
      args__8530__auto__.push(arguments[i__8524__auto___16572]);
      var G__16573 = i__8524__auto___16572 + 1;
      i__8524__auto___16572 = G__16573;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.hr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.hr.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.hr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.hr.cljs$lang$maxFixedArity = 1;
om.dom.hr.cljs$lang$applyTo = function(seq16274) {
  var G__16275 = cljs.core.first.call(null, seq16274);
  var seq16274__$1 = cljs.core.next.call(null, seq16274);
  return om.dom.hr.cljs$core$IFn$_invoke$arity$variadic(G__16275, seq16274__$1);
};
om.dom.html = function om$dom$html(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16574 = arguments.length;
  var i__8524__auto___16575 = 0;
  while (true) {
    if (i__8524__auto___16575 < len__8523__auto___16574) {
      args__8530__auto__.push(arguments[i__8524__auto___16575]);
      var G__16576 = i__8524__auto___16575 + 1;
      i__8524__auto___16575 = G__16576;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.html.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.html.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.html.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.html.cljs$lang$maxFixedArity = 1;
om.dom.html.cljs$lang$applyTo = function(seq16276) {
  var G__16277 = cljs.core.first.call(null, seq16276);
  var seq16276__$1 = cljs.core.next.call(null, seq16276);
  return om.dom.html.cljs$core$IFn$_invoke$arity$variadic(G__16277, seq16276__$1);
};
om.dom.i = function om$dom$i(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16577 = arguments.length;
  var i__8524__auto___16578 = 0;
  while (true) {
    if (i__8524__auto___16578 < len__8523__auto___16577) {
      args__8530__auto__.push(arguments[i__8524__auto___16578]);
      var G__16579 = i__8524__auto___16578 + 1;
      i__8524__auto___16578 = G__16579;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.i.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.i.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.i.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.i.cljs$lang$maxFixedArity = 1;
om.dom.i.cljs$lang$applyTo = function(seq16278) {
  var G__16279 = cljs.core.first.call(null, seq16278);
  var seq16278__$1 = cljs.core.next.call(null, seq16278);
  return om.dom.i.cljs$core$IFn$_invoke$arity$variadic(G__16279, seq16278__$1);
};
om.dom.iframe = function om$dom$iframe(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16580 = arguments.length;
  var i__8524__auto___16581 = 0;
  while (true) {
    if (i__8524__auto___16581 < len__8523__auto___16580) {
      args__8530__auto__.push(arguments[i__8524__auto___16581]);
      var G__16582 = i__8524__auto___16581 + 1;
      i__8524__auto___16581 = G__16582;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.iframe.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.iframe.cljs$lang$maxFixedArity = 1;
om.dom.iframe.cljs$lang$applyTo = function(seq16280) {
  var G__16281 = cljs.core.first.call(null, seq16280);
  var seq16280__$1 = cljs.core.next.call(null, seq16280);
  return om.dom.iframe.cljs$core$IFn$_invoke$arity$variadic(G__16281, seq16280__$1);
};
om.dom.img = function om$dom$img(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16583 = arguments.length;
  var i__8524__auto___16584 = 0;
  while (true) {
    if (i__8524__auto___16584 < len__8523__auto___16583) {
      args__8530__auto__.push(arguments[i__8524__auto___16584]);
      var G__16585 = i__8524__auto___16584 + 1;
      i__8524__auto___16584 = G__16585;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.img.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.img.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.img.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.img.cljs$lang$maxFixedArity = 1;
om.dom.img.cljs$lang$applyTo = function(seq16282) {
  var G__16283 = cljs.core.first.call(null, seq16282);
  var seq16282__$1 = cljs.core.next.call(null, seq16282);
  return om.dom.img.cljs$core$IFn$_invoke$arity$variadic(G__16283, seq16282__$1);
};
om.dom.ins = function om$dom$ins(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16586 = arguments.length;
  var i__8524__auto___16587 = 0;
  while (true) {
    if (i__8524__auto___16587 < len__8523__auto___16586) {
      args__8530__auto__.push(arguments[i__8524__auto___16587]);
      var G__16588 = i__8524__auto___16587 + 1;
      i__8524__auto___16587 = G__16588;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.ins.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.ins.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.ins.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.ins.cljs$lang$maxFixedArity = 1;
om.dom.ins.cljs$lang$applyTo = function(seq16284) {
  var G__16285 = cljs.core.first.call(null, seq16284);
  var seq16284__$1 = cljs.core.next.call(null, seq16284);
  return om.dom.ins.cljs$core$IFn$_invoke$arity$variadic(G__16285, seq16284__$1);
};
om.dom.kbd = function om$dom$kbd(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16589 = arguments.length;
  var i__8524__auto___16590 = 0;
  while (true) {
    if (i__8524__auto___16590 < len__8523__auto___16589) {
      args__8530__auto__.push(arguments[i__8524__auto___16590]);
      var G__16591 = i__8524__auto___16590 + 1;
      i__8524__auto___16590 = G__16591;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.kbd.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.kbd.cljs$lang$maxFixedArity = 1;
om.dom.kbd.cljs$lang$applyTo = function(seq16286) {
  var G__16287 = cljs.core.first.call(null, seq16286);
  var seq16286__$1 = cljs.core.next.call(null, seq16286);
  return om.dom.kbd.cljs$core$IFn$_invoke$arity$variadic(G__16287, seq16286__$1);
};
om.dom.keygen = function om$dom$keygen(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16592 = arguments.length;
  var i__8524__auto___16593 = 0;
  while (true) {
    if (i__8524__auto___16593 < len__8523__auto___16592) {
      args__8530__auto__.push(arguments[i__8524__auto___16593]);
      var G__16594 = i__8524__auto___16593 + 1;
      i__8524__auto___16593 = G__16594;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.keygen.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.keygen.cljs$lang$maxFixedArity = 1;
om.dom.keygen.cljs$lang$applyTo = function(seq16288) {
  var G__16289 = cljs.core.first.call(null, seq16288);
  var seq16288__$1 = cljs.core.next.call(null, seq16288);
  return om.dom.keygen.cljs$core$IFn$_invoke$arity$variadic(G__16289, seq16288__$1);
};
om.dom.label = function om$dom$label(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16595 = arguments.length;
  var i__8524__auto___16596 = 0;
  while (true) {
    if (i__8524__auto___16596 < len__8523__auto___16595) {
      args__8530__auto__.push(arguments[i__8524__auto___16596]);
      var G__16597 = i__8524__auto___16596 + 1;
      i__8524__auto___16596 = G__16597;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.label.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.label.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.label.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.label.cljs$lang$maxFixedArity = 1;
om.dom.label.cljs$lang$applyTo = function(seq16290) {
  var G__16291 = cljs.core.first.call(null, seq16290);
  var seq16290__$1 = cljs.core.next.call(null, seq16290);
  return om.dom.label.cljs$core$IFn$_invoke$arity$variadic(G__16291, seq16290__$1);
};
om.dom.legend = function om$dom$legend(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16598 = arguments.length;
  var i__8524__auto___16599 = 0;
  while (true) {
    if (i__8524__auto___16599 < len__8523__auto___16598) {
      args__8530__auto__.push(arguments[i__8524__auto___16599]);
      var G__16600 = i__8524__auto___16599 + 1;
      i__8524__auto___16599 = G__16600;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.legend.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.legend.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.legend.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.legend.cljs$lang$maxFixedArity = 1;
om.dom.legend.cljs$lang$applyTo = function(seq16292) {
  var G__16293 = cljs.core.first.call(null, seq16292);
  var seq16292__$1 = cljs.core.next.call(null, seq16292);
  return om.dom.legend.cljs$core$IFn$_invoke$arity$variadic(G__16293, seq16292__$1);
};
om.dom.li = function om$dom$li(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16601 = arguments.length;
  var i__8524__auto___16602 = 0;
  while (true) {
    if (i__8524__auto___16602 < len__8523__auto___16601) {
      args__8530__auto__.push(arguments[i__8524__auto___16602]);
      var G__16603 = i__8524__auto___16602 + 1;
      i__8524__auto___16602 = G__16603;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.li.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.li.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.li.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.li.cljs$lang$maxFixedArity = 1;
om.dom.li.cljs$lang$applyTo = function(seq16294) {
  var G__16295 = cljs.core.first.call(null, seq16294);
  var seq16294__$1 = cljs.core.next.call(null, seq16294);
  return om.dom.li.cljs$core$IFn$_invoke$arity$variadic(G__16295, seq16294__$1);
};
om.dom.link = function om$dom$link(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16604 = arguments.length;
  var i__8524__auto___16605 = 0;
  while (true) {
    if (i__8524__auto___16605 < len__8523__auto___16604) {
      args__8530__auto__.push(arguments[i__8524__auto___16605]);
      var G__16606 = i__8524__auto___16605 + 1;
      i__8524__auto___16605 = G__16606;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.link.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.link.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.link.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.link.cljs$lang$maxFixedArity = 1;
om.dom.link.cljs$lang$applyTo = function(seq16296) {
  var G__16297 = cljs.core.first.call(null, seq16296);
  var seq16296__$1 = cljs.core.next.call(null, seq16296);
  return om.dom.link.cljs$core$IFn$_invoke$arity$variadic(G__16297, seq16296__$1);
};
om.dom.main = function om$dom$main(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16607 = arguments.length;
  var i__8524__auto___16608 = 0;
  while (true) {
    if (i__8524__auto___16608 < len__8523__auto___16607) {
      args__8530__auto__.push(arguments[i__8524__auto___16608]);
      var G__16609 = i__8524__auto___16608 + 1;
      i__8524__auto___16608 = G__16609;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.main.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.main.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.main.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.main.cljs$lang$maxFixedArity = 1;
om.dom.main.cljs$lang$applyTo = function(seq16298) {
  var G__16299 = cljs.core.first.call(null, seq16298);
  var seq16298__$1 = cljs.core.next.call(null, seq16298);
  return om.dom.main.cljs$core$IFn$_invoke$arity$variadic(G__16299, seq16298__$1);
};
om.dom.map = function om$dom$map(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16610 = arguments.length;
  var i__8524__auto___16611 = 0;
  while (true) {
    if (i__8524__auto___16611 < len__8523__auto___16610) {
      args__8530__auto__.push(arguments[i__8524__auto___16611]);
      var G__16612 = i__8524__auto___16611 + 1;
      i__8524__auto___16611 = G__16612;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.map.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.map.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.map.cljs$lang$maxFixedArity = 1;
om.dom.map.cljs$lang$applyTo = function(seq16300) {
  var G__16301 = cljs.core.first.call(null, seq16300);
  var seq16300__$1 = cljs.core.next.call(null, seq16300);
  return om.dom.map.cljs$core$IFn$_invoke$arity$variadic(G__16301, seq16300__$1);
};
om.dom.mark = function om$dom$mark(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16613 = arguments.length;
  var i__8524__auto___16614 = 0;
  while (true) {
    if (i__8524__auto___16614 < len__8523__auto___16613) {
      args__8530__auto__.push(arguments[i__8524__auto___16614]);
      var G__16615 = i__8524__auto___16614 + 1;
      i__8524__auto___16614 = G__16615;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.mark.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.mark.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.mark.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.mark.cljs$lang$maxFixedArity = 1;
om.dom.mark.cljs$lang$applyTo = function(seq16302) {
  var G__16303 = cljs.core.first.call(null, seq16302);
  var seq16302__$1 = cljs.core.next.call(null, seq16302);
  return om.dom.mark.cljs$core$IFn$_invoke$arity$variadic(G__16303, seq16302__$1);
};
om.dom.menu = function om$dom$menu(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16616 = arguments.length;
  var i__8524__auto___16617 = 0;
  while (true) {
    if (i__8524__auto___16617 < len__8523__auto___16616) {
      args__8530__auto__.push(arguments[i__8524__auto___16617]);
      var G__16618 = i__8524__auto___16617 + 1;
      i__8524__auto___16617 = G__16618;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.menu.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.menu.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.menu.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.menu.cljs$lang$maxFixedArity = 1;
om.dom.menu.cljs$lang$applyTo = function(seq16304) {
  var G__16305 = cljs.core.first.call(null, seq16304);
  var seq16304__$1 = cljs.core.next.call(null, seq16304);
  return om.dom.menu.cljs$core$IFn$_invoke$arity$variadic(G__16305, seq16304__$1);
};
om.dom.menuitem = function om$dom$menuitem(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16619 = arguments.length;
  var i__8524__auto___16620 = 0;
  while (true) {
    if (i__8524__auto___16620 < len__8523__auto___16619) {
      args__8530__auto__.push(arguments[i__8524__auto___16620]);
      var G__16621 = i__8524__auto___16620 + 1;
      i__8524__auto___16620 = G__16621;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.menuitem.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.menuitem.cljs$lang$maxFixedArity = 1;
om.dom.menuitem.cljs$lang$applyTo = function(seq16306) {
  var G__16307 = cljs.core.first.call(null, seq16306);
  var seq16306__$1 = cljs.core.next.call(null, seq16306);
  return om.dom.menuitem.cljs$core$IFn$_invoke$arity$variadic(G__16307, seq16306__$1);
};
om.dom.meta = function om$dom$meta(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16622 = arguments.length;
  var i__8524__auto___16623 = 0;
  while (true) {
    if (i__8524__auto___16623 < len__8523__auto___16622) {
      args__8530__auto__.push(arguments[i__8524__auto___16623]);
      var G__16624 = i__8524__auto___16623 + 1;
      i__8524__auto___16623 = G__16624;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.meta.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.meta.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.meta.cljs$lang$maxFixedArity = 1;
om.dom.meta.cljs$lang$applyTo = function(seq16308) {
  var G__16309 = cljs.core.first.call(null, seq16308);
  var seq16308__$1 = cljs.core.next.call(null, seq16308);
  return om.dom.meta.cljs$core$IFn$_invoke$arity$variadic(G__16309, seq16308__$1);
};
om.dom.meter = function om$dom$meter(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16625 = arguments.length;
  var i__8524__auto___16626 = 0;
  while (true) {
    if (i__8524__auto___16626 < len__8523__auto___16625) {
      args__8530__auto__.push(arguments[i__8524__auto___16626]);
      var G__16627 = i__8524__auto___16626 + 1;
      i__8524__auto___16626 = G__16627;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.meter.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.meter.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.meter.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.meter.cljs$lang$maxFixedArity = 1;
om.dom.meter.cljs$lang$applyTo = function(seq16310) {
  var G__16311 = cljs.core.first.call(null, seq16310);
  var seq16310__$1 = cljs.core.next.call(null, seq16310);
  return om.dom.meter.cljs$core$IFn$_invoke$arity$variadic(G__16311, seq16310__$1);
};
om.dom.nav = function om$dom$nav(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16628 = arguments.length;
  var i__8524__auto___16629 = 0;
  while (true) {
    if (i__8524__auto___16629 < len__8523__auto___16628) {
      args__8530__auto__.push(arguments[i__8524__auto___16629]);
      var G__16630 = i__8524__auto___16629 + 1;
      i__8524__auto___16629 = G__16630;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.nav.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.nav.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.nav.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.nav.cljs$lang$maxFixedArity = 1;
om.dom.nav.cljs$lang$applyTo = function(seq16312) {
  var G__16313 = cljs.core.first.call(null, seq16312);
  var seq16312__$1 = cljs.core.next.call(null, seq16312);
  return om.dom.nav.cljs$core$IFn$_invoke$arity$variadic(G__16313, seq16312__$1);
};
om.dom.noscript = function om$dom$noscript(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16631 = arguments.length;
  var i__8524__auto___16632 = 0;
  while (true) {
    if (i__8524__auto___16632 < len__8523__auto___16631) {
      args__8530__auto__.push(arguments[i__8524__auto___16632]);
      var G__16633 = i__8524__auto___16632 + 1;
      i__8524__auto___16632 = G__16633;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.noscript.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.noscript.cljs$lang$maxFixedArity = 1;
om.dom.noscript.cljs$lang$applyTo = function(seq16314) {
  var G__16315 = cljs.core.first.call(null, seq16314);
  var seq16314__$1 = cljs.core.next.call(null, seq16314);
  return om.dom.noscript.cljs$core$IFn$_invoke$arity$variadic(G__16315, seq16314__$1);
};
om.dom.object = function om$dom$object(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16634 = arguments.length;
  var i__8524__auto___16635 = 0;
  while (true) {
    if (i__8524__auto___16635 < len__8523__auto___16634) {
      args__8530__auto__.push(arguments[i__8524__auto___16635]);
      var G__16636 = i__8524__auto___16635 + 1;
      i__8524__auto___16635 = G__16636;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.object.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.object.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.object.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.object.cljs$lang$maxFixedArity = 1;
om.dom.object.cljs$lang$applyTo = function(seq16316) {
  var G__16317 = cljs.core.first.call(null, seq16316);
  var seq16316__$1 = cljs.core.next.call(null, seq16316);
  return om.dom.object.cljs$core$IFn$_invoke$arity$variadic(G__16317, seq16316__$1);
};
om.dom.ol = function om$dom$ol(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16637 = arguments.length;
  var i__8524__auto___16638 = 0;
  while (true) {
    if (i__8524__auto___16638 < len__8523__auto___16637) {
      args__8530__auto__.push(arguments[i__8524__auto___16638]);
      var G__16639 = i__8524__auto___16638 + 1;
      i__8524__auto___16638 = G__16639;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.ol.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.ol.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.ol.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.ol.cljs$lang$maxFixedArity = 1;
om.dom.ol.cljs$lang$applyTo = function(seq16318) {
  var G__16319 = cljs.core.first.call(null, seq16318);
  var seq16318__$1 = cljs.core.next.call(null, seq16318);
  return om.dom.ol.cljs$core$IFn$_invoke$arity$variadic(G__16319, seq16318__$1);
};
om.dom.optgroup = function om$dom$optgroup(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16640 = arguments.length;
  var i__8524__auto___16641 = 0;
  while (true) {
    if (i__8524__auto___16641 < len__8523__auto___16640) {
      args__8530__auto__.push(arguments[i__8524__auto___16641]);
      var G__16642 = i__8524__auto___16641 + 1;
      i__8524__auto___16641 = G__16642;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.optgroup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.optgroup.cljs$lang$maxFixedArity = 1;
om.dom.optgroup.cljs$lang$applyTo = function(seq16320) {
  var G__16321 = cljs.core.first.call(null, seq16320);
  var seq16320__$1 = cljs.core.next.call(null, seq16320);
  return om.dom.optgroup.cljs$core$IFn$_invoke$arity$variadic(G__16321, seq16320__$1);
};
om.dom.output = function om$dom$output(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16643 = arguments.length;
  var i__8524__auto___16644 = 0;
  while (true) {
    if (i__8524__auto___16644 < len__8523__auto___16643) {
      args__8530__auto__.push(arguments[i__8524__auto___16644]);
      var G__16645 = i__8524__auto___16644 + 1;
      i__8524__auto___16644 = G__16645;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.output.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.output.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.output.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.output.cljs$lang$maxFixedArity = 1;
om.dom.output.cljs$lang$applyTo = function(seq16322) {
  var G__16323 = cljs.core.first.call(null, seq16322);
  var seq16322__$1 = cljs.core.next.call(null, seq16322);
  return om.dom.output.cljs$core$IFn$_invoke$arity$variadic(G__16323, seq16322__$1);
};
om.dom.p = function om$dom$p(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16646 = arguments.length;
  var i__8524__auto___16647 = 0;
  while (true) {
    if (i__8524__auto___16647 < len__8523__auto___16646) {
      args__8530__auto__.push(arguments[i__8524__auto___16647]);
      var G__16648 = i__8524__auto___16647 + 1;
      i__8524__auto___16647 = G__16648;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.p.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.p.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.p.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.p.cljs$lang$maxFixedArity = 1;
om.dom.p.cljs$lang$applyTo = function(seq16324) {
  var G__16325 = cljs.core.first.call(null, seq16324);
  var seq16324__$1 = cljs.core.next.call(null, seq16324);
  return om.dom.p.cljs$core$IFn$_invoke$arity$variadic(G__16325, seq16324__$1);
};
om.dom.param = function om$dom$param(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16649 = arguments.length;
  var i__8524__auto___16650 = 0;
  while (true) {
    if (i__8524__auto___16650 < len__8523__auto___16649) {
      args__8530__auto__.push(arguments[i__8524__auto___16650]);
      var G__16651 = i__8524__auto___16650 + 1;
      i__8524__auto___16650 = G__16651;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.param.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.param.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.param.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.param.cljs$lang$maxFixedArity = 1;
om.dom.param.cljs$lang$applyTo = function(seq16326) {
  var G__16327 = cljs.core.first.call(null, seq16326);
  var seq16326__$1 = cljs.core.next.call(null, seq16326);
  return om.dom.param.cljs$core$IFn$_invoke$arity$variadic(G__16327, seq16326__$1);
};
om.dom.picture = function om$dom$picture(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16652 = arguments.length;
  var i__8524__auto___16653 = 0;
  while (true) {
    if (i__8524__auto___16653 < len__8523__auto___16652) {
      args__8530__auto__.push(arguments[i__8524__auto___16653]);
      var G__16654 = i__8524__auto___16653 + 1;
      i__8524__auto___16653 = G__16654;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.picture.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.picture.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.picture.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.picture.cljs$lang$maxFixedArity = 1;
om.dom.picture.cljs$lang$applyTo = function(seq16328) {
  var G__16329 = cljs.core.first.call(null, seq16328);
  var seq16328__$1 = cljs.core.next.call(null, seq16328);
  return om.dom.picture.cljs$core$IFn$_invoke$arity$variadic(G__16329, seq16328__$1);
};
om.dom.pre = function om$dom$pre(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16655 = arguments.length;
  var i__8524__auto___16656 = 0;
  while (true) {
    if (i__8524__auto___16656 < len__8523__auto___16655) {
      args__8530__auto__.push(arguments[i__8524__auto___16656]);
      var G__16657 = i__8524__auto___16656 + 1;
      i__8524__auto___16656 = G__16657;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.pre.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.pre.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.pre.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.pre.cljs$lang$maxFixedArity = 1;
om.dom.pre.cljs$lang$applyTo = function(seq16330) {
  var G__16331 = cljs.core.first.call(null, seq16330);
  var seq16330__$1 = cljs.core.next.call(null, seq16330);
  return om.dom.pre.cljs$core$IFn$_invoke$arity$variadic(G__16331, seq16330__$1);
};
om.dom.progress = function om$dom$progress(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16658 = arguments.length;
  var i__8524__auto___16659 = 0;
  while (true) {
    if (i__8524__auto___16659 < len__8523__auto___16658) {
      args__8530__auto__.push(arguments[i__8524__auto___16659]);
      var G__16660 = i__8524__auto___16659 + 1;
      i__8524__auto___16659 = G__16660;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.progress.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.progress.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.progress.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.progress.cljs$lang$maxFixedArity = 1;
om.dom.progress.cljs$lang$applyTo = function(seq16332) {
  var G__16333 = cljs.core.first.call(null, seq16332);
  var seq16332__$1 = cljs.core.next.call(null, seq16332);
  return om.dom.progress.cljs$core$IFn$_invoke$arity$variadic(G__16333, seq16332__$1);
};
om.dom.q = function om$dom$q(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16661 = arguments.length;
  var i__8524__auto___16662 = 0;
  while (true) {
    if (i__8524__auto___16662 < len__8523__auto___16661) {
      args__8530__auto__.push(arguments[i__8524__auto___16662]);
      var G__16663 = i__8524__auto___16662 + 1;
      i__8524__auto___16662 = G__16663;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.q.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.q.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.q.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.q.cljs$lang$maxFixedArity = 1;
om.dom.q.cljs$lang$applyTo = function(seq16334) {
  var G__16335 = cljs.core.first.call(null, seq16334);
  var seq16334__$1 = cljs.core.next.call(null, seq16334);
  return om.dom.q.cljs$core$IFn$_invoke$arity$variadic(G__16335, seq16334__$1);
};
om.dom.rp = function om$dom$rp(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16664 = arguments.length;
  var i__8524__auto___16665 = 0;
  while (true) {
    if (i__8524__auto___16665 < len__8523__auto___16664) {
      args__8530__auto__.push(arguments[i__8524__auto___16665]);
      var G__16666 = i__8524__auto___16665 + 1;
      i__8524__auto___16665 = G__16666;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.rp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.rp.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.rp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.rp.cljs$lang$maxFixedArity = 1;
om.dom.rp.cljs$lang$applyTo = function(seq16336) {
  var G__16337 = cljs.core.first.call(null, seq16336);
  var seq16336__$1 = cljs.core.next.call(null, seq16336);
  return om.dom.rp.cljs$core$IFn$_invoke$arity$variadic(G__16337, seq16336__$1);
};
om.dom.rt = function om$dom$rt(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16667 = arguments.length;
  var i__8524__auto___16668 = 0;
  while (true) {
    if (i__8524__auto___16668 < len__8523__auto___16667) {
      args__8530__auto__.push(arguments[i__8524__auto___16668]);
      var G__16669 = i__8524__auto___16668 + 1;
      i__8524__auto___16668 = G__16669;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.rt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.rt.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.rt.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.rt.cljs$lang$maxFixedArity = 1;
om.dom.rt.cljs$lang$applyTo = function(seq16338) {
  var G__16339 = cljs.core.first.call(null, seq16338);
  var seq16338__$1 = cljs.core.next.call(null, seq16338);
  return om.dom.rt.cljs$core$IFn$_invoke$arity$variadic(G__16339, seq16338__$1);
};
om.dom.ruby = function om$dom$ruby(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16670 = arguments.length;
  var i__8524__auto___16671 = 0;
  while (true) {
    if (i__8524__auto___16671 < len__8523__auto___16670) {
      args__8530__auto__.push(arguments[i__8524__auto___16671]);
      var G__16672 = i__8524__auto___16671 + 1;
      i__8524__auto___16671 = G__16672;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.ruby.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.ruby.cljs$lang$maxFixedArity = 1;
om.dom.ruby.cljs$lang$applyTo = function(seq16340) {
  var G__16341 = cljs.core.first.call(null, seq16340);
  var seq16340__$1 = cljs.core.next.call(null, seq16340);
  return om.dom.ruby.cljs$core$IFn$_invoke$arity$variadic(G__16341, seq16340__$1);
};
om.dom.s = function om$dom$s(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16673 = arguments.length;
  var i__8524__auto___16674 = 0;
  while (true) {
    if (i__8524__auto___16674 < len__8523__auto___16673) {
      args__8530__auto__.push(arguments[i__8524__auto___16674]);
      var G__16675 = i__8524__auto___16674 + 1;
      i__8524__auto___16674 = G__16675;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.s.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.s.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.s.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.s.cljs$lang$maxFixedArity = 1;
om.dom.s.cljs$lang$applyTo = function(seq16342) {
  var G__16343 = cljs.core.first.call(null, seq16342);
  var seq16342__$1 = cljs.core.next.call(null, seq16342);
  return om.dom.s.cljs$core$IFn$_invoke$arity$variadic(G__16343, seq16342__$1);
};
om.dom.samp = function om$dom$samp(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16676 = arguments.length;
  var i__8524__auto___16677 = 0;
  while (true) {
    if (i__8524__auto___16677 < len__8523__auto___16676) {
      args__8530__auto__.push(arguments[i__8524__auto___16677]);
      var G__16678 = i__8524__auto___16677 + 1;
      i__8524__auto___16677 = G__16678;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.samp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.samp.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.samp.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.samp.cljs$lang$maxFixedArity = 1;
om.dom.samp.cljs$lang$applyTo = function(seq16344) {
  var G__16345 = cljs.core.first.call(null, seq16344);
  var seq16344__$1 = cljs.core.next.call(null, seq16344);
  return om.dom.samp.cljs$core$IFn$_invoke$arity$variadic(G__16345, seq16344__$1);
};
om.dom.script = function om$dom$script(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16679 = arguments.length;
  var i__8524__auto___16680 = 0;
  while (true) {
    if (i__8524__auto___16680 < len__8523__auto___16679) {
      args__8530__auto__.push(arguments[i__8524__auto___16680]);
      var G__16681 = i__8524__auto___16680 + 1;
      i__8524__auto___16680 = G__16681;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.script.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.script.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.script.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.script.cljs$lang$maxFixedArity = 1;
om.dom.script.cljs$lang$applyTo = function(seq16346) {
  var G__16347 = cljs.core.first.call(null, seq16346);
  var seq16346__$1 = cljs.core.next.call(null, seq16346);
  return om.dom.script.cljs$core$IFn$_invoke$arity$variadic(G__16347, seq16346__$1);
};
om.dom.section = function om$dom$section(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16682 = arguments.length;
  var i__8524__auto___16683 = 0;
  while (true) {
    if (i__8524__auto___16683 < len__8523__auto___16682) {
      args__8530__auto__.push(arguments[i__8524__auto___16683]);
      var G__16684 = i__8524__auto___16683 + 1;
      i__8524__auto___16683 = G__16684;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.section.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.section.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.section.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.section.cljs$lang$maxFixedArity = 1;
om.dom.section.cljs$lang$applyTo = function(seq16348) {
  var G__16349 = cljs.core.first.call(null, seq16348);
  var seq16348__$1 = cljs.core.next.call(null, seq16348);
  return om.dom.section.cljs$core$IFn$_invoke$arity$variadic(G__16349, seq16348__$1);
};
om.dom.small = function om$dom$small(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16685 = arguments.length;
  var i__8524__auto___16686 = 0;
  while (true) {
    if (i__8524__auto___16686 < len__8523__auto___16685) {
      args__8530__auto__.push(arguments[i__8524__auto___16686]);
      var G__16687 = i__8524__auto___16686 + 1;
      i__8524__auto___16686 = G__16687;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.small.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.small.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.small.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.small.cljs$lang$maxFixedArity = 1;
om.dom.small.cljs$lang$applyTo = function(seq16350) {
  var G__16351 = cljs.core.first.call(null, seq16350);
  var seq16350__$1 = cljs.core.next.call(null, seq16350);
  return om.dom.small.cljs$core$IFn$_invoke$arity$variadic(G__16351, seq16350__$1);
};
om.dom.source = function om$dom$source(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16688 = arguments.length;
  var i__8524__auto___16689 = 0;
  while (true) {
    if (i__8524__auto___16689 < len__8523__auto___16688) {
      args__8530__auto__.push(arguments[i__8524__auto___16689]);
      var G__16690 = i__8524__auto___16689 + 1;
      i__8524__auto___16689 = G__16690;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.source.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.source.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.source.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.source.cljs$lang$maxFixedArity = 1;
om.dom.source.cljs$lang$applyTo = function(seq16352) {
  var G__16353 = cljs.core.first.call(null, seq16352);
  var seq16352__$1 = cljs.core.next.call(null, seq16352);
  return om.dom.source.cljs$core$IFn$_invoke$arity$variadic(G__16353, seq16352__$1);
};
om.dom.span = function om$dom$span(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16691 = arguments.length;
  var i__8524__auto___16692 = 0;
  while (true) {
    if (i__8524__auto___16692 < len__8523__auto___16691) {
      args__8530__auto__.push(arguments[i__8524__auto___16692]);
      var G__16693 = i__8524__auto___16692 + 1;
      i__8524__auto___16692 = G__16693;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.span.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.span.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.span.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.span.cljs$lang$maxFixedArity = 1;
om.dom.span.cljs$lang$applyTo = function(seq16354) {
  var G__16355 = cljs.core.first.call(null, seq16354);
  var seq16354__$1 = cljs.core.next.call(null, seq16354);
  return om.dom.span.cljs$core$IFn$_invoke$arity$variadic(G__16355, seq16354__$1);
};
om.dom.strong = function om$dom$strong(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16694 = arguments.length;
  var i__8524__auto___16695 = 0;
  while (true) {
    if (i__8524__auto___16695 < len__8523__auto___16694) {
      args__8530__auto__.push(arguments[i__8524__auto___16695]);
      var G__16696 = i__8524__auto___16695 + 1;
      i__8524__auto___16695 = G__16696;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.strong.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.strong.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.strong.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.strong.cljs$lang$maxFixedArity = 1;
om.dom.strong.cljs$lang$applyTo = function(seq16356) {
  var G__16357 = cljs.core.first.call(null, seq16356);
  var seq16356__$1 = cljs.core.next.call(null, seq16356);
  return om.dom.strong.cljs$core$IFn$_invoke$arity$variadic(G__16357, seq16356__$1);
};
om.dom.style = function om$dom$style(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16697 = arguments.length;
  var i__8524__auto___16698 = 0;
  while (true) {
    if (i__8524__auto___16698 < len__8523__auto___16697) {
      args__8530__auto__.push(arguments[i__8524__auto___16698]);
      var G__16699 = i__8524__auto___16698 + 1;
      i__8524__auto___16698 = G__16699;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.style.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.style.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.style.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.style.cljs$lang$maxFixedArity = 1;
om.dom.style.cljs$lang$applyTo = function(seq16358) {
  var G__16359 = cljs.core.first.call(null, seq16358);
  var seq16358__$1 = cljs.core.next.call(null, seq16358);
  return om.dom.style.cljs$core$IFn$_invoke$arity$variadic(G__16359, seq16358__$1);
};
om.dom.sub = function om$dom$sub(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16700 = arguments.length;
  var i__8524__auto___16701 = 0;
  while (true) {
    if (i__8524__auto___16701 < len__8523__auto___16700) {
      args__8530__auto__.push(arguments[i__8524__auto___16701]);
      var G__16702 = i__8524__auto___16701 + 1;
      i__8524__auto___16701 = G__16702;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.sub.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.sub.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.sub.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.sub.cljs$lang$maxFixedArity = 1;
om.dom.sub.cljs$lang$applyTo = function(seq16360) {
  var G__16361 = cljs.core.first.call(null, seq16360);
  var seq16360__$1 = cljs.core.next.call(null, seq16360);
  return om.dom.sub.cljs$core$IFn$_invoke$arity$variadic(G__16361, seq16360__$1);
};
om.dom.summary = function om$dom$summary(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16703 = arguments.length;
  var i__8524__auto___16704 = 0;
  while (true) {
    if (i__8524__auto___16704 < len__8523__auto___16703) {
      args__8530__auto__.push(arguments[i__8524__auto___16704]);
      var G__16705 = i__8524__auto___16704 + 1;
      i__8524__auto___16704 = G__16705;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.summary.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.summary.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.summary.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.summary.cljs$lang$maxFixedArity = 1;
om.dom.summary.cljs$lang$applyTo = function(seq16362) {
  var G__16363 = cljs.core.first.call(null, seq16362);
  var seq16362__$1 = cljs.core.next.call(null, seq16362);
  return om.dom.summary.cljs$core$IFn$_invoke$arity$variadic(G__16363, seq16362__$1);
};
om.dom.sup = function om$dom$sup(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16706 = arguments.length;
  var i__8524__auto___16707 = 0;
  while (true) {
    if (i__8524__auto___16707 < len__8523__auto___16706) {
      args__8530__auto__.push(arguments[i__8524__auto___16707]);
      var G__16708 = i__8524__auto___16707 + 1;
      i__8524__auto___16707 = G__16708;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.sup.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.sup.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.sup.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.sup.cljs$lang$maxFixedArity = 1;
om.dom.sup.cljs$lang$applyTo = function(seq16364) {
  var G__16365 = cljs.core.first.call(null, seq16364);
  var seq16364__$1 = cljs.core.next.call(null, seq16364);
  return om.dom.sup.cljs$core$IFn$_invoke$arity$variadic(G__16365, seq16364__$1);
};
om.dom.table = function om$dom$table(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16709 = arguments.length;
  var i__8524__auto___16710 = 0;
  while (true) {
    if (i__8524__auto___16710 < len__8523__auto___16709) {
      args__8530__auto__.push(arguments[i__8524__auto___16710]);
      var G__16711 = i__8524__auto___16710 + 1;
      i__8524__auto___16710 = G__16711;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.table.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.table.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.table.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.table.cljs$lang$maxFixedArity = 1;
om.dom.table.cljs$lang$applyTo = function(seq16366) {
  var G__16367 = cljs.core.first.call(null, seq16366);
  var seq16366__$1 = cljs.core.next.call(null, seq16366);
  return om.dom.table.cljs$core$IFn$_invoke$arity$variadic(G__16367, seq16366__$1);
};
om.dom.tbody = function om$dom$tbody(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16712 = arguments.length;
  var i__8524__auto___16713 = 0;
  while (true) {
    if (i__8524__auto___16713 < len__8523__auto___16712) {
      args__8530__auto__.push(arguments[i__8524__auto___16713]);
      var G__16714 = i__8524__auto___16713 + 1;
      i__8524__auto___16713 = G__16714;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.tbody.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.tbody.cljs$lang$maxFixedArity = 1;
om.dom.tbody.cljs$lang$applyTo = function(seq16368) {
  var G__16369 = cljs.core.first.call(null, seq16368);
  var seq16368__$1 = cljs.core.next.call(null, seq16368);
  return om.dom.tbody.cljs$core$IFn$_invoke$arity$variadic(G__16369, seq16368__$1);
};
om.dom.td = function om$dom$td(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16715 = arguments.length;
  var i__8524__auto___16716 = 0;
  while (true) {
    if (i__8524__auto___16716 < len__8523__auto___16715) {
      args__8530__auto__.push(arguments[i__8524__auto___16716]);
      var G__16717 = i__8524__auto___16716 + 1;
      i__8524__auto___16716 = G__16717;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.td.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.td.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.td.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.td.cljs$lang$maxFixedArity = 1;
om.dom.td.cljs$lang$applyTo = function(seq16370) {
  var G__16371 = cljs.core.first.call(null, seq16370);
  var seq16370__$1 = cljs.core.next.call(null, seq16370);
  return om.dom.td.cljs$core$IFn$_invoke$arity$variadic(G__16371, seq16370__$1);
};
om.dom.tfoot = function om$dom$tfoot(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16718 = arguments.length;
  var i__8524__auto___16719 = 0;
  while (true) {
    if (i__8524__auto___16719 < len__8523__auto___16718) {
      args__8530__auto__.push(arguments[i__8524__auto___16719]);
      var G__16720 = i__8524__auto___16719 + 1;
      i__8524__auto___16719 = G__16720;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.tfoot.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.tfoot.cljs$lang$maxFixedArity = 1;
om.dom.tfoot.cljs$lang$applyTo = function(seq16372) {
  var G__16373 = cljs.core.first.call(null, seq16372);
  var seq16372__$1 = cljs.core.next.call(null, seq16372);
  return om.dom.tfoot.cljs$core$IFn$_invoke$arity$variadic(G__16373, seq16372__$1);
};
om.dom.th = function om$dom$th(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16721 = arguments.length;
  var i__8524__auto___16722 = 0;
  while (true) {
    if (i__8524__auto___16722 < len__8523__auto___16721) {
      args__8530__auto__.push(arguments[i__8524__auto___16722]);
      var G__16723 = i__8524__auto___16722 + 1;
      i__8524__auto___16722 = G__16723;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.th.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.th.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.th.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.th.cljs$lang$maxFixedArity = 1;
om.dom.th.cljs$lang$applyTo = function(seq16374) {
  var G__16375 = cljs.core.first.call(null, seq16374);
  var seq16374__$1 = cljs.core.next.call(null, seq16374);
  return om.dom.th.cljs$core$IFn$_invoke$arity$variadic(G__16375, seq16374__$1);
};
om.dom.thead = function om$dom$thead(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16724 = arguments.length;
  var i__8524__auto___16725 = 0;
  while (true) {
    if (i__8524__auto___16725 < len__8523__auto___16724) {
      args__8530__auto__.push(arguments[i__8524__auto___16725]);
      var G__16726 = i__8524__auto___16725 + 1;
      i__8524__auto___16725 = G__16726;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.thead.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.thead.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.thead.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.thead.cljs$lang$maxFixedArity = 1;
om.dom.thead.cljs$lang$applyTo = function(seq16376) {
  var G__16377 = cljs.core.first.call(null, seq16376);
  var seq16376__$1 = cljs.core.next.call(null, seq16376);
  return om.dom.thead.cljs$core$IFn$_invoke$arity$variadic(G__16377, seq16376__$1);
};
om.dom.time = function om$dom$time(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16727 = arguments.length;
  var i__8524__auto___16728 = 0;
  while (true) {
    if (i__8524__auto___16728 < len__8523__auto___16727) {
      args__8530__auto__.push(arguments[i__8524__auto___16728]);
      var G__16729 = i__8524__auto___16728 + 1;
      i__8524__auto___16728 = G__16729;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.time.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.time.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.time.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.time.cljs$lang$maxFixedArity = 1;
om.dom.time.cljs$lang$applyTo = function(seq16378) {
  var G__16379 = cljs.core.first.call(null, seq16378);
  var seq16378__$1 = cljs.core.next.call(null, seq16378);
  return om.dom.time.cljs$core$IFn$_invoke$arity$variadic(G__16379, seq16378__$1);
};
om.dom.title = function om$dom$title(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16730 = arguments.length;
  var i__8524__auto___16731 = 0;
  while (true) {
    if (i__8524__auto___16731 < len__8523__auto___16730) {
      args__8530__auto__.push(arguments[i__8524__auto___16731]);
      var G__16732 = i__8524__auto___16731 + 1;
      i__8524__auto___16731 = G__16732;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.title.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.title.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.title.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.title.cljs$lang$maxFixedArity = 1;
om.dom.title.cljs$lang$applyTo = function(seq16380) {
  var G__16381 = cljs.core.first.call(null, seq16380);
  var seq16380__$1 = cljs.core.next.call(null, seq16380);
  return om.dom.title.cljs$core$IFn$_invoke$arity$variadic(G__16381, seq16380__$1);
};
om.dom.tr = function om$dom$tr(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16733 = arguments.length;
  var i__8524__auto___16734 = 0;
  while (true) {
    if (i__8524__auto___16734 < len__8523__auto___16733) {
      args__8530__auto__.push(arguments[i__8524__auto___16734]);
      var G__16735 = i__8524__auto___16734 + 1;
      i__8524__auto___16734 = G__16735;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.tr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.tr.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.tr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.tr.cljs$lang$maxFixedArity = 1;
om.dom.tr.cljs$lang$applyTo = function(seq16382) {
  var G__16383 = cljs.core.first.call(null, seq16382);
  var seq16382__$1 = cljs.core.next.call(null, seq16382);
  return om.dom.tr.cljs$core$IFn$_invoke$arity$variadic(G__16383, seq16382__$1);
};
om.dom.track = function om$dom$track(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16736 = arguments.length;
  var i__8524__auto___16737 = 0;
  while (true) {
    if (i__8524__auto___16737 < len__8523__auto___16736) {
      args__8530__auto__.push(arguments[i__8524__auto___16737]);
      var G__16738 = i__8524__auto___16737 + 1;
      i__8524__auto___16737 = G__16738;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.track.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.track.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.track.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.track.cljs$lang$maxFixedArity = 1;
om.dom.track.cljs$lang$applyTo = function(seq16384) {
  var G__16385 = cljs.core.first.call(null, seq16384);
  var seq16384__$1 = cljs.core.next.call(null, seq16384);
  return om.dom.track.cljs$core$IFn$_invoke$arity$variadic(G__16385, seq16384__$1);
};
om.dom.u = function om$dom$u(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16739 = arguments.length;
  var i__8524__auto___16740 = 0;
  while (true) {
    if (i__8524__auto___16740 < len__8523__auto___16739) {
      args__8530__auto__.push(arguments[i__8524__auto___16740]);
      var G__16741 = i__8524__auto___16740 + 1;
      i__8524__auto___16740 = G__16741;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.u.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.u.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.u.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.u.cljs$lang$maxFixedArity = 1;
om.dom.u.cljs$lang$applyTo = function(seq16386) {
  var G__16387 = cljs.core.first.call(null, seq16386);
  var seq16386__$1 = cljs.core.next.call(null, seq16386);
  return om.dom.u.cljs$core$IFn$_invoke$arity$variadic(G__16387, seq16386__$1);
};
om.dom.ul = function om$dom$ul(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16742 = arguments.length;
  var i__8524__auto___16743 = 0;
  while (true) {
    if (i__8524__auto___16743 < len__8523__auto___16742) {
      args__8530__auto__.push(arguments[i__8524__auto___16743]);
      var G__16744 = i__8524__auto___16743 + 1;
      i__8524__auto___16743 = G__16744;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.ul.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.ul.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.ul.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.ul.cljs$lang$maxFixedArity = 1;
om.dom.ul.cljs$lang$applyTo = function(seq16388) {
  var G__16389 = cljs.core.first.call(null, seq16388);
  var seq16388__$1 = cljs.core.next.call(null, seq16388);
  return om.dom.ul.cljs$core$IFn$_invoke$arity$variadic(G__16389, seq16388__$1);
};
om.dom.var$ = function om$dom$var(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16745 = arguments.length;
  var i__8524__auto___16746 = 0;
  while (true) {
    if (i__8524__auto___16746 < len__8523__auto___16745) {
      args__8530__auto__.push(arguments[i__8524__auto___16746]);
      var G__16747 = i__8524__auto___16746 + 1;
      i__8524__auto___16746 = G__16747;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.var$.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.var$.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.var$.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.var$.cljs$lang$maxFixedArity = 1;
om.dom.var$.cljs$lang$applyTo = function(seq16390) {
  var G__16391 = cljs.core.first.call(null, seq16390);
  var seq16390__$1 = cljs.core.next.call(null, seq16390);
  return om.dom.var$.cljs$core$IFn$_invoke$arity$variadic(G__16391, seq16390__$1);
};
om.dom.video = function om$dom$video(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16748 = arguments.length;
  var i__8524__auto___16749 = 0;
  while (true) {
    if (i__8524__auto___16749 < len__8523__auto___16748) {
      args__8530__auto__.push(arguments[i__8524__auto___16749]);
      var G__16750 = i__8524__auto___16749 + 1;
      i__8524__auto___16749 = G__16750;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.video.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.video.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.video.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.video.cljs$lang$maxFixedArity = 1;
om.dom.video.cljs$lang$applyTo = function(seq16392) {
  var G__16393 = cljs.core.first.call(null, seq16392);
  var seq16392__$1 = cljs.core.next.call(null, seq16392);
  return om.dom.video.cljs$core$IFn$_invoke$arity$variadic(G__16393, seq16392__$1);
};
om.dom.wbr = function om$dom$wbr(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16751 = arguments.length;
  var i__8524__auto___16752 = 0;
  while (true) {
    if (i__8524__auto___16752 < len__8523__auto___16751) {
      args__8530__auto__.push(arguments[i__8524__auto___16752]);
      var G__16753 = i__8524__auto___16752 + 1;
      i__8524__auto___16752 = G__16753;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.wbr.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.wbr.cljs$lang$maxFixedArity = 1;
om.dom.wbr.cljs$lang$applyTo = function(seq16394) {
  var G__16395 = cljs.core.first.call(null, seq16394);
  var seq16394__$1 = cljs.core.next.call(null, seq16394);
  return om.dom.wbr.cljs$core$IFn$_invoke$arity$variadic(G__16395, seq16394__$1);
};
om.dom.circle = function om$dom$circle(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16754 = arguments.length;
  var i__8524__auto___16755 = 0;
  while (true) {
    if (i__8524__auto___16755 < len__8523__auto___16754) {
      args__8530__auto__.push(arguments[i__8524__auto___16755]);
      var G__16756 = i__8524__auto___16755 + 1;
      i__8524__auto___16755 = G__16756;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.circle.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.circle.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.circle.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.circle.cljs$lang$maxFixedArity = 1;
om.dom.circle.cljs$lang$applyTo = function(seq16396) {
  var G__16397 = cljs.core.first.call(null, seq16396);
  var seq16396__$1 = cljs.core.next.call(null, seq16396);
  return om.dom.circle.cljs$core$IFn$_invoke$arity$variadic(G__16397, seq16396__$1);
};
om.dom.clipPath = function om$dom$clipPath(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16757 = arguments.length;
  var i__8524__auto___16758 = 0;
  while (true) {
    if (i__8524__auto___16758 < len__8523__auto___16757) {
      args__8530__auto__.push(arguments[i__8524__auto___16758]);
      var G__16759 = i__8524__auto___16758 + 1;
      i__8524__auto___16758 = G__16759;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.clipPath.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.clipPath.cljs$lang$maxFixedArity = 1;
om.dom.clipPath.cljs$lang$applyTo = function(seq16398) {
  var G__16399 = cljs.core.first.call(null, seq16398);
  var seq16398__$1 = cljs.core.next.call(null, seq16398);
  return om.dom.clipPath.cljs$core$IFn$_invoke$arity$variadic(G__16399, seq16398__$1);
};
om.dom.ellipse = function om$dom$ellipse(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16760 = arguments.length;
  var i__8524__auto___16761 = 0;
  while (true) {
    if (i__8524__auto___16761 < len__8523__auto___16760) {
      args__8530__auto__.push(arguments[i__8524__auto___16761]);
      var G__16762 = i__8524__auto___16761 + 1;
      i__8524__auto___16761 = G__16762;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.ellipse.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.ellipse.cljs$lang$maxFixedArity = 1;
om.dom.ellipse.cljs$lang$applyTo = function(seq16400) {
  var G__16401 = cljs.core.first.call(null, seq16400);
  var seq16400__$1 = cljs.core.next.call(null, seq16400);
  return om.dom.ellipse.cljs$core$IFn$_invoke$arity$variadic(G__16401, seq16400__$1);
};
om.dom.g = function om$dom$g(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16763 = arguments.length;
  var i__8524__auto___16764 = 0;
  while (true) {
    if (i__8524__auto___16764 < len__8523__auto___16763) {
      args__8530__auto__.push(arguments[i__8524__auto___16764]);
      var G__16765 = i__8524__auto___16764 + 1;
      i__8524__auto___16764 = G__16765;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.g.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.g.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.g.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.g.cljs$lang$maxFixedArity = 1;
om.dom.g.cljs$lang$applyTo = function(seq16402) {
  var G__16403 = cljs.core.first.call(null, seq16402);
  var seq16402__$1 = cljs.core.next.call(null, seq16402);
  return om.dom.g.cljs$core$IFn$_invoke$arity$variadic(G__16403, seq16402__$1);
};
om.dom.line = function om$dom$line(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16766 = arguments.length;
  var i__8524__auto___16767 = 0;
  while (true) {
    if (i__8524__auto___16767 < len__8523__auto___16766) {
      args__8530__auto__.push(arguments[i__8524__auto___16767]);
      var G__16768 = i__8524__auto___16767 + 1;
      i__8524__auto___16767 = G__16768;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.line.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.line.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.line.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.line.cljs$lang$maxFixedArity = 1;
om.dom.line.cljs$lang$applyTo = function(seq16404) {
  var G__16405 = cljs.core.first.call(null, seq16404);
  var seq16404__$1 = cljs.core.next.call(null, seq16404);
  return om.dom.line.cljs$core$IFn$_invoke$arity$variadic(G__16405, seq16404__$1);
};
om.dom.mask = function om$dom$mask(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16769 = arguments.length;
  var i__8524__auto___16770 = 0;
  while (true) {
    if (i__8524__auto___16770 < len__8523__auto___16769) {
      args__8530__auto__.push(arguments[i__8524__auto___16770]);
      var G__16771 = i__8524__auto___16770 + 1;
      i__8524__auto___16770 = G__16771;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.mask.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.mask.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.mask.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.mask.cljs$lang$maxFixedArity = 1;
om.dom.mask.cljs$lang$applyTo = function(seq16406) {
  var G__16407 = cljs.core.first.call(null, seq16406);
  var seq16406__$1 = cljs.core.next.call(null, seq16406);
  return om.dom.mask.cljs$core$IFn$_invoke$arity$variadic(G__16407, seq16406__$1);
};
om.dom.path = function om$dom$path(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16772 = arguments.length;
  var i__8524__auto___16773 = 0;
  while (true) {
    if (i__8524__auto___16773 < len__8523__auto___16772) {
      args__8530__auto__.push(arguments[i__8524__auto___16773]);
      var G__16774 = i__8524__auto___16773 + 1;
      i__8524__auto___16773 = G__16774;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.path.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.path.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.path.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.path.cljs$lang$maxFixedArity = 1;
om.dom.path.cljs$lang$applyTo = function(seq16408) {
  var G__16409 = cljs.core.first.call(null, seq16408);
  var seq16408__$1 = cljs.core.next.call(null, seq16408);
  return om.dom.path.cljs$core$IFn$_invoke$arity$variadic(G__16409, seq16408__$1);
};
om.dom.pattern = function om$dom$pattern(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16775 = arguments.length;
  var i__8524__auto___16776 = 0;
  while (true) {
    if (i__8524__auto___16776 < len__8523__auto___16775) {
      args__8530__auto__.push(arguments[i__8524__auto___16776]);
      var G__16777 = i__8524__auto___16776 + 1;
      i__8524__auto___16776 = G__16777;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.pattern.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.pattern.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.pattern.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.pattern.cljs$lang$maxFixedArity = 1;
om.dom.pattern.cljs$lang$applyTo = function(seq16410) {
  var G__16411 = cljs.core.first.call(null, seq16410);
  var seq16410__$1 = cljs.core.next.call(null, seq16410);
  return om.dom.pattern.cljs$core$IFn$_invoke$arity$variadic(G__16411, seq16410__$1);
};
om.dom.polyline = function om$dom$polyline(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16778 = arguments.length;
  var i__8524__auto___16779 = 0;
  while (true) {
    if (i__8524__auto___16779 < len__8523__auto___16778) {
      args__8530__auto__.push(arguments[i__8524__auto___16779]);
      var G__16780 = i__8524__auto___16779 + 1;
      i__8524__auto___16779 = G__16780;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.polyline.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.polyline.cljs$lang$maxFixedArity = 1;
om.dom.polyline.cljs$lang$applyTo = function(seq16412) {
  var G__16413 = cljs.core.first.call(null, seq16412);
  var seq16412__$1 = cljs.core.next.call(null, seq16412);
  return om.dom.polyline.cljs$core$IFn$_invoke$arity$variadic(G__16413, seq16412__$1);
};
om.dom.rect = function om$dom$rect(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16781 = arguments.length;
  var i__8524__auto___16782 = 0;
  while (true) {
    if (i__8524__auto___16782 < len__8523__auto___16781) {
      args__8530__auto__.push(arguments[i__8524__auto___16782]);
      var G__16783 = i__8524__auto___16782 + 1;
      i__8524__auto___16782 = G__16783;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.rect.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.rect.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.rect.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.rect.cljs$lang$maxFixedArity = 1;
om.dom.rect.cljs$lang$applyTo = function(seq16414) {
  var G__16415 = cljs.core.first.call(null, seq16414);
  var seq16414__$1 = cljs.core.next.call(null, seq16414);
  return om.dom.rect.cljs$core$IFn$_invoke$arity$variadic(G__16415, seq16414__$1);
};
om.dom.svg = function om$dom$svg(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16784 = arguments.length;
  var i__8524__auto___16785 = 0;
  while (true) {
    if (i__8524__auto___16785 < len__8523__auto___16784) {
      args__8530__auto__.push(arguments[i__8524__auto___16785]);
      var G__16786 = i__8524__auto___16785 + 1;
      i__8524__auto___16785 = G__16786;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.svg.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.svg.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.svg.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.svg.cljs$lang$maxFixedArity = 1;
om.dom.svg.cljs$lang$applyTo = function(seq16416) {
  var G__16417 = cljs.core.first.call(null, seq16416);
  var seq16416__$1 = cljs.core.next.call(null, seq16416);
  return om.dom.svg.cljs$core$IFn$_invoke$arity$variadic(G__16417, seq16416__$1);
};
om.dom.text = function om$dom$text(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16787 = arguments.length;
  var i__8524__auto___16788 = 0;
  while (true) {
    if (i__8524__auto___16788 < len__8523__auto___16787) {
      args__8530__auto__.push(arguments[i__8524__auto___16788]);
      var G__16789 = i__8524__auto___16788 + 1;
      i__8524__auto___16788 = G__16789;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.text.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.text.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.text.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.text.cljs$lang$maxFixedArity = 1;
om.dom.text.cljs$lang$applyTo = function(seq16418) {
  var G__16419 = cljs.core.first.call(null, seq16418);
  var seq16418__$1 = cljs.core.next.call(null, seq16418);
  return om.dom.text.cljs$core$IFn$_invoke$arity$variadic(G__16419, seq16418__$1);
};
om.dom.defs = function om$dom$defs(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16790 = arguments.length;
  var i__8524__auto___16791 = 0;
  while (true) {
    if (i__8524__auto___16791 < len__8523__auto___16790) {
      args__8530__auto__.push(arguments[i__8524__auto___16791]);
      var G__16792 = i__8524__auto___16791 + 1;
      i__8524__auto___16791 = G__16792;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.defs.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.defs.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.defs.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.defs.cljs$lang$maxFixedArity = 1;
om.dom.defs.cljs$lang$applyTo = function(seq16420) {
  var G__16421 = cljs.core.first.call(null, seq16420);
  var seq16420__$1 = cljs.core.next.call(null, seq16420);
  return om.dom.defs.cljs$core$IFn$_invoke$arity$variadic(G__16421, seq16420__$1);
};
om.dom.linearGradient = function om$dom$linearGradient(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16793 = arguments.length;
  var i__8524__auto___16794 = 0;
  while (true) {
    if (i__8524__auto___16794 < len__8523__auto___16793) {
      args__8530__auto__.push(arguments[i__8524__auto___16794]);
      var G__16795 = i__8524__auto___16794 + 1;
      i__8524__auto___16794 = G__16795;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.linearGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.linearGradient.cljs$lang$maxFixedArity = 1;
om.dom.linearGradient.cljs$lang$applyTo = function(seq16422) {
  var G__16423 = cljs.core.first.call(null, seq16422);
  var seq16422__$1 = cljs.core.next.call(null, seq16422);
  return om.dom.linearGradient.cljs$core$IFn$_invoke$arity$variadic(G__16423, seq16422__$1);
};
om.dom.polygon = function om$dom$polygon(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16796 = arguments.length;
  var i__8524__auto___16797 = 0;
  while (true) {
    if (i__8524__auto___16797 < len__8523__auto___16796) {
      args__8530__auto__.push(arguments[i__8524__auto___16797]);
      var G__16798 = i__8524__auto___16797 + 1;
      i__8524__auto___16797 = G__16798;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.polygon.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.polygon.cljs$lang$maxFixedArity = 1;
om.dom.polygon.cljs$lang$applyTo = function(seq16424) {
  var G__16425 = cljs.core.first.call(null, seq16424);
  var seq16424__$1 = cljs.core.next.call(null, seq16424);
  return om.dom.polygon.cljs$core$IFn$_invoke$arity$variadic(G__16425, seq16424__$1);
};
om.dom.radialGradient = function om$dom$radialGradient(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16799 = arguments.length;
  var i__8524__auto___16800 = 0;
  while (true) {
    if (i__8524__auto___16800 < len__8523__auto___16799) {
      args__8530__auto__.push(arguments[i__8524__auto___16800]);
      var G__16801 = i__8524__auto___16800 + 1;
      i__8524__auto___16800 = G__16801;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.radialGradient.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.radialGradient.cljs$lang$maxFixedArity = 1;
om.dom.radialGradient.cljs$lang$applyTo = function(seq16426) {
  var G__16427 = cljs.core.first.call(null, seq16426);
  var seq16426__$1 = cljs.core.next.call(null, seq16426);
  return om.dom.radialGradient.cljs$core$IFn$_invoke$arity$variadic(G__16427, seq16426__$1);
};
om.dom.stop = function om$dom$stop(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16802 = arguments.length;
  var i__8524__auto___16803 = 0;
  while (true) {
    if (i__8524__auto___16803 < len__8523__auto___16802) {
      args__8530__auto__.push(arguments[i__8524__auto___16803]);
      var G__16804 = i__8524__auto___16803 + 1;
      i__8524__auto___16803 = G__16804;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.stop.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.stop.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.stop.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.stop.cljs$lang$maxFixedArity = 1;
om.dom.stop.cljs$lang$applyTo = function(seq16428) {
  var G__16429 = cljs.core.first.call(null, seq16428);
  var seq16428__$1 = cljs.core.next.call(null, seq16428);
  return om.dom.stop.cljs$core$IFn$_invoke$arity$variadic(G__16429, seq16428__$1);
};
om.dom.tspan = function om$dom$tspan(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16805 = arguments.length;
  var i__8524__auto___16806 = 0;
  while (true) {
    if (i__8524__auto___16806 < len__8523__auto___16805) {
      args__8530__auto__.push(arguments[i__8524__auto___16806]);
      var G__16807 = i__8524__auto___16806 + 1;
      i__8524__auto___16806 = G__16807;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic = function(opts__15870__auto__, children__15871__auto__) {
  return React.DOM.tspan.apply(null, cljs.core.into_array.call(null, cljs.core.cons.call(null, opts__15870__auto__, cljs.core.map.call(null, om.util.force_children, children__15871__auto__))));
};
om.dom.tspan.cljs$lang$maxFixedArity = 1;
om.dom.tspan.cljs$lang$applyTo = function(seq16242) {
  var G__16243 = cljs.core.first.call(null, seq16242);
  var seq16242__$1 = cljs.core.next.call(null, seq16242);
  return om.dom.tspan.cljs$core$IFn$_invoke$arity$variadic(G__16243, seq16242__$1);
};
om.dom.wrap_form_element = function om$dom$wrap_form_element(ctor, display_name) {
  return React.createFactory(React.createClass({"getDisplayName":function() {
    return display_name;
  }, "getInitialState":function() {
    var this$ = this;
    return {"value":this$.props["value"]};
  }, "onChange":function(e) {
    var this$ = this;
    var handler = this$.props["onChange"];
    if (handler == null) {
      return null;
    } else {
      handler.call(null, e);
      return this$.setState({"value":e.target.value});
    }
  }, "componentWillReceiveProps":function(new_props) {
    var this$ = this;
    return this$.setState({"value":new_props["value"]});
  }, "render":function() {
    var this$ = this;
    var props = {};
    goog.object.extend(props, this$.props, {"value":this$.state["value"], "onChange":this$["onChange"], "children":this$.props["children"]});
    return ctor.call(null, props);
  }}));
};
om.dom.input = om.dom.wrap_form_element.call(null, React.DOM.input, "input");
om.dom.textarea = om.dom.wrap_form_element.call(null, React.DOM.textarea, "textarea");
om.dom.option = om.dom.wrap_form_element.call(null, React.DOM.option, "option");
om.dom.select = om.dom.wrap_form_element.call(null, React.DOM.select, "select");
om.dom.render = function om$dom$render(component, el) {
  return ReactDOM.render(component, el);
};
om.dom.render_to_str = function om$dom$render_to_str(c) {
  return ReactDOMServer.renderToString(c);
};
om.dom.node = function om$dom$node(var_args) {
  var args16808 = [];
  var len__8523__auto___16812 = arguments.length;
  var i__8524__auto___16813 = 0;
  while (true) {
    if (i__8524__auto___16813 < len__8523__auto___16812) {
      args16808.push(arguments[i__8524__auto___16813]);
      var G__16814 = i__8524__auto___16813 + 1;
      i__8524__auto___16813 = G__16814;
      continue;
    } else {
    }
    break;
  }
  var G__16810 = args16808.length;
  switch(G__16810) {
    case 1:
      return om.dom.node.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.dom.node.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16808.length)].join(""));
  }
};
om.dom.node.cljs$core$IFn$_invoke$arity$1 = function(component) {
  return ReactDOM.findDOMNode(component);
};
om.dom.node.cljs$core$IFn$_invoke$arity$2 = function(component, name) {
  var G__16811 = component.refs;
  var G__16811__$1 = G__16811 == null ? null : goog.object.get(G__16811, name);
  if (G__16811__$1 == null) {
    return null;
  } else {
    return ReactDOM.findDOMNode(G__16811__$1);
  }
};
om.dom.node.cljs$lang$maxFixedArity = 2;
om.dom.create_element = function om$dom$create_element(var_args) {
  var args16816 = [];
  var len__8523__auto___16822 = arguments.length;
  var i__8524__auto___16823 = 0;
  while (true) {
    if (i__8524__auto___16823 < len__8523__auto___16822) {
      args16816.push(arguments[i__8524__auto___16823]);
      var G__16824 = i__8524__auto___16823 + 1;
      i__8524__auto___16823 = G__16824;
      continue;
    } else {
    }
    break;
  }
  var G__16821 = args16816.length;
  switch(G__16821) {
    case 1:
      return om.dom.create_element.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args16816.slice(2), 0, null);
      return om.dom.create_element.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
om.dom.create_element.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return om.dom.create_element.call(null, tag, null);
};
om.dom.create_element.cljs$core$IFn$_invoke$arity$variadic = function(tag, opts, children) {
  return React.createElement(tag, opts, children);
};
om.dom.create_element.cljs$lang$applyTo = function(seq16817) {
  var G__16818 = cljs.core.first.call(null, seq16817);
  var seq16817__$1 = cljs.core.next.call(null, seq16817);
  var G__16819 = cljs.core.first.call(null, seq16817__$1);
  var seq16817__$2 = cljs.core.next.call(null, seq16817__$1);
  return om.dom.create_element.cljs$core$IFn$_invoke$arity$variadic(G__16818, G__16819, seq16817__$2);
};
om.dom.create_element.cljs$lang$maxFixedArity = 2;
goog.provide("om.next.cache");
goog.require("cljs.core");
om.next.cache.Cache = function(arr, index, size) {
  this.arr = arr;
  this.index = index;
  this.size = size;
};
om.next.cache.Cache.prototype.add = function(id, x) {
  var self__ = this;
  var this$ = this;
  var x_SINGLEQUOTE__14819 = cljs.core.vary_meta.call(null, x, cljs.core.assoc, new cljs.core.Keyword(null, "client-time", "client-time", -1212214195), new Date);
  if (self__.size <= self__.arr.length) {
    var id_SINGLEQUOTE__14820 = self__.arr.shift();
    cljs.core.swap_BANG_.call(null, self__.index, function(id_SINGLEQUOTE__14820, x_SINGLEQUOTE__14819, this$) {
      return function(p1__14818_SHARP_) {
        return cljs.core.assoc.call(null, cljs.core.dissoc.call(null, p1__14818_SHARP_, id_SINGLEQUOTE__14820), id, x_SINGLEQUOTE__14819);
      };
    }(id_SINGLEQUOTE__14820, x_SINGLEQUOTE__14819, this$));
  } else {
    cljs.core.swap_BANG_.call(null, self__.index, cljs.core.assoc, id, x_SINGLEQUOTE__14819);
  }
  return self__.arr.push(id);
};
om.next.cache.Cache.prototype.get = function(id) {
  var self__ = this;
  var this$ = this;
  return cljs.core.get.call(null, cljs.core.deref.call(null, self__.index), id);
};
om.next.cache.Cache.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "arr", "arr", 2115492975, null), new cljs.core.Symbol(null, "index", "index", 108845612, null), new cljs.core.Symbol(null, "size", "size", -1555742762, null)], null);
};
om.next.cache.Cache.cljs$lang$type = true;
om.next.cache.Cache.cljs$lang$ctorStr = "om.next.cache/Cache";
om.next.cache.Cache.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "om.next.cache/Cache");
};
om.next.cache.__GT_Cache = function om$next$cache$__GT_Cache(arr, index, size) {
  return new om.next.cache.Cache(arr, index, size);
};
om.next.cache.cache = function om$next$cache$cache(size) {
  return new om.next.cache.Cache([], cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY), size);
};
goog.provide("clojure.zip");
goog.require("cljs.core");
clojure.zip.zipper = function clojure$zip$zipper(branch_QMARK_, children, make_node, root) {
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [root, null], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword("zip", "branch?", "zip/branch?", -998880862), branch_QMARK_, new cljs.core.Keyword("zip", "children", "zip/children", -940194589), children, new cljs.core.Keyword("zip", "make-node", "zip/make-node", 1103800591), make_node], null));
};
clojure.zip.seq_zip = function clojure$zip$seq_zip(root) {
  return clojure.zip.zipper.call(null, cljs.core.seq_QMARK_, cljs.core.identity, function(node, children) {
    return cljs.core.with_meta.call(null, children, cljs.core.meta.call(null, node));
  }, root);
};
clojure.zip.vector_zip = function clojure$zip$vector_zip(root) {
  return clojure.zip.zipper.call(null, cljs.core.vector_QMARK_, cljs.core.seq, function(node, children) {
    return cljs.core.with_meta.call(null, cljs.core.vec.call(null, children), cljs.core.meta.call(null, node));
  }, root);
};
clojure.zip.xml_zip = function clojure$zip$xml_zip(root) {
  return clojure.zip.zipper.call(null, cljs.core.complement.call(null, cljs.core.string_QMARK_), cljs.core.comp.call(null, cljs.core.seq, new cljs.core.Keyword(null, "content", "content", 15833224)), function(node, children) {
    return cljs.core.assoc.call(null, node, new cljs.core.Keyword(null, "content", "content", 15833224), function() {
      var and__7398__auto__ = children;
      if (cljs.core.truth_(and__7398__auto__)) {
        return cljs.core.apply.call(null, cljs.core.vector, children);
      } else {
        return and__7398__auto__;
      }
    }());
  }, root);
};
clojure.zip.node = function clojure$zip$node(loc) {
  return loc.call(null, 0);
};
clojure.zip.branch_QMARK_ = function clojure$zip$branch_QMARK_(loc) {
  return (new cljs.core.Keyword("zip", "branch?", "zip/branch?", -998880862)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, loc)).call(null, clojure.zip.node.call(null, loc));
};
clojure.zip.children = function clojure$zip$children(loc) {
  if (cljs.core.truth_(clojure.zip.branch_QMARK_.call(null, loc))) {
    return (new cljs.core.Keyword("zip", "children", "zip/children", -940194589)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, loc)).call(null, clojure.zip.node.call(null, loc));
  } else {
    throw "called children on a leaf node";
  }
};
clojure.zip.make_node = function clojure$zip$make_node(loc, node, children) {
  return (new cljs.core.Keyword("zip", "make-node", "zip/make-node", 1103800591)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, loc)).call(null, node, children);
};
clojure.zip.path = function clojure$zip$path(loc) {
  return (new cljs.core.Keyword(null, "pnodes", "pnodes", 1739080565)).cljs$core$IFn$_invoke$arity$1(loc.call(null, 1));
};
clojure.zip.lefts = function clojure$zip$lefts(loc) {
  return cljs.core.seq.call(null, (new cljs.core.Keyword(null, "l", "l", 1395893423)).cljs$core$IFn$_invoke$arity$1(loc.call(null, 1)));
};
clojure.zip.rights = function clojure$zip$rights(loc) {
  return (new cljs.core.Keyword(null, "r", "r", -471384190)).cljs$core$IFn$_invoke$arity$1(loc.call(null, 1));
};
clojure.zip.down = function clojure$zip$down(loc) {
  if (cljs.core.truth_(clojure.zip.branch_QMARK_.call(null, loc))) {
    var vec__14829 = loc;
    var node = cljs.core.nth.call(null, vec__14829, 0, null);
    var path = cljs.core.nth.call(null, vec__14829, 1, null);
    var vec__14832 = clojure.zip.children.call(null, loc);
    var seq__14833 = cljs.core.seq.call(null, vec__14832);
    var first__14834 = cljs.core.first.call(null, seq__14833);
    var seq__14833__$1 = cljs.core.next.call(null, seq__14833);
    var c = first__14834;
    var cnext = seq__14833__$1;
    var cs = vec__14832;
    if (cljs.core.truth_(cs)) {
      return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "pnodes", "pnodes", 1739080565), cljs.core.truth_(path) ? cljs.core.conj.call(null, (new cljs.core.Keyword(null, "pnodes", "pnodes", 1739080565)).cljs$core$IFn$_invoke$arity$1(path), node) : new cljs.core.PersistentVector(null, 
      1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null), new cljs.core.Keyword(null, "ppath", "ppath", -1758182784), path, new cljs.core.Keyword(null, "r", "r", -471384190), cnext], null)], null), cljs.core.meta.call(null, loc));
    } else {
      return null;
    }
  } else {
    return null;
  }
};
clojure.zip.up = function clojure$zip$up(loc) {
  var vec__14840 = loc;
  var node = cljs.core.nth.call(null, vec__14840, 0, null);
  var map__14843 = cljs.core.nth.call(null, vec__14840, 1, null);
  var map__14843__$1 = (!(map__14843 == null) ? map__14843.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14843.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14843) : map__14843;
  var path = map__14843__$1;
  var l = cljs.core.get.call(null, map__14843__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  var ppath = cljs.core.get.call(null, map__14843__$1, new cljs.core.Keyword(null, "ppath", "ppath", -1758182784));
  var pnodes = cljs.core.get.call(null, map__14843__$1, new cljs.core.Keyword(null, "pnodes", "pnodes", 1739080565));
  var r = cljs.core.get.call(null, map__14843__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  var changed_QMARK_ = cljs.core.get.call(null, map__14843__$1, new cljs.core.Keyword(null, "changed?", "changed?", -437828330));
  if (cljs.core.truth_(pnodes)) {
    var pnode = cljs.core.peek.call(null, pnodes);
    return cljs.core.with_meta.call(null, cljs.core.truth_(changed_QMARK_) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.zip.make_node.call(null, loc, pnode, cljs.core.concat.call(null, l, cljs.core.cons.call(null, node, r))), function() {
      var and__7398__auto__ = ppath;
      if (cljs.core.truth_(and__7398__auto__)) {
        return cljs.core.assoc.call(null, ppath, new cljs.core.Keyword(null, "changed?", "changed?", -437828330), true);
      } else {
        return and__7398__auto__;
      }
    }()], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pnode, ppath], null), cljs.core.meta.call(null, loc));
  } else {
    return null;
  }
};
clojure.zip.root = function clojure$zip$root(loc) {
  while (true) {
    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "end", "end", -268185958), loc.call(null, 1))) {
      return clojure.zip.node.call(null, loc);
    } else {
      var p = clojure.zip.up.call(null, loc);
      if (cljs.core.truth_(p)) {
        var G__14845 = p;
        loc = G__14845;
        continue;
      } else {
        return clojure.zip.node.call(null, loc);
      }
    }
    break;
  }
};
clojure.zip.right = function clojure$zip$right(loc) {
  var vec__14854 = loc;
  var node = cljs.core.nth.call(null, vec__14854, 0, null);
  var map__14857 = cljs.core.nth.call(null, vec__14854, 1, null);
  var map__14857__$1 = (!(map__14857 == null) ? map__14857.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14857.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14857) : map__14857;
  var path = map__14857__$1;
  var l = cljs.core.get.call(null, map__14857__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  var vec__14858 = cljs.core.get.call(null, map__14857__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  var seq__14859 = cljs.core.seq.call(null, vec__14858);
  var first__14860 = cljs.core.first.call(null, seq__14859);
  var seq__14859__$1 = cljs.core.next.call(null, seq__14859);
  var r = first__14860;
  var rnext = seq__14859__$1;
  var rs = vec__14858;
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = path;
    if (cljs.core.truth_(and__7398__auto__)) {
      return rs;
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.conj.call(null, l, node), new cljs.core.Keyword(null, "r", "r", -471384190), rnext)], null), cljs.core.meta.call(null, loc));
  } else {
    return null;
  }
};
clojure.zip.rightmost = function clojure$zip$rightmost(loc) {
  var vec__14867 = loc;
  var node = cljs.core.nth.call(null, vec__14867, 0, null);
  var map__14870 = cljs.core.nth.call(null, vec__14867, 1, null);
  var map__14870__$1 = (!(map__14870 == null) ? map__14870.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14870.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14870) : map__14870;
  var path = map__14870__$1;
  var l = cljs.core.get.call(null, map__14870__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  var r = cljs.core.get.call(null, map__14870__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = path;
    if (cljs.core.truth_(and__7398__auto__)) {
      return r;
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.last.call(null, r), cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.apply.call(null, cljs.core.conj, l, node, cljs.core.butlast.call(null, r)), new cljs.core.Keyword(null, "r", "r", -471384190), null)], null), cljs.core.meta.call(null, loc));
  } else {
    return loc;
  }
};
clojure.zip.left = function clojure$zip$left(loc) {
  var vec__14877 = loc;
  var node = cljs.core.nth.call(null, vec__14877, 0, null);
  var map__14880 = cljs.core.nth.call(null, vec__14877, 1, null);
  var map__14880__$1 = (!(map__14880 == null) ? map__14880.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14880.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14880) : map__14880;
  var path = map__14880__$1;
  var l = cljs.core.get.call(null, map__14880__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  var r = cljs.core.get.call(null, map__14880__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = path;
    if (cljs.core.truth_(and__7398__auto__)) {
      return cljs.core.seq.call(null, l);
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, l), cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.pop.call(null, l), new cljs.core.Keyword(null, "r", "r", -471384190), cljs.core.cons.call(null, node, r))], null), cljs.core.meta.call(null, loc));
  } else {
    return null;
  }
};
clojure.zip.leftmost = function clojure$zip$leftmost(loc) {
  var vec__14887 = loc;
  var node = cljs.core.nth.call(null, vec__14887, 0, null);
  var map__14890 = cljs.core.nth.call(null, vec__14887, 1, null);
  var map__14890__$1 = (!(map__14890 == null) ? map__14890.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14890.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14890) : map__14890;
  var path = map__14890__$1;
  var l = cljs.core.get.call(null, map__14890__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  var r = cljs.core.get.call(null, map__14890__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = path;
    if (cljs.core.truth_(and__7398__auto__)) {
      return cljs.core.seq.call(null, l);
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, l), cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "r", "r", -471384190), cljs.core.concat.call(null, cljs.core.rest.call(null, l), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null), r))], null), cljs.core.meta.call(null, 
    loc));
  } else {
    return loc;
  }
};
clojure.zip.insert_left = function clojure$zip$insert_left(loc, item) {
  var vec__14897 = loc;
  var node = cljs.core.nth.call(null, vec__14897, 0, null);
  var map__14900 = cljs.core.nth.call(null, vec__14897, 1, null);
  var map__14900__$1 = (!(map__14900 == null) ? map__14900.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14900.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14900) : map__14900;
  var path = map__14900__$1;
  var l = cljs.core.get.call(null, map__14900__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  if (path == null) {
    throw "Insert at top";
  } else {
    return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node, cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.conj.call(null, l, item), new cljs.core.Keyword(null, "changed?", "changed?", -437828330), true)], null), cljs.core.meta.call(null, loc));
  }
};
clojure.zip.insert_right = function clojure$zip$insert_right(loc, item) {
  var vec__14907 = loc;
  var node = cljs.core.nth.call(null, vec__14907, 0, null);
  var map__14910 = cljs.core.nth.call(null, vec__14907, 1, null);
  var map__14910__$1 = (!(map__14910 == null) ? map__14910.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14910.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14910) : map__14910;
  var path = map__14910__$1;
  var r = cljs.core.get.call(null, map__14910__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  if (path == null) {
    throw "Insert at top";
  } else {
    return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node, cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "r", "r", -471384190), cljs.core.cons.call(null, item, r), new cljs.core.Keyword(null, "changed?", "changed?", -437828330), true)], null), cljs.core.meta.call(null, loc));
  }
};
clojure.zip.replace = function clojure$zip$replace(loc, node) {
  var vec__14915 = loc;
  var _ = cljs.core.nth.call(null, vec__14915, 0, null);
  var path = cljs.core.nth.call(null, vec__14915, 1, null);
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node, cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "changed?", "changed?", -437828330), true)], null), cljs.core.meta.call(null, loc));
};
clojure.zip.edit = function clojure$zip$edit(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___14921 = arguments.length;
  var i__8524__auto___14922 = 0;
  while (true) {
    if (i__8524__auto___14922 < len__8523__auto___14921) {
      args__8530__auto__.push(arguments[i__8524__auto___14922]);
      var G__14923 = i__8524__auto___14922 + 1;
      i__8524__auto___14922 = G__14923;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 2 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(2), 0, null) : null;
  return clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8531__auto__);
};
clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic = function(loc, f, args) {
  return clojure.zip.replace.call(null, loc, cljs.core.apply.call(null, f, clojure.zip.node.call(null, loc), args));
};
clojure.zip.edit.cljs$lang$maxFixedArity = 2;
clojure.zip.edit.cljs$lang$applyTo = function(seq14918) {
  var G__14919 = cljs.core.first.call(null, seq14918);
  var seq14918__$1 = cljs.core.next.call(null, seq14918);
  var G__14920 = cljs.core.first.call(null, seq14918__$1);
  var seq14918__$2 = cljs.core.next.call(null, seq14918__$1);
  return clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic(G__14919, G__14920, seq14918__$2);
};
clojure.zip.insert_child = function clojure$zip$insert_child(loc, item) {
  return clojure.zip.replace.call(null, loc, clojure.zip.make_node.call(null, loc, clojure.zip.node.call(null, loc), cljs.core.cons.call(null, item, clojure.zip.children.call(null, loc))));
};
clojure.zip.append_child = function clojure$zip$append_child(loc, item) {
  return clojure.zip.replace.call(null, loc, clojure.zip.make_node.call(null, loc, clojure.zip.node.call(null, loc), cljs.core.concat.call(null, clojure.zip.children.call(null, loc), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null))));
};
clojure.zip.next = function clojure$zip$next(loc) {
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "end", "end", -268185958), loc.call(null, 1))) {
    return loc;
  } else {
    var or__7410__auto__ = function() {
      var and__7398__auto__ = clojure.zip.branch_QMARK_.call(null, loc);
      if (cljs.core.truth_(and__7398__auto__)) {
        return clojure.zip.down.call(null, loc);
      } else {
        return and__7398__auto__;
      }
    }();
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      var or__7410__auto____$1 = clojure.zip.right.call(null, loc);
      if (cljs.core.truth_(or__7410__auto____$1)) {
        return or__7410__auto____$1;
      } else {
        var p = loc;
        while (true) {
          if (cljs.core.truth_(clojure.zip.up.call(null, p))) {
            var or__7410__auto____$2 = clojure.zip.right.call(null, clojure.zip.up.call(null, p));
            if (cljs.core.truth_(or__7410__auto____$2)) {
              return or__7410__auto____$2;
            } else {
              var G__14924 = clojure.zip.up.call(null, p);
              p = G__14924;
              continue;
            }
          } else {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.zip.node.call(null, p), new cljs.core.Keyword(null, "end", "end", -268185958)], null);
          }
          break;
        }
      }
    }
  }
};
clojure.zip.prev = function clojure$zip$prev(loc) {
  var temp__4655__auto__ = clojure.zip.left.call(null, loc);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var lloc = temp__4655__auto__;
    var loc__$1 = lloc;
    while (true) {
      var temp__4655__auto____$1 = function() {
        var and__7398__auto__ = clojure.zip.branch_QMARK_.call(null, loc__$1);
        if (cljs.core.truth_(and__7398__auto__)) {
          return clojure.zip.down.call(null, loc__$1);
        } else {
          return and__7398__auto__;
        }
      }();
      if (cljs.core.truth_(temp__4655__auto____$1)) {
        var child = temp__4655__auto____$1;
        var G__14925 = clojure.zip.rightmost.call(null, child);
        loc__$1 = G__14925;
        continue;
      } else {
        return loc__$1;
      }
      break;
    }
  } else {
    return clojure.zip.up.call(null, loc);
  }
};
clojure.zip.end_QMARK_ = function clojure$zip$end_QMARK_(loc) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "end", "end", -268185958), loc.call(null, 1));
};
clojure.zip.remove = function clojure$zip$remove(loc) {
  var vec__14931 = loc;
  var node = cljs.core.nth.call(null, vec__14931, 0, null);
  var map__14934 = cljs.core.nth.call(null, vec__14931, 1, null);
  var map__14934__$1 = (!(map__14934 == null) ? map__14934.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14934.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14934) : map__14934;
  var path = map__14934__$1;
  var l = cljs.core.get.call(null, map__14934__$1, new cljs.core.Keyword(null, "l", "l", 1395893423));
  var ppath = cljs.core.get.call(null, map__14934__$1, new cljs.core.Keyword(null, "ppath", "ppath", -1758182784));
  var pnodes = cljs.core.get.call(null, map__14934__$1, new cljs.core.Keyword(null, "pnodes", "pnodes", 1739080565));
  var rs = cljs.core.get.call(null, map__14934__$1, new cljs.core.Keyword(null, "r", "r", -471384190));
  if (path == null) {
    throw "Remove at top";
  } else {
    if (cljs.core.count.call(null, l) > 0) {
      var loc__$1 = cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek.call(null, l), cljs.core.assoc.call(null, path, new cljs.core.Keyword(null, "l", "l", 1395893423), cljs.core.pop.call(null, l), new cljs.core.Keyword(null, "changed?", "changed?", -437828330), true)], null), cljs.core.meta.call(null, loc));
      while (true) {
        var temp__4655__auto__ = function() {
          var and__7398__auto__ = clojure.zip.branch_QMARK_.call(null, loc__$1);
          if (cljs.core.truth_(and__7398__auto__)) {
            return clojure.zip.down.call(null, loc__$1);
          } else {
            return and__7398__auto__;
          }
        }();
        if (cljs.core.truth_(temp__4655__auto__)) {
          var child = temp__4655__auto__;
          var G__14936 = clojure.zip.rightmost.call(null, child);
          loc__$1 = G__14936;
          continue;
        } else {
          return loc__$1;
        }
        break;
      }
    } else {
      return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.zip.make_node.call(null, loc, cljs.core.peek.call(null, pnodes), rs), function() {
        var and__7398__auto__ = ppath;
        if (cljs.core.truth_(and__7398__auto__)) {
          return cljs.core.assoc.call(null, ppath, new cljs.core.Keyword(null, "changed?", "changed?", -437828330), true);
        } else {
          return and__7398__auto__;
        }
      }()], null), cljs.core.meta.call(null, loc));
    }
  }
};
goog.provide("clojure.set");
goog.require("cljs.core");
clojure.set.bubble_max_key = function clojure$set$bubble_max_key(k, coll) {
  var max = cljs.core.apply.call(null, cljs.core.max_key, k, coll);
  return cljs.core.cons.call(null, max, cljs.core.remove.call(null, function(max) {
    return function(p1__13435_SHARP_) {
      return max === p1__13435_SHARP_;
    };
  }(max), coll));
};
clojure.set.union = function clojure$set$union(var_args) {
  var args13436 = [];
  var len__8523__auto___13442 = arguments.length;
  var i__8524__auto___13443 = 0;
  while (true) {
    if (i__8524__auto___13443 < len__8523__auto___13442) {
      args13436.push(arguments[i__8524__auto___13443]);
      var G__13444 = i__8524__auto___13443 + 1;
      i__8524__auto___13443 = G__13444;
      continue;
    } else {
    }
    break;
  }
  var G__13441 = args13436.length;
  switch(G__13441) {
    case 0:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.union.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args13436.slice(2), 0, null);
      return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.union.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, cljs.core.conj, s2, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, s1, s2);
  }
};
clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, cljs.core.count, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, cljs.core.into, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.union.cljs$lang$applyTo = function(seq13437) {
  var G__13438 = cljs.core.first.call(null, seq13437);
  var seq13437__$1 = cljs.core.next.call(null, seq13437);
  var G__13439 = cljs.core.first.call(null, seq13437__$1);
  var seq13437__$2 = cljs.core.next.call(null, seq13437__$1);
  return clojure.set.union.cljs$core$IFn$_invoke$arity$variadic(G__13438, G__13439, seq13437__$2);
};
clojure.set.union.cljs$lang$maxFixedArity = 2;
clojure.set.intersection = function clojure$set$intersection(var_args) {
  var args13447 = [];
  var len__8523__auto___13453 = arguments.length;
  var i__8524__auto___13454 = 0;
  while (true) {
    if (i__8524__auto___13454 < len__8523__auto___13453) {
      args13447.push(arguments[i__8524__auto___13454]);
      var G__13455 = i__8524__auto___13454 + 1;
      i__8524__auto___13454 = G__13455;
      continue;
    } else {
    }
    break;
  }
  var G__13452 = args13447.length;
  switch(G__13452) {
    case 1:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args13447.slice(2), 0, null);
      return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  while (true) {
    if (cljs.core.count.call(null, s2) < cljs.core.count.call(null, s1)) {
      var G__13457 = s2;
      var G__13458 = s1;
      s1 = G__13457;
      s2 = G__13458;
      continue;
    } else {
      return cljs.core.reduce.call(null, function(s1, s2) {
        return function(result, item) {
          if (cljs.core.contains_QMARK_.call(null, s2, item)) {
            return result;
          } else {
            return cljs.core.disj.call(null, result, item);
          }
        };
      }(s1, s2), s1, s1);
    }
    break;
  }
};
clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  var bubbled_sets = clojure.set.bubble_max_key.call(null, function(p1__13446_SHARP_) {
    return -cljs.core.count.call(null, p1__13446_SHARP_);
  }, cljs.core.conj.call(null, sets, s2, s1));
  return cljs.core.reduce.call(null, clojure.set.intersection, cljs.core.first.call(null, bubbled_sets), cljs.core.rest.call(null, bubbled_sets));
};
clojure.set.intersection.cljs$lang$applyTo = function(seq13448) {
  var G__13449 = cljs.core.first.call(null, seq13448);
  var seq13448__$1 = cljs.core.next.call(null, seq13448);
  var G__13450 = cljs.core.first.call(null, seq13448__$1);
  var seq13448__$2 = cljs.core.next.call(null, seq13448__$1);
  return clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic(G__13449, G__13450, seq13448__$2);
};
clojure.set.intersection.cljs$lang$maxFixedArity = 2;
clojure.set.difference = function clojure$set$difference(var_args) {
  var args13459 = [];
  var len__8523__auto___13465 = arguments.length;
  var i__8524__auto___13466 = 0;
  while (true) {
    if (i__8524__auto___13466 < len__8523__auto___13465) {
      args13459.push(arguments[i__8524__auto___13466]);
      var G__13467 = i__8524__auto___13466 + 1;
      i__8524__auto___13466 = G__13467;
      continue;
    } else {
    }
    break;
  }
  var G__13464 = args13459.length;
  switch(G__13464) {
    case 1:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args13459.slice(2), 0, null);
      return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8542__auto__);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = function(s1) {
  return s1;
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = function(s1, s2) {
  if (cljs.core.count.call(null, s1) < cljs.core.count.call(null, s2)) {
    return cljs.core.reduce.call(null, function(result, item) {
      if (cljs.core.contains_QMARK_.call(null, s2, item)) {
        return cljs.core.disj.call(null, result, item);
      } else {
        return result;
      }
    }, s1, s1);
  } else {
    return cljs.core.reduce.call(null, cljs.core.disj, s1, s2);
  }
};
clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = function(s1, s2, sets) {
  return cljs.core.reduce.call(null, clojure.set.difference, s1, cljs.core.conj.call(null, sets, s2));
};
clojure.set.difference.cljs$lang$applyTo = function(seq13460) {
  var G__13461 = cljs.core.first.call(null, seq13460);
  var seq13460__$1 = cljs.core.next.call(null, seq13460);
  var G__13462 = cljs.core.first.call(null, seq13460__$1);
  var seq13460__$2 = cljs.core.next.call(null, seq13460__$1);
  return clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(G__13461, G__13462, seq13460__$2);
};
clojure.set.difference.cljs$lang$maxFixedArity = 2;
clojure.set.select = function clojure$set$select(pred, xset) {
  return cljs.core.reduce.call(null, function(s, k) {
    if (cljs.core.truth_(pred.call(null, k))) {
      return s;
    } else {
      return cljs.core.disj.call(null, s, k);
    }
  }, xset, xset);
};
clojure.set.project = function clojure$set$project(xrel, ks) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__13469_SHARP_) {
    return cljs.core.select_keys.call(null, p1__13469_SHARP_, ks);
  }, xrel));
};
clojure.set.rename_keys = function clojure$set$rename_keys(map, kmap) {
  return cljs.core.reduce.call(null, function(m, p__13474) {
    var vec__13475 = p__13474;
    var old = cljs.core.nth.call(null, vec__13475, 0, null);
    var new$ = cljs.core.nth.call(null, vec__13475, 1, null);
    if (cljs.core.contains_QMARK_.call(null, map, old)) {
      return cljs.core.assoc.call(null, m, new$, cljs.core.get.call(null, map, old));
    } else {
      return m;
    }
  }, cljs.core.apply.call(null, cljs.core.dissoc, map, cljs.core.keys.call(null, kmap)), kmap);
};
clojure.set.rename = function clojure$set$rename(xrel, kmap) {
  return cljs.core.set.call(null, cljs.core.map.call(null, function(p1__13478_SHARP_) {
    return clojure.set.rename_keys.call(null, p1__13478_SHARP_, kmap);
  }, xrel));
};
clojure.set.index = function clojure$set$index(xrel, ks) {
  return cljs.core.reduce.call(null, function(m, x) {
    var ik = cljs.core.select_keys.call(null, x, ks);
    return cljs.core.assoc.call(null, m, ik, cljs.core.conj.call(null, cljs.core.get.call(null, m, ik, cljs.core.PersistentHashSet.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, xrel);
};
clojure.set.map_invert = function clojure$set$map_invert(m) {
  return cljs.core.reduce.call(null, function(m__$1, p__13483) {
    var vec__13484 = p__13483;
    var k = cljs.core.nth.call(null, vec__13484, 0, null);
    var v = cljs.core.nth.call(null, vec__13484, 1, null);
    return cljs.core.assoc.call(null, m__$1, v, k);
  }, cljs.core.PersistentArrayMap.EMPTY, m);
};
clojure.set.join = function clojure$set$join(var_args) {
  var args13491 = [];
  var len__8523__auto___13500 = arguments.length;
  var i__8524__auto___13501 = 0;
  while (true) {
    if (i__8524__auto___13501 < len__8523__auto___13500) {
      args13491.push(arguments[i__8524__auto___13501]);
      var G__13502 = i__8524__auto___13501 + 1;
      i__8524__auto___13501 = G__13502;
      continue;
    } else {
    }
    break;
  }
  var G__13493 = args13491.length;
  switch(G__13493) {
    case 2:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.set.join.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13491.length)].join(""));
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$2 = function(xrel, yrel) {
  if (cljs.core.seq.call(null, xrel) && cljs.core.seq.call(null, yrel)) {
    var ks = clojure.set.intersection.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, xrel))), cljs.core.set.call(null, cljs.core.keys.call(null, cljs.core.first.call(null, yrel))));
    var vec__13494 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel], null);
    var r = cljs.core.nth.call(null, vec__13494, 0, null);
    var s = cljs.core.nth.call(null, vec__13494, 1, null);
    var idx = clojure.set.index.call(null, r, ks);
    return cljs.core.reduce.call(null, function(ks, vec__13494, r, s, idx) {
      return function(ret, x) {
        var found = idx.call(null, cljs.core.select_keys.call(null, x, ks));
        if (cljs.core.truth_(found)) {
          return cljs.core.reduce.call(null, function(found, ks, vec__13494, r, s, idx) {
            return function(p1__13487_SHARP_, p2__13488_SHARP_) {
              return cljs.core.conj.call(null, p1__13487_SHARP_, cljs.core.merge.call(null, p2__13488_SHARP_, x));
            };
          }(found, ks, vec__13494, r, s, idx), ret, found);
        } else {
          return ret;
        }
      };
    }(ks, vec__13494, r, s, idx), cljs.core.PersistentHashSet.EMPTY, s);
  } else {
    return cljs.core.PersistentHashSet.EMPTY;
  }
};
clojure.set.join.cljs$core$IFn$_invoke$arity$3 = function(xrel, yrel, km) {
  var vec__13497 = cljs.core.count.call(null, xrel) <= cljs.core.count.call(null, yrel) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel, yrel, clojure.set.map_invert.call(null, km)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel, xrel, km], null);
  var r = cljs.core.nth.call(null, vec__13497, 0, null);
  var s = cljs.core.nth.call(null, vec__13497, 1, null);
  var k = cljs.core.nth.call(null, vec__13497, 2, null);
  var idx = clojure.set.index.call(null, r, cljs.core.vals.call(null, k));
  return cljs.core.reduce.call(null, function(vec__13497, r, s, k, idx) {
    return function(ret, x) {
      var found = idx.call(null, clojure.set.rename_keys.call(null, cljs.core.select_keys.call(null, x, cljs.core.keys.call(null, k)), k));
      if (cljs.core.truth_(found)) {
        return cljs.core.reduce.call(null, function(found, vec__13497, r, s, k, idx) {
          return function(p1__13489_SHARP_, p2__13490_SHARP_) {
            return cljs.core.conj.call(null, p1__13489_SHARP_, cljs.core.merge.call(null, p2__13490_SHARP_, x));
          };
        }(found, vec__13497, r, s, k, idx), ret, found);
      } else {
        return ret;
      }
    };
  }(vec__13497, r, s, k, idx), cljs.core.PersistentHashSet.EMPTY, s);
};
clojure.set.join.cljs$lang$maxFixedArity = 3;
clojure.set.subset_QMARK_ = function clojure$set$subset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) <= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__13504_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set2, p1__13504_SHARP_);
  }, set1);
};
clojure.set.superset_QMARK_ = function clojure$set$superset_QMARK_(set1, set2) {
  return cljs.core.count.call(null, set1) >= cljs.core.count.call(null, set2) && cljs.core.every_QMARK_.call(null, function(p1__13505_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, set1, p1__13505_SHARP_);
  }, set2);
};
goog.provide("om.next.impl.parser");
goog.require("cljs.core");
goog.require("clojure.set");
goog.require("om.util");
om.next.impl.parser.symbol__GT_ast = function om$next$impl$parser$symbol__GT_ast(k) {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510), k, new cljs.core.Keyword(null, "key", "key", -1516042587), k], null);
};
om.next.impl.parser.keyword__GT_ast = function om$next$impl$parser$keyword__GT_ast(k) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "prop", "prop", -515168332), new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510), k, new cljs.core.Keyword(null, "key", "key", -1516042587), k], null);
};
om.next.impl.parser.union_entry__GT_ast = function om$next$impl$parser$union_entry__GT_ast(p__14947) {
  var vec__14951 = p__14947;
  var k = cljs.core.nth.call(null, vec__14951, 0, null);
  var v = cljs.core.nth.call(null, vec__14951, 1, null);
  var component = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "union-entry", "union-entry", 223335750), new cljs.core.Keyword(null, "union-key", "union-key", 1529707234), k, new cljs.core.Keyword(null, "query", "query", -1288509510), v, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, om.next.impl.parser.expr__GT_ast), 
  v)], null), component == null ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), component], null));
};
om.next.impl.parser.union__GT_ast = function om$next$impl$parser$union__GT_ast(m) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "union", "union", 2142937499), new cljs.core.Keyword(null, "query", "query", -1288509510), m, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, om.next.impl.parser.union_entry__GT_ast), m)], null);
};
om.next.impl.parser.call__GT_ast = function om$next$impl$parser$call__GT_ast(p__14954) {
  var vec__14959 = p__14954;
  var f = cljs.core.nth.call(null, vec__14959, 0, null);
  var args = cljs.core.nth.call(null, vec__14959, 1, null);
  var call = vec__14959;
  if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), f)) {
    return cljs.core.assoc.call(null, om.next.impl.parser.expr__GT_ast.call(null, args), new cljs.core.Keyword(null, "target", "target", 253001721), function() {
      var or__7410__auto__ = (new cljs.core.Keyword(null, "target", "target", 253001721)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, call));
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return new cljs.core.Keyword(null, "remote", "remote", -1593576576);
      }
    }());
  } else {
    var ast = cljs.core.update_in.call(null, om.next.impl.parser.expr__GT_ast.call(null, f), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "params", "params", 710516235)], null), cljs.core.merge, function() {
      var or__7410__auto__ = args;
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }());
    var G__14962 = ast;
    if ((new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510)).cljs$core$IFn$_invoke$arity$1(ast) instanceof cljs.core.Symbol) {
      return cljs.core.assoc.call(null, G__14962, new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "call", "call", -519999866));
    } else {
      return G__14962;
    }
  }
};
om.next.impl.parser.query__GT_ast = function om$next$impl$parser$query__GT_ast(query) {
  var component = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query));
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "root", "root", -448657453), new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, om.next.impl.parser.expr__GT_ast), query)], null), component == null ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", 
  "component", 1555936782), component], null));
};
om.next.impl.parser.join__GT_ast = function om$next$impl$parser$join__GT_ast(join) {
  var query_root_QMARK_ = (new cljs.core.Keyword(null, "query-root", "query-root", 359781888)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, join));
  var vec__14966 = cljs.core.first.call(null, join);
  var k = cljs.core.nth.call(null, vec__14966, 0, null);
  var v = cljs.core.nth.call(null, vec__14966, 1, null);
  var ast = om.next.impl.parser.expr__GT_ast.call(null, k);
  var component = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, v));
  return cljs.core.merge.call(null, ast, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "join", "join", -758861890), new cljs.core.Keyword(null, "query", "query", -1288509510), v], null), component == null ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), component], null), cljs.core.truth_(query_root_QMARK_) ? new cljs.core.PersistentArrayMap(null, 
  1, [new cljs.core.Keyword(null, "query-root", "query-root", 359781888), true], null) : null, typeof v === "number" || cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "...", "...", -1926939749, null), v) ? null : cljs.core.vector_QMARK_.call(null, v) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, om.next.impl.parser.expr__GT_ast), v)], null) : cljs.core.map_QMARK_.call(null, 
  v) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.next.impl.parser.union__GT_ast.call(null, v)], null)], null) : function() {
    throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid join, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(join)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("error", "invalid-join", "error/invalid-join", 1594073006)], null));
  }());
};
om.next.impl.parser.ident__GT_ast = function om$next$impl$parser$ident__GT_ast(p__14969) {
  var vec__14973 = p__14969;
  var k = cljs.core.nth.call(null, vec__14973, 0, null);
  var id = cljs.core.nth.call(null, vec__14973, 1, null);
  var ref = vec__14973;
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "prop", "prop", -515168332), new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510), k, new cljs.core.Keyword(null, "key", "key", -1516042587), ref], null);
};
om.next.impl.parser.expr__GT_ast = function om$next$impl$parser$expr__GT_ast(x) {
  if (x instanceof cljs.core.Symbol) {
    return om.next.impl.parser.symbol__GT_ast.call(null, x);
  } else {
    if (x instanceof cljs.core.Keyword) {
      return om.next.impl.parser.keyword__GT_ast.call(null, x);
    } else {
      if (cljs.core.map_QMARK_.call(null, x)) {
        return om.next.impl.parser.join__GT_ast.call(null, x);
      } else {
        if (cljs.core.vector_QMARK_.call(null, x)) {
          return om.next.impl.parser.ident__GT_ast.call(null, x);
        } else {
          if (cljs.core.seq_QMARK_.call(null, x)) {
            return om.next.impl.parser.call__GT_ast.call(null, x);
          } else {
            throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid expression "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("error", "invalid-expression", "error/invalid-expression", -881565136)], null));
          }
        }
      }
    }
  }
};
om.next.impl.parser.wrap_expr = function om$next$impl$parser$wrap_expr(root_QMARK_, expr) {
  if (cljs.core.truth_(root_QMARK_)) {
    return cljs.core.with_meta.call(null, function() {
      var G__14977 = expr;
      if (expr instanceof cljs.core.Keyword) {
        var x__8252__auto__ = G__14977;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      } else {
        return G__14977;
      }
    }(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "query-root", "query-root", 359781888), true], null));
  } else {
    return expr;
  }
};
om.next.impl.parser.ast__GT_expr = function om$next$impl$parser$ast__GT_expr(var_args) {
  var args14981 = [];
  var len__8523__auto___14998 = arguments.length;
  var i__8524__auto___14999 = 0;
  while (true) {
    if (i__8524__auto___14999 < len__8523__auto___14998) {
      args14981.push(arguments[i__8524__auto___14999]);
      var G__15000 = i__8524__auto___14999 + 1;
      i__8524__auto___14999 = G__15000;
      continue;
    } else {
    }
    break;
  }
  var G__14983 = args14981.length;
  switch(G__14983) {
    case 1:
      return om.next.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14981.length)].join(""));
  }
};
om.next.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$1 = function(ast) {
  return om.next.impl.parser.ast__GT_expr.call(null, ast, false);
};
om.next.impl.parser.ast__GT_expr.cljs$core$IFn$_invoke$arity$2 = function(p__14984, unparse_QMARK_) {
  var map__14985 = p__14984;
  var map__14985__$1 = (!(map__14985 == null) ? map__14985.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14985.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14985) : map__14985;
  var ast = map__14985__$1;
  var type = cljs.core.get.call(null, map__14985__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
  var component = cljs.core.get.call(null, map__14985__$1, new cljs.core.Keyword(null, "component", "component", 1555936782));
  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "root", "root", -448657453), type)) {
    var G__14987 = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(map__14985, map__14985__$1, ast, type, component) {
      return function(p1__14978_SHARP_) {
        return om.next.impl.parser.ast__GT_expr.call(null, p1__14978_SHARP_, unparse_QMARK_);
      };
    }(map__14985, map__14985__$1, ast, type, component)), (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(ast));
    if (!(component == null)) {
      return cljs.core.with_meta.call(null, G__14987, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), component], null));
    } else {
      return G__14987;
    }
  } else {
    var map__14988 = ast;
    var map__14988__$1 = (!(map__14988 == null) ? map__14988.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14988.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14988) : map__14988;
    var key = cljs.core.get.call(null, map__14988__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
    var query = cljs.core.get.call(null, map__14988__$1, new cljs.core.Keyword(null, "query", "query", -1288509510));
    var query_root = cljs.core.get.call(null, map__14988__$1, new cljs.core.Keyword(null, "query-root", "query-root", 359781888));
    var params = cljs.core.get.call(null, map__14988__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
    return om.next.impl.parser.wrap_expr.call(null, query_root, !(params == null) ? function() {
      var expr = om.next.impl.parser.ast__GT_expr.call(null, cljs.core.dissoc.call(null, ast, new cljs.core.Keyword(null, "params", "params", 710516235)), unparse_QMARK_);
      if (!cljs.core.empty_QMARK_.call(null, params)) {
        var x__8252__auto__ = expr;
        return cljs.core._conj.call(null, function() {
          var x__8252__auto____$1 = params;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
        }(), x__8252__auto__);
      } else {
        var x__8252__auto__ = expr;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }
    }() : cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "join", "join", -758861890), type) ? cljs.core.not_EQ_.call(null, new cljs.core.Symbol(null, "...", "...", -1926939749, null), query) && !(typeof query === "number") && unparse_QMARK_ === true ? function() {
      var map__14990 = ast;
      var map__14990__$1 = (!(map__14990 == null) ? map__14990.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14990.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14990) : map__14990;
      var children = cljs.core.get.call(null, map__14990__$1, new cljs.core.Keyword(null, "children", "children", -940561982));
      if (1 === cljs.core.count.call(null, children) && cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "union", "union", 2142937499), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, children)))) {
        return cljs.core.PersistentArrayMap.createAsIfByAssoc([key, cljs.core.into.call(null, function() {
          var G__14992 = cljs.core.PersistentArrayMap.EMPTY;
          if (cljs.core.truth_(component)) {
            return cljs.core.with_meta.call(null, G__14992, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), component], null));
          } else {
            return G__14992;
          }
        }(), cljs.core.map.call(null, function(map__14990, map__14990__$1, children, map__14988, map__14988__$1, key, query, query_root, params, map__14985, map__14985__$1, ast, type, component) {
          return function(p__14993) {
            var map__14994 = p__14993;
            var map__14994__$1 = (!(map__14994 == null) ? map__14994.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14994.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14994) : map__14994;
            var union_key = cljs.core.get.call(null, map__14994__$1, new cljs.core.Keyword(null, "union-key", "union-key", 1529707234));
            var children__$1 = cljs.core.get.call(null, map__14994__$1, new cljs.core.Keyword(null, "children", "children", -940561982));
            var component__$1 = cljs.core.get.call(null, map__14994__$1, new cljs.core.Keyword(null, "component", "component", 1555936782));
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [union_key, function() {
              var G__14996 = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(map__14994, map__14994__$1, union_key, children__$1, component__$1, map__14990, map__14990__$1, children, map__14988, map__14988__$1, key, query, query_root, params, map__14985, map__14985__$1, ast, type, component) {
                return function(p1__14979_SHARP_) {
                  return om.next.impl.parser.ast__GT_expr.call(null, p1__14979_SHARP_, unparse_QMARK_);
                };
              }(map__14994, map__14994__$1, union_key, children__$1, component__$1, map__14990, map__14990__$1, children, map__14988, map__14988__$1, key, query, query_root, params, map__14985, map__14985__$1, ast, type, component)), children__$1);
              if (!(component__$1 == null)) {
                return cljs.core.with_meta.call(null, G__14996, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), component__$1], null));
              } else {
                return G__14996;
              }
            }()], null);
          };
        }(map__14990, map__14990__$1, children, map__14988, map__14988__$1, key, query, query_root, params, map__14985, map__14985__$1, ast, type, component)), (new cljs.core.Keyword(null, "children", "children", -940561982)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, children)))]);
      } else {
        return cljs.core.PersistentArrayMap.createAsIfByAssoc([key, function() {
          var G__14997 = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(map__14990, map__14990__$1, children, map__14988, map__14988__$1, key, query, query_root, params, map__14985, map__14985__$1, ast, type, component) {
            return function(p1__14980_SHARP_) {
              return om.next.impl.parser.ast__GT_expr.call(null, p1__14980_SHARP_, unparse_QMARK_);
            };
          }(map__14990, map__14990__$1, children, map__14988, map__14988__$1, key, query, query_root, params, map__14985, map__14985__$1, ast, type, component)), children);
          if (!(component == null)) {
            return cljs.core.with_meta.call(null, G__14997, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), component], null));
          } else {
            return G__14997;
          }
        }()]);
      }
    }() : cljs.core.PersistentArrayMap.createAsIfByAssoc([key, query]) : key);
  }
};
om.next.impl.parser.ast__GT_expr.cljs$lang$maxFixedArity = 2;
om.next.impl.parser.path_meta = function om$next$impl$parser$path_meta(var_args) {
  var args15002 = [];
  var len__8523__auto___15016 = arguments.length;
  var i__8524__auto___15017 = 0;
  while (true) {
    if (i__8524__auto___15017 < len__8523__auto___15016) {
      args15002.push(arguments[i__8524__auto___15017]);
      var G__15018 = i__8524__auto___15017 + 1;
      i__8524__auto___15017 = G__15018;
      continue;
    } else {
    }
    break;
  }
  var G__15004 = args15002.length;
  switch(G__15004) {
    case 3:
      return om.next.impl.parser.path_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.impl.parser.path_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args15002.length)].join(""));
  }
};
om.next.impl.parser.path_meta.cljs$core$IFn$_invoke$arity$3 = function(data, path, query) {
  return om.next.impl.parser.path_meta.call(null, data, path, query, null);
};
om.next.impl.parser.path_meta.cljs$core$IFn$_invoke$arity$4 = function(data, path, query, union_expr) {
  if (query == null) {
    var G__15005 = data;
    if (!(data == null) ? data.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === data.cljs$core$IWithMeta$ ? true : !data.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, data) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, data)) {
      return cljs.core.vary_meta.call(null, G__15005, cljs.core.assoc, new cljs.core.Keyword(null, "om-path", "om-path", -1911443978), path);
    } else {
      return G__15005;
    }
  } else {
    if (cljs.core.sequential_QMARK_.call(null, data)) {
      return cljs.core.vary_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map_indexed.call(null, function(idx, v) {
        return om.next.impl.parser.path_meta.call(null, v, cljs.core.conj.call(null, path, idx), query, union_expr);
      }), data), cljs.core.assoc, new cljs.core.Keyword(null, "om-path", "om-path", -1911443978), path);
    } else {
      if (cljs.core.vector_QMARK_.call(null, query)) {
        var joins = cljs.core.seq.call(null, query);
        var ret = data;
        while (true) {
          if (!(joins == null)) {
            var join = cljs.core.first.call(null, joins);
            if (cljs.core.not.call(null, function() {
              var or__7410__auto__ = om.util.join_QMARK_.call(null, join);
              if (cljs.core.truth_(or__7410__auto__)) {
                return or__7410__auto__;
              } else {
                return om.util.ident_QMARK_.call(null, join) || cljs.core.seq_QMARK_.call(null, join) && om.util.ident_QMARK_.call(null, cljs.core.first.call(null, join));
              }
            }())) {
              var G__15020 = cljs.core.next.call(null, joins);
              var G__15021 = ret;
              joins = G__15020;
              ret = G__15021;
              continue;
            } else {
              var join__$1 = function() {
                var G__15010 = join;
                if (cljs.core.seq_QMARK_.call(null, join)) {
                  return cljs.core.first.call(null, G__15010);
                } else {
                  return G__15010;
                }
              }();
              var join__$2 = function() {
                var G__15011 = join__$1;
                if (om.util.ident_QMARK_.call(null, join__$1)) {
                  return cljs.core.PersistentHashMap.fromArrays([G__15011], [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", 345799209, null)], null)]);
                } else {
                  return G__15011;
                }
              }();
              var vec__15007 = om.util.join_entry.call(null, join__$2);
              var key = cljs.core.nth.call(null, vec__15007, 0, null);
              var sel = cljs.core.nth.call(null, vec__15007, 1, null);
              var union_entry = om.util.union_QMARK_.call(null, join__$2) ? sel : union_expr;
              var sel__$1 = om.util.recursion_QMARK_.call(null, sel) ? !(union_expr == null) ? union_entry : query : sel;
              var key__$1 = function() {
                var G__15012 = key;
                if (om.util.unique_ident_QMARK_.call(null, key)) {
                  return cljs.core.first.call(null, G__15012);
                } else {
                  return G__15012;
                }
              }();
              var v = cljs.core.get.call(null, ret, key__$1);
              var G__15022 = cljs.core.next.call(null, joins);
              var G__15023 = function() {
                var G__15013 = ret;
                if (cljs.core.map_QMARK_.call(null, ret) && cljs.core.contains_QMARK_.call(null, ret, key__$1)) {
                  return cljs.core.assoc.call(null, G__15013, key__$1, om.next.impl.parser.path_meta.call(null, v, cljs.core.conj.call(null, path, key__$1), sel__$1, union_entry));
                } else {
                  return G__15013;
                }
              }();
              joins = G__15022;
              ret = G__15023;
              continue;
            }
          } else {
            var G__15014 = ret;
            if (!(ret == null) ? ret.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === ret.cljs$core$IWithMeta$ ? true : !ret.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, ret) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, ret)) {
              return cljs.core.vary_meta.call(null, G__15014, cljs.core.assoc, new cljs.core.Keyword(null, "om-path", "om-path", -1911443978), path);
            } else {
              return G__15014;
            }
          }
          break;
        }
      } else {
        if (cljs.core.map_QMARK_.call(null, data)) {
          var dispatch_key = cljs.core.comp.call(null, new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510), om.next.impl.parser.expr__GT_ast);
          var branches = cljs.core.vals.call(null, query);
          var props = cljs.core.map.call(null, dispatch_key, cljs.core.keys.call(null, data));
          var query__$1 = cljs.core.reduce.call(null, function(dispatch_key, branches, props) {
            return function(ret, q) {
              var query_props = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.map.call(null, dispatch_key), q);
              var props__$1 = cljs.core.set.call(null, props);
              if (cljs.core._EQ_.call(null, cljs.core.set.call(null, props__$1), cljs.core.set.call(null, query_props))) {
                return cljs.core.reduced.call(null, q);
              } else {
                if (cljs.core.truth_(clojure.set.subset_QMARK_.call(null, props__$1, query_props))) {
                  return q;
                } else {
                  return ret;
                }
              }
            };
          }(dispatch_key, branches, props), null, branches);
          return om.next.impl.parser.path_meta.call(null, data, path, query__$1, union_expr);
        } else {
          return data;
        }
      }
    }
  }
};
om.next.impl.parser.path_meta.cljs$lang$maxFixedArity = 4;
om.next.impl.parser.rethrow_QMARK_ = function om$next$impl$parser$rethrow_QMARK_(x) {
  return x instanceof cljs.core.ExceptionInfo && cljs.core._EQ_.call(null, new cljs.core.Keyword("om.next", "abort", "om.next/abort", -897542671), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(cljs.core.ex_data.call(null, x)));
};
om.next.impl.parser.parser = function om$next$impl$parser$parser(p__15024) {
  var map__15099 = p__15024;
  var map__15099__$1 = (!(map__15099 == null) ? map__15099.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__15099.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15099) : map__15099;
  var config = map__15099__$1;
  var read = cljs.core.get.call(null, map__15099__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  var mutate = cljs.core.get.call(null, map__15099__$1, new cljs.core.Keyword(null, "mutate", "mutate", 1422419038));
  return function(map__15099, map__15099__$1, config, read, mutate) {
    return function() {
      var om$next$impl$parser$parser_$_self = null;
      var om$next$impl$parser$parser_$_self__2 = function(env, query) {
        return om$next$impl$parser$parser_$_self.call(null, env, query, null);
      };
      var om$next$impl$parser$parser_$_self__3 = function(env, query, target) {
        var elide_paths_QMARK_ = function() {
          var or__7410__auto__ = (new cljs.core.Keyword(null, "elide-paths", "elide-paths", -1165465185)).cljs$core$IFn$_invoke$arity$1(config);
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return (new cljs.core.Keyword(null, "query-root", "query-root", 359781888)).cljs$core$IFn$_invoke$arity$1(env);
          }
        }();
        var map__15137 = function() {
          var G__15138 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "parser", "parser", -1543495310), om$next$impl$parser$parser_$_self, new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "query-root", "query-root", 359781888), new cljs.core.Keyword("om.next", "root", "om.next/root", -1714259778));
          if (!cljs.core.contains_QMARK_.call(null, env, new cljs.core.Keyword(null, "path", "path", -188191168))) {
            return cljs.core.assoc.call(null, G__15138, new cljs.core.Keyword(null, "path", "path", -188191168), cljs.core.PersistentVector.EMPTY);
          } else {
            return G__15138;
          }
        }();
        var map__15137__$1 = (!(map__15137 == null) ? map__15137.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__15137.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15137) : map__15137;
        var env__$1 = map__15137__$1;
        var path = cljs.core.get.call(null, map__15137__$1, new cljs.core.Keyword(null, "path", "path", -188191168));
        var step = function(elide_paths_QMARK_, map__15137, map__15137__$1, env__$1, path, map__15099, map__15099__$1, config, read, mutate) {
          return function om$next$impl$parser$parser_$_self_$_step(ret, expr) {
            var map__15164 = om.next.impl.parser.expr__GT_ast.call(null, expr);
            var map__15164__$1 = (!(map__15164 == null) ? map__15164.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__15164.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__15164) : map__15164;
            var ast = map__15164__$1;
            var query_SINGLEQUOTE_ = cljs.core.get.call(null, map__15164__$1, new cljs.core.Keyword(null, "query", "query", -1288509510));
            var key = cljs.core.get.call(null, map__15164__$1, new cljs.core.Keyword(null, "key", "key", -1516042587));
            var dispatch_key = cljs.core.get.call(null, map__15164__$1, new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510));
            var params = cljs.core.get.call(null, map__15164__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
            var env__$2 = function() {
              var G__15166 = cljs.core.merge.call(null, env__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ast", "ast", -860334068), ast, new cljs.core.Keyword(null, "query", "query", -1288509510), query_SINGLEQUOTE_], null));
              var G__15166__$1 = query_SINGLEQUOTE_ == null ? cljs.core.dissoc.call(null, G__15166, new cljs.core.Keyword(null, "query", "query", -1288509510)) : G__15166;
              var G__15166__$2 = cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "...", "...", -1926939749, null), query_SINGLEQUOTE_) ? cljs.core.assoc.call(null, G__15166__$1, new cljs.core.Keyword(null, "query", "query", -1288509510), query) : G__15166__$1;
              if (cljs.core.vector_QMARK_.call(null, key)) {
                return cljs.core.assoc.call(null, G__15166__$2, new cljs.core.Keyword(null, "query-root", "query-root", 359781888), key);
              } else {
                return G__15166__$2;
              }
            }();
            var type = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(ast);
            var call_QMARK_ = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "call", "call", -519999866), type);
            var res = function() {
              var G__15167 = type instanceof cljs.core.Keyword ? type.fqn : null;
              switch(G__15167) {
                case "call":
                  if (cljs.core.truth_(mutate)) {
                  } else {
                    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Parse mutation attempted but no :mutate function supplied"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("mutate")].join(""));
                  }
                  return mutate.call(null, env__$2, dispatch_key, params);
                  break;
                case "prop":
                  if (cljs.core.truth_(read)) {
                  } else {
                    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Parse read attempted but no :read function supplied"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("read")].join(""));
                  }
                  return read.call(null, env__$2, dispatch_key, params);
                  break;
                case "join":
                  if (cljs.core.truth_(read)) {
                  } else {
                    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Parse read attempted but no :read function supplied"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("read")].join(""));
                  }
                  return read.call(null, env__$2, dispatch_key, params);
                  break;
                case "union":
                  if (cljs.core.truth_(read)) {
                  } else {
                    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Parse read attempted but no :read function supplied"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("read")].join(""));
                  }
                  return read.call(null, env__$2, dispatch_key, params);
                  break;
                default:
                  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(type)].join(""));
              }
            }();
            if (!(target == null)) {
              var ast_SINGLEQUOTE_ = cljs.core.get.call(null, res, target);
              var G__15168 = ret;
              var G__15168__$1 = ast_SINGLEQUOTE_ === true ? cljs.core.conj.call(null, G__15168, expr) : G__15168;
              if (cljs.core.map_QMARK_.call(null, ast_SINGLEQUOTE_)) {
                return cljs.core.conj.call(null, G__15168__$1, om.next.impl.parser.ast__GT_expr.call(null, ast_SINGLEQUOTE_));
              } else {
                return G__15168__$1;
              }
            } else {
              if (!(call_QMARK_ || (new cljs.core.Keyword(null, "target", "target", 253001721)).cljs$core$IFn$_invoke$arity$1(ast) == null || cljs.core.contains_QMARK_.call(null, res, new cljs.core.Keyword(null, "value", "value", 305978217)))) {
                return ret;
              } else {
                var error = cljs.core.atom.call(null, null);
                var mut_ret = cljs.core.atom.call(null, null);
                if (call_QMARK_ && !((new cljs.core.Keyword(null, "action", "action", -811238024)).cljs$core$IFn$_invoke$arity$1(res) == null)) {
                  try {
                    cljs.core.reset_BANG_.call(null, mut_ret, (new cljs.core.Keyword(null, "action", "action", -811238024)).cljs$core$IFn$_invoke$arity$1(res).call(null));
                  } catch (e15169) {
                    var e_15174 = e15169;
                    if (cljs.core.truth_(om.next.impl.parser.rethrow_QMARK_.call(null, e_15174))) {
                      throw e_15174;
                    } else {
                      cljs.core.reset_BANG_.call(null, error, e_15174);
                    }
                  }
                } else {
                }
                var value = (new cljs.core.Keyword(null, "value", "value", 305978217)).cljs$core$IFn$_invoke$arity$1(res);
                if (call_QMARK_) {
                  if (value == null || cljs.core.map_QMARK_.call(null, value)) {
                  } else {
                    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_key), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" mutation :value must be nil or a map with structure {:keys [...]}")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(or (nil? value) (map? value))")].join(""));
                  }
                } else {
                }
                var G__15170 = ret;
                var G__15170__$1 = !(value == null) ? cljs.core.assoc.call(null, G__15170, function() {
                  var G__15171 = key;
                  if (om.util.unique_ident_QMARK_.call(null, key)) {
                    return cljs.core.first.call(null, G__15171);
                  } else {
                    return G__15171;
                  }
                }(), value) : G__15170;
                var G__15170__$2 = cljs.core.truth_(cljs.core.deref.call(null, mut_ret)) ? cljs.core.assoc_in.call(null, G__15170__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, new cljs.core.Keyword(null, "result", "result", 1415092211)], null), cljs.core.deref.call(null, mut_ret)) : G__15170__$1;
                if (cljs.core.truth_(cljs.core.deref.call(null, error))) {
                  return cljs.core.assoc.call(null, G__15170__$2, key, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword("om.next", "error", "om.next/error", -1841983205), cljs.core.deref.call(null, error)], null));
                } else {
                  return G__15170__$2;
                }
              }
            }
          };
        }(elide_paths_QMARK_, map__15137, map__15137__$1, env__$1, path, map__15099, map__15099__$1, config, read, mutate);
        var G__15172 = cljs.core.reduce.call(null, step, target == null ? cljs.core.PersistentArrayMap.EMPTY : cljs.core.PersistentVector.EMPTY, query);
        if (target == null && cljs.core.not.call(null, elide_paths_QMARK_)) {
          return om.next.impl.parser.path_meta.call(null, G__15172, path, query);
        } else {
          return G__15172;
        }
      };
      om$next$impl$parser$parser_$_self = function(env, query, target) {
        switch(arguments.length) {
          case 2:
            return om$next$impl$parser$parser_$_self__2.call(this, env, query);
          case 3:
            return om$next$impl$parser$parser_$_self__3.call(this, env, query, target);
        }
        throw new Error("Invalid arity: " + (arguments.length - 1));
      };
      om$next$impl$parser$parser_$_self.cljs$core$IFn$_invoke$arity$2 = om$next$impl$parser$parser_$_self__2;
      om$next$impl$parser$parser_$_self.cljs$core$IFn$_invoke$arity$3 = om$next$impl$parser$parser_$_self__3;
      return om$next$impl$parser$parser_$_self;
    }();
  }(map__15099, map__15099__$1, config, read, mutate);
};
om.next.impl.parser.dispatch = function om$next$impl$parser$dispatch(_, k, ___$1) {
  return k;
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (col.getCount && typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (col.getValues && typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (col.getKeys && typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (col.getValues && typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (col.contains && typeof col.contains == "function") {
    return col.contains(val);
  }
  if (col.containsValue && typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (col.isEmpty && typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (col.clear && typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (col.forEach && typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call((opt_obj), values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call((opt_obj), values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call((opt_obj), values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call((opt_obj), values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call((opt_obj), values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call((opt_obj), values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.partialRight = function(fn, var_args) {
  var rightArgs = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.push.apply(newArgs, rightArgs);
    return fn.apply(this, newArgs);
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function(value, opt_useLooseComparison) {
  return function(other) {
    return opt_useLooseComparison ? value == other : value === other;
  };
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return !f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.functions.once = function(f) {
  var inner = f;
  return function() {
    if (inner) {
      var tmp = inner;
      inner = null;
      tmp();
    }
  };
};
goog.functions.debounce = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  return (function(var_args) {
    goog.global.clearTimeout(timeout);
    var args = arguments;
    timeout = goog.global.setTimeout(function() {
      f.apply(null, args);
    }, interval);
  });
};
goog.functions.throttle = function(f, interval, opt_scope) {
  if (opt_scope) {
    f = goog.bind(f, opt_scope);
  }
  var timeout = null;
  var shouldFire = false;
  var args = [];
  var handleTimeout = function() {
    timeout = null;
    if (shouldFire) {
      shouldFire = false;
      fire();
    }
  };
  var fire = function() {
    timeout = goog.global.setTimeout(handleTimeout, interval);
    f.apply(null, args);
  };
  return (function(var_args) {
    args = arguments;
    if (!timeout) {
      fire();
    } else {
      shouldFire = true;
    }
  });
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global["StopIteration"] : {message:"StopIteration", stack:""};
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var val = iterator.next();
    if (f.call(opt_obj, val, undefined, iterator)) {
      return val;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2, opt_equalsFn) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  return goog.iter.every(pairs, function(pair) {
    return equalsFn(pair[0], pair[1]);
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return !arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return !!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return [];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return !goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return (this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push((key));
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (version != selfObj.version_) {
      throw Error("The map has changed since the iterator was created");
    }
    if (i >= selfObj.keys_.length) {
      throw goog.iter.StopIteration;
    }
    var key = selfObj.keys_[i++];
    return opt_keys ? key : selfObj.map_[key];
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.html.SafeHtml");
goog.require("goog.html.SafeUrl");
goog.require("goog.html.uncheckedconversions");
goog.require("goog.string.Const");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.define("goog.debug.FORCE_SLOPPY_STACKS", false);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  var html = goog.debug.exposeExceptionAsHtml(err, opt_fn);
  return goog.html.SafeHtml.unwrap(html);
};
goog.debug.exposeExceptionAsHtml = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var viewSourceUrl = goog.debug.createViewSourceUrl_(e.fileName);
    var error = goog.html.SafeHtml.concat(goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Message: " + e.message + "\nUrl: "), goog.html.SafeHtml.create("a", {href:viewSourceUrl, target:"_new"}, e.fileName), goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + e.stack + "-\x3e " + "[end]\n\nJS stack traversal:\n" + goog.debug.getStacktrace(opt_fn) + "-\x3e "));
    return error;
  } catch (e2) {
    return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces("Exception trying to expose exception! You win, we lose. " + e2);
  }
};
goog.debug.createViewSourceUrl_ = function(opt_fileName) {
  if (!goog.isDefAndNotNull(opt_fileName)) {
    opt_fileName = "";
  }
  if (!/^https?:\/\//i.test(opt_fileName)) {
    return goog.html.SafeUrl.fromConstant(goog.string.Const.from("sanitizedviewsrc"));
  }
  var sanitizedFileName = goog.html.SafeUrl.sanitize(opt_fileName);
  return goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("view-source scheme plus HTTP/HTTPS URL"), "view-source:" + goog.html.SafeUrl.unwrap(sanitizedFileName));
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return {"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return {"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return (err);
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (!goog.debug.FORCE_SLOPPY_STACKS) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.runtimeType = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1000);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in (goog.debug.Logger.Level.predefinedLevelsCache_)) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return !!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    logRecord.setException(opt_exception);
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.debug.RelativeTimeProvider");
goog.debug.RelativeTimeProvider = function() {
  this.relativeTimeStart_ = goog.now();
};
goog.debug.RelativeTimeProvider.defaultInstance_ = new goog.debug.RelativeTimeProvider;
goog.debug.RelativeTimeProvider.prototype.set = function(timeStamp) {
  this.relativeTimeStart_ = timeStamp;
};
goog.debug.RelativeTimeProvider.prototype.reset = function() {
  this.set(goog.now());
};
goog.debug.RelativeTimeProvider.prototype.get = function() {
  return this.relativeTimeStart_;
};
goog.debug.RelativeTimeProvider.getDefaultInstance = function() {
  return goog.debug.RelativeTimeProvider.defaultInstance_;
};
goog.provide("goog.debug.Formatter");
goog.provide("goog.debug.HtmlFormatter");
goog.provide("goog.debug.TextFormatter");
goog.require("goog.debug");
goog.require("goog.debug.Logger");
goog.require("goog.debug.RelativeTimeProvider");
goog.require("goog.html.SafeHtml");
goog.debug.Formatter = function(opt_prefix) {
  this.prefix_ = opt_prefix || "";
  this.startTimeProvider_ = goog.debug.RelativeTimeProvider.getDefaultInstance();
};
goog.debug.Formatter.prototype.appendNewline = true;
goog.debug.Formatter.prototype.showAbsoluteTime = true;
goog.debug.Formatter.prototype.showRelativeTime = true;
goog.debug.Formatter.prototype.showLoggerName = true;
goog.debug.Formatter.prototype.showExceptionText = false;
goog.debug.Formatter.prototype.showSeverityLevel = false;
goog.debug.Formatter.prototype.formatRecord = goog.abstractMethod;
goog.debug.Formatter.prototype.formatRecordAsHtml = goog.abstractMethod;
goog.debug.Formatter.prototype.setStartTimeProvider = function(provider) {
  this.startTimeProvider_ = provider;
};
goog.debug.Formatter.prototype.getStartTimeProvider = function() {
  return this.startTimeProvider_;
};
goog.debug.Formatter.prototype.resetRelativeTimeStart = function() {
  this.startTimeProvider_.reset();
};
goog.debug.Formatter.getDateTimeStamp_ = function(logRecord) {
  var time = new Date(logRecord.getMillis());
  return goog.debug.Formatter.getTwoDigitString_(time.getFullYear() - 2000) + goog.debug.Formatter.getTwoDigitString_(time.getMonth() + 1) + goog.debug.Formatter.getTwoDigitString_(time.getDate()) + " " + goog.debug.Formatter.getTwoDigitString_(time.getHours()) + ":" + goog.debug.Formatter.getTwoDigitString_(time.getMinutes()) + ":" + goog.debug.Formatter.getTwoDigitString_(time.getSeconds()) + "." + goog.debug.Formatter.getTwoDigitString_(Math.floor(time.getMilliseconds() / 10));
};
goog.debug.Formatter.getTwoDigitString_ = function(n) {
  if (n < 10) {
    return "0" + n;
  }
  return String(n);
};
goog.debug.Formatter.getRelativeTime_ = function(logRecord, relativeTimeStart) {
  var ms = logRecord.getMillis() - relativeTimeStart;
  var sec = ms / 1000;
  var str = sec.toFixed(3);
  var spacesToPrepend = 0;
  if (sec < 1) {
    spacesToPrepend = 2;
  } else {
    while (sec < 100) {
      spacesToPrepend++;
      sec *= 10;
    }
  }
  while (spacesToPrepend-- > 0) {
    str = " " + str;
  }
  return str;
};
goog.debug.HtmlFormatter = function(opt_prefix) {
  goog.debug.Formatter.call(this, opt_prefix);
};
goog.inherits(goog.debug.HtmlFormatter, goog.debug.Formatter);
goog.debug.HtmlFormatter.prototype.showExceptionText = true;
goog.debug.HtmlFormatter.prototype.formatRecord = function(logRecord) {
  if (!logRecord) {
    return "";
  }
  return this.formatRecordAsHtml(logRecord).getTypedStringValue();
};
goog.debug.HtmlFormatter.prototype.formatRecordAsHtml = function(logRecord) {
  if (!logRecord) {
    return goog.html.SafeHtml.EMPTY;
  }
  var className;
  switch(logRecord.getLevel().value) {
    case goog.debug.Logger.Level.SHOUT.value:
      className = "dbg-sh";
      break;
    case goog.debug.Logger.Level.SEVERE.value:
      className = "dbg-sev";
      break;
    case goog.debug.Logger.Level.WARNING.value:
      className = "dbg-w";
      break;
    case goog.debug.Logger.Level.INFO.value:
      className = "dbg-i";
      break;
    case goog.debug.Logger.Level.FINE.value:
    default:
      className = "dbg-f";
      break;
  }
  var sb = [];
  sb.push(this.prefix_, " ");
  if (this.showAbsoluteTime) {
    sb.push("[", goog.debug.Formatter.getDateTimeStamp_(logRecord), "] ");
  }
  if (this.showRelativeTime) {
    sb.push("[", goog.debug.Formatter.getRelativeTime_(logRecord, this.startTimeProvider_.get()), "s] ");
  }
  if (this.showLoggerName) {
    sb.push("[", logRecord.getLoggerName(), "] ");
  }
  if (this.showSeverityLevel) {
    sb.push("[", logRecord.getLevel().name, "] ");
  }
  var fullPrefixHtml = goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(sb.join(""));
  var exceptionHtml = goog.html.SafeHtml.EMPTY;
  if (this.showExceptionText && logRecord.getException()) {
    exceptionHtml = goog.html.SafeHtml.concat(goog.html.SafeHtml.BR, goog.debug.exposeExceptionAsHtml(logRecord.getException()));
  }
  var logRecordHtml = goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(logRecord.getMessage());
  var recordAndExceptionHtml = goog.html.SafeHtml.create("span", {"class":className}, goog.html.SafeHtml.concat(logRecordHtml, exceptionHtml));
  var html;
  if (this.appendNewline) {
    html = goog.html.SafeHtml.concat(fullPrefixHtml, recordAndExceptionHtml, goog.html.SafeHtml.BR);
  } else {
    html = goog.html.SafeHtml.concat(fullPrefixHtml, recordAndExceptionHtml);
  }
  return html;
};
goog.debug.TextFormatter = function(opt_prefix) {
  goog.debug.Formatter.call(this, opt_prefix);
};
goog.inherits(goog.debug.TextFormatter, goog.debug.Formatter);
goog.debug.TextFormatter.prototype.formatRecord = function(logRecord) {
  var sb = [];
  sb.push(this.prefix_, " ");
  if (this.showAbsoluteTime) {
    sb.push("[", goog.debug.Formatter.getDateTimeStamp_(logRecord), "] ");
  }
  if (this.showRelativeTime) {
    sb.push("[", goog.debug.Formatter.getRelativeTime_(logRecord, this.startTimeProvider_.get()), "s] ");
  }
  if (this.showLoggerName) {
    sb.push("[", logRecord.getLoggerName(), "] ");
  }
  if (this.showSeverityLevel) {
    sb.push("[", logRecord.getLevel().name, "] ");
  }
  sb.push(logRecord.getMessage());
  if (this.showExceptionText) {
    var exception = logRecord.getException();
    if (exception) {
      var exceptionText = exception instanceof Error ? exception.message : exception.toString();
      sb.push("\n", exceptionText);
    }
  }
  if (this.appendNewline) {
    sb.push("\n");
  }
  return sb.join("");
};
goog.debug.TextFormatter.prototype.formatRecordAsHtml = function(logRecord) {
  return goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces(goog.debug.TextFormatter.prototype.formatRecord(logRecord));
};
goog.provide("goog.debug.Console");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.Logger");
goog.require("goog.debug.TextFormatter");
goog.debug.Console = function() {
  this.publishHandler_ = goog.bind(this.addLogRecord, this);
  this.formatter_ = new goog.debug.TextFormatter;
  this.formatter_.showAbsoluteTime = false;
  this.formatter_.showExceptionText = false;
  this.formatter_.appendNewline = false;
  this.isCapturing_ = false;
  this.logBuffer_ = "";
  this.filteredLoggers_ = {};
};
goog.debug.Console.prototype.getFormatter = function() {
  return this.formatter_;
};
goog.debug.Console.prototype.setCapturing = function(capturing) {
  if (capturing == this.isCapturing_) {
    return;
  }
  var rootLogger = goog.debug.LogManager.getRoot();
  if (capturing) {
    rootLogger.addHandler(this.publishHandler_);
  } else {
    rootLogger.removeHandler(this.publishHandler_);
    this.logBuffer = "";
  }
  this.isCapturing_ = capturing;
};
goog.debug.Console.prototype.addLogRecord = function(logRecord) {
  if (this.filteredLoggers_[logRecord.getLoggerName()]) {
    return;
  }
  var record = this.formatter_.formatRecord(logRecord);
  var console = goog.debug.Console.console_;
  if (console) {
    switch(logRecord.getLevel()) {
      case goog.debug.Logger.Level.SHOUT:
        goog.debug.Console.logToConsole_(console, "info", record);
        break;
      case goog.debug.Logger.Level.SEVERE:
        goog.debug.Console.logToConsole_(console, "error", record);
        break;
      case goog.debug.Logger.Level.WARNING:
        goog.debug.Console.logToConsole_(console, "warn", record);
        break;
      default:
        goog.debug.Console.logToConsole_(console, "debug", record);
        break;
    }
  } else {
    this.logBuffer_ += record;
  }
};
goog.debug.Console.prototype.addFilter = function(loggerName) {
  this.filteredLoggers_[loggerName] = true;
};
goog.debug.Console.prototype.removeFilter = function(loggerName) {
  delete this.filteredLoggers_[loggerName];
};
goog.debug.Console.instance = null;
goog.debug.Console.console_ = goog.global["console"];
goog.debug.Console.setConsole = function(console) {
  goog.debug.Console.console_ = (console);
};
goog.debug.Console.autoInstall = function() {
  if (!goog.debug.Console.instance) {
    goog.debug.Console.instance = new goog.debug.Console;
  }
  if (goog.global.location && goog.global.location.href.indexOf("Debug\x3dtrue") != -1) {
    goog.debug.Console.instance.setCapturing(true);
  }
};
goog.debug.Console.show = function() {
  alert(goog.debug.Console.instance.logBuffer_);
};
goog.debug.Console.logToConsole_ = function(console, fnName, record) {
  if (console[fnName]) {
    console[fnName](record);
  } else {
    console.log(record);
  }
};
goog.provide("cljs.env");
goog.require("cljs.core");
cljs.env._STAR_compiler_STAR_ = null;
cljs.env.default_compiler_env = function cljs$env$default_compiler_env(var_args) {
  var args13424 = [];
  var len__8523__auto___13427 = arguments.length;
  var i__8524__auto___13428 = 0;
  while (true) {
    if (i__8524__auto___13428 < len__8523__auto___13427) {
      args13424.push(arguments[i__8524__auto___13428]);
      var G__13429 = i__8524__auto___13428 + 1;
      i__8524__auto___13428 = G__13429;
      continue;
    } else {
    }
    break;
  }
  var G__13426 = args13424.length;
  switch(G__13426) {
    case 0:
      return cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13424.length)].join(""));
  }
};
cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.env.default_compiler_env.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$1 = function(options) {
  return cljs.core.atom.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null)], null)], null), new cljs.core.Keyword("cljs.analyzer", 
  "constant-table", "cljs.analyzer/constant-table", -114131889), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword("cljs.analyzer", "data-readers", "cljs.analyzer/data-readers", 1778544933), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword("cljs.analyzer", "externs", "cljs.analyzer/externs", 893359239), null, new cljs.core.Keyword(null, "options", "options", 99638489), options], null)));
};
cljs.env.default_compiler_env.cljs$lang$maxFixedArity = 1;
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__12926__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__12926 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__12927__i = 0, G__12927__a = new Array(arguments.length - 0);
        while (G__12927__i < G__12927__a.length) {
          G__12927__a[G__12927__i] = arguments[G__12927__i + 0];
          ++G__12927__i;
        }
        args = new cljs.core.IndexedSeq(G__12927__a, 0);
      }
      return G__12926__delegate.call(this, args);
    };
    G__12926.cljs$lang$maxFixedArity = 0;
    G__12926.cljs$lang$applyTo = function(arglist__12928) {
      var args = cljs.core.seq(arglist__12928);
      return G__12926__delegate(args);
    };
    G__12926.cljs$core$IFn$_invoke$arity$variadic = G__12926__delegate;
    return G__12926;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid match arg: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args12929 = [];
  var len__8523__auto___12932 = arguments.length;
  var i__8524__auto___12933 = 0;
  while (true) {
    if (i__8524__auto___12933 < len__8523__auto___12932) {
      args12929.push(arguments[i__8524__auto___12933]);
      var G__12934 = i__8524__auto___12933 + 1;
      i__8524__auto___12933 = G__12934;
      continue;
    } else {
    }
    break;
  }
  var G__12931 = args12929.length;
  switch(G__12931) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12929.length)].join(""));
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__12936 = sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, coll__$1))].join(""));
      var G__12937 = cljs.core.next.call(null, coll__$1);
      sb = G__12936;
      coll__$1 = G__12937;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__12938 = sb;
      var G__12939 = coll__$2;
      sb = G__12938;
      coll__$1 = G__12939;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__12940 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__12940;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit && 1 < cljs.core.count.call(null, v)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__12944 = cljs.core._EQ__EQ_;
    var expr__12945 = limit;
    if (cljs.core.truth_(pred__12944.call(null, 1, expr__12945))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__12944.call(null, 2, expr__12945))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args12947 = [];
  var len__8523__auto___12950 = arguments.length;
  var i__8524__auto___12951 = 0;
  while (true) {
    if (i__8524__auto___12951 < len__8523__auto___12950) {
      args12947.push(arguments[i__8524__auto___12951]);
      var G__12952 = i__8524__auto___12951 + 1;
      i__8524__auto___12951 = G__12952;
      continue;
    } else {
    }
    break;
  }
  var G__12949 = args12947.length;
  switch(G__12949) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12947.length)].join(""));
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str.cljs$core$IFn$_invoke$arity$1(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__12954 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__12955 = limit__$1 - 1;
          var G__12956 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__12954;
          limit__$1 = G__12955;
          parts = G__12956;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__12957 = index - 1;
        index = G__12957;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__12958 = index + 1;
      index = G__12958;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args12959 = [];
  var len__8523__auto___12962 = arguments.length;
  var i__8524__auto___12963 = 0;
  while (true) {
    if (i__8524__auto___12963 < len__8523__auto___12962) {
      args12959.push(arguments[i__8524__auto___12963]);
      var G__12964 = i__8524__auto___12963 + 1;
      i__8524__auto___12963 = G__12964;
      continue;
    } else {
    }
    break;
  }
  var G__12961 = args12959.length;
  switch(G__12961) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12959.length)].join(""));
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args12966 = [];
  var len__8523__auto___12969 = arguments.length;
  var i__8524__auto___12970 = 0;
  while (true) {
    if (i__8524__auto___12970 < len__8523__auto___12969) {
      args12966.push(arguments[i__8524__auto___12970]);
      var G__12971 = i__8524__auto___12970 + 1;
      i__8524__auto___12970 = G__12971;
      continue;
    } else {
    }
    break;
  }
  var G__12968 = args12966.length;
  switch(G__12968) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args12966.length)].join(""));
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("cljs.tools.reader.impl.utils");
goog.require("cljs.core");
goog.require("clojure.string");
goog.require("goog.string");
cljs.tools.reader.impl.utils.char$ = function cljs$tools$reader$impl$utils$char(x) {
  if (x == null) {
    return null;
  } else {
    return cljs.core.char$.call(null, x);
  }
};
cljs.tools.reader.impl.utils.ex_info_QMARK_ = function cljs$tools$reader$impl$utils$ex_info_QMARK_(ex) {
  return ex instanceof cljs.core.ExceptionInfo;
};
cljs.tools.reader.impl.utils.ReaderConditional = function(splicing_QMARK_, form, __meta, __extmap, __hash) {
  this.splicing_QMARK_ = splicing_QMARK_;
  this.form = form;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8037__auto__, k__8038__auto__) {
  var self__ = this;
  var this__8037__auto____$1 = this;
  return this__8037__auto____$1.cljs$core$ILookup$_lookup$arity$3(null, k__8038__auto__, null);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8039__auto__, k12976, else__8040__auto__) {
  var self__ = this;
  var this__8039__auto____$1 = this;
  var G__12978 = k12976 instanceof cljs.core.Keyword ? k12976.fqn : null;
  switch(G__12978) {
    case "splicing?":
      return self__.splicing_QMARK_;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k12976, else__8040__auto__);
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8051__auto__, writer__8052__auto__, opts__8053__auto__) {
  var self__ = this;
  var this__8051__auto____$1 = this;
  var pr_pair__8054__auto__ = function(this__8051__auto____$1) {
    return function(keyval__8055__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__8052__auto__, cljs.core.pr_writer, "", " ", "", opts__8053__auto__, keyval__8055__auto__);
    };
  }(this__8051__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__8052__auto__, pr_pair__8054__auto__, "#cljs.tools.reader.impl.utils.ReaderConditional{", ", ", "}", opts__8053__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), self__.splicing_QMARK_], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), self__.form], null)], null), self__.__extmap));
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__12975) {
  var self__ = this;
  var G__12975__$1 = this;
  return new cljs.core.RecordIter(0, G__12975__$1, 2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), new cljs.core.Keyword(null, "form", "form", -1624062471)], null), cljs.core.truth_(self__.__extmap) ? cljs.core._iterator.call(null, self__.__extmap) : cljs.core.nil_iter.call(null));
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8035__auto__) {
  var self__ = this;
  var this__8035__auto____$1 = this;
  return self__.__meta;
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__8031__auto__) {
  var self__ = this;
  var this__8031__auto____$1 = this;
  return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, self__.__meta, self__.__extmap, self__.__hash);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8041__auto__) {
  var self__ = this;
  var this__8041__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8032__auto__) {
  var self__ = this;
  var this__8032__auto____$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_imap.call(null, this__8032__auto____$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8033__auto__, other__8034__auto__) {
  var self__ = this;
  var this__8033__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = other__8034__auto__;
    if (cljs.core.truth_(and__7398__auto__)) {
      return this__8033__auto____$1.constructor === other__8034__auto__.constructor && cljs.core.equiv_map.call(null, this__8033__auto____$1, other__8034__auto__);
    } else {
      return and__7398__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8046__auto__, k__8047__auto__) {
  var self__ = this;
  var this__8046__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), null, new cljs.core.Keyword(null, "form", "form", -1624062471), null], null), null), k__8047__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8046__auto____$1), self__.__meta), k__8047__auto__);
  } else {
    return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8047__auto__)), null);
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8044__auto__, k__8045__auto__, G__12975) {
  var self__ = this;
  var this__8044__auto____$1 = this;
  var pred__12979 = cljs.core.keyword_identical_QMARK_;
  var expr__12980 = k__8045__auto__;
  if (cljs.core.truth_(pred__12979.call(null, new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), expr__12980))) {
    return new cljs.tools.reader.impl.utils.ReaderConditional(G__12975, self__.form, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__12979.call(null, new cljs.core.Keyword(null, "form", "form", -1624062471), expr__12980))) {
      return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, G__12975, self__.__meta, self__.__extmap, null);
    } else {
      return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8045__auto__, G__12975), null);
    }
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8049__auto__) {
  var self__ = this;
  var this__8049__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), self__.splicing_QMARK_], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "form", "form", -1624062471), self__.form], null)], null), self__.__extmap));
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8036__auto__, G__12975) {
  var self__ = this;
  var this__8036__auto____$1 = this;
  return new cljs.tools.reader.impl.utils.ReaderConditional(self__.splicing_QMARK_, self__.form, G__12975, self__.__extmap, self__.__hash);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8042__auto__, entry__8043__auto__) {
  var self__ = this;
  var this__8042__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8043__auto__)) {
    return this__8042__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.call(null, entry__8043__auto__, 0), cljs.core._nth.call(null, entry__8043__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8042__auto____$1, entry__8043__auto__);
  }
};
cljs.tools.reader.impl.utils.ReaderConditional.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "splicing?", "splicing?", 1211935161, null), new cljs.core.Symbol(null, "form", "form", 16469056, null)], null);
};
cljs.tools.reader.impl.utils.ReaderConditional.cljs$lang$type = true;
cljs.tools.reader.impl.utils.ReaderConditional.cljs$lang$ctorPrSeq = function(this__8071__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "cljs.tools.reader.impl.utils/ReaderConditional");
};
cljs.tools.reader.impl.utils.ReaderConditional.cljs$lang$ctorPrWriter = function(this__8071__auto__, writer__8072__auto__) {
  return cljs.core._write.call(null, writer__8072__auto__, "cljs.tools.reader.impl.utils/ReaderConditional");
};
cljs.tools.reader.impl.utils.__GT_ReaderConditional = function cljs$tools$reader$impl$utils$__GT_ReaderConditional(splicing_QMARK_, form) {
  return new cljs.tools.reader.impl.utils.ReaderConditional(splicing_QMARK_, form, null, null, null);
};
cljs.tools.reader.impl.utils.map__GT_ReaderConditional = function cljs$tools$reader$impl$utils$map__GT_ReaderConditional(G__12977) {
  return new cljs.tools.reader.impl.utils.ReaderConditional((new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366)).cljs$core$IFn$_invoke$arity$1(G__12977), (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(G__12977), null, cljs.core.dissoc.call(null, G__12977, new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366), new cljs.core.Keyword(null, "form", "form", -1624062471)), null);
};
cljs.tools.reader.impl.utils.reader_conditional_QMARK_ = function cljs$tools$reader$impl$utils$reader_conditional_QMARK_(value) {
  return value instanceof cljs.tools.reader.impl.utils.ReaderConditional;
};
cljs.tools.reader.impl.utils.reader_conditional = function cljs$tools$reader$impl$utils$reader_conditional(form, splicing_QMARK_) {
  return new cljs.tools.reader.impl.utils.ReaderConditional(splicing_QMARK_, form, null, null, null);
};
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.impl.utils.ReaderConditional.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  cljs.core._write.call(null, writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#?"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_((new cljs.core.Keyword(null, "splicing?", "splicing?", -428596366)).cljs$core$IFn$_invoke$arity$1(coll__$1)) ? "@" : null)].join(""));
  return cljs.core.pr_writer.call(null, (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(coll__$1), writer, opts);
};
cljs.tools.reader.impl.utils.ws_rx = /[\s]/;
cljs.tools.reader.impl.utils.whitespace_QMARK_ = function cljs$tools$reader$impl$utils$whitespace_QMARK_(ch) {
  if (ch == null) {
    return null;
  } else {
    if (ch === ",") {
      return true;
    } else {
      return cljs.tools.reader.impl.utils.ws_rx.test(ch);
    }
  }
};
cljs.tools.reader.impl.utils.numeric_QMARK_ = function cljs$tools$reader$impl$utils$numeric_QMARK_(ch) {
  if (ch == null) {
    return null;
  } else {
    return goog.string.isNumeric(ch);
  }
};
cljs.tools.reader.impl.utils.newline_QMARK_ = function cljs$tools$reader$impl$utils$newline_QMARK_(c) {
  return "\n" === c || "\n" === c || c == null;
};
cljs.tools.reader.impl.utils.desugar_meta = function cljs$tools$reader$impl$utils$desugar_meta(f) {
  if (f instanceof cljs.core.Keyword) {
    return cljs.core.PersistentArrayMap.createAsIfByAssoc([f, true]);
  } else {
    if (f instanceof cljs.core.Symbol) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (typeof f === "string") {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
      } else {
        return f;
      }
    }
  }
};
cljs.tools.reader.impl.utils.last_id = cljs.core.atom.call(null, 0);
cljs.tools.reader.impl.utils.next_id = function cljs$tools$reader$impl$utils$next_id() {
  return cljs.core.swap_BANG_.call(null, cljs.tools.reader.impl.utils.last_id, cljs.core.inc);
};
cljs.tools.reader.impl.utils.namespace_keys = function cljs$tools$reader$impl$utils$namespace_keys(ns, keys) {
  var iter__8198__auto__ = function cljs$tools$reader$impl$utils$namespace_keys_$_iter__12999(s__13000) {
    return new cljs.core.LazySeq(null, function() {
      var s__13000__$1 = s__13000;
      while (true) {
        var temp__4657__auto__ = cljs.core.seq.call(null, s__13000__$1);
        if (temp__4657__auto__) {
          var s__13000__$2 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s__13000__$2)) {
            var c__8196__auto__ = cljs.core.chunk_first.call(null, s__13000__$2);
            var size__8197__auto__ = cljs.core.count.call(null, c__8196__auto__);
            var b__13002 = cljs.core.chunk_buffer.call(null, size__8197__auto__);
            if (function() {
              var i__13001 = 0;
              while (true) {
                if (i__13001 < size__8197__auto__) {
                  var key = cljs.core._nth.call(null, c__8196__auto__, i__13001);
                  cljs.core.chunk_append.call(null, b__13002, key instanceof cljs.core.Symbol || key instanceof cljs.core.Keyword ? function() {
                    var vec__13009 = cljs.core.juxt.call(null, cljs.core.namespace, cljs.core.name).call(null, key);
                    var key_ns = cljs.core.nth.call(null, vec__13009, 0, null);
                    var key_name = cljs.core.nth.call(null, vec__13009, 1, null);
                    var __GT_key = key instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.keyword;
                    if (key_ns == null) {
                      return __GT_key.call(null, ns, key_name);
                    } else {
                      if (cljs.core._EQ_.call(null, "_", key_ns)) {
                        return __GT_key.call(null, key_name);
                      } else {
                        return key;
                      }
                    }
                  }() : key);
                  var G__13015 = i__13001 + 1;
                  i__13001 = G__13015;
                  continue;
                } else {
                  return true;
                }
                break;
              }
            }()) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13002), cljs$tools$reader$impl$utils$namespace_keys_$_iter__12999.call(null, cljs.core.chunk_rest.call(null, s__13000__$2)));
            } else {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13002), null);
            }
          } else {
            var key = cljs.core.first.call(null, s__13000__$2);
            return cljs.core.cons.call(null, key instanceof cljs.core.Symbol || key instanceof cljs.core.Keyword ? function() {
              var vec__13012 = cljs.core.juxt.call(null, cljs.core.namespace, cljs.core.name).call(null, key);
              var key_ns = cljs.core.nth.call(null, vec__13012, 0, null);
              var key_name = cljs.core.nth.call(null, vec__13012, 1, null);
              var __GT_key = key instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.keyword;
              if (key_ns == null) {
                return __GT_key.call(null, ns, key_name);
              } else {
                if (cljs.core._EQ_.call(null, "_", key_ns)) {
                  return __GT_key.call(null, key_name);
                } else {
                  return key;
                }
              }
            }() : key, cljs$tools$reader$impl$utils$namespace_keys_$_iter__12999.call(null, cljs.core.rest.call(null, s__13000__$2)));
          }
        } else {
          return null;
        }
        break;
      }
    }, null, null);
  };
  return iter__8198__auto__.call(null, keys);
};
cljs.tools.reader.impl.utils.second_SINGLEQUOTE_ = function cljs$tools$reader$impl$utils$second_SINGLEQUOTE_(p__13016) {
  var vec__13020 = p__13016;
  var a = cljs.core.nth.call(null, vec__13020, 0, null);
  var b = cljs.core.nth.call(null, vec__13020, 1, null);
  if (cljs.core.truth_(a)) {
    return null;
  } else {
    return b;
  }
};
goog.provide("cljs.tools.reader.reader_types");
goog.require("cljs.core");
goog.require("cljs.tools.reader.impl.utils");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.tools.reader.reader_types.Reader = function() {
};
cljs.tools.reader.reader_types.read_char = function cljs$tools$reader$reader_types$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$Reader$read_char$arity$1(reader);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.tools.reader.reader_types.read_char[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader);
    } else {
      var m__8079__auto____$1 = cljs.tools.reader.reader_types.read_char["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "Reader.read-char", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.peek_char = function cljs$tools$reader$reader_types$peek_char(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$Reader$peek_char$arity$1(reader);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.tools.reader.reader_types.peek_char[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader);
    } else {
      var m__8079__auto____$1 = cljs.tools.reader.reader_types.peek_char["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "Reader.peek-char", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.IPushbackReader = function() {
};
cljs.tools.reader.reader_types.unread = function cljs$tools$reader$reader_types$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 == null)) {
    return reader.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.tools.reader.reader_types.unread[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader, ch);
    } else {
      var m__8079__auto____$1 = cljs.tools.reader.reader_types.unread["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "IPushbackReader.unread", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.IndexingReader = function() {
};
cljs.tools.reader.reader_types.get_line_number = function cljs$tools$reader$reader_types$get_line_number(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1(reader);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.tools.reader.reader_types.get_line_number[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader);
    } else {
      var m__8079__auto____$1 = cljs.tools.reader.reader_types.get_line_number["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "IndexingReader.get-line-number", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.get_column_number = function cljs$tools$reader$reader_types$get_column_number(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1(reader);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.tools.reader.reader_types.get_column_number[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader);
    } else {
      var m__8079__auto____$1 = cljs.tools.reader.reader_types.get_column_number["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "IndexingReader.get-column-number", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.get_file_name = function cljs$tools$reader$reader_types$get_file_name(reader) {
  if (!(reader == null) && !(reader.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1 == null)) {
    return reader.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1(reader);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.tools.reader.reader_types.get_file_name[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader);
    } else {
      var m__8079__auto____$1 = cljs.tools.reader.reader_types.get_file_name["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "IndexingReader.get-file-name", reader);
      }
    }
  }
};
cljs.tools.reader.reader_types.StringReader = function(s, s_len, s_pos) {
  this.s = s;
  this.s_len = s_len;
  this.s_pos = s_pos;
};
cljs.tools.reader.reader_types.StringReader.prototype.cljs$tools$reader$reader_types$Reader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.StringReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.s_len > self__.s_pos) {
    var r = self__.s.charAt(self__.s_pos);
    self__.s_pos = self__.s_pos + 1;
    return r;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.StringReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.s_len > self__.s_pos) {
    return self__.s.charAt(self__.s_pos);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.StringReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "s-len", "s-len", 1869978331, null), cljs.core.with_meta(new cljs.core.Symbol(null, "s-pos", "s-pos", -540562492, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.tools.reader.reader_types.StringReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.StringReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/StringReader";
cljs.tools.reader.reader_types.StringReader.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.tools.reader.reader-types/StringReader");
};
cljs.tools.reader.reader_types.__GT_StringReader = function cljs$tools$reader$reader_types$__GT_StringReader(s, s_len, s_pos) {
  return new cljs.tools.reader.reader_types.StringReader(s, s_len, s_pos);
};
cljs.tools.reader.reader_types.NodeReadableReader = function(readable, buf) {
  this.readable = readable;
  this.buf = buf;
};
cljs.tools.reader.reader_types.NodeReadableReader.prototype.cljs$tools$reader$reader_types$Reader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.NodeReadableReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.buf)) {
    var c = self__.buf[0];
    self__.buf = null;
    return cljs.tools.reader.impl.utils.char$.call(null, c);
  } else {
    var c = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.readable.read(1))].join("");
    if (cljs.core.truth_(c)) {
      return cljs.tools.reader.impl.utils.char$.call(null, c);
    } else {
      return null;
    }
  }
};
cljs.tools.reader.reader_types.NodeReadableReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.buf)) {
  } else {
    self__.buf = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.readable.read(1))].join("");
  }
  if (cljs.core.truth_(self__.buf)) {
    return cljs.tools.reader.impl.utils.char$.call(null, self__.buf[0]);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.NodeReadableReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "readable", "readable", 2113054478, null), cljs.core.with_meta(new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.tools.reader.reader_types.NodeReadableReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.NodeReadableReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/NodeReadableReader";
cljs.tools.reader.reader_types.NodeReadableReader.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.tools.reader.reader-types/NodeReadableReader");
};
cljs.tools.reader.reader_types.__GT_NodeReadableReader = function cljs$tools$reader$reader_types$__GT_NodeReadableReader(readable, buf) {
  return new cljs.tools.reader.reader_types.NodeReadableReader(readable, buf);
};
cljs.tools.reader.reader_types.PushbackReader = function(rdr, buf, buf_len, buf_pos) {
  this.rdr = rdr;
  this.buf = buf;
  this.buf_len = buf_len;
  this.buf_pos = buf_pos;
};
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$Reader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var c = self__.buf_pos < self__.buf_len ? self__.buf[self__.buf_pos] : cljs.tools.reader.reader_types.read_char.call(null, self__.rdr);
  if (self__.buf_pos < self__.buf_len) {
    self__.buf_pos = self__.buf_pos + 1;
  } else {
  }
  return cljs.tools.reader.impl.utils.char$.call(null, c);
};
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var c = self__.buf_pos < self__.buf_len ? self__.buf[self__.buf_pos] : cljs.tools.reader.reader_types.peek_char.call(null, self__.rdr);
  return cljs.tools.reader.impl.utils.char$.call(null, c);
};
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.PushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(ch)) {
    if (self__.buf_pos === 0) {
      throw new Error("Pushback buffer is full");
    } else {
    }
    self__.buf_pos = self__.buf_pos - 1;
    return self__.buf[self__.buf_pos] = ch;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.PushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "rdr", "rdr", 190007785, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), new cljs.core.Symbol(null, "buf", "buf", 1426618187, null), new cljs.core.Symbol(null, "buf-len", "buf-len", 404510846, null), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "buf-pos", "buf-pos", -807229033, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.tools.reader.reader_types.PushbackReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.PushbackReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/PushbackReader";
cljs.tools.reader.reader_types.PushbackReader.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.tools.reader.reader-types/PushbackReader");
};
cljs.tools.reader.reader_types.__GT_PushbackReader = function cljs$tools$reader$reader_types$__GT_PushbackReader(rdr, buf, buf_len, buf_pos) {
  return new cljs.tools.reader.reader_types.PushbackReader(rdr, buf, buf_len, buf_pos);
};
cljs.tools.reader.reader_types.normalize_newline = function cljs$tools$reader$reader_types$normalize_newline(rdr, ch) {
  if ("\r" === ch) {
    var c = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
    if ("\f" === c || "\n" === c) {
      cljs.tools.reader.reader_types.read_char.call(null, rdr);
    } else {
    }
    return "\n";
  } else {
    return ch;
  }
};
cljs.tools.reader.reader_types.IndexingPushbackReader = function(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name) {
  this.rdr = rdr;
  this.line = line;
  this.column = column;
  this.line_start_QMARK_ = line_start_QMARK_;
  this.prev = prev;
  this.prev_column = prev_column;
  this.file_name = file_name;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var temp__4657__auto__ = cljs.tools.reader.reader_types.read_char.call(null, self__.rdr);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var ch = temp__4657__auto__;
    var ch__$1 = cljs.tools.reader.reader_types.normalize_newline.call(null, self__.rdr, ch);
    self__.prev = self__.line_start_QMARK_;
    self__.line_start_QMARK_ = cljs.tools.reader.impl.utils.newline_QMARK_.call(null, ch__$1);
    if (cljs.core.truth_(self__.line_start_QMARK_)) {
      self__.prev_column = self__.column;
      self__.column = 0;
      self__.line = self__.line + 1;
    } else {
    }
    self__.column = self__.column + 1;
    return ch__$1;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return cljs.tools.reader.reader_types.peek_char.call(null, self__.rdr);
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.line_start_QMARK_)) {
    self__.line = self__.line - 1;
    self__.column = self__.prev_column;
  } else {
    self__.column = self__.column - 1;
  }
  self__.line_start_QMARK_ = self__.prev;
  return cljs.tools.reader.reader_types.unread.call(null, self__.rdr, ch);
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.line | 0;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.column | 0;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.file_name;
};
cljs.tools.reader.reader_types.IndexingPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "rdr", "rdr", 190007785, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line", "line", 1852876762, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "column", "column", -576213674, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line-start?", "line-start?", 1357012474, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "prev", "prev", 43462301, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "prev-column", "prev-column", 324083974, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "file-name", "file-name", -13685732, null)], null);
};
cljs.tools.reader.reader_types.IndexingPushbackReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.IndexingPushbackReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/IndexingPushbackReader";
cljs.tools.reader.reader_types.IndexingPushbackReader.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.tools.reader.reader-types/IndexingPushbackReader");
};
cljs.tools.reader.reader_types.__GT_IndexingPushbackReader = function cljs$tools$reader$reader_types$__GT_IndexingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name) {
  return new cljs.tools.reader.reader_types.IndexingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name);
};
cljs.tools.reader.reader_types.merge_meta = function cljs$tools$reader$reader_types$merge_meta(obj, m) {
  var orig_meta = cljs.core.meta.call(null, obj);
  return cljs.core.with_meta.call(null, obj, cljs.core.merge.call(null, m, cljs.core.dissoc.call(null, orig_meta, new cljs.core.Keyword(null, "source", "source", -433931539))));
};
cljs.tools.reader.reader_types.peek_source_log = function cljs$tools$reader$reader_types$peek_source_log(frames) {
  return cljs.core.subs.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(frames))].join(""), cljs.core.first.call(null, (new cljs.core.Keyword(null, "offset", "offset", 296498311)).cljs$core$IFn$_invoke$arity$1(frames)));
};
cljs.tools.reader.reader_types.log_source_char = function cljs$tools$reader$reader_types$log_source_char(frames, char$) {
  var temp__4657__auto__ = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(frames);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var buffer = temp__4657__auto__;
    return buffer.append(char$);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.drop_last_logged_char = function cljs$tools$reader$reader_types$drop_last_logged_char(frames) {
  var temp__4657__auto__ = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(frames);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var buffer = temp__4657__auto__;
    return buffer.set(cljs.core.subs.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(buffer)].join(""), 0, buffer.getLength() - 1));
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader = function(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name, frames) {
  this.rdr = rdr;
  this.line = line;
  this.column = column;
  this.line_start_QMARK_ = line_start_QMARK_;
  this.prev = prev;
  this.prev_column = prev_column;
  this.file_name = file_name;
  this.frames = frames;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  var temp__4657__auto__ = cljs.tools.reader.reader_types.read_char.call(null, self__.rdr);
  if (cljs.core.truth_(temp__4657__auto__)) {
    var ch = temp__4657__auto__;
    var ch__$1 = cljs.tools.reader.reader_types.normalize_newline.call(null, self__.rdr, ch);
    self__.prev = self__.line_start_QMARK_;
    self__.line_start_QMARK_ = cljs.tools.reader.impl.utils.newline_QMARK_.call(null, ch__$1);
    if (cljs.core.truth_(self__.line_start_QMARK_)) {
      self__.prev_column = self__.column;
      self__.column = 0;
      self__.line = self__.line + 1;
    } else {
    }
    self__.column = self__.column + 1;
    cljs.tools.reader.reader_types.log_source_char.call(null, cljs.core.deref.call(null, self__.frames), ch__$1);
    return ch__$1;
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$Reader$peek_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return cljs.tools.reader.reader_types.peek_char.call(null, self__.rdr);
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IPushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  if (cljs.core.truth_(self__.line_start_QMARK_)) {
    self__.line = self__.line - 1;
    self__.column = self__.prev_column;
  } else {
    self__.column = self__.column - 1;
  }
  self__.line_start_QMARK_ = self__.prev;
  if (cljs.core.truth_(ch)) {
    cljs.tools.reader.reader_types.drop_last_logged_char.call(null, cljs.core.deref.call(null, self__.frames));
  } else {
  }
  return cljs.tools.reader.reader_types.unread.call(null, self__.rdr, ch);
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_line_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.line | 0;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_column_number$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.column | 0;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.prototype.cljs$tools$reader$reader_types$IndexingReader$get_file_name$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  return self__.file_name;
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "rdr", "rdr", 190007785, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null)], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line", "line", 1852876762, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "column", "column", -576213674, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "line-start?", "line-start?", 1357012474, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, 
  "prev", "prev", 43462301, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "prev-column", "prev-column", 324083974, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), new cljs.core.Symbol(null, "file-name", "file-name", -13685732, null), new cljs.core.Symbol(null, "frames", "frames", -888748272, null)], 
  null);
};
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.cljs$lang$type = true;
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.cljs$lang$ctorStr = "cljs.tools.reader.reader-types/SourceLoggingPushbackReader";
cljs.tools.reader.reader_types.SourceLoggingPushbackReader.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.tools.reader.reader-types/SourceLoggingPushbackReader");
};
cljs.tools.reader.reader_types.__GT_SourceLoggingPushbackReader = function cljs$tools$reader$reader_types$__GT_SourceLoggingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name, frames) {
  return new cljs.tools.reader.reader_types.SourceLoggingPushbackReader(rdr, line, column, line_start_QMARK_, prev, prev_column, file_name, frames);
};
cljs.tools.reader.reader_types.indexing_reader_QMARK_ = function cljs$tools$reader$reader_types$indexing_reader_QMARK_(rdr) {
  if (!(rdr == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === rdr.cljs$tools$reader$reader_types$IndexingReader$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.tools.reader.reader_types.string_reader = function cljs$tools$reader$reader_types$string_reader(s) {
  return new cljs.tools.reader.reader_types.StringReader(s, cljs.core.count.call(null, s), 0);
};
cljs.tools.reader.reader_types.string_push_back_reader = function cljs$tools$reader$reader_types$string_push_back_reader(var_args) {
  var args13027 = [];
  var len__8523__auto___13030 = arguments.length;
  var i__8524__auto___13031 = 0;
  while (true) {
    if (i__8524__auto___13031 < len__8523__auto___13030) {
      args13027.push(arguments[i__8524__auto___13031]);
      var G__13032 = i__8524__auto___13031 + 1;
      i__8524__auto___13031 = G__13032;
      continue;
    } else {
    }
    break;
  }
  var G__13029 = args13027.length;
  switch(G__13029) {
    case 1:
      return cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13027.length)].join(""));
  }
};
cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.tools.reader.reader_types.string_push_back_reader.call(null, s, 1);
};
cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2 = function(s, buf_len) {
  return new cljs.tools.reader.reader_types.PushbackReader(cljs.tools.reader.reader_types.string_reader.call(null, s), cljs.core.object_array.call(null, buf_len), buf_len, buf_len);
};
cljs.tools.reader.reader_types.string_push_back_reader.cljs$lang$maxFixedArity = 2;
cljs.tools.reader.reader_types.node_readable_push_back_reader = function cljs$tools$reader$reader_types$node_readable_push_back_reader(readable) {
  return new cljs.tools.reader.reader_types.PushbackReader(new cljs.tools.reader.reader_types.NodeReadableReader(readable, null), cljs.core.object_array.call(null, 1), 1, 1);
};
cljs.tools.reader.reader_types.indexing_push_back_reader = function cljs$tools$reader$reader_types$indexing_push_back_reader(var_args) {
  var args13034 = [];
  var len__8523__auto___13037 = arguments.length;
  var i__8524__auto___13038 = 0;
  while (true) {
    if (i__8524__auto___13038 < len__8523__auto___13037) {
      args13034.push(arguments[i__8524__auto___13038]);
      var G__13039 = i__8524__auto___13038 + 1;
      i__8524__auto___13038 = G__13039;
      continue;
    } else {
    }
    break;
  }
  var G__13036 = args13034.length;
  switch(G__13036) {
    case 1:
      return cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13034.length)].join(""));
  }
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$1 = function(s_or_rdr) {
  return cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, s_or_rdr, 1);
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2 = function(s_or_rdr, buf_len) {
  return cljs.tools.reader.reader_types.indexing_push_back_reader.call(null, s_or_rdr, buf_len, null);
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3 = function(s_or_rdr, buf_len, file_name) {
  return new cljs.tools.reader.reader_types.IndexingPushbackReader(typeof s_or_rdr === "string" ? cljs.tools.reader.reader_types.string_push_back_reader.call(null, s_or_rdr, buf_len) : s_or_rdr, 1, 1, true, null, 0, file_name);
};
cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$lang$maxFixedArity = 3;
cljs.tools.reader.reader_types.source_logging_push_back_reader = function cljs$tools$reader$reader_types$source_logging_push_back_reader(var_args) {
  var args13041 = [];
  var len__8523__auto___13044 = arguments.length;
  var i__8524__auto___13045 = 0;
  while (true) {
    if (i__8524__auto___13045 < len__8523__auto___13044) {
      args13041.push(arguments[i__8524__auto___13045]);
      var G__13046 = i__8524__auto___13045 + 1;
      i__8524__auto___13045 = G__13046;
      continue;
    } else {
    }
    break;
  }
  var G__13043 = args13041.length;
  switch(G__13043) {
    case 1:
      return cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13041.length)].join(""));
  }
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$1 = function(s_or_rdr) {
  return cljs.tools.reader.reader_types.source_logging_push_back_reader.call(null, s_or_rdr, 1);
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2 = function(s_or_rdr, buf_len) {
  return cljs.tools.reader.reader_types.source_logging_push_back_reader.call(null, s_or_rdr, buf_len, null);
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3 = function(s_or_rdr, buf_len, file_name) {
  return new cljs.tools.reader.reader_types.SourceLoggingPushbackReader(typeof s_or_rdr === "string" ? cljs.tools.reader.reader_types.string_push_back_reader.call(null, s_or_rdr, buf_len) : s_or_rdr, 1, 1, true, null, 0, file_name, cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "buffer", "buffer", 617295198), new goog.string.StringBuffer, new cljs.core.Keyword(null, "offset", "offset", 296498311), cljs.core.list(0)], null)));
};
cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$lang$maxFixedArity = 3;
cljs.tools.reader.reader_types.read_line = function cljs$tools$reader$reader_types$read_line(rdr) {
  var c = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  var s = new goog.string.StringBuffer;
  while (true) {
    if (cljs.tools.reader.impl.utils.newline_QMARK_.call(null, c)) {
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join("");
    } else {
      var G__13048 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      var G__13049 = s.append(c);
      c = G__13048;
      s = G__13049;
      continue;
    }
    break;
  }
};
cljs.tools.reader.reader_types.reader_error = function cljs$tools$reader$reader_types$reader_error(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___13052 = arguments.length;
  var i__8524__auto___13053 = 0;
  while (true) {
    if (i__8524__auto___13053 < len__8523__auto___13052) {
      args__8530__auto__.push(arguments[i__8524__auto___13053]);
      var G__13054 = i__8524__auto___13053 + 1;
      i__8524__auto___13053 = G__13054;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.tools.reader.reader_types.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.tools.reader.reader_types.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw cljs.core.ex_info.call(null, cljs.core.apply.call(null, cljs.core.str, msg), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098)], null), cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr)) ? cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 
  212345235), cljs.tools.reader.reader_types.get_line_number.call(null, rdr), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.tools.reader.reader_types.get_column_number.call(null, rdr)], null), function() {
    var temp__4657__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var file_name = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file_name], null);
    } else {
      return null;
    }
  }()) : null));
};
cljs.tools.reader.reader_types.reader_error.cljs$lang$maxFixedArity = 1;
cljs.tools.reader.reader_types.reader_error.cljs$lang$applyTo = function(seq13050) {
  var G__13051 = cljs.core.first.call(null, seq13050);
  var seq13050__$1 = cljs.core.next.call(null, seq13050);
  return cljs.tools.reader.reader_types.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__13051, seq13050__$1);
};
cljs.tools.reader.reader_types.source_logging_reader_QMARK_ = function cljs$tools$reader$reader_types$source_logging_reader_QMARK_(rdr) {
  return rdr instanceof cljs.tools.reader.reader_types.SourceLoggingPushbackReader;
};
cljs.tools.reader.reader_types.line_start_QMARK_ = function cljs$tools$reader$reader_types$line_start_QMARK_(rdr) {
  if (cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr))) {
    return 1 === cljs.tools.reader.reader_types.get_column_number.call(null, rdr);
  } else {
    return null;
  }
};
cljs.tools.reader.reader_types.log_source_STAR_ = function cljs$tools$reader$reader_types$log_source_STAR_(reader, f) {
  var buffer = (new cljs.core.Keyword(null, "buffer", "buffer", 617295198)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, reader.frames));
  try {
    cljs.core.swap_BANG_.call(null, reader.frames, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), cljs.core.conj, buffer.getLength());
    var ret = f.call(null);
    if (!(ret == null) ? ret.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === ret.cljs$core$IMeta$ ? true : false : false) {
      return cljs.tools.reader.reader_types.merge_meta.call(null, ret, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "source", "source", -433931539), cljs.tools.reader.reader_types.peek_source_log.call(null, cljs.core.deref.call(null, reader.frames))], null));
    } else {
      return ret;
    }
  } finally {
    cljs.core.swap_BANG_.call(null, reader.frames, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "offset", "offset", 296498311)], null), cljs.core.rest);
  }
};
goog.provide("cljs.tools.reader.impl.commons");
goog.require("cljs.core");
goog.require("cljs.tools.reader.reader_types");
goog.require("cljs.tools.reader.impl.utils");
cljs.tools.reader.impl.commons.number_literal_QMARK_ = function cljs$tools$reader$impl$commons$number_literal_QMARK_(reader, initch) {
  return cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, cljs.tools.reader.reader_types.peek_char.call(null, reader));
};
cljs.tools.reader.impl.commons.read_past = function cljs$tools$reader$impl$commons$read_past(pred, rdr) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  while (true) {
    if (pred.call(null, ch)) {
      var G__13059 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      ch = G__13059;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.tools.reader.impl.commons.skip_line = function cljs$tools$reader$impl$commons$skip_line(reader) {
  while (true) {
    if (cljs.tools.reader.impl.utils.newline_QMARK_.call(null, cljs.tools.reader.reader_types.read_char.call(null, reader))) {
    } else {
      continue;
    }
    break;
  }
  return reader;
};
cljs.tools.reader.impl.commons.int_pattern = /^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$/;
cljs.tools.reader.impl.commons.ratio_pattern = /([-+]?[0-9]+)\/([0-9]+)/;
cljs.tools.reader.impl.commons.float_pattern = /([-+]?[0-9]+(\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?/;
cljs.tools.reader.impl.commons.match_int = function cljs$tools$reader$impl$commons$match_int(s) {
  var m = cljs.core.vec.call(null, cljs.core.re_find.call(null, cljs.tools.reader.impl.commons.int_pattern, s));
  if (!(m.call(null, 2) == null)) {
    return 0;
  } else {
    var negate_QMARK_ = "-" === m.call(null, 1);
    var a = !(m.call(null, 3) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 3), 10], null) : !(m.call(null, 4) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 4), 16], null) : !(m.call(null, 5) == null) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 5), 8], null) : !(m.call(null, 7) == null) ? new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [m.call(null, 7), parseInt(m.call(null, 6))], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, null], null);
    var n = a.call(null, 0);
    if (n == null) {
      return null;
    } else {
      var bn = parseInt(n, a.call(null, 1));
      var bn__$1 = negate_QMARK_ ? -1 * bn : bn;
      if (cljs.core.truth_(isNaN(bn__$1))) {
        return null;
      } else {
        return bn__$1;
      }
    }
  }
};
cljs.tools.reader.impl.commons.match_ratio = function cljs$tools$reader$impl$commons$match_ratio(s) {
  var m = cljs.core.vec.call(null, cljs.core.re_find.call(null, cljs.tools.reader.impl.commons.ratio_pattern, s));
  var numerator = m.call(null, 1);
  var denominator = m.call(null, 2);
  var numerator__$1 = cljs.core.truth_(cljs.core.re_find.call(null, /^\+/, numerator)) ? cljs.core.subs.call(null, numerator, 1) : numerator;
  return parseInt(numerator__$1) / parseInt(denominator);
};
cljs.tools.reader.impl.commons.match_float = function cljs$tools$reader$impl$commons$match_float(s) {
  var m = cljs.core.vec.call(null, cljs.core.re_find.call(null, cljs.tools.reader.impl.commons.float_pattern, s));
  if (!(m.call(null, 4) == null)) {
    return parseFloat(m.call(null, 1));
  } else {
    return parseFloat(s);
  }
};
cljs.tools.reader.impl.commons.matches_QMARK_ = function cljs$tools$reader$impl$commons$matches_QMARK_(pattern, s) {
  var vec__13063 = cljs.core.re_find.call(null, pattern, s);
  var match = cljs.core.nth.call(null, vec__13063, 0, null);
  return match === s;
};
cljs.tools.reader.impl.commons.match_number = function cljs$tools$reader$impl$commons$match_number(s) {
  if (cljs.tools.reader.impl.commons.matches_QMARK_.call(null, cljs.tools.reader.impl.commons.int_pattern, s)) {
    return cljs.tools.reader.impl.commons.match_int.call(null, s);
  } else {
    if (cljs.tools.reader.impl.commons.matches_QMARK_.call(null, cljs.tools.reader.impl.commons.float_pattern, s)) {
      return cljs.tools.reader.impl.commons.match_float.call(null, s);
    } else {
      if (cljs.tools.reader.impl.commons.matches_QMARK_.call(null, cljs.tools.reader.impl.commons.ratio_pattern, s)) {
        return cljs.tools.reader.impl.commons.match_ratio.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.tools.reader.impl.commons.parse_symbol = function cljs$tools$reader$impl$commons$parse_symbol(token) {
  if ("" === token || /:$/.test(token) === true || /^::/.test(token) === true) {
    return null;
  } else {
    var ns_idx = token.indexOf("/");
    var ns = ns_idx > 0 ? cljs.core.subs.call(null, token, 0, ns_idx) : null;
    if (!(ns == null)) {
      var ns_idx__$1 = ns_idx + 1;
      if (ns_idx__$1 === cljs.core.count.call(null, token)) {
        return null;
      } else {
        var sym = cljs.core.subs.call(null, token, ns_idx__$1);
        if (!cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, cljs.core.nth.call(null, sym, 0)) && !("" === sym) && /:$/.test(ns) === false && (sym === "/" || -1 === sym.indexOf("/"))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, sym], null);
        } else {
          return null;
        }
      }
    } else {
      if (token === "/" || -1 === token.indexOf("/")) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, token], null);
      } else {
        return null;
      }
    }
  }
};
cljs.tools.reader.impl.commons.read_comment = function cljs$tools$reader$impl$commons$read_comment(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___13068 = arguments.length;
  var i__8524__auto___13069 = 0;
  while (true) {
    if (i__8524__auto___13069 < len__8523__auto___13068) {
      args__8530__auto__.push(arguments[i__8524__auto___13069]);
      var G__13070 = i__8524__auto___13069 + 1;
      i__8524__auto___13069 = G__13070;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.tools.reader.impl.commons.read_comment.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.tools.reader.impl.commons.read_comment.cljs$core$IFn$_invoke$arity$variadic = function(rdr, _) {
  return cljs.tools.reader.impl.commons.skip_line.call(null, rdr);
};
cljs.tools.reader.impl.commons.read_comment.cljs$lang$maxFixedArity = 1;
cljs.tools.reader.impl.commons.read_comment.cljs$lang$applyTo = function(seq13066) {
  var G__13067 = cljs.core.first.call(null, seq13066);
  var seq13066__$1 = cljs.core.next.call(null, seq13066);
  return cljs.tools.reader.impl.commons.read_comment.cljs$core$IFn$_invoke$arity$variadic(G__13067, seq13066__$1);
};
cljs.tools.reader.impl.commons.throwing_reader = function cljs$tools$reader$impl$commons$throwing_reader(msg) {
  return function() {
    var G__13071__delegate = function(rdr, _) {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, msg);
    };
    var G__13071 = function(rdr, var_args) {
      var _ = null;
      if (arguments.length > 1) {
        var G__13072__i = 0, G__13072__a = new Array(arguments.length - 1);
        while (G__13072__i < G__13072__a.length) {
          G__13072__a[G__13072__i] = arguments[G__13072__i + 1];
          ++G__13072__i;
        }
        _ = new cljs.core.IndexedSeq(G__13072__a, 0);
      }
      return G__13071__delegate.call(this, rdr, _);
    };
    G__13071.cljs$lang$maxFixedArity = 1;
    G__13071.cljs$lang$applyTo = function(arglist__13073) {
      var rdr = cljs.core.first(arglist__13073);
      var _ = cljs.core.rest(arglist__13073);
      return G__13071__delegate(rdr, _);
    };
    G__13071.cljs$core$IFn$_invoke$arity$variadic = G__13071__delegate;
    return G__13071;
  }();
};
goog.provide("cljs.tools.reader");
goog.require("cljs.core");
goog.require("cljs.tools.reader.reader_types");
goog.require("cljs.tools.reader.impl.utils");
goog.require("cljs.tools.reader.impl.commons");
goog.require("clojure.string");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.tools.reader.macro_terminating_QMARK_ = function cljs$tools$reader$macro_terminating_QMARK_(ch) {
  var G__13092 = ch;
  switch(G__13092) {
    case '"':
    case ";":
    case "@":
    case "^":
    case "`":
    case "~":
    case "(":
    case ")":
    case "[":
    case "]":
    case "{":
    case "}":
    case "\\":
      return true;
      break;
    default:
      return false;
  }
};
cljs.tools.reader.sb = new goog.string.StringBuffer;
cljs.tools.reader.read_token = function cljs$tools$reader$read_token(rdr, initch) {
  if (initch == null) {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading");
  } else {
    cljs.tools.reader.sb.clear();
    var ch = initch;
    while (true) {
      if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch) || cljs.tools.reader.macro_terminating_QMARK_.call(null, ch) || ch == null) {
        if (ch == null) {
        } else {
          cljs.tools.reader.reader_types.unread.call(null, rdr, ch);
        }
        return cljs.tools.reader.sb.toString();
      } else {
        cljs.tools.reader.sb.append(ch);
        var G__13094 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
        ch = G__13094;
        continue;
      }
      break;
    }
  }
};
cljs.tools.reader.read_dispatch = function cljs$tools$reader$read_dispatch(rdr, _, opts, pending_forms) {
  var temp__4655__auto__ = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var ch = temp__4655__auto__;
    var temp__4655__auto____$1 = cljs.tools.reader.dispatch_macros.call(null, ch);
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var dm = temp__4655__auto____$1;
      return dm.call(null, rdr, ch, opts, pending_forms);
    } else {
      return cljs.tools.reader.read_tagged.call(null, function() {
        var G__13096 = rdr;
        cljs.tools.reader.reader_types.unread.call(null, G__13096, ch);
        return G__13096;
      }(), ch, opts, pending_forms);
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
  }
};
cljs.tools.reader.read_unmatched_delimiter = function cljs$tools$reader$read_unmatched_delimiter(rdr, ch, opts, pending_forms) {
  return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.tools.reader.read_regex = function cljs$tools$reader$read_regex(rdr, ch, opts, pending_forms) {
  var sb = new goog.string.StringBuffer;
  var ch__$1 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  while (true) {
    if ('"' === ch__$1) {
      return cljs.core.re_pattern.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join(""));
    } else {
      if (ch__$1 == null) {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading regex");
      } else {
        sb.append(ch__$1);
        if ("\\" === ch__$1) {
          var ch_13097__$2 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
          if (ch_13097__$2 == null) {
            cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading regex");
          } else {
          }
          sb.append(ch_13097__$2);
        } else {
        }
        var G__13098 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
        ch__$1 = G__13098;
        continue;
      }
    }
    break;
  }
};
cljs.tools.reader.char_code = function cljs$tools$reader$char_code(ch, base) {
  var code = parseInt(ch, base);
  if (cljs.core.truth_(isNaN(code))) {
    return -1;
  } else {
    return code;
  }
};
cljs.tools.reader.read_unicode_char = function cljs$tools$reader$read_unicode_char(var_args) {
  var args13099 = [];
  var len__8523__auto___13102 = arguments.length;
  var i__8524__auto___13103 = 0;
  while (true) {
    if (i__8524__auto___13103 < len__8523__auto___13102) {
      args13099.push(arguments[i__8524__auto___13103]);
      var G__13104 = i__8524__auto___13103 + 1;
      i__8524__auto___13103 = G__13104;
      continue;
    } else {
    }
    break;
  }
  var G__13101 = args13099.length;
  switch(G__13101) {
    case 4:
      return cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13099.length)].join(""));
  }
};
cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$4 = function(token, offset, length, base) {
  var l = offset + length;
  if (cljs.core.count.call(null, token) === l) {
  } else {
    throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid unicode character: \\"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(token)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
  }
  var i = offset;
  var uc = 0;
  while (true) {
    if (i === l) {
      return String.fromCharCode(uc);
    } else {
      var d = cljs.tools.reader.char_code.call(null, cljs.core.nth.call(null, token, i), base);
      if (d === -1) {
        throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid digit: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.nth.call(null, token, i))].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
      } else {
        var G__13106 = i + 1;
        var G__13107 = d + uc * base;
        i = G__13106;
        uc = G__13107;
        continue;
      }
    }
    break;
  }
};
cljs.tools.reader.read_unicode_char.cljs$core$IFn$_invoke$arity$5 = function(rdr, initch, base, length, exact_QMARK_) {
  var i = 1;
  var uc = cljs.tools.reader.char_code.call(null, initch, base);
  while (true) {
    if (uc === -1) {
      throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid digit: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(initch)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
    } else {
      if (!(i === length)) {
        var ch = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
        if (cljs.core.truth_(function() {
          var or__7410__auto__ = cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch);
          if (or__7410__auto__) {
            return or__7410__auto__;
          } else {
            var or__7410__auto____$1 = cljs.tools.reader.macros.call(null, ch);
            if (cljs.core.truth_(or__7410__auto____$1)) {
              return or__7410__auto____$1;
            } else {
              return ch == null;
            }
          }
        }())) {
          if (cljs.core.truth_(exact_QMARK_)) {
            throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid character length: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(i), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", should be: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(length)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
          } else {
            return String.fromCharCode(uc);
          }
        } else {
          var d = cljs.tools.reader.char_code.call(null, ch, base);
          cljs.tools.reader.reader_types.read_char.call(null, rdr);
          if (d === -1) {
            throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid digit: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ch)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-argument", "illegal-argument", -1845493170)], null));
          } else {
            var G__13108 = i + 1;
            var G__13109 = d + uc * base;
            i = G__13108;
            uc = G__13109;
            continue;
          }
        }
      } else {
        return String.fromCharCode(uc);
      }
    }
    break;
  }
};
cljs.tools.reader.read_unicode_char.cljs$lang$maxFixedArity = 5;
cljs.tools.reader.upper_limit = "퟿".charCodeAt(0);
cljs.tools.reader.lower_limit = "".charCodeAt(0);
cljs.tools.reader.valid_octal_QMARK_ = function cljs$tools$reader$valid_octal_QMARK_(token, base) {
  return parseInt(token, base) <= 255;
};
cljs.tools.reader.read_char_STAR_ = function cljs$tools$reader$read_char_STAR_(rdr, backslash, opts, pending_forms) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  if (!(ch == null)) {
    var token = cljs.tools.reader.macro_terminating_QMARK_.call(null, ch) || cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ch)].join("") : cljs.tools.reader.read_token.call(null, rdr, ch);
    var token_len = token.length;
    if (1 === token_len) {
      return token.charAt(0);
    } else {
      if (cljs.core._EQ_.call(null, token, "newline")) {
        return "\n";
      } else {
        if (cljs.core._EQ_.call(null, token, "space")) {
          return " ";
        } else {
          if (cljs.core._EQ_.call(null, token, "tab")) {
            return "\t";
          } else {
            if (cljs.core._EQ_.call(null, token, "backspace")) {
              return "\b";
            } else {
              if (cljs.core._EQ_.call(null, token, "formfeed")) {
                return "\f";
              } else {
                if (cljs.core._EQ_.call(null, token, "return")) {
                  return "\r";
                } else {
                  if (cljs.core.truth_(goog.string.startsWith(token, "u"))) {
                    var c = cljs.tools.reader.read_unicode_char.call(null, token, 1, 4, 16);
                    var ic = c.charCodeAt(0);
                    if (ic > cljs.tools.reader.upper_limit && ic < cljs.tools.reader.lower_limit) {
                      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid character constant: \\u", c);
                    } else {
                      return c;
                    }
                  } else {
                    if (cljs.core.truth_(goog.string.startsWith(token, "o"))) {
                      var len = token_len - 1;
                      if (len > 3) {
                        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid octal escape sequence length: ", len);
                      } else {
                        var offset = 1;
                        var base = 8;
                        var uc = cljs.tools.reader.read_unicode_char.call(null, token, offset, len, base);
                        if (cljs.core.not.call(null, cljs.tools.reader.valid_octal_QMARK_.call(null, cljs.core.subs.call(null, token, offset), base))) {
                          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Octal escape sequence must be in range [0, 377]");
                        } else {
                          return uc;
                        }
                      }
                    } else {
                      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unsupported character: \\", token);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
  }
};
cljs.tools.reader.starting_line_col_info = function cljs$tools$reader$starting_line_col_info(rdr) {
  if (cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.tools.reader.reader_types.get_line_number.call(null, rdr), cljs.tools.reader.reader_types.get_column_number.call(null, rdr) - 1 | 0], null);
  } else {
    return null;
  }
};
cljs.tools.reader.ending_line_col_info = function cljs$tools$reader$ending_line_col_info(rdr) {
  if (cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.tools.reader.reader_types.get_line_number.call(null, rdr), cljs.tools.reader.reader_types.get_column_number.call(null, rdr)], null);
  } else {
    return null;
  }
};
if (typeof cljs.tools.reader.READ_EOF !== "undefined") {
} else {
  cljs.tools.reader.READ_EOF = new Object;
}
if (typeof cljs.tools.reader.READ_FINISHED !== "undefined") {
} else {
  cljs.tools.reader.READ_FINISHED = new Object;
}
cljs.tools.reader._STAR_read_delim_STAR_ = false;
cljs.tools.reader.read_delimited_internal = function cljs$tools$reader$read_delimited_internal(delim, rdr, opts, pending_forms) {
  var vec__13113 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__13113, 0, null);
  var start_column = cljs.core.nth.call(null, vec__13113, 1, null);
  var delim__$1 = cljs.tools.reader.impl.utils.char$.call(null, delim);
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var form = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, delim__$1, opts, pending_forms);
    if (form === cljs.tools.reader.READ_FINISHED) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      if (form === cljs.tools.reader.READ_EOF) {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading", cljs.core.truth_(start_line) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(", starting at line "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(start_line), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" and column "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(start_column)].join("") : null);
      } else {
        var G__13116 = cljs.core.conj_BANG_.call(null, a, form);
        a = G__13116;
        continue;
      }
    }
    break;
  }
};
cljs.tools.reader.read_delimited = function cljs$tools$reader$read_delimited(delim, rdr, opts, pending_forms) {
  var _STAR_read_delim_STAR_13118 = cljs.tools.reader._STAR_read_delim_STAR_;
  cljs.tools.reader._STAR_read_delim_STAR_ = true;
  try {
    return cljs.tools.reader.read_delimited_internal.call(null, delim, rdr, opts, pending_forms);
  } finally {
    cljs.tools.reader._STAR_read_delim_STAR_ = _STAR_read_delim_STAR_13118;
  }
};
cljs.tools.reader.read_list = function cljs$tools$reader$read_list(rdr, _, opts, pending_forms) {
  var vec__13125 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__13125, 0, null);
  var start_column = cljs.core.nth.call(null, vec__13125, 1, null);
  var the_list = cljs.tools.reader.read_delimited.call(null, ")", rdr, opts, pending_forms);
  var vec__13128 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__13128, 0, null);
  var end_column = cljs.core.nth.call(null, vec__13128, 1, null);
  return cljs.core.with_meta.call(null, cljs.core.empty_QMARK_.call(null, the_list) ? cljs.core.List.EMPTY : cljs.core.apply.call(null, cljs.core.list, the_list), cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4657__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var file = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_vector = function cljs$tools$reader$read_vector(rdr, _, opts, pending_forms) {
  var vec__13137 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__13137, 0, null);
  var start_column = cljs.core.nth.call(null, vec__13137, 1, null);
  var the_vector = cljs.tools.reader.read_delimited.call(null, "]", rdr, opts, pending_forms);
  var vec__13140 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__13140, 0, null);
  var end_column = cljs.core.nth.call(null, vec__13140, 1, null);
  return cljs.core.with_meta.call(null, the_vector, cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4657__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var file = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.duplicate_keys_error = function cljs$tools$reader$duplicate_keys_error(msg, coll) {
  var duplicates = function cljs$tools$reader$duplicate_keys_error_$_duplicates(seq) {
    var iter__8198__auto__ = function cljs$tools$reader$duplicate_keys_error_$_duplicates_$_iter__13255(s__13256) {
      return new cljs.core.LazySeq(null, function() {
        var s__13256__$1 = s__13256;
        while (true) {
          var temp__4657__auto__ = cljs.core.seq.call(null, s__13256__$1);
          if (temp__4657__auto__) {
            var s__13256__$2 = temp__4657__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13256__$2)) {
              var c__8196__auto__ = cljs.core.chunk_first.call(null, s__13256__$2);
              var size__8197__auto__ = cljs.core.count.call(null, c__8196__auto__);
              var b__13258 = cljs.core.chunk_buffer.call(null, size__8197__auto__);
              if (function() {
                var i__13257 = 0;
                while (true) {
                  if (i__13257 < size__8197__auto__) {
                    var vec__13265 = cljs.core._nth.call(null, c__8196__auto__, i__13257);
                    var id = cljs.core.nth.call(null, vec__13265, 0, null);
                    var freq = cljs.core.nth.call(null, vec__13265, 1, null);
                    if (freq > 1) {
                      cljs.core.chunk_append.call(null, b__13258, id);
                      var G__13271 = i__13257 + 1;
                      i__13257 = G__13271;
                      continue;
                    } else {
                      var G__13272 = i__13257 + 1;
                      i__13257 = G__13272;
                      continue;
                    }
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13258), cljs$tools$reader$duplicate_keys_error_$_duplicates_$_iter__13255.call(null, cljs.core.chunk_rest.call(null, s__13256__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13258), null);
              }
            } else {
              var vec__13268 = cljs.core.first.call(null, s__13256__$2);
              var id = cljs.core.nth.call(null, vec__13268, 0, null);
              var freq = cljs.core.nth.call(null, vec__13268, 1, null);
              if (freq > 1) {
                return cljs.core.cons.call(null, id, cljs$tools$reader$duplicate_keys_error_$_duplicates_$_iter__13255.call(null, cljs.core.rest.call(null, s__13256__$2)));
              } else {
                var G__13273 = cljs.core.rest.call(null, s__13256__$2);
                s__13256__$1 = G__13273;
                continue;
              }
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__8198__auto__.call(null, cljs.core.frequencies.call(null, seq));
  };
  var dups = duplicates.call(null, coll);
  return cljs.core.apply.call(null, cljs.core.str, msg, cljs.core.count.call(null, dups) > 1 ? "s" : null, ": ", cljs.core.interpose.call(null, ", ", dups));
};
cljs.tools.reader.read_map = function cljs$tools$reader$read_map(rdr, _, opts, pending_forms) {
  var vec__13280 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__13280, 0, null);
  var start_column = cljs.core.nth.call(null, vec__13280, 1, null);
  var the_map = cljs.tools.reader.read_delimited.call(null, "}", rdr, opts, pending_forms);
  var map_count = cljs.core.count.call(null, the_map);
  var ks = cljs.core.take_nth.call(null, 2, the_map);
  var key_set = cljs.core.set.call(null, ks);
  var vec__13283 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__13283, 0, null);
  var end_column = cljs.core.nth.call(null, vec__13283, 1, null);
  if (cljs.core.odd_QMARK_.call(null, map_count)) {
    cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, key_set), cljs.core.count.call(null, ks))) {
  } else {
    cljs.tools.reader.reader_types.reader_error.call(null, rdr, cljs.tools.reader.duplicate_keys_error.call(null, "Map literal contains duplicate key", ks));
  }
  return cljs.core.with_meta.call(null, map_count === 0 ? cljs.core.PersistentArrayMap.EMPTY : cljs.core.apply.call(null, cljs.core.hash_map, cljs.core.to_array.call(null, the_map)), cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4657__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var file = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_number = function cljs$tools$reader$read_number(rdr, initch) {
  var sb = function() {
    var G__13288 = new goog.string.StringBuffer;
    G__13288.append(initch);
    return G__13288;
  }();
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__7410__auto__ = cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch);
      if (or__7410__auto__) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = cljs.tools.reader.macros.call(null, ch);
        if (cljs.core.truth_(or__7410__auto____$1)) {
          return or__7410__auto____$1;
        } else {
          return ch == null;
        }
      }
    }())) {
      var s = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join("");
      cljs.tools.reader.reader_types.unread.call(null, rdr, ch);
      var or__7410__auto__ = cljs.tools.reader.impl.commons.match_number.call(null, s);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid number format [", s, "]");
      }
    } else {
      var G__13290 = function() {
        var G__13289 = sb;
        G__13289.append(ch);
        return G__13289;
      }();
      var G__13291 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      sb = G__13290;
      ch = G__13291;
      continue;
    }
    break;
  }
};
cljs.tools.reader.escape_char = function cljs$tools$reader$escape_char(sb, rdr) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  var G__13293 = ch;
  switch(G__13293) {
    case "t":
      return "\t";
      break;
    case "r":
      return "\r";
      break;
    case "n":
      return "\n";
      break;
    case "\\":
      return "\\";
      break;
    case '"':
      return '"';
      break;
    case "b":
      return "\b";
      break;
    case "f":
      return "\f";
      break;
    case "u":
      var ch__$1 = cljs.tools.reader.reader_types.read_char.call(null, rdr);
      if (-1 === parseInt(ch__$1 | 0, 16)) {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid unicode escape: \\u", ch__$1);
      } else {
        return cljs.tools.reader.read_unicode_char.call(null, rdr, ch__$1, 16, 4, true);
      }
      break;
    default:
      if (cljs.tools.reader.impl.utils.numeric_QMARK_.call(null, ch)) {
        var ch__$1 = cljs.tools.reader.read_unicode_char.call(null, rdr, ch, 8, 3, false);
        if ((ch__$1 | 0) > 223) {
          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Octal escape sequence must be in range [0, 377]");
        } else {
          return ch__$1;
        }
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Unsupported escape character: \\", ch);
      }
  }
};
cljs.tools.reader.read_string_STAR_ = function cljs$tools$reader$read_string_STAR_(reader, _, opts, pending_forms) {
  var sb = new goog.string.StringBuffer;
  var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.tools.reader.reader_types.reader_error.call(null, reader, "EOF while reading string");
    } else {
      var G__13298 = ch;
      switch(G__13298) {
        case "\\":
          var G__13302 = function() {
            var G__13299 = sb;
            G__13299.append(cljs.tools.reader.escape_char.call(null, sb, reader));
            return G__13299;
          }();
          var G__13303 = cljs.tools.reader.reader_types.read_char.call(null, reader);
          sb = G__13302;
          ch = G__13303;
          continue;
          break;
        case '"':
          return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join("");
          break;
        default:
          var G__13304 = function() {
            var G__13300 = sb;
            G__13300.append(ch);
            return G__13300;
          }();
          var G__13305 = cljs.tools.reader.reader_types.read_char.call(null, reader);
          sb = G__13304;
          ch = G__13305;
          continue;
      }
    }
    break;
  }
};
cljs.tools.reader.loc_info = function cljs$tools$reader$loc_info(rdr, line, column) {
  if (line == null) {
    return null;
  } else {
    var file = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    var filem = file == null ? null : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    var vec__13309 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
    var end_line = cljs.core.nth.call(null, vec__13309, 0, null);
    var end_column = cljs.core.nth.call(null, vec__13309, 1, null);
    var lcm = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null);
    return cljs.core.merge.call(null, filem, lcm);
  }
};
cljs.tools.reader.read_symbol = function cljs$tools$reader$read_symbol(rdr, initch) {
  var vec__13316 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var line = cljs.core.nth.call(null, vec__13316, 0, null);
  var column = cljs.core.nth.call(null, vec__13316, 1, null);
  var token = cljs.tools.reader.read_token.call(null, rdr, initch);
  if (token == null) {
    return null;
  } else {
    var G__13319 = token;
    switch(G__13319) {
      case "nil":
        return null;
        break;
      case "true":
        return true;
        break;
      case "false":
        return false;
        break;
      case "/":
        return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        break;
      case "NaN":
        return Number.NaN;
        break;
      case "-Infinity":
        return Number.NEGATIVE_INFINITY;
        break;
      case "Infinity":
      case "+Infinity":
        return Number.POSITIVE_INFINITY;
        break;
      default:
        var p = cljs.tools.reader.impl.commons.parse_symbol.call(null, token);
        if (!(p == null)) {
          var sym = cljs.core.symbol.call(null, cljs.core._nth.call(null, p, 0), cljs.core._nth.call(null, p, 1));
          return cljs.core._with_meta.call(null, sym, cljs.tools.reader.loc_info.call(null, rdr, line, column));
        } else {
          return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid token: ", token);
        }
    }
  }
};
cljs.tools.reader._STAR_alias_map_STAR_ = null;
cljs.tools.reader.resolve_ns = function cljs$tools$reader$resolve_ns(sym) {
  var or__7410__auto__ = cljs.core.get.call(null, cljs.tools.reader._STAR_alias_map_STAR_, sym);
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    var temp__4657__auto__ = cljs.core.find_ns.call(null, sym);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var ns = temp__4657__auto__;
      return cljs.core.symbol.call(null, cljs.core.ns_name.call(null, ns));
    } else {
      return null;
    }
  }
};
cljs.tools.reader.read_keyword = function cljs$tools$reader$read_keyword(reader, initch, opts, pending_forms) {
  var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
  if (!cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch)) {
    var token = cljs.tools.reader.read_token.call(null, reader, ch);
    var s = cljs.tools.reader.impl.commons.parse_symbol.call(null, token);
    if (!(s == null)) {
      var ns = cljs.core._nth.call(null, s, 0);
      var name = cljs.core._nth.call(null, s, 1);
      if (":" === token.charAt(0)) {
        if (!(ns == null)) {
          var ns__$1 = cljs.tools.reader.resolve_ns.call(null, cljs.core.symbol.call(null, cljs.core.subs.call(null, ns, 1)));
          if (!(ns__$1 == null)) {
            return cljs.core.keyword.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1)].join(""), name);
          } else {
            return cljs.tools.reader.reader_types.reader_error.call(null, reader, "Invalid token: :", token);
          }
        } else {
          return cljs.core.keyword.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_ns_STAR_)].join(""), cljs.core.subs.call(null, name, 1));
        }
      } else {
        return cljs.core.keyword.call(null, ns, name);
      }
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, reader, "Invalid token: :", token);
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, reader, "Invalid token: :");
  }
};
cljs.tools.reader.wrapping_reader = function cljs$tools$reader$wrapping_reader(sym) {
  return function(rdr, _, opts, pending_forms) {
    var x__8252__auto__ = sym;
    return cljs.core._conj.call(null, function() {
      var x__8252__auto____$1 = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
    }(), x__8252__auto__);
  };
};
cljs.tools.reader.read_meta = function cljs$tools$reader$read_meta(rdr, _, opts, pending_forms) {
  if (cljs.tools.reader.reader_types.source_logging_reader_QMARK_.call(null, rdr) && !cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, cljs.tools.reader.reader_types.peek_char.call(null, rdr))) {
    return cljs.tools.reader.reader_types.log_source_STAR_.call(null, rdr, function() {
      var vec__13331 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
      var line = cljs.core.nth.call(null, vec__13331, 0, null);
      var column = cljs.core.nth.call(null, vec__13331, 1, null);
      var m = cljs.tools.reader.impl.utils.desugar_meta.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
      if (cljs.core.map_QMARK_.call(null, m)) {
      } else {
        cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata must be Symbol, Keyword, String or Map");
      }
      var o = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
      if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$ ? true : false : false) {
        var m__$1 = cljs.core.truth_(function() {
          var and__7398__auto__ = line;
          if (cljs.core.truth_(and__7398__auto__)) {
            return cljs.core.seq_QMARK_.call(null, o);
          } else {
            return and__7398__auto__;
          }
        }()) ? cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column) : m;
        if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IWithMeta$ ? true : false : false) {
          return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m__$1));
        } else {
          return cljs.core.reset_meta_BANG_.call(null, o, m__$1);
        }
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata can only be applied to IMetas");
      }
    });
  } else {
    var vec__13336 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
    var line = cljs.core.nth.call(null, vec__13336, 0, null);
    var column = cljs.core.nth.call(null, vec__13336, 1, null);
    var m = cljs.tools.reader.impl.utils.desugar_meta.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
    if (cljs.core.map_QMARK_.call(null, m)) {
    } else {
      cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata must be Symbol, Keyword, String or Map");
    }
    var o = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$ ? true : false : false) {
      var m__$1 = cljs.core.truth_(function() {
        var and__7398__auto__ = line;
        if (cljs.core.truth_(and__7398__auto__)) {
          return cljs.core.seq_QMARK_.call(null, o);
        } else {
          return and__7398__auto__;
        }
      }()) ? cljs.core.assoc.call(null, m, new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column) : m;
      if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IWithMeta$ ? true : false : false) {
        return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m__$1));
      } else {
        return cljs.core.reset_meta_BANG_.call(null, o, m__$1);
      }
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Metadata can only be applied to IMetas");
    }
  }
};
cljs.tools.reader.read_set = function cljs$tools$reader$read_set(rdr, _, opts, pending_forms) {
  var vec__13347 = cljs.tools.reader.starting_line_col_info.call(null, rdr);
  var start_line = cljs.core.nth.call(null, vec__13347, 0, null);
  var start_column = cljs.core.nth.call(null, vec__13347, 1, null);
  var start_column__$1 = cljs.core.truth_(start_column) ? start_column - 1 | 0 : null;
  var coll = cljs.tools.reader.read_delimited.call(null, "}", rdr, opts, pending_forms);
  var the_set = cljs.core.set.call(null, coll);
  var vec__13350 = cljs.tools.reader.ending_line_col_info.call(null, rdr);
  var end_line = cljs.core.nth.call(null, vec__13350, 0, null);
  var end_column = cljs.core.nth.call(null, vec__13350, 1, null);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, coll), cljs.core.count.call(null, the_set))) {
  } else {
    cljs.tools.reader.reader_types.reader_error.call(null, rdr, cljs.tools.reader.duplicate_keys_error.call(null, "Set literal contains duplicate key", coll));
  }
  return cljs.core.with_meta.call(null, the_set, cljs.core.truth_(start_line) ? cljs.core.merge.call(null, function() {
    var temp__4657__auto__ = cljs.tools.reader.reader_types.get_file_name.call(null, rdr);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var file = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "file", "file", -1269645878), file], null);
    } else {
      return null;
    }
  }(), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "line", "line", 212345235), start_line, new cljs.core.Keyword(null, "column", "column", 2078222095), start_column__$1, new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), end_line, new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), end_column], null)) : null);
};
cljs.tools.reader.read_discard = function cljs$tools$reader$read_discard(rdr, _, opts, pending_forms) {
  var G__13354 = rdr;
  cljs.tools.reader.read_STAR_.call(null, G__13354, true, null, opts, pending_forms);
  return G__13354;
};
cljs.tools.reader.RESERVED_FEATURES = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "else", "else", -1508377146), null, new cljs.core.Keyword(null, "none", "none", 1333468478), null], null), null);
cljs.tools.reader.has_feature_QMARK_ = function cljs$tools$reader$has_feature_QMARK_(rdr, feature, opts) {
  if (feature instanceof cljs.core.Keyword) {
    return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "default", "default", -1987822328), feature) || cljs.core.contains_QMARK_.call(null, cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "features", "features", -1146962336)), feature);
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Feature should be a keyword: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(feature)].join(""));
  }
};
cljs.tools.reader.check_eof_error = function cljs$tools$reader$check_eof_error(form, rdr, first_line) {
  if (form === cljs.tools.reader.READ_EOF) {
    if (first_line < 0) {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading");
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading, starting at line ", first_line);
    }
  } else {
    return null;
  }
};
cljs.tools.reader.check_reserved_features = function cljs$tools$reader$check_reserved_features(rdr, form) {
  if (cljs.core.truth_(cljs.core.get.call(null, cljs.tools.reader.RESERVED_FEATURES, form))) {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Feature name "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(form), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is reserved")].join(""));
  } else {
    return null;
  }
};
cljs.tools.reader.check_invalid_read_cond = function cljs$tools$reader$check_invalid_read_cond(form, rdr, first_line) {
  if (form === cljs.tools.reader.READ_FINISHED) {
    if (first_line < 0) {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "read-cond requires an even number of forms");
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("read-cond starting on line "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(first_line), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" requires an even number of forms")].join(""));
    }
  } else {
    return null;
  }
};
cljs.tools.reader.read_suppress = function cljs$tools$reader$read_suppress(first_line, rdr, opts, pending_forms) {
  var _STAR_suppress_read_STAR_13356 = cljs.tools.reader._STAR_suppress_read_STAR_;
  cljs.tools.reader._STAR_suppress_read_STAR_ = true;
  try {
    var form = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, ")", opts, pending_forms);
    cljs.tools.reader.check_eof_error.call(null, form, rdr, first_line);
    if (form === cljs.tools.reader.READ_FINISHED) {
      return cljs.tools.reader.READ_FINISHED;
    } else {
      return null;
    }
  } finally {
    cljs.tools.reader._STAR_suppress_read_STAR_ = _STAR_suppress_read_STAR_13356;
  }
};
if (typeof cljs.tools.reader.NO_MATCH !== "undefined") {
} else {
  cljs.tools.reader.NO_MATCH = new Object;
}
cljs.tools.reader.match_feature = function cljs$tools$reader$match_feature(first_line, rdr, opts, pending_forms) {
  var feature = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, ")", opts, pending_forms);
  cljs.tools.reader.check_eof_error.call(null, feature, rdr, first_line);
  if (cljs.core._EQ_.call(null, feature, cljs.tools.reader.READ_FINISHED)) {
    return cljs.tools.reader.READ_FINISHED;
  } else {
    cljs.tools.reader.check_reserved_features.call(null, rdr, feature);
    if (cljs.core.truth_(cljs.tools.reader.has_feature_QMARK_.call(null, rdr, feature, opts))) {
      var G__13358 = cljs.tools.reader.read_STAR_.call(null, rdr, false, cljs.tools.reader.READ_EOF, ")", opts, pending_forms);
      cljs.tools.reader.check_eof_error.call(null, G__13358, rdr, first_line);
      cljs.tools.reader.check_invalid_read_cond.call(null, G__13358, rdr, first_line);
      return G__13358;
    } else {
      var or__7410__auto__ = cljs.tools.reader.read_suppress.call(null, first_line, rdr, opts, pending_forms);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.tools.reader.NO_MATCH;
      }
    }
  }
};
cljs.tools.reader.read_cond_delimited = function cljs$tools$reader$read_cond_delimited(rdr, splicing, opts, pending_forms) {
  var first_line = cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, rdr)) ? cljs.tools.reader.reader_types.get_line_number.call(null, rdr) : -1;
  var result = function() {
    var matched = cljs.tools.reader.NO_MATCH;
    var finished = null;
    while (true) {
      if (matched === cljs.tools.reader.NO_MATCH) {
        var match = cljs.tools.reader.match_feature.call(null, first_line, rdr, opts, pending_forms);
        if (match === cljs.tools.reader.READ_FINISHED) {
          return cljs.tools.reader.READ_FINISHED;
        } else {
          var G__13361 = match;
          var G__13362 = null;
          matched = G__13361;
          finished = G__13362;
          continue;
        }
      } else {
        if (!(finished === cljs.tools.reader.READ_FINISHED)) {
          var G__13363 = matched;
          var G__13364 = cljs.tools.reader.read_suppress.call(null, first_line, rdr, opts, pending_forms);
          matched = G__13363;
          finished = G__13364;
          continue;
        } else {
          return matched;
        }
      }
      break;
    }
  }();
  if (result === cljs.tools.reader.READ_FINISHED) {
    return rdr;
  } else {
    if (cljs.core.truth_(splicing)) {
      if (!(result == null) ? result.cljs$lang$protocol_mask$partition0$ & 16777216 || cljs.core.PROTOCOL_SENTINEL === result.cljs$core$ISequential$ ? true : false : false) {
        goog.array.insertArrayAt(pending_forms, cljs.core.to_array.call(null, result), 0);
        return rdr;
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Spliced form list in read-cond-splicing must implement java.util.List.");
      }
    } else {
      return result;
    }
  }
};
cljs.tools.reader.read_cond = function cljs$tools$reader$read_cond(rdr, _, opts, pending_forms) {
  if (cljs.core.not.call(null, function() {
    var and__7398__auto__ = opts;
    if (cljs.core.truth_(and__7398__auto__)) {
      return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "preserve", "preserve", 1276846509), null, new cljs.core.Keyword(null, "allow", "allow", -1857325745), null], null), null)).call(null, (new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244)).cljs$core$IFn$_invoke$arity$1(opts));
    } else {
      return and__7398__auto__;
    }
  }())) {
    throw cljs.core.ex_info.call(null, "Conditional read not allowed", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "runtime-exception", "runtime-exception", -1495664514)], null));
  } else {
  }
  var temp__4655__auto__ = cljs.tools.reader.reader_types.read_char.call(null, rdr);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var ch = temp__4655__auto__;
    var splicing = cljs.core._EQ_.call(null, ch, "@");
    var ch__$1 = splicing ? cljs.tools.reader.reader_types.read_char.call(null, rdr) : ch;
    if (splicing) {
      if (cljs.tools.reader._STAR_read_delim_STAR_) {
      } else {
        cljs.tools.reader.reader_types.reader_error.call(null, rdr, "cond-splice not in list");
      }
    } else {
    }
    var temp__4655__auto____$1 = cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch__$1) ? cljs.tools.reader.impl.commons.read_past.call(null, cljs.tools.reader.impl.utils.whitespace_QMARK_, rdr) : ch__$1;
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var ch__$2 = temp__4655__auto____$1;
      if (cljs.core.not_EQ_.call(null, ch__$2, "(")) {
        throw cljs.core.ex_info.call(null, "read-cond body must be a list", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "runtime-exception", "runtime-exception", -1495664514)], null));
      } else {
        var _STAR_suppress_read_STAR_13366 = cljs.tools.reader._STAR_suppress_read_STAR_;
        cljs.tools.reader._STAR_suppress_read_STAR_ = function() {
          var or__7410__auto__ = cljs.tools.reader._STAR_suppress_read_STAR_;
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "preserve", "preserve", 1276846509), (new cljs.core.Keyword(null, "read-cond", "read-cond", 1056899244)).cljs$core$IFn$_invoke$arity$1(opts));
          }
        }();
        try {
          if (cljs.core.truth_(cljs.tools.reader._STAR_suppress_read_STAR_)) {
            return cljs.tools.reader.impl.utils.reader_conditional.call(null, cljs.tools.reader.read_list.call(null, rdr, ch__$2, opts, pending_forms), splicing);
          } else {
            return cljs.tools.reader.read_cond_delimited.call(null, rdr, splicing, opts, pending_forms);
          }
        } finally {
          cljs.tools.reader._STAR_suppress_read_STAR_ = _STAR_suppress_read_STAR_13366;
        }
      }
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "EOF while reading character");
  }
};
cljs.tools.reader.arg_env = null;
cljs.tools.reader.garg = function cljs$tools$reader$garg(n) {
  return cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(-1 === n ? "rest" : [cljs.core.str.cljs$core$IFn$_invoke$arity$1("p"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("__"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.tools.reader.impl.utils.next_id.call(null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("#")].join(""));
};
cljs.tools.reader.read_fn = function cljs$tools$reader$read_fn(rdr, _, opts, pending_forms) {
  if (cljs.core.truth_(cljs.tools.reader.arg_env)) {
    throw cljs.core.ex_info.call(null, "Nested #()s are not allowed", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  } else {
  }
  var arg_env13369 = cljs.tools.reader.arg_env;
  cljs.tools.reader.arg_env = cljs.core.sorted_map.call(null);
  try {
    var form = cljs.tools.reader.read_STAR_.call(null, function() {
      var G__13370 = rdr;
      cljs.tools.reader.reader_types.unread.call(null, G__13370, "(");
      return G__13370;
    }(), true, null, opts, pending_forms);
    var rargs = cljs.core.rseq.call(null, cljs.tools.reader.arg_env);
    var args = rargs ? function() {
      var higharg = cljs.core.key.call(null, cljs.core.first.call(null, rargs));
      var args = function() {
        var i = 1;
        var args = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
        while (true) {
          if (i > higharg) {
            return cljs.core.persistent_BANG_.call(null, args);
          } else {
            var G__13371 = i + 1;
            var G__13372 = cljs.core.conj_BANG_.call(null, args, function() {
              var or__7410__auto__ = cljs.core.get.call(null, cljs.tools.reader.arg_env, i);
              if (cljs.core.truth_(or__7410__auto__)) {
                return or__7410__auto__;
              } else {
                return cljs.tools.reader.garg.call(null, i);
              }
            }());
            i = G__13371;
            args = G__13372;
            continue;
          }
          break;
        }
      }();
      var args__$1 = cljs.core.truth_(cljs.tools.reader.arg_env.call(null, -1)) ? cljs.core.conj.call(null, args, new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), cljs.tools.reader.arg_env.call(null, -1)) : args;
      return args__$1;
    }() : cljs.core.PersistentVector.EMPTY;
    return cljs.core._conj.call(null, function() {
      var x__8252__auto__ = args;
      return cljs.core._conj.call(null, function() {
        var x__8252__auto____$1 = form;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
      }(), x__8252__auto__);
    }(), new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null));
  } finally {
    cljs.tools.reader.arg_env = arg_env13369;
  }
};
cljs.tools.reader.register_arg = function cljs$tools$reader$register_arg(n) {
  if (cljs.core.truth_(cljs.tools.reader.arg_env)) {
    var temp__4655__auto__ = cljs.tools.reader.arg_env.call(null, n);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var ret = temp__4655__auto__;
      return ret;
    } else {
      var g = cljs.tools.reader.garg.call(null, n);
      cljs.tools.reader.arg_env = cljs.core.assoc.call(null, cljs.tools.reader.arg_env, n, g);
      return g;
    }
  } else {
    throw cljs.core.ex_info.call(null, "Arg literal not in #()", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  }
};
cljs.tools.reader.read_arg = function cljs$tools$reader$read_arg(rdr, pct, opts, pending_forms) {
  if (cljs.tools.reader.arg_env == null) {
    return cljs.tools.reader.read_symbol.call(null, rdr, pct);
  } else {
    var ch = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
    if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch) || cljs.tools.reader.macro_terminating_QMARK_.call(null, ch) || ch == null) {
      return cljs.tools.reader.register_arg.call(null, 1);
    } else {
      if (cljs.core._EQ_.call(null, ch, "\x26")) {
        cljs.tools.reader.reader_types.read_char.call(null, rdr);
        return cljs.tools.reader.register_arg.call(null, -1);
      } else {
        var n = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
        if (!cljs.core.integer_QMARK_.call(null, n)) {
          throw cljs.core.ex_info.call(null, "Arg literal must be %, %\x26 or %integer", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
        } else {
          return cljs.tools.reader.register_arg.call(null, n);
        }
      }
    }
  }
};
cljs.tools.reader.gensym_env = null;
cljs.tools.reader.read_unquote = function cljs$tools$reader$read_unquote(rdr, comma, opts, pending_forms) {
  var temp__4655__auto__ = cljs.tools.reader.reader_types.peek_char.call(null, rdr);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var ch = temp__4655__auto__;
    if (cljs.core._EQ_.call(null, "@", ch)) {
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol("clojure.core", "unquote-splicing", "clojure.core/unquote-splicing", -552003150, null)).call(null, function() {
        var G__13374 = rdr;
        cljs.tools.reader.reader_types.read_char.call(null, G__13374);
        return G__13374;
      }(), "@", opts, pending_forms);
    } else {
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol("clojure.core", "unquote", "clojure.core/unquote", 843087510, null)).call(null, rdr, "~", opts, pending_forms);
    }
  } else {
    return null;
  }
};
cljs.tools.reader.unquote_splicing_QMARK_ = function cljs$tools$reader$unquote_splicing_QMARK_(form) {
  return cljs.core.seq_QMARK_.call(null, form) && cljs.core._EQ_.call(null, cljs.core.first.call(null, form), new cljs.core.Symbol("clojure.core", "unquote-splicing", "clojure.core/unquote-splicing", -552003150, null));
};
cljs.tools.reader.unquote_QMARK_ = function cljs$tools$reader$unquote_QMARK_(form) {
  return cljs.core.seq_QMARK_.call(null, form) && cljs.core._EQ_.call(null, cljs.core.first.call(null, form), new cljs.core.Symbol("clojure.core", "unquote", "clojure.core/unquote", 843087510, null));
};
cljs.tools.reader.expand_list = function cljs$tools$reader$expand_list(s) {
  var s__$1 = cljs.core.seq.call(null, s);
  var r = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    if (s__$1) {
      var item = cljs.core.first.call(null, s__$1);
      var ret = cljs.core.conj_BANG_.call(null, r, cljs.core.truth_(cljs.tools.reader.unquote_QMARK_.call(null, item)) ? cljs.core._conj.call(null, function() {
        var x__8252__auto__ = cljs.core.second.call(null, item);
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), new cljs.core.Symbol("clojure.core", "list", "clojure.core/list", -1119203325, null)) : cljs.core.truth_(cljs.tools.reader.unquote_splicing_QMARK_.call(null, item)) ? cljs.core.second.call(null, item) : cljs.core._conj.call(null, function() {
        var x__8252__auto__ = cljs.tools.reader.syntax_quote_STAR_.call(null, item);
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), new cljs.core.Symbol("clojure.core", "list", "clojure.core/list", -1119203325, null)));
      var G__13375 = cljs.core.next.call(null, s__$1);
      var G__13376 = ret;
      s__$1 = G__13375;
      r = G__13376;
      continue;
    } else {
      return cljs.core.seq.call(null, cljs.core.persistent_BANG_.call(null, r));
    }
    break;
  }
};
cljs.tools.reader.flatten_map = function cljs$tools$reader$flatten_map(form) {
  var s = cljs.core.seq.call(null, form);
  var key_vals = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__13377 = cljs.core.next.call(null, s);
      var G__13378 = cljs.core.conj_BANG_.call(null, cljs.core.conj_BANG_.call(null, key_vals, cljs.core.key.call(null, e)), cljs.core.val.call(null, e));
      s = G__13377;
      key_vals = G__13378;
      continue;
    } else {
      return cljs.core.seq.call(null, cljs.core.persistent_BANG_.call(null, key_vals));
    }
    break;
  }
};
cljs.tools.reader.register_gensym = function cljs$tools$reader$register_gensym(sym) {
  if (cljs.core.not.call(null, cljs.tools.reader.gensym_env)) {
    throw cljs.core.ex_info.call(null, "Gensym literal not in syntax-quote", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  } else {
  }
  var or__7410__auto__ = cljs.core.get.call(null, cljs.tools.reader.gensym_env, sym);
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    var gs = cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.subs.call(null, cljs.core.name.call(null, sym), 0, cljs.core.count.call(null, cljs.core.name.call(null, sym)) - 1)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("__"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.tools.reader.impl.utils.next_id.call(null)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("__auto__")].join(""));
    cljs.tools.reader.gensym_env = cljs.core.assoc.call(null, cljs.tools.reader.gensym_env, sym, gs);
    return gs;
  }
};
cljs.tools.reader.add_meta = function cljs$tools$reader$add_meta(form, ret) {
  if (function() {
    var and__7398__auto__ = !(form == null) ? form.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === form.cljs$core$IWithMeta$ ? true : false : false;
    if (and__7398__auto__) {
      return cljs.core.seq.call(null, cljs.core.dissoc.call(null, cljs.core.meta.call(null, form), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "source", "source", -433931539)));
    } else {
      return and__7398__auto__;
    }
  }()) {
    return cljs.core._conj.call(null, function() {
      var x__8252__auto__ = ret;
      return cljs.core._conj.call(null, function() {
        var x__8252__auto____$1 = cljs.tools.reader.syntax_quote_STAR_.call(null, cljs.core.meta.call(null, form));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
      }(), x__8252__auto__);
    }(), new cljs.core.Symbol("cljs.core", "with-meta", "cljs.core/with-meta", 749126446, null));
  } else {
    return ret;
  }
};
cljs.tools.reader.syntax_quote_coll = function cljs$tools$reader$syntax_quote_coll(type, coll) {
  var res = cljs.core._conj.call(null, function() {
    var x__8252__auto__ = cljs.core.cons.call(null, new cljs.core.Symbol("cljs.core", "concat", "cljs.core/concat", -1133584918, null), cljs.tools.reader.expand_list.call(null, coll));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol("cljs.core", "sequence", "cljs.core/sequence", 1908459032, null));
  if (cljs.core.truth_(type)) {
    return cljs.core._conj.call(null, function() {
      var x__8252__auto__ = type;
      return cljs.core._conj.call(null, function() {
        var x__8252__auto____$1 = res;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
      }(), x__8252__auto__);
    }(), new cljs.core.Symbol("cljs.core", "apply", "cljs.core/apply", 1757277831, null));
  } else {
    return res;
  }
};
cljs.tools.reader.map_func = function cljs$tools$reader$map_func(coll) {
  if (cljs.core.count.call(null, coll) >= 16) {
    return new cljs.core.Symbol("cljs.core", "hash-map", "cljs.core/hash-map", 303385767, null);
  } else {
    return new cljs.core.Symbol("cljs.core", "array-map", "cljs.core/array-map", -1519210683, null);
  }
};
cljs.tools.reader.bool_QMARK_ = function cljs$tools$reader$bool_QMARK_(x) {
  return x instanceof Boolean || x === true || x === false;
};
cljs.tools.reader.resolve_symbol = function cljs$tools$reader$resolve_symbol(s) {
  throw cljs.core.ex_info.call(null, "resolve-symbol is not implemented", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), s], null));
};
cljs.tools.reader.syntax_quote_STAR_ = function cljs$tools$reader$syntax_quote_STAR_(form) {
  return cljs.tools.reader.add_meta.call(null, form, cljs.core.special_symbol_QMARK_.call(null, form) ? cljs.core._conj.call(null, function() {
    var x__8252__auto__ = form;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) : form instanceof cljs.core.Symbol ? cljs.core._conj.call(null, function() {
    var x__8252__auto__ = cljs.core.truth_(function() {
      var and__7398__auto__ = cljs.core.not.call(null, cljs.core.namespace.call(null, form));
      if (and__7398__auto__) {
        return goog.string.endsWith(cljs.core.name.call(null, form), "#");
      } else {
        return and__7398__auto__;
      }
    }()) ? cljs.tools.reader.register_gensym.call(null, form) : cljs.tools.reader.resolve_symbol.call(null, form);
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)) : cljs.core.truth_(cljs.tools.reader.unquote_QMARK_.call(null, form)) ? cljs.core.second.call(null, form) : cljs.core.truth_(cljs.tools.reader.unquote_splicing_QMARK_.call(null, form)) ? function() {
    throw cljs.core.ex_info.call(null, "unquote-splice not in list", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "illegal-state", "illegal-state", -1519851182)], null));
  }() : cljs.core.coll_QMARK_.call(null, form) ? (!(form == null) ? form.cljs$lang$protocol_mask$partition0$ & 67108864 || cljs.core.PROTOCOL_SENTINEL === form.cljs$core$IRecord$ ? true : false : false) ? form : cljs.core.map_QMARK_.call(null, form) ? cljs.tools.reader.syntax_quote_coll.call(null, cljs.tools.reader.map_func.call(null, form), cljs.tools.reader.flatten_map.call(null, form)) : cljs.core.vector_QMARK_.call(null, form) ? cljs.core._conj.call(null, function() {
    var x__8252__auto__ = cljs.tools.reader.syntax_quote_coll.call(null, null, form);
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol("cljs.core", "vec", "cljs.core/vec", 307622519, null)) : cljs.core.set_QMARK_.call(null, form) ? cljs.tools.reader.syntax_quote_coll.call(null, new cljs.core.Symbol("cljs.core", "hash-set", "cljs.core/hash-set", 1130426749, null), form) : cljs.core.seq_QMARK_.call(null, form) || cljs.core.list_QMARK_.call(null, form) ? function() {
    var seq = cljs.core.seq.call(null, form);
    if (seq) {
      return cljs.tools.reader.syntax_quote_coll.call(null, null, seq);
    } else {
      return cljs.core.list(new cljs.core.Symbol("cljs.core", "list", "cljs.core/list", -1331406371, null));
    }
  }() : function() {
    throw cljs.core.ex_info.call(null, "Unknown Collection type", new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "unsupported-operation", "unsupported-operation", 1890540953)], null));
  }() : cljs.core.truth_(function() {
    var or__7410__auto__ = form instanceof cljs.core.Keyword;
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      var or__7410__auto____$1 = typeof form === "number";
      if (or__7410__auto____$1) {
        return or__7410__auto____$1;
      } else {
        var or__7410__auto____$2 = typeof form === "string";
        if (or__7410__auto____$2) {
          return or__7410__auto____$2;
        } else {
          var or__7410__auto____$3 = form == null;
          if (or__7410__auto____$3) {
            return or__7410__auto____$3;
          } else {
            var or__7410__auto____$4 = cljs.tools.reader.bool_QMARK_.call(null, form);
            if (cljs.core.truth_(or__7410__auto____$4)) {
              return or__7410__auto____$4;
            } else {
              return form instanceof RegExp;
            }
          }
        }
      }
    }
  }()) ? form : cljs.core._conj.call(null, function() {
    var x__8252__auto__ = form;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)));
};
cljs.tools.reader.read_syntax_quote = function cljs$tools$reader$read_syntax_quote(rdr, backquote, opts, pending_forms) {
  var gensym_env13386 = cljs.tools.reader.gensym_env;
  cljs.tools.reader.gensym_env = cljs.core.PersistentArrayMap.EMPTY;
  try {
    return cljs.tools.reader.syntax_quote_STAR_.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
  } finally {
    cljs.tools.reader.gensym_env = gensym_env13386;
  }
};
cljs.tools.reader.read_namespaced_map = function cljs$tools$reader$read_namespaced_map(rdr, _, opts, pending_forms) {
  var token = cljs.tools.reader.read_token.call(null, rdr, cljs.tools.reader.reader_types.read_char.call(null, rdr));
  var temp__4655__auto__ = cljs.core._EQ_.call(null, token, ":") ? cljs.core.ns_name.call(null, cljs.core._STAR_ns_STAR_) : cljs.core._EQ_.call(null, ":", cljs.core.first.call(null, token)) ? function() {
    var G__13389 = token;
    var G__13389__$1 = G__13389 == null ? null : cljs.core.subs.call(null, G__13389, 1);
    var G__13389__$2 = G__13389__$1 == null ? null : cljs.tools.reader.impl.commons.parse_symbol.call(null, G__13389__$1);
    var G__13389__$3 = G__13389__$2 == null ? null : cljs.tools.reader.impl.utils.second_SINGLEQUOTE_.call(null, G__13389__$2);
    var G__13389__$4 = G__13389__$3 == null ? null : cljs.core.symbol.call(null, G__13389__$3);
    if (G__13389__$4 == null) {
      return null;
    } else {
      return cljs.tools.reader.resolve_ns.call(null, G__13389__$4);
    }
  }() : function() {
    var G__13390 = token;
    var G__13390__$1 = G__13390 == null ? null : cljs.tools.reader.impl.commons.parse_symbol.call(null, G__13390);
    if (G__13390__$1 == null) {
      return null;
    } else {
      return cljs.tools.reader.impl.utils.second_SINGLEQUOTE_.call(null, G__13390__$1);
    }
  }();
  if (cljs.core.truth_(temp__4655__auto__)) {
    var ns = temp__4655__auto__;
    var ch = cljs.tools.reader.impl.commons.read_past.call(null, cljs.tools.reader.impl.utils.whitespace_QMARK_, rdr);
    if (ch === "{") {
      var items = cljs.tools.reader.read_delimited.call(null, "}", rdr, opts, pending_forms);
      if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, items))) {
        cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
      } else {
      }
      var keys = cljs.core.take_nth.call(null, 2, items);
      var vals = cljs.core.take_nth.call(null, 2, cljs.core.rest.call(null, items));
      return cljs.core.zipmap.call(null, cljs.tools.reader.impl.utils.namespace_keys.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(""), keys), vals);
    } else {
      return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Namespaced map must specify a map");
    }
  } else {
    return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Invalid token used as namespace in namespaced map: ", token);
  }
};
cljs.tools.reader.macros = function cljs$tools$reader$macros(ch) {
  var G__13392 = ch;
  switch(G__13392) {
    case '"':
      return cljs.tools.reader.read_string_STAR_;
      break;
    case ":":
      return cljs.tools.reader.read_keyword;
      break;
    case ";":
      return cljs.tools.reader.impl.commons.read_comment;
      break;
    case "'":
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
      break;
    case "@":
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol("clojure.core", "deref", "clojure.core/deref", 188719157, null));
      break;
    case "^":
      return cljs.tools.reader.read_meta;
      break;
    case "`":
      return cljs.tools.reader.read_syntax_quote;
      break;
    case "~":
      return cljs.tools.reader.read_unquote;
      break;
    case "(":
      return cljs.tools.reader.read_list;
      break;
    case ")":
      return cljs.tools.reader.read_unmatched_delimiter;
      break;
    case "[":
      return cljs.tools.reader.read_vector;
      break;
    case "]":
      return cljs.tools.reader.read_unmatched_delimiter;
      break;
    case "{":
      return cljs.tools.reader.read_map;
      break;
    case "}":
      return cljs.tools.reader.read_unmatched_delimiter;
      break;
    case "\\":
      return cljs.tools.reader.read_char_STAR_;
      break;
    case "%":
      return cljs.tools.reader.read_arg;
      break;
    case "#":
      return cljs.tools.reader.read_dispatch;
      break;
    default:
      return null;
  }
};
cljs.tools.reader.dispatch_macros = function cljs$tools$reader$dispatch_macros(ch) {
  var G__13395 = ch;
  switch(G__13395) {
    case "^":
      return cljs.tools.reader.read_meta;
      break;
    case "'":
      return cljs.tools.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "var", "var", 870848730, null));
      break;
    case "(":
      return cljs.tools.reader.read_fn;
      break;
    case "{":
      return cljs.tools.reader.read_set;
      break;
    case "\x3c":
      return cljs.tools.reader.impl.commons.throwing_reader.call(null, "Unreadable form");
      break;
    case "\x3d":
      return cljs.tools.reader.impl.commons.throwing_reader.call(null, "read-eval not supported");
      break;
    case '"':
      return cljs.tools.reader.read_regex;
      break;
    case "!":
      return cljs.tools.reader.impl.commons.read_comment;
      break;
    case "_":
      return cljs.tools.reader.read_discard;
      break;
    case "?":
      return cljs.tools.reader.read_cond;
      break;
    case ":":
      return cljs.tools.reader.read_namespaced_map;
      break;
    default:
      return null;
  }
};
cljs.tools.reader.read_tagged = function cljs$tools$reader$read_tagged(rdr, initch, opts, pending_forms) {
  var tag = cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms);
  if (!(tag instanceof cljs.core.Symbol)) {
    cljs.tools.reader.reader_types.reader_error.call(null, rdr, "Reader tag must be a symbol");
  } else {
  }
  if (cljs.core.truth_(cljs.tools.reader._STAR_suppress_read_STAR_)) {
    return cljs.core.tagged_literal.call(null, tag, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
  } else {
    var temp__4655__auto__ = function() {
      var or__7410__auto__ = cljs.tools.reader._STAR_data_readers_STAR_.call(null, tag);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.tools.reader.default_data_readers.call(null, tag);
      }
    }();
    if (cljs.core.truth_(temp__4655__auto__)) {
      var f = temp__4655__auto__;
      return f.call(null, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
    } else {
      var temp__4655__auto____$1 = cljs.tools.reader._STAR_default_data_reader_fn_STAR_;
      if (cljs.core.truth_(temp__4655__auto____$1)) {
        var f = temp__4655__auto____$1;
        return f.call(null, tag, cljs.tools.reader.read_STAR_.call(null, rdr, true, null, opts, pending_forms));
      } else {
        return cljs.tools.reader.reader_types.reader_error.call(null, rdr, "No reader function for tag ", cljs.core.name.call(null, tag));
      }
    }
  }
};
cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.PersistentArrayMap.EMPTY;
cljs.tools.reader._STAR_default_data_reader_fn_STAR_ = null;
cljs.tools.reader._STAR_suppress_read_STAR_ = false;
cljs.tools.reader.default_data_readers = cljs.core.PersistentArrayMap.EMPTY;
cljs.tools.reader.read_STAR__internal = function cljs$tools$reader$read_STAR__internal(reader, eof_error_QMARK_, sentinel, return_on, opts, pending_forms) {
  while (true) {
    if (cljs.tools.reader.reader_types.source_logging_reader_QMARK_.call(null, reader) && !cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, cljs.tools.reader.reader_types.peek_char.call(null, reader))) {
      return cljs.tools.reader.reader_types.log_source_STAR_.call(null, reader, function() {
        while (true) {
          if (!goog.array.isEmpty(pending_forms)) {
            var form = pending_forms[0];
            goog.array.removeAt(pending_forms, 0);
            return form;
          } else {
            var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
            if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch)) {
              continue;
            } else {
              if (ch == null) {
                if (eof_error_QMARK_) {
                  return cljs.tools.reader.reader_types.reader_error.call(null, reader, "EOF");
                } else {
                  return sentinel;
                }
              } else {
                if (ch === return_on) {
                  return cljs.tools.reader.READ_FINISHED;
                } else {
                  if (cljs.tools.reader.impl.commons.number_literal_QMARK_.call(null, reader, ch)) {
                    return cljs.tools.reader.read_number.call(null, reader, ch);
                  } else {
                    var f = cljs.tools.reader.macros.call(null, ch);
                    if (!(f == null)) {
                      var res = f.call(null, reader, ch, opts, pending_forms);
                      if (res === reader) {
                        continue;
                      } else {
                        return res;
                      }
                    } else {
                      return cljs.tools.reader.read_symbol.call(null, reader, ch);
                    }
                  }
                }
              }
            }
          }
          break;
        }
      });
    } else {
      if (!goog.array.isEmpty(pending_forms)) {
        var form = pending_forms[0];
        goog.array.removeAt(pending_forms, 0);
        return form;
      } else {
        var ch = cljs.tools.reader.reader_types.read_char.call(null, reader);
        if (cljs.tools.reader.impl.utils.whitespace_QMARK_.call(null, ch)) {
          continue;
        } else {
          if (ch == null) {
            if (eof_error_QMARK_) {
              return cljs.tools.reader.reader_types.reader_error.call(null, reader, "EOF");
            } else {
              return sentinel;
            }
          } else {
            if (ch === return_on) {
              return cljs.tools.reader.READ_FINISHED;
            } else {
              if (cljs.tools.reader.impl.commons.number_literal_QMARK_.call(null, reader, ch)) {
                return cljs.tools.reader.read_number.call(null, reader, ch);
              } else {
                var f = cljs.tools.reader.macros.call(null, ch);
                if (!(f == null)) {
                  var res = f.call(null, reader, ch, opts, pending_forms);
                  if (res === reader) {
                    continue;
                  } else {
                    return res;
                  }
                } else {
                  return cljs.tools.reader.read_symbol.call(null, reader, ch);
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
cljs.tools.reader.read_STAR_ = function cljs$tools$reader$read_STAR_(var_args) {
  var args13397 = [];
  var len__8523__auto___13401 = arguments.length;
  var i__8524__auto___13402 = 0;
  while (true) {
    if (i__8524__auto___13402 < len__8523__auto___13401) {
      args13397.push(arguments[i__8524__auto___13402]);
      var G__13403 = i__8524__auto___13402 + 1;
      i__8524__auto___13402 = G__13403;
      continue;
    } else {
    }
    break;
  }
  var G__13399 = args13397.length;
  switch(G__13399) {
    case 5:
      return cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13397.length)].join(""));
  }
};
cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$5 = function(reader, eof_error_QMARK_, sentinel, opts, pending_forms) {
  return cljs.tools.reader.read_STAR_.call(null, reader, eof_error_QMARK_, sentinel, null, opts, pending_forms);
};
cljs.tools.reader.read_STAR_.cljs$core$IFn$_invoke$arity$6 = function(reader, eof_error_QMARK_, sentinel, return_on, opts, pending_forms) {
  try {
    return cljs.tools.reader.read_STAR__internal.call(null, reader, eof_error_QMARK_, sentinel, return_on, opts, pending_forms);
  } catch (e13400) {
    if (e13400 instanceof Error) {
      var e = e13400;
      if (cljs.tools.reader.impl.utils.ex_info_QMARK_.call(null, e)) {
        var d = cljs.core.ex_data.call(null, e);
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098), (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(d))) {
          throw e;
        } else {
          throw cljs.core.ex_info.call(null, e.message, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098)], null), d, cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, reader)) ? new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "line", "line", 212345235), cljs.tools.reader.reader_types.get_line_number.call(null, 
          reader), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.tools.reader.reader_types.get_column_number.call(null, reader), new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.tools.reader.reader_types.get_file_name.call(null, reader)], null) : null), e);
        }
      } else {
        throw cljs.core.ex_info.call(null, e.message, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword(null, "reader-exception", "reader-exception", -1938323098)], null), cljs.core.truth_(cljs.tools.reader.reader_types.indexing_reader_QMARK_.call(null, reader)) ? new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "line", "line", 212345235), cljs.tools.reader.reader_types.get_line_number.call(null, 
        reader), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.tools.reader.reader_types.get_column_number.call(null, reader), new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.tools.reader.reader_types.get_file_name.call(null, reader)], null) : null), e);
      }
    } else {
      throw e13400;
    }
  }
};
cljs.tools.reader.read_STAR_.cljs$lang$maxFixedArity = 6;
cljs.tools.reader.read = function cljs$tools$reader$read(var_args) {
  var args13405 = [];
  var len__8523__auto___13411 = arguments.length;
  var i__8524__auto___13412 = 0;
  while (true) {
    if (i__8524__auto___13412 < len__8523__auto___13411) {
      args13405.push(arguments[i__8524__auto___13412]);
      var G__13413 = i__8524__auto___13412 + 1;
      i__8524__auto___13412 = G__13413;
      continue;
    } else {
    }
    break;
  }
  var G__13407 = args13405.length;
  switch(G__13407) {
    case 1:
      return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13405.length)].join(""));
  }
};
cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$1 = function(reader) {
  return cljs.tools.reader.read.call(null, reader, true, null);
};
cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2 = function(p__13408, reader) {
  var map__13409 = p__13408;
  var map__13409__$1 = (!(map__13409 == null) ? map__13409.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13409.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13409) : map__13409;
  var opts = map__13409__$1;
  var eof = cljs.core.get.call(null, map__13409__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237), new cljs.core.Keyword(null, "eofthrow", "eofthrow", -334166531));
  return cljs.tools.reader.read_STAR_.call(null, reader, cljs.core._EQ_.call(null, eof, new cljs.core.Keyword(null, "eofthrow", "eofthrow", -334166531)), eof, null, opts, cljs.core.to_array.call(null, cljs.core.PersistentVector.EMPTY));
};
cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$3 = function(reader, eof_error_QMARK_, sentinel) {
  return cljs.tools.reader.read_STAR_.call(null, reader, eof_error_QMARK_, sentinel, null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.to_array.call(null, cljs.core.PersistentVector.EMPTY));
};
cljs.tools.reader.read.cljs$lang$maxFixedArity = 3;
cljs.tools.reader.read_string = function cljs$tools$reader$read_string(var_args) {
  var args13415 = [];
  var len__8523__auto___13418 = arguments.length;
  var i__8524__auto___13419 = 0;
  while (true) {
    if (i__8524__auto___13419 < len__8523__auto___13418) {
      args13415.push(arguments[i__8524__auto___13419]);
      var G__13420 = i__8524__auto___13419 + 1;
      i__8524__auto___13419 = G__13420;
      continue;
    } else {
    }
    break;
  }
  var G__13417 = args13415.length;
  switch(G__13417) {
    case 1:
      return cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13415.length)].join(""));
  }
};
cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.tools.reader.read_string.call(null, cljs.core.PersistentArrayMap.EMPTY, s);
};
cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$2 = function(opts, s) {
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = s;
    if (cljs.core.truth_(and__7398__auto__)) {
      return !(s === "");
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.tools.reader.read.call(null, opts, cljs.tools.reader.reader_types.string_push_back_reader.call(null, s));
  } else {
    return null;
  }
};
cljs.tools.reader.read_string.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
cljs.reader.PushbackReader = function() {
};
cljs.reader.read_char = function cljs$reader$read_char(reader) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$read_char$arity$1 == null)) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.reader.read_char[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader);
    } else {
      var m__8079__auto____$1 = cljs.reader.read_char["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
      }
    }
  }
};
cljs.reader.unread = function cljs$reader$unread(reader, ch) {
  if (!(reader == null) && !(reader.cljs$reader$PushbackReader$unread$arity$2 == null)) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__8078__auto__ = reader == null ? null : reader;
    var m__8079__auto__ = cljs.reader.unread[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reader, ch);
    } else {
      var m__8079__auto____$1 = cljs.reader.unread["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reader, ch);
      } else {
        throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
      }
    }
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = cljs.core.PROTOCOL_SENTINEL;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.StringPushbackReader.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "s", "s", -948495851, null), new cljs.core.Symbol(null, "buffer", "buffer", -2037140571, null), cljs.core.with_meta(new cljs.core.Symbol(null, "idx", "idx", -1600747296, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.__GT_StringPushbackReader = function cljs$reader$__GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function cljs$reader$push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function cljs$reader$whitespace_QMARK_(ch) {
  var or__7410__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function cljs$reader$numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function cljs$reader$comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function cljs$reader$number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function cljs$reader$reader_error(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___13530 = arguments.length;
  var i__8524__auto___13531 = 0;
  while (true) {
    if (i__8524__auto___13531 < len__8523__auto___13530) {
      args__8530__auto__.push(arguments[i__8524__auto___13531]);
      var G__13532 = i__8524__auto___13531 + 1;
      i__8524__auto___13531 = G__13532;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 1 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(1), 0, null) : null;
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__8531__auto__);
};
cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic = function(rdr, msg) {
  throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
};
cljs.reader.reader_error.cljs$lang$maxFixedArity = 1;
cljs.reader.reader_error.cljs$lang$applyTo = function(seq13528) {
  var G__13529 = cljs.core.first.call(null, seq13528);
  var seq13528__$1 = cljs.core.next.call(null, seq13528);
  return cljs.reader.reader_error.cljs$core$IFn$_invoke$arity$variadic(G__13529, seq13528__$1);
};
cljs.reader.macro_terminating_QMARK_ = function cljs$reader$macro_terminating_QMARK_(ch) {
  var and__7398__auto__ = !(ch === "#");
  if (and__7398__auto__) {
    var and__7398__auto____$1 = !(ch === "'");
    if (and__7398__auto____$1) {
      var and__7398__auto____$2 = !(ch === ":");
      if (and__7398__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__7398__auto____$2;
      }
    } else {
      return and__7398__auto____$1;
    }
  } else {
    return and__7398__auto__;
  }
};
cljs.reader.read_token = function cljs$reader$read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__13533 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__13534 = cljs.reader.read_char.call(null, rdr);
      sb = G__13533;
      ch = G__13534;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function cljs$reader$skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function cljs$reader$re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function cljs$reader$match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return -parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function cljs$reader$match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function cljs$reader$match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function cljs$reader$match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function cljs$reader$escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return '"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function cljs$reader$read_2_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function cljs$reader$read_4_chars(reader) {
  return (new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function cljs$reader$validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function cljs$reader$make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function cljs$reader$escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function cljs$reader$read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__13535 = cljs.reader.read_char.call(null, rdr);
      ch = G__13535;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function cljs$reader$read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = [];
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return a;
    } else {
      var temp__4655__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var macrofn = temp__4655__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__13536 = mret === rdr ? a : function() {
          a.push(mret);
          return a;
        }();
        a = G__13536;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__13537 = o === rdr ? a : function() {
          a.push(o);
          return a;
        }();
        a = G__13537;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function cljs$reader$not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function cljs$reader$read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4655__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var obj = temp__4655__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function cljs$reader$read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmatched delimiter ", ch);
};
cljs.reader.read_list = function cljs$reader$read_list(rdr, _) {
  var arr = cljs.reader.read_delimited_list.call(null, ")", rdr, true);
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__13538 = i - 1;
      var G__13539 = cljs.core._conj.call(null, r, arr[i - 1]);
      i = G__13538;
      r = G__13539;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function cljs$reader$read_vector(rdr, _) {
  return cljs.core.vec.call(null, cljs.reader.read_delimited_list.call(null, "]", rdr, true));
};
cljs.reader.read_map = function cljs$reader$read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  var c = l.length;
  if (cljs.core.odd_QMARK_.call(null, c)) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  if (c <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    return cljs.core.PersistentArrayMap.createWithCheck(l);
  } else {
    return cljs.core.PersistentHashMap.createWithCheck(l);
  }
};
cljs.reader.read_number = function cljs$reader$read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__7410__auto__ = ch == null;
      if (or__7410__auto__) {
        return or__7410__auto__;
      } else {
        var or__7410__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__7410__auto____$1) {
          return or__7410__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__7410__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__13540 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__13541 = cljs.reader.read_char.call(null, reader);
      buffer = G__13540;
      ch = G__13541;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function cljs$reader$read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__13542 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__13543 = cljs.reader.read_char.call(null, reader);
        buffer = G__13542;
        ch = G__13543;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__13544 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__13545 = cljs.reader.read_char.call(null, reader);
          buffer = G__13544;
          ch = G__13545;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function cljs$reader$read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__13550 = function() {
            var G__13548 = buffer;
            G__13548.append(nch);
            return G__13548;
          }();
          var G__13551 = cljs.reader.read_char.call(null, reader);
          buffer = G__13550;
          ch = G__13551;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__13552 = function() {
            var G__13549 = buffer;
            G__13549.append(ch);
            return G__13549;
          }();
          var G__13553 = cljs.reader.read_char.call(null, reader);
          buffer = G__13552;
          ch = G__13553;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function cljs$reader$special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (t === "/") {
          return new cljs.core.Symbol(null, "/", "/", -1371932971, null);
        } else {
          return not_found;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function cljs$reader$read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = goog.string.contains(token, "/");
    if (cljs.core.truth_(and__7398__auto__)) {
      return !(token.length === 1);
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_literal = function cljs$reader$read_literal(rdr, ch) {
  var token = cljs.reader.read_token.call(null, rdr, ch);
  var chars = cljs.core.subs.call(null, token, 1);
  if (chars.length === 1) {
    return chars;
  } else {
    if (chars === "tab") {
      return "\t";
    } else {
      if (chars === "return") {
        return "\r";
      } else {
        if (chars === "newline") {
          return "\n";
        } else {
          if (chars === "space") {
            return " ";
          } else {
            if (chars === "backspace") {
              return "\b";
            } else {
              if (chars === "formfeed") {
                return "\f";
              } else {
                if (chars.charAt(0) === "u") {
                  return cljs.reader.make_unicode_char.call(null, cljs.core.subs.call(null, chars, 1));
                } else {
                  if (chars.charAt(0) === "o") {
                    return cljs.reader.not_implemented.call(null, rdr, token);
                  } else {
                    return cljs.reader.reader_error.call(null, rdr, "Unknown character literal: ", token);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_keyword = function cljs$reader$read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function cljs$reader$desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return cljs.core.PersistentArrayMap.createAsIfByAssoc([f, true]);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function cljs$reader$wrapping_reader(sym) {
  return function(rdr, _) {
    var x__8252__auto__ = sym;
    return cljs.core._conj.call(null, function() {
      var x__8252__auto____$1 = cljs.reader.read.call(null, rdr, true, null, true);
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
    }(), x__8252__auto__);
  };
};
cljs.reader.throwing_reader = function cljs$reader$throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function cljs$reader$read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 262144 || cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IWithMeta$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, o)) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function cljs$reader$read_set(rdr, _) {
  return cljs.core.PersistentHashSet.createWithCheck(cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function cljs$reader$read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function cljs$reader$read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function cljs$reader$macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_literal;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function cljs$reader$dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function cljs$reader$read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__13556 = reader;
        var G__13557 = eof_is_error;
        var G__13558 = sentinel;
        var G__13559 = is_recursive;
        reader = G__13556;
        eof_is_error = G__13557;
        sentinel = G__13558;
        is_recursive = G__13559;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__13560 = cljs.reader.read_comment.call(null, reader, ch);
          var G__13561 = eof_is_error;
          var G__13562 = sentinel;
          var G__13563 = is_recursive;
          reader = G__13560;
          eof_is_error = G__13561;
          sentinel = G__13562;
          is_recursive = G__13563;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__13564 = reader;
            var G__13565 = eof_is_error;
            var G__13566 = sentinel;
            var G__13567 = is_recursive;
            reader = G__13564;
            eof_is_error = G__13565;
            sentinel = G__13566;
            is_recursive = G__13567;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function cljs$reader$read_string(s) {
  if (typeof s === "string") {
  } else {
    throw new Error("Cannot read from non-string object.");
  }
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function cljs$reader$zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__13568 = b.append("0");
          b = G__13568;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function cljs$reader$divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function cljs$reader$indivisible_QMARK_(num, div) {
  return cljs.core.not.call(null, cljs.reader.divisible_QMARK_.call(null, num, div));
};
cljs.reader.leap_year_QMARK_ = function cljs$reader$leap_year_QMARK_(year) {
  var and__7398__auto__ = cljs.reader.divisible_QMARK_.call(null, year, 4);
  if (cljs.core.truth_(and__7398__auto__)) {
    var or__7410__auto__ = cljs.reader.indivisible_QMARK_.call(null, year, 100);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return cljs.reader.divisible_QMARK_.call(null, year, 400);
    }
  } else {
    return and__7398__auto__;
  }
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function cljs$reader$parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function cljs$reader$check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" Failed:  "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(low), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\x3c\x3d"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(n), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\x3c\x3d"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function cljs$reader$parse_and_validate_timestamp(s) {
  var vec__13572 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__13572, 0, null);
  var years = cljs.core.nth.call(null, vec__13572, 1, null);
  var months = cljs.core.nth.call(null, vec__13572, 2, null);
  var days = cljs.core.nth.call(null, vec__13572, 3, null);
  var hours = cljs.core.nth.call(null, vec__13572, 4, null);
  var minutes = cljs.core.nth.call(null, vec__13572, 5, null);
  var seconds = cljs.core.nth.call(null, vec__13572, 6, null);
  var fraction = cljs.core.nth.call(null, vec__13572, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__13572, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__13572, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__13572, 10, null);
  var v = vec__13572;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unrecognized date/time syntax: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__7410__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function cljs$reader$parse_timestamp(ts) {
  var temp__4655__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var vec__13578 = temp__4655__auto__;
    var years = cljs.core.nth.call(null, vec__13578, 0, null);
    var months = cljs.core.nth.call(null, vec__13578, 1, null);
    var days = cljs.core.nth.call(null, vec__13578, 2, null);
    var hours = cljs.core.nth.call(null, vec__13578, 3, null);
    var minutes = cljs.core.nth.call(null, vec__13578, 4, null);
    var seconds = cljs.core.nth.call(null, vec__13578, 5, null);
    var ms = cljs.core.nth.call(null, vec__13578, 6, null);
    var offset = cljs.core.nth.call(null, vec__13578, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1000);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unrecognized date/time syntax: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts)].join(""));
  }
};
cljs.reader.read_date = function cljs$reader$read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function cljs$reader$read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function cljs$reader$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__13597_13613 = cljs.core.seq.call(null, form);
    var chunk__13598_13614 = null;
    var count__13599_13615 = 0;
    var i__13600_13616 = 0;
    while (true) {
      if (i__13600_13616 < count__13599_13615) {
        var x_13617 = cljs.core._nth.call(null, chunk__13598_13614, i__13600_13616);
        arr.push(x_13617);
        var G__13618 = seq__13597_13613;
        var G__13619 = chunk__13598_13614;
        var G__13620 = count__13599_13615;
        var G__13621 = i__13600_13616 + 1;
        seq__13597_13613 = G__13618;
        chunk__13598_13614 = G__13619;
        count__13599_13615 = G__13620;
        i__13600_13616 = G__13621;
        continue;
      } else {
        var temp__4657__auto___13622 = cljs.core.seq.call(null, seq__13597_13613);
        if (temp__4657__auto___13622) {
          var seq__13597_13623__$1 = temp__4657__auto___13622;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__13597_13623__$1)) {
            var c__8229__auto___13624 = cljs.core.chunk_first.call(null, seq__13597_13623__$1);
            var G__13625 = cljs.core.chunk_rest.call(null, seq__13597_13623__$1);
            var G__13626 = c__8229__auto___13624;
            var G__13627 = cljs.core.count.call(null, c__8229__auto___13624);
            var G__13628 = 0;
            seq__13597_13613 = G__13625;
            chunk__13598_13614 = G__13626;
            count__13599_13615 = G__13627;
            i__13600_13616 = G__13628;
            continue;
          } else {
            var x_13629 = cljs.core.first.call(null, seq__13597_13623__$1);
            arr.push(x_13629);
            var G__13630 = cljs.core.next.call(null, seq__13597_13623__$1);
            var G__13631 = null;
            var G__13632 = 0;
            var G__13633 = 0;
            seq__13597_13613 = G__13630;
            chunk__13598_13614 = G__13631;
            count__13599_13615 = G__13632;
            i__13600_13616 = G__13633;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = {};
      var seq__13603_13634 = cljs.core.seq.call(null, form);
      var chunk__13604_13635 = null;
      var count__13605_13636 = 0;
      var i__13606_13637 = 0;
      while (true) {
        if (i__13606_13637 < count__13605_13636) {
          var vec__13607_13638 = cljs.core._nth.call(null, chunk__13604_13635, i__13606_13637);
          var k_13639 = cljs.core.nth.call(null, vec__13607_13638, 0, null);
          var v_13640 = cljs.core.nth.call(null, vec__13607_13638, 1, null);
          obj[cljs.core.name.call(null, k_13639)] = v_13640;
          var G__13641 = seq__13603_13634;
          var G__13642 = chunk__13604_13635;
          var G__13643 = count__13605_13636;
          var G__13644 = i__13606_13637 + 1;
          seq__13603_13634 = G__13641;
          chunk__13604_13635 = G__13642;
          count__13605_13636 = G__13643;
          i__13606_13637 = G__13644;
          continue;
        } else {
          var temp__4657__auto___13645 = cljs.core.seq.call(null, seq__13603_13634);
          if (temp__4657__auto___13645) {
            var seq__13603_13646__$1 = temp__4657__auto___13645;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__13603_13646__$1)) {
              var c__8229__auto___13647 = cljs.core.chunk_first.call(null, seq__13603_13646__$1);
              var G__13648 = cljs.core.chunk_rest.call(null, seq__13603_13646__$1);
              var G__13649 = c__8229__auto___13647;
              var G__13650 = cljs.core.count.call(null, c__8229__auto___13647);
              var G__13651 = 0;
              seq__13603_13634 = G__13648;
              chunk__13604_13635 = G__13649;
              count__13605_13636 = G__13650;
              i__13606_13637 = G__13651;
              continue;
            } else {
              var vec__13610_13652 = cljs.core.first.call(null, seq__13603_13646__$1);
              var k_13653 = cljs.core.nth.call(null, vec__13610_13652, 0, null);
              var v_13654 = cljs.core.nth.call(null, vec__13610_13652, 1, null);
              obj[cljs.core.name.call(null, k_13653)] = v_13654;
              var G__13655 = cljs.core.next.call(null, seq__13603_13646__$1);
              var G__13656 = null;
              var G__13657 = 0;
              var G__13658 = 0;
              seq__13603_13634 = G__13655;
              chunk__13604_13635 = G__13656;
              count__13605_13636 = G__13657;
              i__13606_13637 = G__13658;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("JS literal expects a vector or map containing "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("only string or unqualified keyword keys")].join(""));
    }
  }
};
cljs.reader.read_uuid = function cljs$reader$read_uuid(uuid) {
  if (typeof uuid === "string") {
    return cljs.core.uuid.call(null, uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null), cljs.core.PersistentArrayMap.EMPTY));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function cljs$reader$maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function cljs$reader$register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function cljs$reader$deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function cljs$reader$register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function cljs$reader$deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("cljs.tagged_literals");
goog.require("cljs.core");
goog.require("cljs.reader");
cljs.tagged_literals.read_queue = function cljs$tagged_literals$read_queue(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
  } else {
    throw new Error("Queue literal expects a vector for its elements.");
  }
  return cljs.core._conj.call(null, cljs.core._conj.call(null, function() {
    var x__8252__auto__ = form;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol(null, "cljs.core.PersistentQueue.EMPTY", "cljs.core.PersistentQueue.EMPTY", 399917828, null)), new cljs.core.Symbol("cljs.core", "into", "cljs.core/into", 1879938733, null));
};
cljs.tagged_literals.read_uuid = function cljs$tagged_literals$read_uuid(form) {
  if (typeof form === "string") {
  } else {
    throw new Error("UUID literal expects a string as its representation.");
  }
  try {
    return cljs.core.uuid.call(null, form);
  } catch (e13662) {
    var e = e13662;
    throw new Error(e.message);
  }
};
cljs.tagged_literals.read_inst = function cljs$tagged_literals$read_inst(form) {
  if (typeof form === "string") {
  } else {
    throw new Error("Instance literal expects a string for its timestamp.");
  }
  try {
    return cljs.reader.read_date.call(null, form);
  } catch (e13664) {
    var e = e13664;
    throw new Error(e.message);
  }
};
cljs.tagged_literals.valid_js_literal_key_QMARK_ = function cljs$tagged_literals$valid_js_literal_key_QMARK_(k) {
  return typeof k === "string" || k instanceof cljs.core.Keyword && cljs.core.namespace.call(null, k) == null;
};
cljs.tagged_literals.JSValue = function(val) {
  this.val = val;
};
cljs.tagged_literals.JSValue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "val", "val", 1769233139, null)], null);
};
cljs.tagged_literals.JSValue.cljs$lang$type = true;
cljs.tagged_literals.JSValue.cljs$lang$ctorStr = "cljs.tagged-literals/JSValue";
cljs.tagged_literals.JSValue.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cljs.tagged-literals/JSValue");
};
cljs.tagged_literals.__GT_JSValue = function cljs$tagged_literals$__GT_JSValue(val) {
  return new cljs.tagged_literals.JSValue(val);
};
cljs.tagged_literals.read_js = function cljs$tagged_literals$read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form) || cljs.core.map_QMARK_.call(null, form)) {
  } else {
    throw new Error("JavaScript literal must use map or vector notation");
  }
  if (!cljs.core.map_QMARK_.call(null, form) || cljs.core.every_QMARK_.call(null, cljs.tagged_literals.valid_js_literal_key_QMARK_, cljs.core.keys.call(null, form))) {
  } else {
    throw new Error("JavaScript literal keys must be strings or unqualified keywords");
  }
  return new cljs.tagged_literals.JSValue(form);
};
cljs.tagged_literals._STAR_cljs_data_readers_STAR_ = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Symbol(null, "queue", "queue", -1198599890, null), cljs.tagged_literals.read_queue, new cljs.core.Symbol(null, "uuid", "uuid", -504564192, null), cljs.tagged_literals.read_uuid, new cljs.core.Symbol(null, "inst", "inst", -2008473268, null), cljs.tagged_literals.read_inst, new cljs.core.Symbol(null, "js", "js", -886355190, null), cljs.tagged_literals.read_js], null));
goog.provide("cljs.analyzer");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("clojure.string");
goog.require("clojure.set");
goog.require("cljs.env");
goog.require("cljs.tagged_literals");
goog.require("cljs.tools.reader");
goog.require("cljs.tools.reader.reader_types");
goog.require("cljs.reader");
cljs.analyzer._STAR_cljs_ns_STAR_ = new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null);
cljs.analyzer._STAR_cljs_file_STAR_ = null;
cljs.analyzer._STAR_cljs_static_fns_STAR_ = false;
cljs.analyzer._STAR_cljs_macros_path_STAR_ = "/cljs/core";
cljs.analyzer._STAR_cljs_macros_is_classpath_STAR_ = true;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558), cljs.core.PersistentVector.EMPTY], null));
cljs.analyzer._STAR_analyze_deps_STAR_ = true;
cljs.analyzer._STAR_load_tests_STAR_ = true;
cljs.analyzer._STAR_load_macros_STAR_ = true;
cljs.analyzer._STAR_reload_macros_STAR_ = false;
cljs.analyzer._STAR_macro_infer_STAR_ = true;
cljs.analyzer._STAR_file_defs_STAR_ = null;
cljs.analyzer.constants_ns_sym = new cljs.core.Symbol(null, "cljs.core.constants", "cljs.core.constants", 2057417066, null);
cljs.analyzer._STAR_verbose_STAR_ = false;
cljs.analyzer._cljs_macros_loaded = cljs.core.atom.call(null, false);
cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "invoke-ctor", "invoke-ctor", -756052704), new cljs.core.Keyword(null, "extending-base-js-type", "extending-base-js-type", 432787264), new cljs.core.Keyword(null, "unsupported-preprocess-value", "unsupported-preprocess-value", 1635147105), new cljs.core.Keyword(null, "redef", "redef", 1032704258), new cljs.core.Keyword(null, "js-shadowed-by-local", "js-shadowed-by-local", 198048291), new cljs.core.Keyword(null, 
"unsupported-js-module-type", "unsupported-js-module-type", 1806206180), new cljs.core.Keyword(null, "invalid-protocol-symbol", "invalid-protocol-symbol", 86246948), new cljs.core.Keyword(null, "protocol-duped-method", "protocol-duped-method", 15128166), new cljs.core.Keyword(null, "munged-namespace", "munged-namespace", -101986199), new cljs.core.Keyword(null, "single-segment-namespace", "single-segment-namespace", -491924469), new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), new cljs.core.Keyword(null, 
"infer-warning", "infer-warning", -1600671410), new cljs.core.Keyword(null, "variadic-max-arity", "variadic-max-arity", -14288402), new cljs.core.Keyword(null, "protocol-with-variadic-method", "protocol-with-variadic-method", -693368178), new cljs.core.Keyword(null, "fn-deprecated", "fn-deprecated", 626877647), new cljs.core.Keyword(null, "undeclared-var", "undeclared-var", -1624364944), new cljs.core.Keyword(null, "preamble-missing", "preamble-missing", 220974801), new cljs.core.Keyword(null, "undeclared-protocol-symbol", 
"undeclared-protocol-symbol", 462882867), new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), new cljs.core.Keyword(null, "unprovided", "unprovided", -652330764), new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.Keyword(null, "invalid-arithmetic", "invalid-arithmetic", 1917075065), new cljs.core.Keyword(null, 
"protocol-deprecated", "protocol-deprecated", 103233497), new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), new cljs.core.Keyword(null, "overload-arity", "overload-arity", 823206044), new cljs.core.Keyword(null, "protocol-multiple-impls", "protocol-multiple-impls", 794179260), new cljs.core.Keyword(null, "redef-in-file", "redef-in-file", -476530788), new cljs.core.Keyword(null, "protocol-invalid-method", "protocol-invalid-method", 522647516), new cljs.core.Keyword(null, "extend-type-invalid-method-shape", 
"extend-type-invalid-method-shape", 1424103549), new cljs.core.Keyword(null, "multiple-variadic-overloads", "multiple-variadic-overloads", 1110059837)], [true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true]);
cljs.analyzer.js_reserved = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 63, ["typeof", null, "float", null, "implements", null, "else", null, "boolean", null, "abstract", null, "int", null, "static", null, "package", null, "this", null, "await", null, "yield", null, "interface", null, "void", null, "delete", null, "class", null, "export", null, "var", null, "try", null, "long", null, "null", null, "return", null, "methods", null, "native", null, "private", null, "new", 
null, "for", null, "catch", null, "extends", null, "short", null, "protected", null, "throws", null, "synchronized", null, "transient", null, "super", null, "if", null, "let", null, "import", null, "char", null, "switch", null, "const", null, "case", null, "break", null, "volatile", null, "function", null, "continue", null, "final", null, "do", null, "double", null, "while", null, "public", null, "arguments", null, "debugger", null, "with", null, "instanceof", null, "default", null, "throw", null, 
"goto", null, "finally", null, "byte", null, "constructor", null, "in", null, "enum", null], null), null);
cljs.analyzer.SENTINEL = {};
cljs.analyzer.gets = function cljs$analyzer$gets(var_args) {
  var args13742 = [];
  var len__8523__auto___13745 = arguments.length;
  var i__8524__auto___13746 = 0;
  while (true) {
    if (i__8524__auto___13746 < len__8523__auto___13745) {
      args13742.push(arguments[i__8524__auto___13746]);
      var G__13747 = i__8524__auto___13746 + 1;
      i__8524__auto___13746 = G__13747;
      continue;
    } else {
    }
    break;
  }
  var G__13744 = args13742.length;
  switch(G__13744) {
    case 3:
      return cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13742.length)].join(""));
  }
};
cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$3 = function(m, k0, k1) {
  var m__$1 = cljs.core.get.call(null, m, k0, cljs.analyzer.SENTINEL);
  if (m__$1 === cljs.analyzer.SENTINEL) {
    return null;
  } else {
    return cljs.core.get.call(null, m__$1, k1);
  }
};
cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$4 = function(m, k0, k1, k2) {
  var m__$1 = cljs.core.get.call(null, m, k0, cljs.analyzer.SENTINEL);
  if (m__$1 === cljs.analyzer.SENTINEL) {
    return null;
  } else {
    var m__$2 = cljs.core.get.call(null, m__$1, k1, cljs.analyzer.SENTINEL);
    if (m__$2 === cljs.analyzer.SENTINEL) {
      return null;
    } else {
      return cljs.core.get.call(null, m__$2, k2);
    }
  }
};
cljs.analyzer.gets.cljs$core$IFn$_invoke$arity$5 = function(m, k0, k1, k2, k3) {
  var m__$1 = cljs.core.get.call(null, m, k0, cljs.analyzer.SENTINEL);
  if (m__$1 === cljs.analyzer.SENTINEL) {
    return null;
  } else {
    var m__$2 = cljs.core.get.call(null, m__$1, k1, cljs.analyzer.SENTINEL);
    if (m__$2 === cljs.analyzer.SENTINEL) {
      return null;
    } else {
      var m__$3 = cljs.core.get.call(null, m__$2, k2, cljs.analyzer.SENTINEL);
      if (m__$3 === cljs.analyzer.SENTINEL) {
        return null;
      } else {
        return cljs.core.get.call(null, m__$3, k3);
      }
    }
  }
};
cljs.analyzer.gets.cljs$lang$maxFixedArity = 5;
cljs.analyzer.CLJ_NIL_SYM = new cljs.core.Symbol(null, "clj-nil", "clj-nil", 1321798654, null);
cljs.analyzer.NUMBER_SYM = new cljs.core.Symbol(null, "number", "number", -1084057331, null);
cljs.analyzer.STRING_SYM = new cljs.core.Symbol(null, "string", "string", -349010059, null);
cljs.analyzer.BOOLEAN_SYM = new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null);
cljs.analyzer.JS_STAR_SYM = new cljs.core.Symbol(null, "js*", "js*", -1134233646, null);
cljs.analyzer.DOT_SYM = new cljs.core.Symbol(null, ".", ".", 1975675962, null);
cljs.analyzer.NEW_SYM = new cljs.core.Symbol(null, "new", "new", -444906321, null);
cljs.analyzer.CLJS_CORE_SYM = new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null);
cljs.analyzer.CLJS_CORE_MACROS_SYM = new cljs.core.Symbol(null, "cljs.core$macros", "cljs.core$macros", -2057787548, null);
cljs.analyzer.IGNORE_SYM = new cljs.core.Symbol(null, "ignore", "ignore", 8989494, null);
cljs.analyzer.ANY_SYM = new cljs.core.Symbol(null, "any", "any", -948528346, null);
cljs.analyzer.cljs_seq_QMARK_ = function cljs$analyzer$cljs_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.cljs_map_QMARK_ = function cljs$analyzer$cljs_map_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 1024 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.cljs_vector_QMARK_ = function cljs$analyzer$cljs_vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IVector$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.cljs_set_QMARK_ = function cljs$analyzer$cljs_set_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 4096 || cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.analyzer.munge_path = function cljs$analyzer$munge_path(ss) {
  return cljs.core.munge.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ss)].join(""));
};
cljs.analyzer.ns__GT_relpath = function cljs$analyzer$ns__GT_relpath(var_args) {
  var args13757 = [];
  var len__8523__auto___13760 = arguments.length;
  var i__8524__auto___13761 = 0;
  while (true) {
    if (i__8524__auto___13761 < len__8523__auto___13760) {
      args13757.push(arguments[i__8524__auto___13761]);
      var G__13762 = i__8524__auto___13761 + 1;
      i__8524__auto___13761 = G__13762;
      continue;
    } else {
    }
    break;
  }
  var G__13759 = args13757.length;
  switch(G__13759) {
    case 1:
      return cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13757.length)].join(""));
  }
};
cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.ns__GT_relpath.call(null, ns, new cljs.core.Keyword(null, "cljs", "cljs", 1492417629));
};
cljs.analyzer.ns__GT_relpath.cljs$core$IFn$_invoke$arity$2 = function(ns, ext) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.replace.call(null, cljs.analyzer.munge_path.call(null, ns), ".", "/")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("."), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, ext))].join("");
};
cljs.analyzer.ns__GT_relpath.cljs$lang$maxFixedArity = 2;
cljs.analyzer.topo_sort = function cljs$analyzer$topo_sort(var_args) {
  var args13764 = [];
  var len__8523__auto___13781 = arguments.length;
  var i__8524__auto___13782 = 0;
  while (true) {
    if (i__8524__auto___13782 < len__8523__auto___13781) {
      args13764.push(arguments[i__8524__auto___13782]);
      var G__13783 = i__8524__auto___13782 + 1;
      i__8524__auto___13782 = G__13783;
      continue;
    } else {
    }
    break;
  }
  var G__13766 = args13764.length;
  switch(G__13766) {
    case 2:
      return cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13764.length)].join(""));
  }
};
cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$2 = function(x, get_deps) {
  return cljs.analyzer.topo_sort.call(null, x, 0, cljs.core.atom.call(null, cljs.core.sorted_map.call(null)), cljs.core.memoize.call(null, get_deps));
};
cljs.analyzer.topo_sort.cljs$core$IFn$_invoke$arity$4 = function(x, depth, state, memo_get_deps) {
  var deps = memo_get_deps.call(null, x);
  cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [depth], null), cljs.core.fnil.call(null, cljs.core.into, cljs.core.PersistentHashSet.EMPTY), deps);
  var seq__13767_13785 = cljs.core.seq.call(null, deps);
  var chunk__13768_13786 = null;
  var count__13769_13787 = 0;
  var i__13770_13788 = 0;
  while (true) {
    if (i__13770_13788 < count__13769_13787) {
      var dep_13789 = cljs.core._nth.call(null, chunk__13768_13786, i__13770_13788);
      cljs.analyzer.topo_sort.call(null, dep_13789, depth + 1, state, memo_get_deps);
      var G__13790 = seq__13767_13785;
      var G__13791 = chunk__13768_13786;
      var G__13792 = count__13769_13787;
      var G__13793 = i__13770_13788 + 1;
      seq__13767_13785 = G__13790;
      chunk__13768_13786 = G__13791;
      count__13769_13787 = G__13792;
      i__13770_13788 = G__13793;
      continue;
    } else {
      var temp__4657__auto___13794 = cljs.core.seq.call(null, seq__13767_13785);
      if (temp__4657__auto___13794) {
        var seq__13767_13795__$1 = temp__4657__auto___13794;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13767_13795__$1)) {
          var c__8229__auto___13796 = cljs.core.chunk_first.call(null, seq__13767_13795__$1);
          var G__13797 = cljs.core.chunk_rest.call(null, seq__13767_13795__$1);
          var G__13798 = c__8229__auto___13796;
          var G__13799 = cljs.core.count.call(null, c__8229__auto___13796);
          var G__13800 = 0;
          seq__13767_13785 = G__13797;
          chunk__13768_13786 = G__13798;
          count__13769_13787 = G__13799;
          i__13770_13788 = G__13800;
          continue;
        } else {
          var dep_13801 = cljs.core.first.call(null, seq__13767_13795__$1);
          cljs.analyzer.topo_sort.call(null, dep_13801, depth + 1, state, memo_get_deps);
          var G__13802 = cljs.core.next.call(null, seq__13767_13795__$1);
          var G__13803 = null;
          var G__13804 = 0;
          var G__13805 = 0;
          seq__13767_13785 = G__13802;
          chunk__13768_13786 = G__13803;
          count__13769_13787 = G__13804;
          i__13770_13788 = G__13805;
          continue;
        }
      } else {
      }
    }
    break;
  }
  var seq__13771_13806 = cljs.core.seq.call(null, cljs.core.subseq.call(null, cljs.core.deref.call(null, state), cljs.core._LT_, depth));
  var chunk__13772_13807 = null;
  var count__13773_13808 = 0;
  var i__13774_13809 = 0;
  while (true) {
    if (i__13774_13809 < count__13773_13808) {
      var vec__13775_13810 = cljs.core._nth.call(null, chunk__13772_13807, i__13774_13809);
      var _LT_depth_13811 = cljs.core.nth.call(null, vec__13775_13810, 0, null);
      var __13812 = cljs.core.nth.call(null, vec__13775_13810, 1, null);
      cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_LT_depth_13811], null), clojure.set.difference, deps);
      var G__13813 = seq__13771_13806;
      var G__13814 = chunk__13772_13807;
      var G__13815 = count__13773_13808;
      var G__13816 = i__13774_13809 + 1;
      seq__13771_13806 = G__13813;
      chunk__13772_13807 = G__13814;
      count__13773_13808 = G__13815;
      i__13774_13809 = G__13816;
      continue;
    } else {
      var temp__4657__auto___13817 = cljs.core.seq.call(null, seq__13771_13806);
      if (temp__4657__auto___13817) {
        var seq__13771_13818__$1 = temp__4657__auto___13817;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13771_13818__$1)) {
          var c__8229__auto___13819 = cljs.core.chunk_first.call(null, seq__13771_13818__$1);
          var G__13820 = cljs.core.chunk_rest.call(null, seq__13771_13818__$1);
          var G__13821 = c__8229__auto___13819;
          var G__13822 = cljs.core.count.call(null, c__8229__auto___13819);
          var G__13823 = 0;
          seq__13771_13806 = G__13820;
          chunk__13772_13807 = G__13821;
          count__13773_13808 = G__13822;
          i__13774_13809 = G__13823;
          continue;
        } else {
          var vec__13778_13824 = cljs.core.first.call(null, seq__13771_13818__$1);
          var _LT_depth_13825 = cljs.core.nth.call(null, vec__13778_13824, 0, null);
          var __13826 = cljs.core.nth.call(null, vec__13778_13824, 1, null);
          cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_LT_depth_13825], null), clojure.set.difference, deps);
          var G__13827 = cljs.core.next.call(null, seq__13771_13818__$1);
          var G__13828 = null;
          var G__13829 = 0;
          var G__13830 = 0;
          seq__13771_13806 = G__13827;
          chunk__13772_13807 = G__13828;
          count__13773_13808 = G__13829;
          i__13774_13809 = G__13830;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core._EQ_.call(null, depth, 0)) {
    return cljs.core.distinct.call(null, cljs.core.apply.call(null, cljs.core.concat, cljs.core.vals.call(null, cljs.core.deref.call(null, state))));
  } else {
    return null;
  }
};
cljs.analyzer.topo_sort.cljs$lang$maxFixedArity = 4;
cljs.analyzer.ast_QMARK_ = function cljs$analyzer$ast_QMARK_(x) {
  return cljs.core.map_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, x, new cljs.core.Keyword(null, "op", "op", -1882987955));
};
if (typeof cljs.analyzer.error_message !== "undefined") {
} else {
  cljs.analyzer.error_message = function() {
    var method_table__8343__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__8344__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__8345__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__8346__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__8347__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.analyzer", "error-message"), function(method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__, hierarchy__8347__auto__) {
      return function() {
        var G__13831__delegate = function(warning_type, _) {
          return warning_type;
        };
        var G__13831 = function(warning_type, var_args) {
          var _ = null;
          if (arguments.length > 1) {
            var G__13832__i = 0, G__13832__a = new Array(arguments.length - 1);
            while (G__13832__i < G__13832__a.length) {
              G__13832__a[G__13832__i] = arguments[G__13832__i + 1];
              ++G__13832__i;
            }
            _ = new cljs.core.IndexedSeq(G__13832__a, 0);
          }
          return G__13831__delegate.call(this, warning_type, _);
        };
        G__13831.cljs$lang$maxFixedArity = 1;
        G__13831.cljs$lang$applyTo = function(arglist__13833) {
          var warning_type = cljs.core.first(arglist__13833);
          var _ = cljs.core.rest(arglist__13833);
          return G__13831__delegate(warning_type, _);
        };
        G__13831.cljs$core$IFn$_invoke$arity$variadic = G__13831__delegate;
        return G__13831;
      }();
    }(method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__, hierarchy__8347__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__8347__auto__, method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "preamble-missing", "preamble-missing", 220974801), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Preamble resource file not found: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, " ", (new cljs.core.Keyword(null, "missing", "missing", 362507769)).cljs$core$IFn$_invoke$arity$1(info)))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "unprovided", "unprovided", -652330764), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Required namespace not provided for "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.join.call(null, " ", (new cljs.core.Keyword(null, "unprovided", "unprovided", -652330764)).cljs$core$IFn$_invoke$arity$1(info)))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-var", "undeclared-var", -1624364944), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_((new cljs.core.Keyword(null, "macro-present?", "macro-present?", -1397713205)).cljs$core$IFn$_invoke$arity$1(info)) ? "Can't take value of macro " : "Use of undeclared Var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/"), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, 
  "suffix", "suffix", 367373057)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), function(warning_type, p__13834) {
  var map__13835 = p__13834;
  var map__13835__$1 = (!(map__13835 == null) ? map__13835.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13835.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13835) : map__13835;
  var info = map__13835__$1;
  var ns_sym = cljs.core.get.call(null, map__13835__$1, new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605));
  var js_provide = cljs.core.get.call(null, map__13835__$1, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("No such namespace: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_sym), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", could not locate "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.ns__GT_relpath.call(null, ns_sym, new cljs.core.Keyword(null, "cljs", "cljs", 1492417629))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.ns__GT_relpath.call(null, ns_sym, new cljs.core.Keyword(null, 
  "cljc", "cljc", -1728400583))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(', or Closure namespace "'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(js_provide), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-macros-ns", "undeclared-macros-ns", -438029430), function(warning_type, p__13837) {
  var map__13838 = p__13837;
  var map__13838__$1 = (!(map__13838 == null) ? map__13838.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13838.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13838) : map__13838;
  var info = map__13838__$1;
  var ns_sym = cljs.core.get.call(null, map__13838__$1, new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605));
  var js_provide = cljs.core.get.call(null, map__13838__$1, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("No such macros namespace: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_sym), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", could not locate "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.ns__GT_relpath.call(null, ns_sym, new cljs.core.Keyword(null, "clj", "clj", -660495428))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" or "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.ns__GT_relpath.call(null, ns_sym, new cljs.core.Keyword(null, 
  "cljc", "cljc", -1728400583)))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" not declared ^:dynamic")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "redef", "redef", 1032704258), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" already refers to: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(info))].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, 
  "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info))].join(""))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" being replaced by: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323)).cljs$core$IFn$_invoke$arity$1(info))].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info))].join("")))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "redef-in-file", "redef-in-file", -476530788), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" at line "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is being replaced")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323)).cljs$core$IFn$_invoke$arity$1(info))].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info))].join(""))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" no longer fn, references are stale")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Wrong number of args ("), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "argc", "argc", -1452839519)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(") passed to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
    var or__7410__auto__ = (new cljs.core.Keyword(null, "ctor", "ctor", 1750864802)).cljs$core$IFn$_invoke$arity$1(info);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info);
    }
  }())].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "fn-deprecated", "fn-deprecated", 626877647), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150)).cljs$core$IFn$_invoke$arity$1(info)))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is deprecated.")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid :refer, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "lib", "lib", 191808726)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/"), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, 
  "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not exist")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-deprecated", "protocol-deprecated", 103233497), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Protocol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is deprecated")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "undeclared-protocol-symbol", "undeclared-protocol-symbol", 462882867), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Can't resolve protocol symbol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "invalid-protocol-symbol", "invalid-protocol-symbol", 86246948), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Symbol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is not a protocol")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-invalid-method", "protocol-invalid-method", 522647516), function(warning_type, info) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "no-such-method", "no-such-method", 1087422840)).cljs$core$IFn$_invoke$arity$1(info))) {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Bad method signature in protocol implementation, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not declare method called "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fname", "fname", 1500291491)).cljs$core$IFn$_invoke$arity$1(info))].join("");
  } else {
    return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Bad method signature in protocol implementation, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fname", "fname", 1500291491)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" does not declare arity "), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "invalid-arity", "invalid-arity", 1335461949)).cljs$core$IFn$_invoke$arity$1(info))].join("");
  }
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-duped-method", "protocol-duped-method", 15128166), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicated methods in protocol implementation "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fname", "fname", 1500291491)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-multiple-impls", "protocol-multiple-impls", 794179260), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Protocol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" implemented multiple times")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "protocol-with-variadic-method", "protocol-with-variadic-method", -693368178), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Protocol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" declares method "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" with variadic signature (\x26)")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "multiple-variadic-overloads", "multiple-variadic-overloads", 1110059837), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": Can't have more than 1 variadic overload")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "variadic-max-arity", "variadic-max-arity", -14288402), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": Can't have fixed arity function with more params than variadic function")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "overload-arity", "overload-arity", 823206044), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": Can't have 2 overloads with same arity")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "extending-base-js-type", "extending-base-js-type", 432787264), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Extending an existing JavaScript type - use a different symbol name "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("instead of "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "current-symbol", "current-symbol", -932381075)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" e.g "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "suggested-symbol", "suggested-symbol", 
  -1329631875)).cljs$core$IFn$_invoke$arity$1(info))].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "invalid-arithmetic", "invalid-arithmetic", 1917075065), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "js-op", "js-op", -1046277897)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", all arguments must be numbers, got "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "types", "types", 590030639)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" instead.")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "invoke-ctor", "invoke-ctor", -756052704), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot invoke type constructor "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150)).cljs$core$IFn$_invoke$arity$1(info)))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" as function ")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "single-segment-namespace", "single-segment-namespace", -491924469), function(warning_type, info) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(info)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is a single segment namespace")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "munged-namespace", "munged-namespace", -101986199), function(warning_type, p__13841) {
  var map__13842 = p__13841;
  var map__13842__$1 = (!(map__13842 == null) ? map__13842.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13842.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13842) : map__13842;
  var info = map__13842__$1;
  var name = cljs.core.get.call(null, map__13842__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var munged = cljs.core.munge.call(null, clojure.string.join.call(null, ".", cljs.core.map.call(null, function(map__13842, map__13842__$1, info, name) {
    return function(p1__13840_SHARP_) {
      if (cljs.core.truth_(cljs.analyzer.js_reserved.call(null, p1__13840_SHARP_))) {
        return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__13840_SHARP_), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$")].join("");
      } else {
        return p1__13840_SHARP_;
      }
    };
  }(map__13842, map__13842__$1, info, name), clojure.string.split.call(null, cljs.core.name.call(null, name), /\./))));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Namespace "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" contains a reserved JavaScript keyword,"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" the corresponding Google Closure namespace will be munged to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged)].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), function(warning_type, p__13844) {
  var map__13845 = p__13844;
  var map__13845__$1 = (!(map__13845 == null) ? map__13845.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13845.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13845) : map__13845;
  var info = map__13845__$1;
  var ns = cljs.core.get.call(null, map__13845__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
  var var$ = cljs.core.get.call(null, map__13845__$1, new cljs.core.Keyword(null, "var", "var", -769682797));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Namespace "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" clashes with var "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(var$)].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "extend-type-invalid-method-shape", "extend-type-invalid-method-shape", 1424103549), function(warning_type, p__13847) {
  var map__13848 = p__13847;
  var map__13848__$1 = (!(map__13848 == null) ? map__13848.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13848.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13848) : map__13848;
  var info = map__13848__$1;
  var protocol = cljs.core.get.call(null, map__13848__$1, new cljs.core.Keyword(null, "protocol", "protocol", 652470118));
  var method = cljs.core.get.call(null, map__13848__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Bad extend-type method shape for protocol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(protocol), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" method "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(method), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", method arities must be grouped together")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "unsupported-js-module-type", "unsupported-js-module-type", 1806206180), function(warning_type, p__13850) {
  var map__13851 = p__13850;
  var map__13851__$1 = (!(map__13851 == null) ? map__13851.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13851.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13851) : map__13851;
  var info = map__13851__$1;
  var module_type = cljs.core.get.call(null, map__13851__$1, new cljs.core.Keyword(null, "module-type", "module-type", 1392760304));
  var file = cljs.core.get.call(null, map__13851__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unsupported JavaScript module type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(module_type), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" for foreign library "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(file), cljs.core.str.cljs$core$IFn$_invoke$arity$1(".")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "unsupported-preprocess-value", "unsupported-preprocess-value", 1635147105), function(warning_type, p__13853) {
  var map__13854 = p__13853;
  var map__13854__$1 = (!(map__13854 == null) ? map__13854.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13854.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13854) : map__13854;
  var preprocess = cljs.core.get.call(null, map__13854__$1, new cljs.core.Keyword(null, "preprocess", "preprocess", 1208285012));
  var file = cljs.core.get.call(null, map__13854__$1, new cljs.core.Keyword(null, "file", "file", -1269645878));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unsupported preprocess value "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(preprocess), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" for foreign library "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(file), cljs.core.str.cljs$core$IFn$_invoke$arity$1(".")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "js-shadowed-by-local", "js-shadowed-by-local", 198048291), function(warning_type, p__13856) {
  var map__13857 = p__13856;
  var map__13857__$1 = (!(map__13857 == null) ? map__13857.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13857.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13857) : map__13857;
  var name = cljs.core.get.call(null, map__13857__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is shadowed by a local")].join("");
});
cljs.core._add_method.call(null, cljs.analyzer.error_message, new cljs.core.Keyword(null, "infer-warning", "infer-warning", -1600671410), function(warning_type, p__13859) {
  var map__13860 = p__13859;
  var map__13860__$1 = (!(map__13860 == null) ? map__13860.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13860.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13860) : map__13860;
  var warn_type = cljs.core.get.call(null, map__13860__$1, new cljs.core.Keyword(null, "warn-type", "warn-type", -790105219));
  var form = cljs.core.get.call(null, map__13860__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var type = cljs.core.get.call(null, map__13860__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
  var property = cljs.core.get.call(null, map__13860__$1, new cljs.core.Keyword(null, "property", "property", -1114278232));
  var G__13862 = warn_type instanceof cljs.core.Keyword ? warn_type.fqn : null;
  switch(G__13862) {
    case "target":
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot infer target type in expression "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(form), cljs.core.str.cljs$core$IFn$_invoke$arity$1("")].join("");
      break;
    case "property":
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot resolve property "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(property), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" for inferred type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(type), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" in expression "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(form)].join("");
      break;
    case "object":
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Adding extern to Object for property "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(property), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" due to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("ambiguous expression "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(form)].join("");
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(warn_type)].join(""));
  }
});
cljs.analyzer.default_warning_handler = function cljs$analyzer$default_warning_handler(warning_type, env, extra) {
  if (cljs.core.truth_(warning_type.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_))) {
    var temp__4657__auto__ = cljs.analyzer.error_message.call(null, warning_type, extra);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var s = temp__4657__auto__;
      var _STAR_print_fn_STAR_13865 = cljs.core._STAR_print_fn_STAR_;
      cljs.core._STAR_print_fn_STAR_ = cljs.core._STAR_print_err_fn_STAR_;
      try {
        return cljs.core.println.call(null, cljs.analyzer.message.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("WARNING: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join("")));
      } finally {
        cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_13865;
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
cljs.analyzer._STAR_cljs_warning_handlers_STAR_ = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.analyzer.default_warning_handler], null);
cljs.analyzer.repeat_char = function cljs$analyzer$repeat_char(c, n) {
  var ret = c;
  var n__$1 = n;
  while (true) {
    if (n__$1 > 0) {
      var G__13866 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret), cljs.core.str.cljs$core$IFn$_invoke$arity$1(c)].join("");
      var G__13867 = n__$1 - 1;
      ret = G__13866;
      n__$1 = G__13867;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.analyzer.hex_format = function cljs$analyzer$hex_format(s, pad) {
  var hex = s.charCodeAt(0).toString(16);
  var len = hex.length;
  var hex__$1 = len < pad ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.repeat_char.call(null, "0", pad - len)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex)].join("") : hex;
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("_u"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1("_")].join("");
};
cljs.analyzer.gen_constant_id = function cljs$analyzer$gen_constant_id(value) {
  var prefix = value instanceof cljs.core.Keyword ? "cst$kw$" : value instanceof cljs.core.Symbol ? "cst$sym$" : function() {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("constant type "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type.call(null, value)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" not supported")].join(""));
  }();
  var name = value instanceof cljs.core.Keyword ? cljs.core.subs.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(value)].join(""), 1) : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(value)].join("");
  var name__$1 = cljs.core._EQ_.call(null, ".", name) ? "_DOT_" : clojure.string.replace.call(null, clojure.string.replace.call(null, cljs.core.munge.call(null, clojure.string.replace.call(null, name, "-", "_DASH_")), ".", "$"), /[^a-z0-9$_]/i, function(prefix, name) {
    return function(p1__13868_SHARP_) {
      return cljs.analyzer.hex_format.call(null, p1__13868_SHARP_, 4);
    };
  }(prefix, name));
  return cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$1)].join(""));
};
cljs.analyzer.register_constant_BANG_ = function cljs$analyzer$register_constant_BANG_(var_args) {
  var args13869 = [];
  var len__8523__auto___13877 = arguments.length;
  var i__8524__auto___13878 = 0;
  while (true) {
    if (i__8524__auto___13878 < len__8523__auto___13877) {
      args13869.push(arguments[i__8524__auto___13878]);
      var G__13879 = i__8524__auto___13878 + 1;
      i__8524__auto___13878 = G__13879;
      continue;
    } else {
    }
    break;
  }
  var G__13871 = args13869.length;
  switch(G__13871) {
    case 1:
      return cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13869.length)].join(""));
  }
};
cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$1 = function(val) {
  return cljs.analyzer.register_constant_BANG_.call(null, null, val);
};
cljs.analyzer.register_constant_BANG_.cljs$core$IFn$_invoke$arity$2 = function(env, val) {
  return cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, function(cenv) {
    var G__13872 = cljs.core.update_in.call(null, cenv, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "constant-table", "cljs.analyzer/constant-table", -114131889)], null), function(table) {
      if (cljs.core.truth_(cljs.core.get.call(null, table, val))) {
        return table;
      } else {
        return cljs.core.assoc.call(null, table, val, cljs.analyzer.gen_constant_id.call(null, val));
      }
    });
    if (cljs.core.truth_(env)) {
      return cljs.core.update_in.call(null, G__13872, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword("cljs.analyzer", "constants", "cljs.analyzer/constants", 1697083770)], 
      null), function(G__13872) {
        return function(p__13873) {
          var map__13874 = p__13873;
          var map__13874__$1 = (!(map__13874 == null) ? map__13874.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__13874.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13874) : map__13874;
          var constants = map__13874__$1;
          var seen = cljs.core.get.call(null, map__13874__$1, new cljs.core.Keyword(null, "seen", "seen", -518999789), cljs.core.PersistentHashSet.EMPTY);
          var order = cljs.core.get.call(null, map__13874__$1, new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.PersistentVector.EMPTY);
          var G__13876 = constants;
          if (!cljs.core.contains_QMARK_.call(null, seen, val)) {
            return cljs.core.assoc.call(null, G__13876, new cljs.core.Keyword(null, "seen", "seen", -518999789), cljs.core.conj.call(null, seen, val), new cljs.core.Keyword(null, "order", "order", -1254677256), cljs.core.conj.call(null, order, val));
          } else {
            return G__13876;
          }
        };
      }(G__13872));
    } else {
      return G__13872;
    }
  });
};
cljs.analyzer.register_constant_BANG_.cljs$lang$maxFixedArity = 2;
cljs.analyzer.default_namespaces = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)], null), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, 
"cljs.user", "cljs.user", 877795071, null)], null)], null);
cljs.analyzer.namespaces = function() {
  if (typeof cljs.analyzer.t_cljs$analyzer13881 !== "undefined") {
  } else {
    cljs.analyzer.t_cljs$analyzer13881 = function(meta13882) {
      this.meta13882 = meta13882;
      this.cljs$lang$protocol_mask$partition0$ = 425984;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.analyzer.t_cljs$analyzer13881.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_13883, meta13882__$1) {
      var self__ = this;
      var _13883__$1 = this;
      return new cljs.analyzer.t_cljs$analyzer13881(meta13882__$1);
    };
    cljs.analyzer.t_cljs$analyzer13881.prototype.cljs$core$IMeta$_meta$arity$1 = function(_13883) {
      var self__ = this;
      var _13883__$1 = this;
      return self__.meta13882;
    };
    cljs.analyzer.t_cljs$analyzer13881.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
      var self__ = this;
      var ___$1 = this;
      if (!(cljs.env._STAR_compiler_STAR_ == null)) {
        return (new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_));
      } else {
        return cljs.analyzer.default_namespaces;
      }
    };
    cljs.analyzer.t_cljs$analyzer13881.getBasis = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "meta13882", "meta13882", -2110911338, null)], null);
    };
    cljs.analyzer.t_cljs$analyzer13881.cljs$lang$type = true;
    cljs.analyzer.t_cljs$analyzer13881.cljs$lang$ctorStr = "cljs.analyzer/t_cljs$analyzer13881";
    cljs.analyzer.t_cljs$analyzer13881.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
      return cljs.core._write.call(null, writer__8022__auto__, "cljs.analyzer/t_cljs$analyzer13881");
    };
    cljs.analyzer.__GT_t_cljs$analyzer13881 = function cljs$analyzer$__GT_t_cljs$analyzer13881(meta13882) {
      return new cljs.analyzer.t_cljs$analyzer13881(meta13882);
    };
  }
  return new cljs.analyzer.t_cljs$analyzer13881(cljs.core.PersistentArrayMap.EMPTY);
}();
cljs.analyzer.get_namespace = function cljs$analyzer$get_namespace(var_args) {
  var args13884 = [];
  var len__8523__auto___13887 = arguments.length;
  var i__8524__auto___13888 = 0;
  while (true) {
    if (i__8524__auto___13888 < len__8523__auto___13887) {
      args13884.push(arguments[i__8524__auto___13888]);
      var G__13889 = i__8524__auto___13888 + 1;
      i__8524__auto___13888 = G__13889;
      continue;
    } else {
    }
    break;
  }
  var G__13886 = args13884.length;
  switch(G__13886) {
    case 1:
      return cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13884.length)].join(""));
  }
};
cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1 = function(key) {
  return cljs.analyzer.get_namespace.call(null, cljs.env._STAR_compiler_STAR_, key);
};
cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$2 = function(cenv, key) {
  var temp__4659__auto__ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cenv), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), key], null));
  if (temp__4659__auto__ == null) {
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null), key)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null)], null);
    } else {
      return null;
    }
  } else {
    var ns = temp__4659__auto__;
    return ns;
  }
};
cljs.analyzer.get_namespace.cljs$lang$maxFixedArity = 2;
cljs.analyzer.get_line = function cljs$analyzer$get_line(x, env) {
  var or__7410__auto__ = (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, x));
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env);
  }
};
cljs.analyzer.get_col = function cljs$analyzer$get_col(x, env) {
  var or__7410__auto__ = (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, x));
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(env);
  }
};
cljs.analyzer.intern_macros = function cljs$analyzer$intern_macros(var_args) {
  var args13891 = [];
  var len__8523__auto___13902 = arguments.length;
  var i__8524__auto___13903 = 0;
  while (true) {
    if (i__8524__auto___13903 < len__8523__auto___13902) {
      args13891.push(arguments[i__8524__auto___13903]);
      var G__13904 = i__8524__auto___13903 + 1;
      i__8524__auto___13903 = G__13904;
      continue;
    } else {
    }
    break;
  }
  var G__13893 = args13891.length;
  switch(G__13893) {
    case 1:
      return cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13891.length)].join(""));
  }
};
cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.intern_macros.call(null, ns, false);
};
cljs.analyzer.intern_macros.cljs$core$IFn$_invoke$arity$2 = function(ns, reload) {
  if (cljs.core.truth_(function() {
    var or__7410__auto__ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "macros", "macros", 811339431)], null)) == null;
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      return reload;
    }
  }())) {
    return cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "macros", "macros", 811339431)], null), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__13894) {
      var vec__13895 = p__13894;
      var k = cljs.core.nth.call(null, vec__13895, 0, null);
      var v = cljs.core.nth.call(null, vec__13895, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, function() {
        var vm = cljs.core.meta.call(null, v);
        var ns__$1 = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(vm).getName();
        return cljs.core.assoc.call(null, vm, new cljs.core.Keyword(null, "ns", "ns", 441598760), ns__$1, new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(k)].join("")), new cljs.core.Keyword(null, "macro", "macro", -867863404), true);
      }()], null);
    }, cljs.core.filter.call(null, function(p__13898) {
      var vec__13899 = p__13898;
      var _ = cljs.core.nth.call(null, vec__13899, 0, null);
      var v = cljs.core.nth.call(null, vec__13899, 1, null);
      return v.isMacro();
    }, cljs.core.ns_interns_STAR_.call(null, ns)))));
  } else {
    return null;
  }
};
cljs.analyzer.intern_macros.cljs$lang$maxFixedArity = 2;
cljs.analyzer.empty_env = function cljs$analyzer$empty_env() {
  var val__13681__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__13681__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_), new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863), new cljs.core.Keyword(null, "locals", "locals", 535295783), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859), cljs.core.PersistentVector.EMPTY, 
    new cljs.core.Keyword(null, "js-globals", "js-globals", 1670394727), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(val__13681__auto__) {
      return function(p1__13906_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__13906_SHARP_, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), p1__13906_SHARP_], null)], null);
      };
    }(val__13681__auto__), cljs.core.list(new cljs.core.Symbol(null, "alert", "alert", 1068580947, null), new cljs.core.Symbol(null, "window", "window", -1929916235, null), new cljs.core.Symbol(null, "document", "document", 311342840, null), new cljs.core.Symbol(null, "console", "console", -1426363712, null), new cljs.core.Symbol(null, "escape", "escape", 648929575, null), new cljs.core.Symbol(null, "unescape", "unescape", -2037730561, null), new cljs.core.Symbol(null, "screen", "screen", -664376021, 
    null), new cljs.core.Symbol(null, "location", "location", -838836381, null), new cljs.core.Symbol(null, "navigator", "navigator", -604431588, null), new cljs.core.Symbol(null, "history", "history", 1393136307, null), new cljs.core.Symbol(null, "location", "location", -838836381, null), new cljs.core.Symbol(null, "global", "global", 1734126574, null), new cljs.core.Symbol(null, "process", "process", -1011242831, null), new cljs.core.Symbol(null, "require", "require", 1172530194, null), new cljs.core.Symbol(null, 
    "module", "module", -1229817578, null), new cljs.core.Symbol(null, "exports", "exports", 895523255, null))))], null);
  } finally {
    if (val__13681__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.analyzer.source_info = function cljs$analyzer$source_info(var_args) {
  var args13907 = [];
  var len__8523__auto___13911 = arguments.length;
  var i__8524__auto___13912 = 0;
  while (true) {
    if (i__8524__auto___13912 < len__8523__auto___13911) {
      args13907.push(arguments[i__8524__auto___13912]);
      var G__13913 = i__8524__auto___13912 + 1;
      i__8524__auto___13912 = G__13913;
      continue;
    } else {
    }
    break;
  }
  var G__13909 = args13907.length;
  switch(G__13909) {
    case 1:
      return cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13907.length)].join(""));
  }
};
cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$1 = function(env) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env))) {
    return cljs.analyzer.source_info.call(null, null, env);
  } else {
    return null;
  }
};
cljs.analyzer.source_info.cljs$core$IFn$_invoke$arity$2 = function(name, env) {
  var G__13910 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "file", "file", -1269645878), cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)) ? "cljs/core.cljs" : cljs.analyzer._STAR_cljs_file_STAR_, new cljs.core.Keyword(null, "line", "line", 212345235), 
  cljs.analyzer.get_line.call(null, name, env), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.analyzer.get_col.call(null, name, env)], null);
  if (cljs.core.truth_((new cljs.core.Keyword(null, "root-source-info", "root-source-info", -1436144912)).cljs$core$IFn$_invoke$arity$1(env))) {
    return cljs.core.merge.call(null, G__13910, cljs.core.select_keys.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "root-source-info", "root-source-info", -1436144912)], null)));
  } else {
    return G__13910;
  }
};
cljs.analyzer.source_info.cljs$lang$maxFixedArity = 2;
cljs.analyzer.message = function cljs$analyzer$message(env, s) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(s), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env)) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(" at line "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_file_STAR_)].join("") : 
  cljs.core.truth_(cljs.analyzer._STAR_cljs_file_STAR_) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(" in file "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_file_STAR_)].join("") : null)].join("");
};
cljs.analyzer.warning = function cljs$analyzer$warning(warning_type, env, extra) {
  var seq__13919 = cljs.core.seq.call(null, cljs.analyzer._STAR_cljs_warning_handlers_STAR_);
  var chunk__13920 = null;
  var count__13921 = 0;
  var i__13922 = 0;
  while (true) {
    if (i__13922 < count__13921) {
      var handler = cljs.core._nth.call(null, chunk__13920, i__13922);
      handler.call(null, warning_type, env, extra);
      var G__13923 = seq__13919;
      var G__13924 = chunk__13920;
      var G__13925 = count__13921;
      var G__13926 = i__13922 + 1;
      seq__13919 = G__13923;
      chunk__13920 = G__13924;
      count__13921 = G__13925;
      i__13922 = G__13926;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__13919);
      if (temp__4657__auto__) {
        var seq__13919__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13919__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__13919__$1);
          var G__13927 = cljs.core.chunk_rest.call(null, seq__13919__$1);
          var G__13928 = c__8229__auto__;
          var G__13929 = cljs.core.count.call(null, c__8229__auto__);
          var G__13930 = 0;
          seq__13919 = G__13927;
          chunk__13920 = G__13928;
          count__13921 = G__13929;
          i__13922 = G__13930;
          continue;
        } else {
          var handler = cljs.core.first.call(null, seq__13919__$1);
          handler.call(null, warning_type, env, extra);
          var G__13931 = cljs.core.next.call(null, seq__13919__$1);
          var G__13932 = null;
          var G__13933 = 0;
          var G__13934 = 0;
          seq__13919 = G__13931;
          chunk__13920 = G__13932;
          count__13921 = G__13933;
          i__13922 = G__13934;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.error = function cljs$analyzer$error(var_args) {
  var args13935 = [];
  var len__8523__auto___13938 = arguments.length;
  var i__8524__auto___13939 = 0;
  while (true) {
    if (i__8524__auto___13939 < len__8523__auto___13938) {
      args13935.push(arguments[i__8524__auto___13939]);
      var G__13940 = i__8524__auto___13939 + 1;
      i__8524__auto___13939 = G__13940;
      continue;
    } else {
    }
    break;
  }
  var G__13937 = args13935.length;
  switch(G__13937) {
    case 2:
      return cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13935.length)].join(""));
  }
};
cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2 = function(env, msg) {
  return cljs.analyzer.error.call(null, env, msg, null);
};
cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3 = function(env, msg, cause) {
  return cljs.core.ex_info.call(null, cljs.analyzer.message.call(null, env, msg), cljs.core.assoc.call(null, cljs.analyzer.source_info.call(null, env), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword("cljs", "analysis-error", "cljs/analysis-error", -420526349)), cause);
};
cljs.analyzer.error.cljs$lang$maxFixedArity = 3;
cljs.analyzer.analysis_error_QMARK_ = function cljs$analyzer$analysis_error_QMARK_(ex) {
  return cljs.core._EQ_.call(null, new cljs.core.Keyword("cljs", "analysis-error", "cljs/analysis-error", -420526349), (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.ex_data.call(null, ex)));
};
cljs.analyzer.implicit_nses = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Symbol(null, "String", "String", -2070057435, null), null, new cljs.core.Symbol(null, "goog.string", "goog.string", -2055533048, null), null, new cljs.core.Symbol(null, "goog", "goog", -70603925, null), null, new cljs.core.Symbol(null, "goog.object", "goog.object", 678593132, null), null, new cljs.core.Symbol(null, "Math", "Math", 2033287572, null), null, new cljs.core.Symbol(null, 
"goog.array", "goog.array", -671977860, null), null], null), null);
cljs.analyzer.implicit_import_QMARK_ = function cljs$analyzer$implicit_import_QMARK_(env, prefix, suffix) {
  return cljs.core.contains_QMARK_.call(null, cljs.analyzer.implicit_nses, prefix);
};
cljs.analyzer.confirm_var_exist_warning = function cljs$analyzer$confirm_var_exist_warning(env, prefix, suffix) {
  return function(env__$1, prefix__$1, suffix__$1) {
    return cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "undeclared-var", "undeclared-var", -1624364944), env__$1, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), prefix__$1, new cljs.core.Keyword(null, "suffix", "suffix", 367373057), suffix__$1, new cljs.core.Keyword(null, "macro-present?", "macro-present?", -1397713205), !(cljs.analyzer.get_expander.call(null, cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix__$1)].join(""), 
    [cljs.core.str.cljs$core$IFn$_invoke$arity$1(suffix__$1)].join("")), env__$1) == null)], null));
  };
};
cljs.analyzer.loaded_js_ns_QMARK_ = function cljs$analyzer$loaded_js_ns_QMARK_(env, prefix) {
  if (cljs.core.truth_(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), prefix))) {
    return null;
  } else {
    var ns = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env);
    return !(cljs.core.get.call(null, (new cljs.core.Keyword(null, "requires", "requires", -1201390927)).cljs$core$IFn$_invoke$arity$1(ns), prefix) == null) || !(cljs.core.get.call(null, (new cljs.core.Keyword(null, "imports", "imports", -1249933394)).cljs$core$IFn$_invoke$arity$1(ns), prefix) == null);
  }
};
cljs.analyzer.js_module_exists_QMARK_ = function cljs$analyzer$js_module_exists_QMARK_(module) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.mapcat.call(null, cljs.core.identity), cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-module-index", "js-module-index", 2072061931)], null))), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(module)].join(""));
};
cljs.analyzer.confirm_var_exists = function cljs$analyzer$confirm_var_exists(var_args) {
  var args13943 = [];
  var len__8523__auto___13946 = arguments.length;
  var i__8524__auto___13947 = 0;
  while (true) {
    if (i__8524__auto___13947 < len__8523__auto___13946) {
      args13943.push(arguments[i__8524__auto___13947]);
      var G__13948 = i__8524__auto___13947 + 1;
      i__8524__auto___13947 = G__13948;
      continue;
    } else {
    }
    break;
  }
  var G__13945 = args13943.length;
  switch(G__13945) {
    case 3:
      return cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13943.length)].join(""));
  }
};
cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$3 = function(env, prefix, suffix) {
  var warn = cljs.analyzer.confirm_var_exist_warning.call(null, env, prefix, suffix);
  return cljs.analyzer.confirm_var_exists.call(null, env, prefix, suffix, warn);
};
cljs.analyzer.confirm_var_exists.cljs$core$IFn$_invoke$arity$4 = function(env, prefix, suffix, missing_fn) {
  var sufstr = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(suffix)].join("");
  var suffix_str = !(".." === sufstr) && /\./.test(sufstr) ? cljs.core.first.call(null, clojure.string.split.call(null, sufstr, /\./)) : suffix;
  var suffix__$1 = cljs.core.symbol.call(null, suffix_str);
  if (!cljs.analyzer.implicit_import_QMARK_.call(null, env, prefix, suffix__$1) && !cljs.analyzer.loaded_js_ns_QMARK_.call(null, env, prefix) && !(cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), prefix) && cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "unquote", "unquote", -1004694737, null), suffix__$1)) && cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", 
  "cljs.analyzer/namespaces", -260788927), prefix, new cljs.core.Keyword(null, "defs", "defs", 1398449717), suffix__$1) == null && cljs.core.not.call(null, cljs.analyzer.js_module_exists_QMARK_.call(null, prefix))) {
    return missing_fn.call(null, env, prefix, suffix__$1);
  } else {
    return null;
  }
};
cljs.analyzer.confirm_var_exists.cljs$lang$maxFixedArity = 4;
cljs.analyzer.confirm_var_exists_throw = function cljs$analyzer$confirm_var_exists_throw() {
  return function(env, prefix, suffix) {
    return cljs.analyzer.confirm_var_exists.call(null, env, prefix, suffix, function(env__$1, prefix__$1, suffix__$1) {
      throw cljs.analyzer.error.call(null, env__$1, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unable to resolve var: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(suffix__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" in this context")].join(""));
    });
  };
};
cljs.analyzer.resolve_ns_alias = function cljs$analyzer$resolve_ns_alias(var_args) {
  var args13950 = [];
  var len__8523__auto___13953 = arguments.length;
  var i__8524__auto___13954 = 0;
  while (true) {
    if (i__8524__auto___13954 < len__8523__auto___13953) {
      args13950.push(arguments[i__8524__auto___13954]);
      var G__13955 = i__8524__auto___13954 + 1;
      i__8524__auto___13954 = G__13955;
      continue;
    } else {
    }
    break;
  }
  var G__13952 = args13950.length;
  switch(G__13952) {
    case 2:
      return cljs.analyzer.resolve_ns_alias.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.resolve_ns_alias.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13950.length)].join(""));
  }
};
cljs.analyzer.resolve_ns_alias.cljs$core$IFn$_invoke$arity$2 = function(env, name) {
  return cljs.analyzer.resolve_ns_alias.call(null, env, name, cljs.core.symbol.call(null, name));
};
cljs.analyzer.resolve_ns_alias.cljs$core$IFn$_invoke$arity$3 = function(env, name, default$) {
  var sym = cljs.core.symbol.call(null, name);
  return cljs.core.get.call(null, (new cljs.core.Keyword(null, "requires", "requires", -1201390927)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), sym, default$);
};
cljs.analyzer.resolve_ns_alias.cljs$lang$maxFixedArity = 3;
cljs.analyzer.resolve_macro_ns_alias = function cljs$analyzer$resolve_macro_ns_alias(var_args) {
  var args13957 = [];
  var len__8523__auto___13960 = arguments.length;
  var i__8524__auto___13961 = 0;
  while (true) {
    if (i__8524__auto___13961 < len__8523__auto___13960) {
      args13957.push(arguments[i__8524__auto___13961]);
      var G__13962 = i__8524__auto___13961 + 1;
      i__8524__auto___13961 = G__13962;
      continue;
    } else {
    }
    break;
  }
  var G__13959 = args13957.length;
  switch(G__13959) {
    case 2:
      return cljs.analyzer.resolve_macro_ns_alias.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.resolve_macro_ns_alias.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13957.length)].join(""));
  }
};
cljs.analyzer.resolve_macro_ns_alias.cljs$core$IFn$_invoke$arity$2 = function(env, name) {
  return cljs.analyzer.resolve_macro_ns_alias.call(null, env, name, cljs.core.symbol.call(null, name));
};
cljs.analyzer.resolve_macro_ns_alias.cljs$core$IFn$_invoke$arity$3 = function(env, name, default$) {
  var sym = cljs.core.symbol.call(null, name);
  return cljs.core.get.call(null, (new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), sym, default$);
};
cljs.analyzer.resolve_macro_ns_alias.cljs$lang$maxFixedArity = 3;
cljs.analyzer.confirm_ns = function cljs$analyzer$confirm_ns(env, ns_sym) {
  if (cljs.core.not_EQ_.call(null, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), ns_sym) && cljs.core.get.call(null, cljs.analyzer.implicit_nses, ns_sym) == null && cljs.core.get.call(null, (new cljs.core.Keyword(null, "requires", "requires", -1201390927)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), ns_sym) == null && cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), 
  new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_sym) == null && cljs.core.not.call(null, cljs.analyzer.js_module_exists_QMARK_.call(null, ns_sym))) {
    return cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), ns_sym], null));
  } else {
    return null;
  }
};
cljs.analyzer.core_name_QMARK_ = function cljs$analyzer$core_name_QMARK_(env, sym) {
  var and__7398__auto__ = function() {
    var or__7410__auto__ = !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null), new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym) == null);
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      var temp__4659__auto__ = cljs.analyzer.get_expander.call(null, sym, env);
      if (temp__4659__auto__ == null) {
        return false;
      } else {
        var mac = temp__4659__auto__;
        var ns = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, mac));
        return cljs.core._EQ_.call(null, ns.getName(), new cljs.core.Symbol(null, "cljs.core$macros", "cljs.core$macros", -2057787548, null));
      }
    }
  }();
  if (and__7398__auto__) {
    return !cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), sym);
  } else {
    return and__7398__auto__;
  }
};
cljs.analyzer.js_tag_QMARK_ = function cljs$analyzer$js_tag_QMARK_(x) {
  return x instanceof cljs.core.Symbol && (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), x) || cljs.core._EQ_.call(null, "js", cljs.core.namespace.call(null, x)));
};
cljs.analyzer.normalize_js_tag = function cljs$analyzer$normalize_js_tag(x) {
  if (!cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), x)) {
    return cljs.core.with_meta.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.symbol, clojure.string.split.call(null, cljs.core.name.call(null, x), /\./))), new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null))], null));
  } else {
    return x;
  }
};
cljs.analyzer.alias__GT_type = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Symbol(null, "object", "object", -1179821820, null), new cljs.core.Symbol(null, "Object", "Object", 61210754, null), new cljs.core.Symbol(null, "string", "string", -349010059, null), new cljs.core.Symbol(null, "String", "String", -2070057435, null), new cljs.core.Symbol(null, "number", "number", -1084057331, null), new cljs.core.Symbol(null, "Number", "Number", -508146185, null), new cljs.core.Symbol(null, "array", 
"array", -440182315, null), new cljs.core.Symbol(null, "Array", "Array", -423496279, null), new cljs.core.Symbol(null, "function", "function", -486723946, null), new cljs.core.Symbol(null, "Function", "Function", -749895448, null), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), new cljs.core.Symbol(null, "Boolean", "Boolean", 1661141587, null), new cljs.core.Symbol(null, "symbol", "symbol", 601958831, null), new cljs.core.Symbol(null, "Symbol", "Symbol", 716452869, null)], null);
cljs.analyzer.has_extern_QMARK__STAR_ = function cljs$analyzer$has_extern_QMARK__STAR_(var_args) {
  var args13964 = [];
  var len__8523__auto___13970 = arguments.length;
  var i__8524__auto___13971 = 0;
  while (true) {
    if (i__8524__auto___13971 < len__8523__auto___13970) {
      args13964.push(arguments[i__8524__auto___13971]);
      var G__13972 = i__8524__auto___13971 + 1;
      i__8524__auto___13971 = G__13972;
      continue;
    } else {
    }
    break;
  }
  var G__13966 = args13964.length;
  switch(G__13966) {
    case 2:
      return cljs.analyzer.has_extern_QMARK__STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.has_extern_QMARK__STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13964.length)].join(""));
  }
};
cljs.analyzer.has_extern_QMARK__STAR_.cljs$core$IFn$_invoke$arity$2 = function(pre, externs) {
  var pre__$1 = function() {
    var temp__4659__auto__ = cljs.core.find.call(null, cljs.core.get_in.call(null, externs, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "Window", "Window", -138860255, null), new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null)], null)), cljs.core.first.call(null, pre));
    if (temp__4659__auto__ == null) {
      return pre;
    } else {
      var me = temp__4659__auto__;
      var temp__4659__auto____$1 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, cljs.core.first.call(null, me)));
      if (temp__4659__auto____$1 == null) {
        return pre;
      } else {
        var tag = temp__4659__auto____$1;
        return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag, new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null)], null), cljs.core.next.call(null, pre));
      }
    }
  }();
  return cljs.analyzer.has_extern_QMARK__STAR_.call(null, pre__$1, externs, externs);
};
cljs.analyzer.has_extern_QMARK__STAR_.cljs$core$IFn$_invoke$arity$3 = function(pre, externs, top) {
  while (true) {
    if (cljs.core.empty_QMARK_.call(null, pre)) {
      return true;
    } else {
      var x = cljs.core.first.call(null, pre);
      var me = cljs.core.find.call(null, externs, x);
      if (cljs.core.not.call(null, me)) {
        return false;
      } else {
        var vec__13967 = me;
        var x_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__13967, 0, null);
        var externs_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__13967, 1, null);
        var xmeta = cljs.core.meta.call(null, x_SINGLEQUOTE_);
        if (cljs.core.truth_(function() {
          var and__7398__auto__ = cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "Function", "Function", -749895448, null), (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(xmeta));
          if (and__7398__auto__) {
            return (new cljs.core.Keyword(null, "ctor", "ctor", 1750864802)).cljs$core$IFn$_invoke$arity$1(xmeta);
          } else {
            return and__7398__auto__;
          }
        }())) {
          var or__7410__auto__ = cljs.analyzer.has_extern_QMARK__STAR_.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null)], null), cljs.core.next.call(null, pre)), externs_SINGLEQUOTE_, top);
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return cljs.analyzer.has_extern_QMARK__STAR_.call(null, cljs.core.next.call(null, pre), externs_SINGLEQUOTE_, top);
          }
        } else {
          var G__13974 = cljs.core.next.call(null, pre);
          var G__13975 = externs_SINGLEQUOTE_;
          var G__13976 = top;
          pre = G__13974;
          externs = G__13975;
          top = G__13976;
          continue;
        }
      }
    }
    break;
  }
};
cljs.analyzer.has_extern_QMARK__STAR_.cljs$lang$maxFixedArity = 3;
cljs.analyzer.has_extern_QMARK_ = function cljs$analyzer$has_extern_QMARK_(var_args) {
  var args13977 = [];
  var len__8523__auto___13980 = arguments.length;
  var i__8524__auto___13981 = 0;
  while (true) {
    if (i__8524__auto___13981 < len__8523__auto___13980) {
      args13977.push(arguments[i__8524__auto___13981]);
      var G__13982 = i__8524__auto___13981 + 1;
      i__8524__auto___13981 = G__13982;
      continue;
    } else {
    }
    break;
  }
  var G__13979 = args13977.length;
  switch(G__13979) {
    case 1:
      return cljs.analyzer.has_extern_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.has_extern_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13977.length)].join(""));
  }
};
cljs.analyzer.has_extern_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(pre) {
  return cljs.analyzer.has_extern_QMARK_.call(null, pre, cljs.core.get.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "externs", "cljs.analyzer/externs", 893359239)));
};
cljs.analyzer.has_extern_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(pre, externs) {
  var or__7410__auto__ = cljs.analyzer.has_extern_QMARK__STAR_.call(null, pre, externs);
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    var or__7410__auto____$1 = cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, pre)) ? function() {
      var x = cljs.core.first.call(null, pre);
      var or__7410__auto____$1 = cljs.core.get_in.call(null, externs, cljs.core.conj.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "Window", "Window", -138860255, null), new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null)], null), x));
      if (cljs.core.truth_(or__7410__auto____$1)) {
        return or__7410__auto____$1;
      } else {
        return cljs.core.get_in.call(null, externs, cljs.core.conj.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "Number", "Number", -508146185, null)], null), x));
      }
    }() : null;
    if (cljs.core.truth_(or__7410__auto____$1)) {
      return or__7410__auto____$1;
    } else {
      return clojure.string.starts_with_QMARK_.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.last.call(null, pre))].join(""), "cljs$");
    }
  }
};
cljs.analyzer.has_extern_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.analyzer.js_tag = function cljs$analyzer$js_tag(var_args) {
  var args13984 = [];
  var len__8523__auto___13990 = arguments.length;
  var i__8524__auto___13991 = 0;
  while (true) {
    if (i__8524__auto___13991 < len__8523__auto___13990) {
      args13984.push(arguments[i__8524__auto___13991]);
      var G__13992 = i__8524__auto___13991 + 1;
      i__8524__auto___13991 = G__13992;
      continue;
    } else {
    }
    break;
  }
  var G__13986 = args13984.length;
  switch(G__13986) {
    case 1:
      return cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13984.length)].join(""));
  }
};
cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$1 = function(pre) {
  return cljs.analyzer.js_tag.call(null, pre, new cljs.core.Keyword(null, "tag", "tag", -1290361223));
};
cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$2 = function(pre, tag_type) {
  return cljs.analyzer.js_tag.call(null, pre, tag_type, cljs.core.get.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "externs", "cljs.analyzer/externs", 893359239)));
};
cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$3 = function(pre, tag_type, externs) {
  return cljs.analyzer.js_tag.call(null, pre, tag_type, externs, externs);
};
cljs.analyzer.js_tag.cljs$core$IFn$_invoke$arity$4 = function(pre, tag_type, externs, top) {
  var temp__4657__auto__ = cljs.core.find.call(null, externs, cljs.core.first.call(null, pre));
  if (cljs.core.truth_(temp__4657__auto__)) {
    var vec__13987 = temp__4657__auto__;
    var p = cljs.core.nth.call(null, vec__13987, 0, null);
    var externs_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__13987, 1, null);
    var me = vec__13987;
    var tag = tag_type.call(null, cljs.core.meta.call(null, p));
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, pre), 1)) {
      if (cljs.core.truth_(tag)) {
        return cljs.core.symbol.call(null, "js", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.alias__GT_type.call(null, tag, tag))].join(""));
      } else {
        return null;
      }
    } else {
      var or__7410__auto__ = cljs.analyzer.js_tag.call(null, cljs.core.next.call(null, pre), tag_type, externs_SINGLEQUOTE_, top);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return cljs.analyzer.js_tag.call(null, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null)], null), cljs.core.next.call(null, pre)), tag_type, cljs.core.get.call(null, top, tag), top);
      }
    }
  } else {
    return null;
  }
};
cljs.analyzer.js_tag.cljs$lang$maxFixedArity = 4;
cljs.analyzer.resolve_var = function cljs$analyzer$resolve_var(var_args) {
  var args13994 = [];
  var len__8523__auto___13997 = arguments.length;
  var i__8524__auto___13998 = 0;
  while (true) {
    if (i__8524__auto___13998 < len__8523__auto___13997) {
      args13994.push(arguments[i__8524__auto___13998]);
      var G__13999 = i__8524__auto___13998 + 1;
      i__8524__auto___13998 = G__13999;
      continue;
    } else {
    }
    break;
  }
  var G__13996 = args13994.length;
  switch(G__13996) {
    case 2:
      return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args13994.length)].join(""));
  }
};
cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$2 = function(env, sym) {
  return cljs.analyzer.resolve_var.call(null, env, sym, null);
};
cljs.analyzer.resolve_var.cljs$core$IFn$_invoke$arity$3 = function(env, sym, confirm) {
  while (true) {
    var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env);
    if ("js" === cljs.core.namespace.call(null, sym)) {
      if (cljs.core.contains_QMARK_.call(null, locals, cljs.core.symbol.call(null, cljs.core.name.call(null, sym)))) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "js-shadowed-by-local", "js-shadowed-by-local", 198048291), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), sym], null));
      } else {
      }
      var pre = cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.symbol, clojure.string.split.call(null, cljs.core.name.call(null, sym), /\./)));
      if (cljs.core.truth_(cljs.analyzer.has_extern_QMARK_.call(null, pre))) {
      } else {
        cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, 
        "externs", "externs", 221720677)], null), pre), cljs.core.merge, cljs.core.PersistentArrayMap.EMPTY);
      }
      return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), sym, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "js", "js", -886355190, null), new cljs.core.Keyword(null, "tag", "tag", -1290361223), cljs.core.with_meta.call(null, function() {
        var or__7410__auto__ = cljs.analyzer.js_tag.call(null, pre);
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return new cljs.core.Symbol(null, "js", "js", -886355190, null);
        }
      }(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465), pre], null))], null), function() {
        var temp__4657__auto__ = cljs.analyzer.js_tag.call(null, pre, new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990));
        if (cljs.core.truth_(temp__4657__auto__)) {
          var ret_tag = temp__4657__auto__;
          return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "js-fn-var", "js-fn-var", -565665358), true, new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), ret_tag], null);
        } else {
          return null;
        }
      }());
    } else {
      var s = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join("");
      var lb = cljs.core.get.call(null, locals, sym);
      if (!(lb == null)) {
        return lb;
      } else {
        if (!(cljs.core.namespace.call(null, sym) == null)) {
          var ns = cljs.core.namespace.call(null, sym);
          var ns__$1 = "clojure.core" === ns ? "cljs.core" : ns;
          var full_ns = cljs.analyzer.resolve_ns_alias.call(null, env, ns__$1, function() {
            var or__7410__auto__ = function() {
              var and__7398__auto__ = cljs.analyzer.js_module_exists_QMARK_.call(null, ns__$1);
              if (cljs.core.truth_(and__7398__auto__)) {
                return cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-module-index", "js-module-index", 2072061931), ns__$1], null));
              } else {
                return and__7398__auto__;
              }
            }();
            if (cljs.core.truth_(or__7410__auto__)) {
              return or__7410__auto__;
            } else {
              return cljs.core.symbol.call(null, ns__$1);
            }
          }());
          if (!(confirm == null)) {
            if (cljs.core.not_EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), full_ns)) {
              cljs.analyzer.confirm_ns.call(null, env, full_ns);
            } else {
            }
            confirm.call(null, env, full_ns, cljs.core.symbol.call(null, cljs.core.name.call(null, sym)));
          } else {
          }
          return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), cljs.core.symbol.call(null, cljs.core.name.call(null, sym))), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(full_ns)].join(""), 
          [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, sym))].join("")), new cljs.core.Keyword(null, "ns", "ns", 441598760), full_ns], null));
        } else {
          if (goog.string.contains(s, ".") && !goog.string.contains(s, "..")) {
            var idx = s.indexOf(".");
            var prefix = cljs.core.symbol.call(null, cljs.core.subs.call(null, s, 0, idx));
            var suffix = cljs.core.subs.call(null, s, idx + 1);
            var temp__4659__auto__ = cljs.core.get.call(null, locals, prefix);
            if (temp__4659__auto__ == null) {
              var cur_ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
              var temp__4659__auto____$1 = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cur_ns, new cljs.core.Keyword(null, "imports", "imports", -1249933394), prefix);
              if (temp__4659__auto____$1 == null) {
                var temp__4659__auto____$2 = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cur_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), prefix);
                if (temp__4659__auto____$2 == null) {
                  return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), prefix, new cljs.core.Keyword(null, "defs", "defs", 1398449717), cljs.core.symbol.call(null, suffix)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core._EQ_.call(null, "", prefix) ? cljs.core.symbol.call(null, 
                  suffix) : cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix)].join(""), suffix), new cljs.core.Keyword(null, "ns", "ns", 441598760), prefix], null));
                } else {
                  var info = temp__4659__auto____$2;
                  return cljs.core.merge.call(null, info, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cur_ns)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join("")), new cljs.core.Keyword(null, "ns", "ns", 441598760), cur_ns], null));
                }
              } else {
                var full_ns = temp__4659__auto____$1;
                return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(full_ns)].join(""), suffix)], null);
              }
            } else {
              var lb__$1 = temp__4659__auto__;
              return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(lb__$1))].join(""), suffix)], null);
            }
          } else {
            if (!(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "uses", "uses", 232664692), sym) == null)) {
              var full_ns = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "uses", "uses", 232664692), sym);
              return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(full_ns)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join("")), 
              new cljs.core.Keyword(null, "ns", "ns", 441598760), full_ns], null));
            } else {
              if (!(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "renames", "renames", 343278368), sym) == null)) {
                var qualified_symbol = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "renames", "renames", 343278368), sym);
                var full_ns = cljs.core.symbol.call(null, cljs.core.namespace.call(null, qualified_symbol));
                var sym__$1 = cljs.core.symbol.call(null, cljs.core.name.call(null, qualified_symbol));
                return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym__$1), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), qualified_symbol, new cljs.core.Keyword(null, "ns", "ns", 441598760), full_ns], null));
              } else {
                if (!(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "imports", "imports", -1249933394), sym) == null)) {
                  var G__14001 = env;
                  var G__14002 = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "imports", "imports", -1249933394), sym);
                  var G__14003 = confirm;
                  env = G__14001;
                  sym = G__14002;
                  confirm = G__14003;
                  continue;
                } else {
                  if (cljs.core.truth_(function() {
                    var or__7410__auto__ = cljs.analyzer.js_module_exists_QMARK_.call(null, s);
                    if (cljs.core.truth_(or__7410__auto__)) {
                      return or__7410__auto__;
                    } else {
                      return cljs.analyzer.js_module_exists_QMARK_.call(null, cljs.analyzer.resolve_ns_alias.call(null, env, s));
                    }
                  }())) {
                    var module = function() {
                      var or__7410__auto__ = cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword(null, "js-module-index", "js-module-index", 2072061931), s);
                      if (cljs.core.truth_(or__7410__auto__)) {
                        return or__7410__auto__;
                      } else {
                        return cljs.analyzer.resolve_ns_alias.call(null, env, s);
                      }
                    }();
                    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, module), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Symbol(null, "js", "js", -886355190, null)], null);
                  } else {
                    var cur_ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
                    var full_ns = !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cur_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym) == null) ? cur_ns : cljs.analyzer.core_name_QMARK_.call(null, env, sym) ? new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null) : cur_ns;
                    if (!(confirm == null)) {
                      confirm.call(null, env, full_ns, sym);
                    } else {
                    }
                    return cljs.core.merge.call(null, cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), full_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(full_ns)].join(""), 
                    [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join("")), new cljs.core.Keyword(null, "ns", "ns", 441598760), full_ns], null));
                  }
                }
              }
            }
          }
        }
      }
    }
    break;
  }
};
cljs.analyzer.resolve_var.cljs$lang$maxFixedArity = 3;
cljs.analyzer.resolve_existing_var = function cljs$analyzer$resolve_existing_var(env, sym) {
  if (cljs.core.not.call(null, (new cljs.core.Keyword("cljs.analyzer", "no-resolve", "cljs.analyzer/no-resolve", -1872351017)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym)))) {
    return cljs.analyzer.resolve_var.call(null, env, sym, cljs.analyzer.confirm_var_exists);
  } else {
    return cljs.analyzer.resolve_var.call(null, env, sym);
  }
};
cljs.analyzer.confirm_bindings = function cljs$analyzer$confirm_bindings(env, names) {
  var seq__14008 = cljs.core.seq.call(null, names);
  var chunk__14009 = null;
  var count__14010 = 0;
  var i__14011 = 0;
  while (true) {
    if (i__14011 < count__14010) {
      var name = cljs.core._nth.call(null, chunk__14009, i__14011);
      var env_14012__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
      var ev_14013 = cljs.analyzer.resolve_existing_var.call(null, env_14012__$1, name);
      if (cljs.core.truth_(function() {
        var and__7398__auto__ = ev_14013;
        if (cljs.core.truth_(and__7398__auto__)) {
          return cljs.core.not.call(null, (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(ev_14013));
        } else {
          return and__7398__auto__;
        }
      }())) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), env_14012__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ev", "ev", -406827324), ev_14013, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ev_14013)], null));
      } else {
      }
      var G__14014 = seq__14008;
      var G__14015 = chunk__14009;
      var G__14016 = count__14010;
      var G__14017 = i__14011 + 1;
      seq__14008 = G__14014;
      chunk__14009 = G__14015;
      count__14010 = G__14016;
      i__14011 = G__14017;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__14008);
      if (temp__4657__auto__) {
        var seq__14008__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14008__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__14008__$1);
          var G__14018 = cljs.core.chunk_rest.call(null, seq__14008__$1);
          var G__14019 = c__8229__auto__;
          var G__14020 = cljs.core.count.call(null, c__8229__auto__);
          var G__14021 = 0;
          seq__14008 = G__14018;
          chunk__14009 = G__14019;
          count__14010 = G__14020;
          i__14011 = G__14021;
          continue;
        } else {
          var name = cljs.core.first.call(null, seq__14008__$1);
          var env_14022__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
          var ev_14023 = cljs.analyzer.resolve_existing_var.call(null, env_14022__$1, name);
          if (cljs.core.truth_(function() {
            var and__7398__auto__ = ev_14023;
            if (cljs.core.truth_(and__7398__auto__)) {
              return cljs.core.not.call(null, (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(ev_14023));
            } else {
              return and__7398__auto__;
            }
          }())) {
            cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), env_14022__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ev", "ev", -406827324), ev_14023, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ev_14023)], null));
          } else {
          }
          var G__14024 = cljs.core.next.call(null, seq__14008__$1);
          var G__14025 = null;
          var G__14026 = 0;
          var G__14027 = 0;
          seq__14008 = G__14024;
          chunk__14009 = G__14025;
          count__14010 = G__14026;
          i__14011 = G__14027;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.resolve_macro_var = function cljs$analyzer$resolve_macro_var(env, sym) {
  var ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
  var namespaces = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927));
  if (!(cljs.core.namespace.call(null, sym) == null)) {
    var ns__$1 = cljs.core.namespace.call(null, sym);
    var ns__$2 = cljs.core._EQ_.call(null, "clojure.core", ns__$1) ? "cljs.core" : ns__$1;
    var full_ns = cljs.analyzer.resolve_macro_ns_alias.call(null, env, ns__$2);
    return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [full_ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), cljs.core.symbol.call(null, cljs.core.name.call(null, sym))], null));
  } else {
    if (!(cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym], null)) == null)) {
      var full_ns = cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym], null));
      return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [full_ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), sym], null));
    } else {
      if (!(cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), sym], null)) == null)) {
        var qualified_symbol = cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), sym], null));
        var full_ns = cljs.core.symbol.call(null, cljs.core.namespace.call(null, qualified_symbol));
        var sym__$1 = cljs.core.symbol.call(null, cljs.core.name.call(null, qualified_symbol));
        return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [full_ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), sym__$1], null));
      } else {
        var ns__$1 = !(cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns, new cljs.core.Keyword(null, "macros", "macros", 811339431), sym], null)) == null) ? ns : cljs.analyzer.core_name_QMARK_.call(null, env, sym) ? cljs.analyzer.CLJS_CORE_MACROS_SYM : null;
        if (!(ns__$1 == null)) {
          return cljs.core.get_in.call(null, namespaces, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns__$1, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.analyzer.specials = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "case*", "case*", -1938255072, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "ns*", "ns*", 1840949383, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 
615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, 
"js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "var", "var", 870848730, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), 
null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null);
cljs.analyzer._STAR_recur_frames_STAR_ = null;
cljs.analyzer._STAR_loop_lets_STAR_ = cljs.core.List.EMPTY;
cljs.analyzer._STAR_allow_redef_STAR_ = false;
cljs.analyzer._STAR_allow_ns_STAR_ = true;
cljs.analyzer.analyze_keyword = function cljs$analyzer$analyze_keyword(env, sym) {
  cljs.analyzer.register_constant_BANG_.call(null, env, sym);
  return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "constant", "constant", -379609303), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), sym, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "Keyword", "cljs.core/Keyword", -451434488, null)], null);
};
cljs.analyzer.get_tag = function cljs$analyzer$get_tag(e) {
  var temp__4659__auto__ = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(e);
  if (temp__4659__auto__ == null) {
    var temp__4659__auto____$1 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(e));
    if (temp__4659__auto____$1 == null) {
      return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(e)));
    } else {
      var tag = temp__4659__auto____$1;
      return tag;
    }
  } else {
    var tag = temp__4659__auto__;
    return tag;
  }
};
cljs.analyzer.find_matching_method = function cljs$analyzer$find_matching_method(f, params) {
  var methods$ = function() {
    var or__7410__auto__ = (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(f);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(f));
    }
  }();
  var c = cljs.core.count.call(null, params);
  return cljs.core.some.call(null, function(methods$, c) {
    return function(m) {
      var and__7398__auto__ = function() {
        var or__7410__auto__ = (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(m) === c;
        if (or__7410__auto__) {
          return or__7410__auto__;
        } else {
          return (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(m);
        }
      }();
      if (cljs.core.truth_(and__7398__auto__)) {
        return m;
      } else {
        return and__7398__auto__;
      }
    };
  }(methods$, c), methods$);
};
cljs.analyzer.type_QMARK_ = function cljs$analyzer$type_QMARK_(env, t) {
  if (!(t == null) && t instanceof cljs.core.Symbol) {
    var var$ = cljs.analyzer.resolve_var.call(null, env, t);
    var temp__4659__auto__ = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1(var$);
    if (temp__4659__auto__ == null) {
      var temp__4659__auto____$1 = (new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(var$));
      if (temp__4659__auto____$1 == null) {
        var temp__4659__auto____$2 = (new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198)).cljs$core$IFn$_invoke$arity$1(var$);
        if (temp__4659__auto____$2 == null) {
          return cljs.core.get.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol("cljs.core", "PersistentHashMap", "cljs.core/PersistentHashMap", -454120575, null), null, new cljs.core.Symbol("cljs.core", "List", "cljs.core/List", 1708954352, null), null], null), null), t);
        } else {
          var proto = temp__4659__auto____$2;
          return proto;
        }
      } else {
        var type = temp__4659__auto____$1;
        return type;
      }
    } else {
      var type = temp__4659__auto__;
      return type;
    }
  } else {
    return null;
  }
};
cljs.analyzer.NOT_NATIVE = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "clj", "clj", 980036099, null), null, new cljs.core.Symbol(null, "not-native", "not-native", -236392494, null), null], null), null);
cljs.analyzer.BOOLEAN_OR_SEQ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Symbol(null, "seq", "seq", -177272256, null), null, new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null), null], null), null);
cljs.analyzer.infer_if = function cljs$analyzer$infer_if(env, e) {
  var map__14032 = e;
  var map__14032__$1 = (!(map__14032 == null) ? map__14032.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14032.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14032) : map__14032;
  var map__14033 = cljs.core.get.call(null, map__14032__$1, new cljs.core.Keyword(null, "test", "test", 577538877));
  var map__14033__$1 = (!(map__14033 == null) ? map__14033.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14033.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14033) : map__14033;
  var op = cljs.core.get.call(null, map__14033__$1, new cljs.core.Keyword(null, "op", "op", -1882987955));
  var form = cljs.core.get.call(null, map__14033__$1, new cljs.core.Keyword(null, "form", "form", -1624062471));
  var then_tag = cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "then", "then", 460598070)).cljs$core$IFn$_invoke$arity$1(e));
  if (cljs.core.keyword_identical_QMARK_.call(null, op, new cljs.core.Keyword(null, "constant", "constant", -379609303)) && !(form == null) && !(form === false)) {
    return then_tag;
  } else {
    var else_tag = cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "else", "else", -1508377146)).cljs$core$IFn$_invoke$arity$1(e));
    if (cljs.core.symbol_identical_QMARK_.call(null, then_tag, else_tag) || cljs.core.symbol_identical_QMARK_.call(null, else_tag, cljs.analyzer.IGNORE_SYM)) {
      return then_tag;
    } else {
      if (cljs.core.symbol_identical_QMARK_.call(null, then_tag, cljs.analyzer.IGNORE_SYM)) {
        return else_tag;
      } else {
        if ((!(cljs.core.get.call(null, cljs.analyzer.NOT_NATIVE, then_tag) == null) || cljs.analyzer.type_QMARK_.call(null, env, then_tag)) && (!(cljs.core.get.call(null, cljs.analyzer.NOT_NATIVE, else_tag) == null) || cljs.analyzer.type_QMARK_.call(null, env, else_tag))) {
          return new cljs.core.Symbol(null, "clj", "clj", 980036099, null);
        } else {
          if (!(cljs.core.get.call(null, cljs.analyzer.BOOLEAN_OR_SEQ, then_tag) == null) && !(cljs.core.get.call(null, cljs.analyzer.BOOLEAN_OR_SEQ, else_tag) == null)) {
            return new cljs.core.Symbol(null, "seq", "seq", -177272256, null);
          } else {
            var then_tag__$1 = cljs.analyzer.cljs_set_QMARK_.call(null, then_tag) ? then_tag : cljs.core.PersistentHashSet.createAsIfByAssoc([then_tag], true);
            var else_tag__$1 = cljs.analyzer.cljs_set_QMARK_.call(null, else_tag) ? else_tag : cljs.core.PersistentHashSet.createAsIfByAssoc([else_tag], true);
            return cljs.core.into.call(null, then_tag__$1, else_tag__$1);
          }
        }
      }
    }
  }
};
cljs.analyzer.infer_invoke = function cljs$analyzer$infer_invoke(env, e) {
  var map__14038 = (new cljs.core.Keyword(null, "f", "f", -1597136552)).cljs$core$IFn$_invoke$arity$1(e);
  var map__14038__$1 = (!(map__14038 == null) ? map__14038.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14038.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14038) : map__14038;
  var f = map__14038__$1;
  var info = cljs.core.get.call(null, map__14038__$1, new cljs.core.Keyword(null, "info", "info", -317069002));
  var temp__4659__auto__ = (new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1(info) === true || (new cljs.core.Keyword(null, "js-fn-var", "js-fn-var", -565665358)).cljs$core$IFn$_invoke$arity$1(info) === true ? (new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990)).cljs$core$IFn$_invoke$arity$1(info) : cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(info)) ? 
  new cljs.core.Symbol(null, "js", "js", -886355190, null) : null;
  if (temp__4659__auto__ == null) {
    var args = (new cljs.core.Keyword(null, "args", "args", 1315556576)).cljs$core$IFn$_invoke$arity$1(e);
    var me = cljs.core.assoc.call(null, cljs.analyzer.find_matching_method.call(null, f, args), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "method", "method", 55703592));
    var temp__4659__auto____$1 = cljs.analyzer.infer_tag.call(null, env, me);
    if (temp__4659__auto____$1 == null) {
      return cljs.analyzer.ANY_SYM;
    } else {
      var ret_tag = temp__4659__auto____$1;
      return ret_tag;
    }
  } else {
    var ret_tag = temp__4659__auto__;
    return ret_tag;
  }
};
cljs.analyzer.infer_tag = function cljs$analyzer$infer_tag(env, e) {
  var temp__4659__auto__ = cljs.analyzer.get_tag.call(null, e);
  if (temp__4659__auto__ == null) {
    var G__14042 = (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(e) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(e).fqn : null;
    switch(G__14042) {
      case "js":
        return cljs.analyzer.ANY_SYM;
        break;
      case "let":
        return cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "expr", "expr", 745722291)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "do":
        return cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "ret", "ret", -468222814)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "if":
        return cljs.analyzer.infer_if.call(null, env, e);
        break;
      case "method":
        return cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "expr", "expr", 745722291)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "constant":
        var G__14043 = (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(e);
        if (cljs.core._EQ_.call(null, true, G__14043)) {
          return cljs.analyzer.BOOLEAN_SYM;
        } else {
          if (cljs.core._EQ_.call(null, false, G__14043)) {
            return cljs.analyzer.BOOLEAN_SYM;
          } else {
            return cljs.analyzer.ANY_SYM;
          }
        }
        break;
      case "recur":
        return cljs.analyzer.IGNORE_SYM;
        break;
      case "loop":
        return cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "expr", "expr", 745722291)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "var":
        var temp__4659__auto____$1 = (new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(e);
        if (temp__4659__auto____$1 == null) {
          return cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(e));
        } else {
          var init = temp__4659__auto____$1;
          return cljs.analyzer.infer_tag.call(null, env, init);
        }
        break;
      case "invoke":
        return cljs.analyzer.infer_invoke.call(null, env, e);
        break;
      case "throw":
        return cljs.analyzer.IGNORE_SYM;
        break;
      case "def":
        return cljs.analyzer.infer_tag.call(null, env, (new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(e));
        break;
      case "dot":
        return cljs.analyzer.ANY_SYM;
        break;
      default:
        return null;
    }
  } else {
    var tag = temp__4659__auto__;
    return tag;
  }
};
if (typeof cljs.analyzer.parse !== "undefined") {
} else {
  cljs.analyzer.parse = function() {
    var method_table__8343__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__8344__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__8345__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__8346__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__8347__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.analyzer", "parse"), function(method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__, hierarchy__8347__auto__) {
      return function() {
        var G__14045__delegate = function(op, rest) {
          return op;
        };
        var G__14045 = function(op, var_args) {
          var rest = null;
          if (arguments.length > 1) {
            var G__14046__i = 0, G__14046__a = new Array(arguments.length - 1);
            while (G__14046__i < G__14046__a.length) {
              G__14046__a[G__14046__i] = arguments[G__14046__i + 1];
              ++G__14046__i;
            }
            rest = new cljs.core.IndexedSeq(G__14046__a, 0);
          }
          return G__14045__delegate.call(this, op, rest);
        };
        G__14045.cljs$lang$maxFixedArity = 1;
        G__14045.cljs$lang$applyTo = function(arglist__14047) {
          var op = cljs.core.first(arglist__14047);
          var rest = cljs.core.rest(arglist__14047);
          return G__14045__delegate(op, rest);
        };
        G__14045.cljs$core$IFn$_invoke$arity$variadic = G__14045__delegate;
        return G__14045;
      }();
    }(method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__, hierarchy__8347__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__8347__auto__, method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__);
  }();
}
cljs.analyzer.var_ast = function cljs$analyzer$var_ast(env, sym) {
  var env__$1 = cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783));
  var var$ = cljs.analyzer.resolve_var.call(null, env__$1, sym, cljs.analyzer.confirm_var_exists_throw.call(null));
  var expr_env = cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var temp__4661__auto__ = (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(var$);
  if (temp__4661__auto__ == null) {
    return null;
  } else {
    var var_ns = temp__4661__auto__;
    return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "var", "var", -769682797), cljs.analyzer.analyze.call(null, expr_env, sym), new cljs.core.Keyword(null, "sym", "sym", -1444860305), cljs.analyzer.analyze.call(null, expr_env, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), function() {
      var x__8252__auto__ = cljs.core.symbol.call(null, cljs.core.name.call(null, var_ns), cljs.core.name.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(var$)));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())))), new cljs.core.Keyword(null, "meta", "meta", 1499536964), function() {
      var ks = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "doc", "doc", 1913296891), new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095)], null);
      var m = cljs.core.merge.call(null, function() {
        var user_meta = (new cljs.core.Keyword(null, "meta", "meta", 1499536964)).cljs$core$IFn$_invoke$arity$1(var$);
        var uks = cljs.core.keys.call(null, user_meta);
        return cljs.core.zipmap.call(null, uks, cljs.core.map.call(null, function(user_meta, uks, ks, var_ns, temp__4661__auto__, env__$1, var$, expr_env) {
          return function(p1__14048_SHARP_) {
            return cljs.core._conj.call(null, function() {
              var x__8252__auto__ = cljs.core.get.call(null, user_meta, p1__14048_SHARP_);
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
          };
        }(user_meta, uks, ks, var_ns, temp__4661__auto__, env__$1, var$, expr_env), uks));
      }(), cljs.core.assoc.call(null, cljs.core.zipmap.call(null, ks, cljs.core.map.call(null, function(ks, var_ns, temp__4661__auto__, env__$1, var$, expr_env) {
        return function(p1__14049_SHARP_) {
          return cljs.core._conj.call(null, function() {
            var x__8252__auto__ = cljs.core.get.call(null, var$, p1__14049_SHARP_);
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        };
      }(ks, var_ns, temp__4661__auto__, env__$1, var$, expr_env), ks)), new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), function() {
        var x__8252__auto__ = cljs.core.symbol.call(null, cljs.core.name.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(var$)));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))), new cljs.core.Keyword(null, "test", "test", 577538877), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
        var x__8252__auto__ = sym;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$test", ".-cljs$lang$test", 718963148, null)), function() {
          var x__8252__auto__ = sym;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))), new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), function() {
        var arglists = (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(var$);
        var arglists_SINGLEQUOTE_ = cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, arglists)) ? cljs.core.second.call(null, arglists) : arglists;
        return cljs.core._conj.call(null, function() {
          var x__8252__auto__ = cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.with_meta, arglists_SINGLEQUOTE_, (new cljs.core.Keyword(null, "arglists-meta", "arglists-meta", 1944829838)).cljs$core$IFn$_invoke$arity$1(var$)));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
      }()));
      return cljs.analyzer.analyze.call(null, expr_env, m);
    }()], null);
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "var", "var", 870848730, null), function(op, env, p__14050, _, ___$1) {
  var vec__14051 = p__14050;
  var ___$2 = cljs.core.nth.call(null, vec__14051, 0, null);
  var sym = cljs.core.nth.call(null, vec__14051, 1, null);
  var form = vec__14051;
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var-special", "var-special", 1131576802), new cljs.core.Keyword(null, "form", "form", -1624062471), form], null), cljs.analyzer.var_ast.call(null, env, sym));
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "if", "if", 1181717262, null), function(op, env, p__14054, name, _) {
  var vec__14055 = p__14054;
  var ___$1 = cljs.core.nth.call(null, vec__14055, 0, null);
  var test = cljs.core.nth.call(null, vec__14055, 1, null);
  var then = cljs.core.nth.call(null, vec__14055, 2, null);
  var else$ = cljs.core.nth.call(null, vec__14055, 3, null);
  var form = vec__14055;
  if (cljs.core.count.call(null, form) < 3) {
    throw cljs.analyzer.error.call(null, env, "Too few arguments to if");
  } else {
  }
  if (cljs.core.count.call(null, form) > 4) {
    throw cljs.analyzer.error.call(null, env, "Too many arguments to if");
  } else {
  }
  var test_expr = function() {
    var _STAR_recur_frames_STAR_14058 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), test);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14058;
    }
  }();
  var then_expr = function() {
    var _STAR_allow_redef_STAR_14059 = cljs.analyzer._STAR_allow_redef_STAR_;
    cljs.analyzer._STAR_allow_redef_STAR_ = true;
    try {
      return cljs.analyzer.analyze.call(null, env, then);
    } finally {
      cljs.analyzer._STAR_allow_redef_STAR_ = _STAR_allow_redef_STAR_14059;
    }
  }();
  var else_expr = function() {
    var _STAR_allow_redef_STAR_14060 = cljs.analyzer._STAR_allow_redef_STAR_;
    cljs.analyzer._STAR_allow_redef_STAR_ = true;
    try {
      return cljs.analyzer.analyze.call(null, env, else$);
    } finally {
      cljs.analyzer._STAR_allow_redef_STAR_ = _STAR_allow_redef_STAR_14060;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "if", "if", -458814265), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "test", "test", 577538877), test_expr, new cljs.core.Keyword(null, "then", "then", 460598070), then_expr, new cljs.core.Keyword(null, "else", "else", -1508377146), else_expr, new cljs.core.Keyword(null, 
  "unchecked", "unchecked", 924418378), cljs.core._STAR_unchecked_if_STAR_, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [test_expr, then_expr, else_expr], null)], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "case*", "case*", -1938255072, null), function(op, env, p__14063, name, _) {
  var vec__14064 = p__14063;
  var ___$1 = cljs.core.nth.call(null, vec__14064, 0, null);
  var sym = cljs.core.nth.call(null, vec__14064, 1, null);
  var tests = cljs.core.nth.call(null, vec__14064, 2, null);
  var thens = cljs.core.nth.call(null, vec__14064, 3, null);
  var default$ = cljs.core.nth.call(null, vec__14064, 4, null);
  var form = vec__14064;
  if (sym instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("case* must switch on symbol"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(symbol? sym)")].join(""));
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.vector_QMARK_, tests)) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("case* tests must be grouped in vectors"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(every? vector? tests)")].join(""));
  }
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var v = function() {
    var _STAR_recur_frames_STAR_14067 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, expr_env, sym);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14067;
    }
  }();
  var tests__$1 = cljs.core.mapv.call(null, function(expr_env, v, vec__14064, ___$1, sym, tests, thens, default$, form) {
    return function(p1__14061_SHARP_) {
      return cljs.core.mapv.call(null, function(expr_env, v, vec__14064, ___$1, sym, tests, thens, default$, form) {
        return function(t) {
          return cljs.analyzer.analyze.call(null, expr_env, t);
        };
      }(expr_env, v, vec__14064, ___$1, sym, tests, thens, default$, form), p1__14061_SHARP_);
    };
  }(expr_env, v, vec__14064, ___$1, sym, tests, thens, default$, form), tests);
  var thens__$1 = cljs.core.mapv.call(null, function(expr_env, v, tests__$1, vec__14064, ___$1, sym, tests, thens, default$, form) {
    return function(p1__14062_SHARP_) {
      return cljs.analyzer.analyze.call(null, env, p1__14062_SHARP_);
    };
  }(expr_env, v, tests__$1, vec__14064, ___$1, sym, tests, thens, default$, form), thens);
  var default$__$1 = cljs.analyzer.analyze.call(null, env, default$);
  if (cljs.core.every_QMARK_.call(null, function(expr_env, v, tests__$1, thens__$1, default$__$1, vec__14064, ___$1, sym, tests, thens, default$, form) {
    return function(t) {
      var or__7410__auto__ = (new cljs.core.Keyword(null, "const", "const", 1709929842)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(t));
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        var and__7398__auto__ = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "constant", "constant", -379609303), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(t));
        if (and__7398__auto__) {
          return cljs.core.some_fn.call(null, cljs.core.number_QMARK_, cljs.core.string_QMARK_, cljs.core.char_QMARK_).call(null, (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(t));
        } else {
          return and__7398__auto__;
        }
      }
    };
  }(expr_env, v, tests__$1, thens__$1, default$__$1, vec__14064, ___$1, sym, tests, thens, default$, form), cljs.core.apply.call(null, cljs.core.concat, tests__$1))) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("case* tests must be numbers, strings, or constants"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(every? (fn [t] (or (-\x3e t :info :const) (and (\x3d :constant (:op t)) ((some-fn number? string? char?) (:form t))))) (apply concat tests))")].join(""));
  }
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "case*", "case*", 716180697), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "v", "v", 21465059), v, new cljs.core.Keyword(null, "tests", "tests", -1041085625), tests__$1, new cljs.core.Keyword(null, "thens", "thens", 226631442), thens__$1, new cljs.core.Keyword(null, 
  "default", "default", -1987822328), default$__$1, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.vec.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [v], null), tests__$1, thens__$1, cljs.core.truth_(default$__$1) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [default$__$1], null) : null))], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), function(op, env, p__14068, name, _) {
  var vec__14069 = p__14068;
  var ___$1 = cljs.core.nth.call(null, vec__14069, 0, null);
  var throw$ = cljs.core.nth.call(null, vec__14069, 1, null);
  var form = vec__14069;
  var throw_expr = function() {
    var _STAR_recur_frames_STAR_14072 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), throw$);
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14072;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "throw", "throw", -1044625833), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "throw", "throw", -1044625833), throw_expr, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [throw_expr], null)], null);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "try", "try", -1273693247, null), function(op, env, p__14077, name, _) {
  var vec__14078 = p__14077;
  var seq__14079 = cljs.core.seq.call(null, vec__14078);
  var first__14080 = cljs.core.first.call(null, seq__14079);
  var seq__14079__$1 = cljs.core.next.call(null, seq__14079);
  var ___$1 = first__14080;
  var body = seq__14079__$1;
  var form = vec__14078;
  var catchenv = cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "context", "context", -830191113)], null), function(vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form) {
    return function(p1__14073_SHARP_) {
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), p1__14073_SHARP_)) {
        return new cljs.core.Keyword(null, "return", "return", -1891502105);
      } else {
        return p1__14073_SHARP_;
      }
    };
  }(vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form));
  var catch_QMARK_ = cljs.core.every_pred.call(null, cljs.core.seq_QMARK_, function(catchenv, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form) {
    return function(p1__14074_SHARP_) {
      return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__14074_SHARP_), new cljs.core.Symbol(null, "catch", "catch", -1616370245, null));
    };
  }(catchenv, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form));
  var default_QMARK_ = cljs.core.every_pred.call(null, catch_QMARK_, function(catchenv, catch_QMARK_, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form) {
    return function(p1__14075_SHARP_) {
      return cljs.core._EQ_.call(null, cljs.core.second.call(null, p1__14075_SHARP_), new cljs.core.Keyword(null, "default", "default", -1987822328));
    };
  }(catchenv, catch_QMARK_, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form));
  var finally_QMARK_ = cljs.core.every_pred.call(null, cljs.core.seq_QMARK_, function(catchenv, catch_QMARK_, default_QMARK_, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form) {
    return function(p1__14076_SHARP_) {
      return cljs.core._EQ_.call(null, cljs.core.first.call(null, p1__14076_SHARP_), new cljs.core.Symbol(null, "finally", "finally", -1065347064, null));
    };
  }(catchenv, catch_QMARK_, default_QMARK_, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form));
  var map__14081 = function() {
    var parser = new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "start", "start", -355208981), new cljs.core.Keyword(null, "forms", "forms", 2045992350), body, new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "cblocks", "cblocks", -1769978138), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "dblock", "dblock", -1325623381), null, 
    new cljs.core.Keyword(null, "fblock", "fblock", -1236607426), null], null);
    while (true) {
      if (cljs.core.seq_QMARK_.call(null, (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(parser))) {
        var vec__14082 = (new cljs.core.Keyword(null, "forms", "forms", 2045992350)).cljs$core$IFn$_invoke$arity$1(parser);
        var seq__14083 = cljs.core.seq.call(null, vec__14082);
        var first__14084 = cljs.core.first.call(null, seq__14083);
        var seq__14083__$1 = cljs.core.next.call(null, seq__14083);
        var form__$1 = first__14084;
        var forms_STAR_ = seq__14083__$1;
        var parser_STAR_ = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "forms", "forms", 2045992350), forms_STAR_);
        var G__14085 = (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(parser) instanceof cljs.core.Keyword ? (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(parser).fqn : null;
        switch(G__14085) {
          case "start":
            if (cljs.core.truth_(catch_QMARK_.call(null, form__$1))) {
              var G__14095 = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "catches", "catches", -1478797617));
              parser = G__14095;
              continue;
            } else {
              if (cljs.core.truth_(finally_QMARK_.call(null, form__$1))) {
                var G__14096 = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "finally", "finally", 1589088705));
                parser = G__14096;
                continue;
              } else {
                var G__14097 = cljs.core.update_in.call(null, parser_STAR_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "body", "body", -2049205669)], null), cljs.core.conj, form__$1);
                parser = G__14097;
                continue;
              }
            }
            break;
          case "catches":
            if (cljs.core.truth_(default_QMARK_.call(null, form__$1))) {
              var G__14098 = cljs.core.assoc.call(null, parser_STAR_, new cljs.core.Keyword(null, "dblock", "dblock", -1325623381), form__$1, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "finally", "finally", 1589088705));
              parser = G__14098;
              continue;
            } else {
              if (cljs.core.truth_(catch_QMARK_.call(null, form__$1))) {
                var G__14099 = cljs.core.update_in.call(null, parser_STAR_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "cblocks", "cblocks", -1769978138)], null), cljs.core.conj, form__$1);
                parser = G__14099;
                continue;
              } else {
                if (cljs.core.truth_(finally_QMARK_.call(null, form__$1))) {
                  var G__14100 = cljs.core.assoc.call(null, parser, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "finally", "finally", 1589088705));
                  parser = G__14100;
                  continue;
                } else {
                  throw cljs.analyzer.error.call(null, env, "Invalid try form");
                }
              }
            }
            break;
          case "finally":
            var G__14101 = cljs.core.assoc.call(null, parser_STAR_, new cljs.core.Keyword(null, "fblock", "fblock", -1236607426), form__$1, new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "done", "done", -889844188));
            parser = G__14101;
            continue;
            break;
          case "done":
            throw cljs.analyzer.error.call(null, env, "Unexpected form after finally");
            break;
          default:
            throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(parser))].join(""));
        }
      } else {
        return parser;
      }
      break;
    }
  }();
  var map__14081__$1 = (!(map__14081 == null) ? map__14081.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14081.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14081) : map__14081;
  var body__$1 = cljs.core.get.call(null, map__14081__$1, new cljs.core.Keyword(null, "body", "body", -2049205669));
  var cblocks = cljs.core.get.call(null, map__14081__$1, new cljs.core.Keyword(null, "cblocks", "cblocks", -1769978138));
  var dblock = cljs.core.get.call(null, map__14081__$1, new cljs.core.Keyword(null, "dblock", "dblock", -1325623381));
  var fblock = cljs.core.get.call(null, map__14081__$1, new cljs.core.Keyword(null, "fblock", "fblock", -1236607426));
  var finally$ = cljs.core.seq.call(null, fblock) ? cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863)), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), cljs.core.rest.call(null, fblock))))) : null;
  var e = cljs.core.truth_(function() {
    var or__7410__auto__ = cljs.core.seq.call(null, cblocks);
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      return dblock;
    }
  }()) ? cljs.core.gensym.call(null, "e") : null;
  var default$ = function() {
    var temp__4655__auto__ = dblock;
    if (cljs.core.truth_(temp__4655__auto__)) {
      var vec__14087 = temp__4655__auto__;
      var seq__14088 = cljs.core.seq.call(null, vec__14087);
      var first__14089 = cljs.core.first.call(null, seq__14088);
      var seq__14088__$1 = cljs.core.next.call(null, seq__14088);
      var ___$2 = first__14089;
      var first__14089__$1 = cljs.core.first.call(null, seq__14088__$1);
      var seq__14088__$2 = cljs.core.next.call(null, seq__14088__$1);
      var ___$3 = first__14089__$1;
      var first__14089__$2 = cljs.core.first.call(null, seq__14088__$2);
      var seq__14088__$3 = cljs.core.next.call(null, seq__14088__$2);
      var name__$1 = first__14089__$2;
      var cb = seq__14088__$3;
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
        var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
          var x__8252__auto__ = name__$1;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = e;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }()))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cb)));
    } else {
      return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "throw", "throw", 595905694, null)), function() {
        var x__8252__auto__ = e;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
    }
  }();
  var cblock = cljs.core.seq.call(null, cblocks) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "cond", "cljs.core/cond", 2005388338, null)), cljs.core.mapcat.call(null, function(catchenv, catch_QMARK_, default_QMARK_, finally_QMARK_, map__14081, map__14081__$1, body__$1, cblocks, dblock, fblock, finally$, e, default$, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, 
  body, form) {
    return function(p__14090) {
      var vec__14091 = p__14090;
      var seq__14092 = cljs.core.seq.call(null, vec__14091);
      var first__14093 = cljs.core.first.call(null, seq__14092);
      var seq__14092__$1 = cljs.core.next.call(null, seq__14092);
      var ___$2 = first__14093;
      var first__14093__$1 = cljs.core.first.call(null, seq__14092__$1);
      var seq__14092__$2 = cljs.core.next.call(null, seq__14092__$1);
      var type = first__14093__$1;
      var first__14093__$2 = cljs.core.first.call(null, seq__14092__$2);
      var seq__14092__$3 = cljs.core.next.call(null, seq__14092__$2);
      var name__$1 = first__14093__$2;
      var cb = seq__14092__$3;
      if (cljs.core.truth_(name__$1)) {
        if (cljs.core.not.call(null, cljs.core.namespace.call(null, name__$1))) {
        } else {
          throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Can't qualify symbol in catch"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(not (namespace name))")].join(""));
        }
      } else {
      }
      return cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "instance?", "cljs.core/instance?", 2044751870, null)), function() {
          var x__8252__auto__ = type;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = e;
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
          var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
            var x__8252__auto__ = name__$1;
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), function() {
            var x__8252__auto__ = e;
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }()))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cb)));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
    };
  }(catchenv, catch_QMARK_, default_QMARK_, finally_QMARK_, map__14081, map__14081__$1, body__$1, cblocks, dblock, fblock, finally$, e, default$, vec__14078, seq__14079, first__14080, seq__14079__$1, ___$1, body, form), cblocks), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "else", "else", -1508377146)), function() {
    var x__8252__auto__ = default$;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }()))) : default$;
  var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(catchenv);
  var locals__$1 = cljs.core.truth_(e) ? cljs.core.assoc.call(null, locals, e, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "name", "name", 1843675177), e, new cljs.core.Keyword(null, "line", "line", 212345235), cljs.analyzer.get_line.call(null, e, env), new cljs.core.Keyword(null, "column", "column", 2078222095), cljs.analyzer.get_col.call(null, e, env)], null)) : locals;
  var catch$ = cljs.core.truth_(cblock) ? cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, catchenv, new cljs.core.Keyword(null, "locals", "locals", 535295783), locals__$1), cblock) : null;
  var try$ = cljs.analyzer.analyze.call(null, cljs.core.truth_(function() {
    var or__7410__auto__ = e;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return finally$;
    }
  }()) ? catchenv : env, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body__$1))));
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "try", "try", 1380742522), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "try", "try", 1380742522), try$, new cljs.core.Keyword(null, "finally", "finally", 1589088705), finally$, new cljs.core.Keyword(null, "name", "name", 1843675177), e, new cljs.core.Keyword(null, 
  "catch", "catch", 1038065524), catch$, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [try$, catch$, finally$], null)], null);
});
cljs.analyzer.valid_proto = function cljs$analyzer$valid_proto(x) {
  if (x instanceof cljs.core.Symbol) {
    return x;
  } else {
    return null;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "def", "def", 597100991, null), function(op, env, form, _, ___$1) {
  var pfn = function() {
    var G__14106 = null;
    var G__14106__2 = function(___$2, sym) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null);
    };
    var G__14106__3 = function(___$2, sym, init) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym, new cljs.core.Keyword(null, "init", "init", -1875481434), init], null);
    };
    var G__14106__4 = function(___$2, sym, doc, init) {
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym, new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc, new cljs.core.Keyword(null, "init", "init", -1875481434), init], null);
    };
    G__14106 = function(___$2, sym, doc, init) {
      switch(arguments.length) {
        case 2:
          return G__14106__2.call(this, ___$2, sym);
        case 3:
          return G__14106__3.call(this, ___$2, sym, doc);
        case 4:
          return G__14106__4.call(this, ___$2, sym, doc, init);
      }
      throw new Error("Invalid arity: " + (arguments.length - 1));
    };
    G__14106.cljs$core$IFn$_invoke$arity$2 = G__14106__2;
    G__14106.cljs$core$IFn$_invoke$arity$3 = G__14106__3;
    G__14106.cljs$core$IFn$_invoke$arity$4 = G__14106__4;
    return G__14106;
  }();
  var args = cljs.core.apply.call(null, pfn, form);
  var sym = (new cljs.core.Keyword(null, "sym", "sym", -1444860305)).cljs$core$IFn$_invoke$arity$1(args);
  var sym_meta = cljs.core.meta.call(null, sym);
  var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
  var protocol = cljs.analyzer.valid_proto.call(null, (new cljs.core.Keyword(null, "protocol", "protocol", 652470118)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym)));
  var dynamic = (new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym));
  var ns_name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
  var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env);
  var clash_ns = cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("."), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""));
  var sym_ns = cljs.core.namespace.call(null, sym);
  var sym__$1 = cljs.core.truth_(function() {
    var and__7398__auto__ = sym_ns;
    if (cljs.core.truth_(and__7398__auto__)) {
      return !cljs.core.symbol_identical_QMARK_.call(null, cljs.core.symbol.call(null, sym_ns), ns_name);
    } else {
      return and__7398__auto__;
    }
  }()) ? function() {
    throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Can't def ns-qualified name in namespace "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym_ns)].join(""));
  }() : !(sym_ns == null) ? cljs.core.symbol.call(null, cljs.core.name.call(null, sym)) : sym;
  if (!(cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), clash_ns], null)) == null)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("."), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym__$1)].join("")), new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_name)].join(""), 
    [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym__$1)].join(""))], null));
  } else {
  }
  if (!((new cljs.core.Keyword(null, "const", "const", 1709929842)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym__$1)) == null)) {
    throw cljs.analyzer.error.call(null, env, "Can't redefine a constant");
  } else {
  }
  var temp__4661__auto___14107 = (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(args);
  if (temp__4661__auto___14107 == null) {
  } else {
    var doc_14108 = temp__4661__auto___14107;
    if (typeof doc_14108 === "string") {
    } else {
      throw cljs.analyzer.error.call(null, env, "Too many arguments to def");
    }
  }
  var temp__4661__auto___14109 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym__$1], null));
  if (temp__4661__auto___14109 == null) {
  } else {
    var v_14110 = temp__4661__auto___14109;
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = !cljs.analyzer._STAR_allow_redef_STAR_;
      if (and__7398__auto__) {
        var and__7398__auto____$1 = cljs.core.not.call(null, (new cljs.core.Keyword(null, "declared", "declared", 92336021)).cljs$core$IFn$_invoke$arity$1(v_14110));
        if (and__7398__auto____$1) {
          var and__7398__auto____$2 = cljs.core.not.call(null, (new cljs.core.Keyword(null, "declared", "declared", 92336021)).cljs$core$IFn$_invoke$arity$1(sym_meta));
          if (and__7398__auto____$2) {
            var and__7398__auto____$3 = cljs.analyzer._STAR_file_defs_STAR_;
            if (cljs.core.truth_(and__7398__auto____$3)) {
              return cljs.core.get.call(null, cljs.core.deref.call(null, cljs.analyzer._STAR_file_defs_STAR_), sym__$1);
            } else {
              return and__7398__auto____$3;
            }
          } else {
            return and__7398__auto____$2;
          }
        } else {
          return and__7398__auto____$1;
        }
      } else {
        return and__7398__auto__;
      }
    }())) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "redef-in-file", "redef-in-file", -476530788), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym__$1, new cljs.core.Keyword(null, "line", "line", 212345235), (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(v_14110)], null));
    } else {
    }
  }
  if (cljs.core.truth_(cljs.analyzer._STAR_file_defs_STAR_)) {
    cljs.core.swap_BANG_.call(null, cljs.analyzer._STAR_file_defs_STAR_, cljs.core.conj, sym__$1);
  } else {
  }
  var env__$1 = cljs.core.not_EQ_.call(null, ns_name, new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null)) && cljs.analyzer.core_name_QMARK_.call(null, env, sym__$1) || !(cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "uses", "uses", 
  232664692), sym__$1], null)) == null) ? function() {
    var ev = cljs.analyzer.resolve_existing_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym__$1);
    var conj_to_set = cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY);
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "redef", "redef", 1032704258), env, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760), (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(ev), new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323), ns_name], null));
    cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)], null), conj_to_set, sym__$1);
    return cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)], null), conj_to_set, sym__$1);
  }() : env;
  var var_name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env__$1, new cljs.core.Keyword(null, "locals", "locals", 535295783)), sym__$1));
  var init_expr = cljs.core.contains_QMARK_.call(null, args, new cljs.core.Keyword(null, "init", "init", -1875481434)) ? function() {
    cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym__$1], null), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), var_name], null), sym_meta, 
    dynamic === true ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), true], null) : null, cljs.analyzer.source_info.call(null, var_name, env__$1)));
    var _STAR_recur_frames_STAR_14103 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      var _STAR_allow_ns_STAR_14104 = cljs.analyzer._STAR_allow_ns_STAR_;
      cljs.analyzer._STAR_allow_ns_STAR_ = false;
      try {
        return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), (new cljs.core.Keyword(null, "init", "init", -1875481434)).cljs$core$IFn$_invoke$arity$1(args), sym__$1);
      } finally {
        cljs.analyzer._STAR_allow_ns_STAR_ = _STAR_allow_ns_STAR_14104;
      }
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14103;
    }
  }() : null;
  var fn_var_QMARK_ = !(init_expr == null) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "fn", "fn", -1175266204));
  var tag__$1 = fn_var_QMARK_ ? function() {
    var or__7410__auto__ = (new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990)).cljs$core$IFn$_invoke$arity$1(init_expr);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return tag;
    }
  }() : function() {
    var or__7410__auto__ = tag;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(init_expr);
    }
  }();
  var export_as = function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "export", "export", 214356590)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym__$1));
    if (cljs.core.truth_(temp__4657__auto__)) {
      var export_val = temp__4657__auto__;
      if (cljs.core._EQ_.call(null, true, export_val)) {
        return var_name;
      } else {
        return export_val;
      }
    } else {
      return null;
    }
  }();
  var doc = function() {
    var or__7410__auto__ = (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(args);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym__$1));
    }
  }();
  var temp__4661__auto___14111 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym__$1], null));
  if (temp__4661__auto___14111 == null) {
  } else {
    var v_14112 = temp__4661__auto___14111;
    if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "declared", "declared", 92336021)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym__$1))) && ((new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1(v_14112) === true && !fn_var_QMARK_)) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), env__$1, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-name", "ns-name", -2077346323), ns_name, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym__$1], null));
    } else {
    }
  }
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns_name, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym__$1], null), cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), var_name], null), function() {
    var G__14105 = sym_meta;
    if (cljs.core.truth_((new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(sym_meta))) {
      return cljs.core.assoc.call(null, G__14105, new cljs.core.Keyword(null, "test", "test", 577538877), true);
    } else {
      return G__14105;
    }
  }(), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core.update_in.call(null, cljs.core.dissoc.call(null, sym_meta, new cljs.core.Keyword(null, "test", "test", 577538877)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "file", "file", -1269645878)], null), function(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, 
  dynamic, ns_name, locals, clash_ns, sym_ns, sym__$1) {
    return function(f) {
      if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env__$1)), new cljs.core.Symbol(null, "cljs.core", "cljs.core", 770546058, null))) {
        return "cljs/core.cljs";
      } else {
        return f;
      }
    };
  }(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, dynamic, ns_name, locals, clash_ns, sym_ns, sym__$1))], null), cljs.core.truth_(doc) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc], null) : null, dynamic === true ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), true], null) : null, cljs.analyzer.source_info.call(null, 
  var_name, env__$1), cljs.core.truth_(protocol) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocol", "protocol", 652470118), protocol], null) : null, function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sym__$1));
    if (cljs.core.truth_(temp__4657__auto__)) {
      var protocol_symbol = temp__4657__auto__;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "protocol-symbol", "protocol-symbol", 1279552198), protocol_symbol, new cljs.core.Keyword(null, "info", "info", -317069002), (new cljs.core.Keyword(null, "protocol-info", "protocol-info", 1471745843)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, protocol_symbol)), new cljs.core.Keyword(null, "impls", "impls", -1314014853), cljs.core.PersistentHashSet.EMPTY], null);
    } else {
      return null;
    }
  }(), fn_var_QMARK_ ? function() {
    var params = cljs.core.map.call(null, function(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, dynamic, ns_name, locals, clash_ns, sym_ns, sym__$1) {
      return function(p1__14102_SHARP_) {
        return cljs.core.vec.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "name", "name", 1843675177), (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(p1__14102_SHARP_)));
      };
    }(env__$1, var_name, init_expr, fn_var_QMARK_, tag__$1, export_as, doc, pfn, args, sym, sym_meta, tag, protocol, dynamic, ns_name, locals, clash_ns, sym_ns, sym__$1), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(init_expr));
    return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), cljs.core.not.call(null, (new cljs.core.Keyword(null, "macro", "macro", -867863404)).cljs$core$IFn$_invoke$arity$1(sym_meta)), new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365), (new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "protocol-inline", 
    "protocol-inline", 1550487556), (new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556)).cljs$core$IFn$_invoke$arity$1(init_expr)], null), function() {
      var temp__4659__auto__ = (new cljs.core.Keyword(null, "top-fn", "top-fn", -2056129173)).cljs$core$IFn$_invoke$arity$1(sym_meta);
      if (temp__4659__auto__ == null) {
        return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "variadic", "variadic", 882626057), (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "method-params", "method-params", -980792179), 
        params, new cljs.core.Keyword(null, "arglists", "arglists", 1661989754), (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(sym_meta), new cljs.core.Keyword(null, "arglists-meta", "arglists-meta", 1944829838), cljs.core.doall.call(null, cljs.core.map.call(null, cljs.core.meta, (new cljs.core.Keyword(null, "arglists", "arglists", 1661989754)).cljs$core$IFn$_invoke$arity$1(sym_meta)))], null);
      } else {
        var top_fn_meta = temp__4659__auto__;
        return top_fn_meta;
      }
    }());
  }() : null, fn_var_QMARK_ && !(tag__$1 == null) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), tag__$1], null) : cljs.core.truth_(tag__$1) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag__$1], null) : null));
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env__$1, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "def", "def", -1043430536), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "name", "name", 1843675177), var_name, new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.assoc.call(null, cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, 
  cljs.core.assoc.call(null, cljs.core.dissoc.call(null, env__$1, new cljs.core.Keyword(null, "locals", "locals", 535295783)), new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), new cljs.core.Keyword(null, "def-var", "def-var", -698214377), true), sym__$1), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797)), new cljs.core.Keyword(null, "doc", "doc", 1913296891), doc, new cljs.core.Keyword(null, 
  "jsdoc", "jsdoc", 1745183516), (new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516)).cljs$core$IFn$_invoke$arity$1(sym_meta), new cljs.core.Keyword(null, "init", "init", -1875481434), init_expr], null), (new cljs.core.Keyword(null, "def-emits-var", "def-emits-var", -1551927320)).cljs$core$IFn$_invoke$arity$1(env__$1) === true ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "var-ast", "var-ast", 1200379319), cljs.analyzer.var_ast.call(null, env__$1, sym__$1)], null) : 
  null, function() {
    var temp__4661__auto__ = (new cljs.core.Keyword(null, "test", "test", 577538877)).cljs$core$IFn$_invoke$arity$1(sym_meta);
    if (temp__4661__auto__ == null) {
      return null;
    } else {
      var test = temp__4661__auto__;
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "test", "test", 577538877), cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), test)], null);
    }
  }(), !(tag__$1 == null) ? fn_var_QMARK_ ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), tag__$1], null) : new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag__$1], null) : null, dynamic === true ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "dynamic", "dynamic", 704819571), true], null) : null, !(export_as == null) ? new cljs.core.PersistentArrayMap(null, 1, 
  [new cljs.core.Keyword(null, "export", "export", 214356590), export_as], null) : null, !(init_expr == null) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [init_expr], null)], null) : null);
});
cljs.analyzer.analyze_fn_method_param = function cljs$analyzer$analyze_fn_method_param(env) {
  return function(p__14117, name) {
    var vec__14118 = p__14117;
    var locals = cljs.core.nth.call(null, vec__14118, 0, null);
    var params = cljs.core.nth.call(null, vec__14118, 1, null);
    if (cljs.core.truth_(cljs.core.namespace.call(null, name))) {
      throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Can't use qualified name as parameter: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""));
    } else {
    }
    var line = cljs.analyzer.get_line.call(null, name, env);
    var column = cljs.analyzer.get_col.call(null, name, env);
    var nmeta = cljs.core.meta.call(null, name);
    var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(nmeta);
    var shadow = !(locals == null) ? locals.call(null, name) : null;
    var env__$1 = cljs.core.merge.call(null, cljs.core.select_keys.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "context", "context", -830191113)], null)), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), column], null));
    var param = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "binding-form?", "binding-form?", 1728940169), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "info", "info", -317069002), new cljs.core.Keyword(null, "tag", 
    "tag", -1290361223), new cljs.core.Keyword(null, "shadow", "shadow", 873231803)], [name, true, new cljs.core.Keyword(null, "var", "var", -769682797), env__$1, column, line, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "shadow", "shadow", 873231803), shadow], null), tag, shadow]);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.call(null, locals, name, param), cljs.core.conj.call(null, params, param)], null);
  };
};
cljs.analyzer.analyze_fn_method_body = function cljs$analyzer$analyze_fn_method_body(env, form, recur_frames) {
  var _STAR_recur_frames_STAR_14122 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = recur_frames;
  try {
    return cljs.analyzer.analyze.call(null, env, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14122;
  }
};
cljs.analyzer.analyze_fn_method = function cljs$analyzer$analyze_fn_method(env, locals, form, type) {
  var param_names = cljs.core.first.call(null, form);
  var variadic = cljs.core.boolean$.call(null, cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null], null), null), param_names));
  var param_names__$1 = cljs.core.vec.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null], null), null), param_names));
  var body = cljs.core.next.call(null, form);
  var step = cljs.analyzer.analyze_fn_method_param.call(null, env);
  var step_init = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [locals, cljs.core.PersistentVector.EMPTY], null);
  var vec__14126 = cljs.core.reduce.call(null, step, step_init, param_names__$1);
  var locals__$1 = cljs.core.nth.call(null, vec__14126, 0, null);
  var params = cljs.core.nth.call(null, vec__14126, 1, null);
  var params_SINGLEQUOTE_ = variadic === true ? cljs.core.butlast.call(null, params) : params;
  var fixed_arity = cljs.core.count.call(null, params_SINGLEQUOTE_);
  var recur_frame = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "flag", "flag", 1088647881), cljs.core.atom.call(null, null)], null);
  var recur_frames = cljs.core.cons.call(null, recur_frame, cljs.analyzer._STAR_recur_frames_STAR_);
  var body_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "return", "return", -1891502105), new cljs.core.Keyword(null, "locals", "locals", 535295783), locals__$1);
  var body_form = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body)));
  var expr = cljs.analyzer.analyze_fn_method_body.call(null, body_env, body_form, recur_frames);
  var recurs = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "flag", "flag", 1088647881)).cljs$core$IFn$_invoke$arity$1(recur_frame));
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), variadic, new cljs.core.Keyword(null, "params", "params", 710516235), params, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), fixed_arity, new cljs.core.Keyword(null, "type", "type", 1174270348), type, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, 
  "expr", "expr", 745722291), expr, new cljs.core.Keyword(null, "recurs", "recurs", -1959309309), recurs], null);
};
cljs.analyzer.fn_name_var = function cljs$analyzer$fn_name_var(env, locals, name) {
  if (!(name == null)) {
    var ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
    var shadow = cljs.core.get.call(null, locals, name);
    var shadow__$1 = shadow == null ? cljs.core.get_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-globals", "js-globals", 1670394727), name], null)) : null;
    var fn_scope = (new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859)).cljs$core$IFn$_invoke$arity$1(env);
    var name_var = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "info", "info", -317069002), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "fn-self-name", "fn-self-name", 1461143531), true, new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859), fn_scope, new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "shadow", "shadow", 873231803), shadow__$1], 
    null)], null);
    var tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name));
    var ret_tag = !(tag == null) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), tag], null) : null;
    return cljs.core.merge.call(null, name_var, ret_tag);
  } else {
    return null;
  }
};
cljs.analyzer.analyze_fn_methods_pass2_STAR_ = function cljs$analyzer$analyze_fn_methods_pass2_STAR_(menv, locals, type, meths) {
  return cljs.core.doall.call(null, cljs.core.map.call(null, function(p1__14129_SHARP_) {
    return cljs.analyzer.analyze_fn_method.call(null, menv, locals, p1__14129_SHARP_, type);
  }, meths));
};
cljs.analyzer.analyze_fn_methods_pass2 = function cljs$analyzer$analyze_fn_methods_pass2(menv, locals, type, meths) {
  var _STAR_cljs_warnings_STAR_14131 = cljs.analyzer._STAR_cljs_warnings_STAR_;
  cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.zipmap.call(null, cljs.core.keys.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_), cljs.core.repeat.call(null, false));
  try {
    return cljs.analyzer.analyze_fn_methods_pass2_STAR_.call(null, menv, locals, type, meths);
  } finally {
    cljs.analyzer._STAR_cljs_warnings_STAR_ = _STAR_cljs_warnings_STAR_14131;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, null), function(op, env, p__14133, name, _) {
  var vec__14134 = p__14133;
  var seq__14135 = cljs.core.seq.call(null, vec__14134);
  var first__14136 = cljs.core.first.call(null, seq__14135);
  var seq__14135__$1 = cljs.core.next.call(null, seq__14135);
  var ___$1 = first__14136;
  var args = seq__14135__$1;
  var form = vec__14134;
  var named_fn_QMARK_ = cljs.core.first.call(null, args) instanceof cljs.core.Symbol;
  var vec__14137 = named_fn_QMARK_ ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, args), cljs.core.next.call(null, args)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [name, cljs.core.seq.call(null, args)], null);
  var name__$1 = cljs.core.nth.call(null, vec__14137, 0, null);
  var meths = cljs.core.nth.call(null, vec__14137, 1, null);
  var meths__$1 = cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, meths)) ? function() {
    var x__8252__auto__ = meths;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }() : meths;
  var locals = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env);
  var name_var = cljs.analyzer.fn_name_var.call(null, env, locals, name__$1);
  var env__$1 = !(name__$1 == null) ? cljs.core.update_in.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859)], null), cljs.core.conj, name_var) : env;
  var locals__$1 = !(locals == null) && named_fn_QMARK_ ? cljs.core.assoc.call(null, locals, name__$1, name_var) : locals;
  var form_meta = cljs.core.meta.call(null, form);
  var type = (new cljs.core.Keyword("cljs.analyzer", "type", "cljs.analyzer/type", 478749742)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var proto_impl = (new cljs.core.Keyword("cljs.analyzer", "protocol-impl", "cljs.analyzer/protocol-impl", -1523935409)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var proto_inline = (new cljs.core.Keyword("cljs.analyzer", "protocol-inline", "cljs.analyzer/protocol-inline", -1611519026)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var menv = cljs.core.count.call(null, meths__$1) > 1 ? cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)) : env__$1;
  var menv__$1 = cljs.core.merge.call(null, menv, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365), proto_impl, new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556), proto_inline], null));
  var methods$ = cljs.core.map.call(null, function(named_fn_QMARK_, vec__14137, name__$1, meths, meths__$1, locals, name_var, env__$1, locals__$1, form_meta, type, proto_impl, proto_inline, menv, menv__$1, vec__14134, seq__14135, first__14136, seq__14135__$1, ___$1, args, form) {
    return function(p1__14132_SHARP_) {
      var _STAR_allow_ns_STAR_14140 = cljs.analyzer._STAR_allow_ns_STAR_;
      cljs.analyzer._STAR_allow_ns_STAR_ = false;
      try {
        return cljs.analyzer.analyze_fn_method.call(null, menv__$1, locals__$1, p1__14132_SHARP_, type);
      } finally {
        cljs.analyzer._STAR_allow_ns_STAR_ = _STAR_allow_ns_STAR_14140;
      }
    };
  }(named_fn_QMARK_, vec__14137, name__$1, meths, meths__$1, locals, name_var, env__$1, locals__$1, form_meta, type, proto_impl, proto_inline, menv, menv__$1, vec__14134, seq__14135, first__14136, seq__14135__$1, ___$1, args, form), meths__$1);
  var mfa = cljs.core.apply.call(null, cljs.core.max, cljs.core.map.call(null, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), methods$));
  var variadic = cljs.core.boolean$.call(null, cljs.core.some.call(null, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), methods$));
  var locals__$2 = named_fn_QMARK_ ? cljs.core.update_in.call(null, locals__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [name__$1], null), cljs.core.assoc, new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), true, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), variadic, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), mfa, new cljs.core.Keyword(null, "method-params", "method-params", -980792179), cljs.core.map.call(null, 
  new cljs.core.Keyword(null, "params", "params", 710516235), methods$)) : locals__$1;
  var methods$__$1 = !(name__$1 == null) ? function() {
    var _STAR_allow_ns_STAR_14141 = cljs.analyzer._STAR_allow_ns_STAR_;
    cljs.analyzer._STAR_allow_ns_STAR_ = false;
    try {
      return cljs.analyzer.analyze_fn_methods_pass2.call(null, menv__$1, locals__$2, type, meths__$1);
    } finally {
      cljs.analyzer._STAR_allow_ns_STAR_ = _STAR_allow_ns_STAR_14141;
    }
  }() : methods$;
  var form__$1 = cljs.core.vary_meta.call(null, form, cljs.core.dissoc, new cljs.core.Keyword("cljs.analyzer", "protocol-impl", "cljs.analyzer/protocol-impl", -1523935409), new cljs.core.Keyword("cljs.analyzer", "protocol-inline", "cljs.analyzer/protocol-inline", -1611519026), new cljs.core.Keyword("cljs.analyzer", "type", "cljs.analyzer/type", 478749742));
  var js_doc = variadic === true ? "@param {...*} var_args" : null;
  var children = cljs.core.mapv.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), methods$__$1);
  var ast = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.Keyword(null, "protocol-inline", "protocol-inline", 1550487556), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "variadic", "variadic", 882626057), new cljs.core.Keyword(null, "loop-lets", "loop-lets", 2036794185), new cljs.core.Keyword(null, "protocol-impl", "protocol-impl", 2101328365), new cljs.core.Keyword(null, "op", "op", -1882987955), 
  new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "methods", "methods", 453930866), new cljs.core.Keyword(null, "recur-frames", "recur-frames", -307205196), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516)], [children, proto_inline, name_var, variadic, cljs.analyzer._STAR_loop_lets_STAR_, 
  proto_impl, new cljs.core.Keyword(null, "fn", "fn", -1175266204), env__$1, methods$__$1, cljs.analyzer._STAR_recur_frames_STAR_, mfa, form__$1, new cljs.core.Symbol(null, "function", "function", -486723946, null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [js_doc], null)]);
  var variadic_methods_14142 = cljs.core.filter.call(null, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), methods$__$1);
  var variadic_params_14143 = cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, variadic_methods_14142)));
  var param_counts_14144 = cljs.core.map.call(null, cljs.core.comp.call(null, cljs.core.count, new cljs.core.Keyword(null, "params", "params", 710516235)), methods$__$1);
  if (1 < cljs.core.count.call(null, variadic_methods_14142)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "multiple-variadic-overloads", "multiple-variadic-overloads", 1110059837), env__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_var], null));
  } else {
  }
  if (!(variadic_params_14143 === 0 || variadic_params_14143 === 1 + mfa)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "variadic-max-arity", "variadic-max-arity", -14288402), env__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_var], null));
  } else {
  }
  if (cljs.core.not_EQ_.call(null, cljs.core.distinct.call(null, param_counts_14144), param_counts_14144)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "overload-arity", "overload-arity", 823206044), env__$1, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_var], null));
  } else {
  }
  return cljs.analyzer.analyze_wrap_meta.call(null, ast);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "letfn*", "letfn*", -110097810, null), function(op, env, p__14145, name, _) {
  var vec__14146 = p__14145;
  var seq__14147 = cljs.core.seq.call(null, vec__14146);
  var first__14148 = cljs.core.first.call(null, seq__14147);
  var seq__14147__$1 = cljs.core.next.call(null, seq__14147);
  var ___$1 = first__14148;
  var first__14148__$1 = cljs.core.first.call(null, seq__14147__$1);
  var seq__14147__$2 = cljs.core.next.call(null, seq__14147__$1);
  var bindings = first__14148__$1;
  var exprs = seq__14147__$2;
  var form = vec__14146;
  if (cljs.core.vector_QMARK_.call(null, bindings) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings))) {
  } else {
    throw cljs.analyzer.error.call(null, env, "bindings must be vector of even number of elements");
  }
  var n__GT_fexpr = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, cljs.core.juxt.call(null, cljs.core.first, cljs.core.second), cljs.core.partition.call(null, 2, bindings)));
  var names = cljs.core.keys.call(null, n__GT_fexpr);
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  var vec__14149 = cljs.core.reduce.call(null, function(n__GT_fexpr, names, context, vec__14146, seq__14147, first__14148, seq__14147__$1, ___$1, first__14148__$1, seq__14147__$2, bindings, exprs, form) {
    return function(p__14155, n) {
      var vec__14156 = p__14155;
      var map__14159 = cljs.core.nth.call(null, vec__14156, 0, null);
      var map__14159__$1 = (!(map__14159 == null) ? map__14159.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14159.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14159) : map__14159;
      var env__$1 = map__14159__$1;
      var locals = cljs.core.get.call(null, map__14159__$1, new cljs.core.Keyword(null, "locals", "locals", 535295783));
      var bes = cljs.core.nth.call(null, vec__14156, 1, null);
      var ret_tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, n));
      var fexpr = function() {
        var _STAR_cljs_warnings_STAR_14161 = cljs.analyzer._STAR_cljs_warnings_STAR_;
        cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.zipmap.call(null, cljs.core.keys.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_), cljs.core.repeat.call(null, false));
        try {
          return cljs.analyzer.analyze.call(null, env__$1, n__GT_fexpr.call(null, n));
        } finally {
          cljs.analyzer._STAR_cljs_warnings_STAR_ = _STAR_cljs_warnings_STAR_14161;
        }
      }();
      var be = function() {
        var G__14162 = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "variadic", "variadic", 882626057), new cljs.core.Keyword(null, "method-params", "method-params", -980792179), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), new cljs.core.Keyword(null, "fn-var", "fn-var", 
        1086204730), new cljs.core.Keyword(null, "shadow", "shadow", 873231803), new cljs.core.Keyword(null, "local", "local", -1497766724)], [n, (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(fexpr), cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(fexpr)), cljs.analyzer.get_col.call(null, n, env__$1), cljs.analyzer.get_line.call(null, 
        n, env__$1), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(fexpr), true, locals.call(null, n), true]);
        if (cljs.core.truth_(ret_tag)) {
          return cljs.core.assoc.call(null, G__14162, new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990), ret_tag);
        } else {
          return G__14162;
        }
      }();
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc_in.call(null, env__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), n], null), be), cljs.core.conj.call(null, bes, be)], null);
    };
  }(n__GT_fexpr, names, context, vec__14146, seq__14147, first__14148, seq__14147__$1, ___$1, first__14148__$1, seq__14147__$2, bindings, exprs, form), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [env, cljs.core.PersistentVector.EMPTY], null), names);
  var meth_env = cljs.core.nth.call(null, vec__14149, 0, null);
  var bes = cljs.core.nth.call(null, vec__14149, 1, null);
  var meth_env__$1 = cljs.core.assoc.call(null, meth_env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var vec__14152 = cljs.core.reduce.call(null, function(n__GT_fexpr, names, context, vec__14149, meth_env, bes, meth_env__$1, vec__14146, seq__14147, first__14148, seq__14147__$1, ___$1, first__14148__$1, seq__14147__$2, bindings, exprs, form) {
    return function(p__14163, p__14164) {
      var vec__14165 = p__14163;
      var meth_env__$2 = cljs.core.nth.call(null, vec__14165, 0, null);
      var bes__$1 = cljs.core.nth.call(null, vec__14165, 1, null);
      var map__14168 = p__14164;
      var map__14168__$1 = (!(map__14168 == null) ? map__14168.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14168.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14168) : map__14168;
      var be = map__14168__$1;
      var name__$1 = cljs.core.get.call(null, map__14168__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
      var shadow = cljs.core.get.call(null, map__14168__$1, new cljs.core.Keyword(null, "shadow", "shadow", 873231803));
      var env__$1 = cljs.core.assoc_in.call(null, meth_env__$2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), name__$1], null), shadow);
      var fexpr = cljs.analyzer.analyze.call(null, env__$1, n__GT_fexpr.call(null, name__$1));
      var be_SINGLEQUOTE_ = cljs.core.assoc.call(null, be, new cljs.core.Keyword(null, "init", "init", -1875481434), fexpr, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(fexpr), new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(fexpr), new cljs.core.Keyword(null, 
      "method-params", "method-params", -980792179), cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(fexpr)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc_in.call(null, env__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), name__$1], null), be_SINGLEQUOTE_), cljs.core.conj.call(null, bes__$1, be_SINGLEQUOTE_)], null);
    };
  }(n__GT_fexpr, names, context, vec__14149, meth_env, bes, meth_env__$1, vec__14146, seq__14147, first__14148, seq__14147__$1, ___$1, first__14148__$1, seq__14147__$2, bindings, exprs, form), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [meth_env__$1, cljs.core.PersistentVector.EMPTY], null), bes);
  var meth_env__$2 = cljs.core.nth.call(null, vec__14152, 0, null);
  var bes__$1 = cljs.core.nth.call(null, vec__14152, 1, null);
  var expr = cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, meth_env__$2, new cljs.core.Keyword(null, "context", "context", -830191113), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context) ? new cljs.core.Keyword(null, "return", "return", -1891502105) : context), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), 
  exprs))));
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "letfn", "letfn", -2121022354), new cljs.core.Keyword(null, "bindings", "bindings", 1271397192), bes__$1, new cljs.core.Keyword(null, "expr", "expr", 745722291), expr, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.conj.call(null, 
  cljs.core.vec.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "init", "init", -1875481434), bes__$1)), expr)], null);
});
cljs.analyzer.analyze_do_statements_STAR_ = function cljs$analyzer$analyze_do_statements_STAR_(env, exprs) {
  return cljs.core.seq.call(null, cljs.core.map.call(null, function(p1__14170_SHARP_) {
    return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863)), p1__14170_SHARP_);
  }, cljs.core.butlast.call(null, exprs)));
};
cljs.analyzer.analyze_do_statements = function cljs$analyzer$analyze_do_statements(env, exprs) {
  var _STAR_recur_frames_STAR_14172 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_do_statements_STAR_.call(null, env, exprs);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14172;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "do", "do", 1686842252, null), function(op, env, p__14173, _, ___$1) {
  var vec__14174 = p__14173;
  var seq__14175 = cljs.core.seq.call(null, vec__14174);
  var first__14176 = cljs.core.first.call(null, seq__14175);
  var seq__14175__$1 = cljs.core.next.call(null, seq__14175);
  var ___$2 = first__14176;
  var exprs = seq__14175__$1;
  var form = vec__14174;
  var statements = cljs.analyzer.analyze_do_statements.call(null, env, exprs);
  if (cljs.core.count.call(null, exprs) <= 1) {
    var ret = cljs.analyzer.analyze.call(null, env, cljs.core.first.call(null, exprs));
    var children = cljs.core.conj.call(null, cljs.core.vec.call(null, statements), ret);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "do", "do", 46310725), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "statements", "statements", 600349855), statements, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret, new cljs.core.Keyword(null, "children", "children", -940561982), children], null);
  } else {
    var ret_env = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "statement", "statement", -32780863), (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env)) ? cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "statement", "statement", -32780863)) : cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "return", 
    "return", -1891502105));
    var ret = cljs.analyzer.analyze.call(null, ret_env, cljs.core.last.call(null, exprs));
    var children = cljs.core.conj.call(null, cljs.core.vec.call(null, statements), ret);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "do", "do", 46310725), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "statements", "statements", 600349855), statements, new cljs.core.Keyword(null, "ret", "ret", -468222814), ret, new cljs.core.Keyword(null, "children", "children", -940561982), children], null);
  }
});
cljs.analyzer.analyze_let_binding_init = function cljs$analyzer$analyze_let_binding_init(env, init, loop_lets) {
  var _STAR_loop_lets_STAR_14178 = cljs.analyzer._STAR_loop_lets_STAR_;
  cljs.analyzer._STAR_loop_lets_STAR_ = loop_lets;
  try {
    return cljs.analyzer.analyze.call(null, env, init);
  } finally {
    cljs.analyzer._STAR_loop_lets_STAR_ = _STAR_loop_lets_STAR_14178;
  }
};
cljs.analyzer.get_let_tag = function cljs$analyzer$get_let_tag(name, init_expr) {
  var temp__4659__auto__ = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name));
  if (temp__4659__auto__ == null) {
    var temp__4659__auto____$1 = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(init_expr);
    if (temp__4659__auto____$1 == null) {
      return (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(init_expr));
    } else {
      var tag = temp__4659__auto____$1;
      return tag;
    }
  } else {
    var tag = temp__4659__auto__;
    return tag;
  }
};
cljs.analyzer.analyze_let_bindings_STAR_ = function cljs$analyzer$analyze_let_bindings_STAR_(encl_env, bindings) {
  var bes = cljs.core.PersistentVector.EMPTY;
  var env = cljs.core.assoc.call(null, encl_env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var bindings__$1 = cljs.core.seq.call(null, cljs.core.partition.call(null, 2, bindings));
  while (true) {
    var temp__4659__auto__ = cljs.core.first.call(null, bindings__$1);
    if (temp__4659__auto__ == null) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [bes, env], null);
    } else {
      var vec__14182 = temp__4659__auto__;
      var name = cljs.core.nth.call(null, vec__14182, 0, null);
      var init = cljs.core.nth.call(null, vec__14182, 1, null);
      if (!(cljs.core.namespace.call(null, name) == null) || goog.string.contains([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""), ".")) {
        throw cljs.analyzer.error.call(null, encl_env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid local name: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""));
      } else {
      }
      var init_expr = cljs.analyzer.analyze_let_binding_init.call(null, env, init, cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), bes], null), cljs.analyzer._STAR_loop_lets_STAR_));
      var line = cljs.analyzer.get_line.call(null, name, env);
      var col = cljs.analyzer.get_col.call(null, name, env);
      var be = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "init", "init", -1875481434), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "binding-form?", "binding-form?", 1728940169), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "info", 
      "info", -317069002), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "shadow", "shadow", 873231803), new cljs.core.Keyword(null, "local", "local", -1497766724)], [init_expr, name, true, new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "line", "line", 212345235), line, new cljs.core.Keyword(null, "column", "column", 2078222095), col], null), col, line, new cljs.core.PersistentArrayMap(null, 
      2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name, new cljs.core.Keyword(null, "shadow", "shadow", 873231803), name.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env))], null), cljs.analyzer.get_let_tag.call(null, name, init_expr), name.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env)), true]);
      var be__$1 = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "fn", "fn", -1175266204), (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(init_expr)) ? cljs.core.merge.call(null, be, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730), true, new cljs.core.Keyword(null, "variadic", "variadic", 882626057), (new cljs.core.Keyword(null, "variadic", "variadic", 882626057)).cljs$core$IFn$_invoke$arity$1(init_expr), 
      new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543), (new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543)).cljs$core$IFn$_invoke$arity$1(init_expr), new cljs.core.Keyword(null, "method-params", "method-params", -980792179), cljs.core.map.call(null, new cljs.core.Keyword(null, "params", "params", 710516235), (new cljs.core.Keyword(null, "methods", "methods", 453930866)).cljs$core$IFn$_invoke$arity$1(init_expr))], null)) : be;
      var G__14185 = cljs.core.conj.call(null, bes, be__$1);
      var G__14186 = cljs.core.assoc_in.call(null, env, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "locals", "locals", 535295783), name], null), be__$1);
      var G__14187 = cljs.core.next.call(null, bindings__$1);
      bes = G__14185;
      env = G__14186;
      bindings__$1 = G__14187;
      continue;
    }
    break;
  }
};
cljs.analyzer.analyze_let_bindings = function cljs$analyzer$analyze_let_bindings(encl_env, bindings) {
  var _STAR_recur_frames_STAR_14189 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_let_bindings_STAR_.call(null, encl_env, bindings);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14189;
  }
};
cljs.analyzer.analyze_let_body_STAR_ = function cljs$analyzer$analyze_let_body_STAR_(env, context, exprs) {
  return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "expr", "expr", 745722291), context) ? new cljs.core.Keyword(null, "return", "return", -1891502105) : context), cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), exprs))));
};
cljs.analyzer.analyze_let_body = function cljs$analyzer$analyze_let_body(env, context, exprs, recur_frames, loop_lets) {
  var _STAR_recur_frames_STAR_14192 = cljs.analyzer._STAR_recur_frames_STAR_;
  var _STAR_loop_lets_STAR_14193 = cljs.analyzer._STAR_loop_lets_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = recur_frames;
  cljs.analyzer._STAR_loop_lets_STAR_ = loop_lets;
  try {
    return cljs.analyzer.analyze_let_body_STAR_.call(null, env, context, exprs);
  } finally {
    cljs.analyzer._STAR_loop_lets_STAR_ = _STAR_loop_lets_STAR_14193;
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14192;
  }
};
cljs.analyzer.analyze_let = function cljs$analyzer$analyze_let(encl_env, p__14194, is_loop) {
  var vec__14201 = p__14194;
  var seq__14202 = cljs.core.seq.call(null, vec__14201);
  var first__14203 = cljs.core.first.call(null, seq__14202);
  var seq__14202__$1 = cljs.core.next.call(null, seq__14202);
  var _ = first__14203;
  var first__14203__$1 = cljs.core.first.call(null, seq__14202__$1);
  var seq__14202__$2 = cljs.core.next.call(null, seq__14202__$1);
  var bindings = first__14203__$1;
  var exprs = seq__14202__$2;
  var form = vec__14201;
  if (cljs.core.vector_QMARK_.call(null, bindings) && cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, bindings))) {
  } else {
    throw cljs.analyzer.error.call(null, encl_env, "bindings must be vector of even number of elements");
  }
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(encl_env);
  var vec__14204 = cljs.analyzer.analyze_let_bindings.call(null, encl_env, bindings);
  var bes = cljs.core.nth.call(null, vec__14204, 0, null);
  var env = cljs.core.nth.call(null, vec__14204, 1, null);
  var recur_frame = is_loop === true ? new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "params", "params", 710516235), bes, new cljs.core.Keyword(null, "flag", "flag", 1088647881), cljs.core.atom.call(null, null)], null) : null;
  var recur_frames = cljs.core.truth_(recur_frame) ? cljs.core.cons.call(null, recur_frame, cljs.analyzer._STAR_recur_frames_STAR_) : cljs.analyzer._STAR_recur_frames_STAR_;
  var loop_lets = is_loop === true ? cljs.analyzer._STAR_loop_lets_STAR_ : !(cljs.analyzer._STAR_loop_lets_STAR_ == null) ? cljs.core.cons.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), bes], null), cljs.analyzer._STAR_loop_lets_STAR_) : null;
  var expr = cljs.analyzer.analyze_let_body.call(null, env, context, exprs, recur_frames, loop_lets);
  var op = is_loop === true ? new cljs.core.Keyword(null, "loop", "loop", -395552849) : new cljs.core.Keyword(null, "let", "let", -1282412701);
  var children = cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, new cljs.core.Keyword(null, "init", "init", -1875481434), bes)), expr);
  return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), op, new cljs.core.Keyword(null, "env", "env", -1815813235), encl_env, new cljs.core.Keyword(null, "bindings", "bindings", 1271397192), bes, new cljs.core.Keyword(null, "expr", "expr", 745722291), expr, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "children", "children", -940561982), children], null);
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), function(op, encl_env, form, _, ___$1) {
  return cljs.analyzer.analyze_let.call(null, encl_env, form, false);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), function(op, encl_env, form, _, ___$1) {
  return cljs.analyzer.analyze_let.call(null, encl_env, form, true);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), function(op, env, p__14208, _, ___$1) {
  var vec__14209 = p__14208;
  var seq__14210 = cljs.core.seq.call(null, vec__14209);
  var first__14211 = cljs.core.first.call(null, seq__14210);
  var seq__14210__$1 = cljs.core.next.call(null, seq__14210);
  var ___$2 = first__14211;
  var exprs = seq__14210__$1;
  var form = vec__14209;
  var context = (new cljs.core.Keyword(null, "context", "context", -830191113)).cljs$core$IFn$_invoke$arity$1(env);
  var frame = cljs.core.first.call(null, cljs.analyzer._STAR_recur_frames_STAR_);
  var exprs__$1 = function() {
    var _STAR_recur_frames_STAR_14212 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14212, context, frame, vec__14209, seq__14210, first__14211, seq__14210__$1, ___$2, exprs, form) {
        return function(p1__14207_SHARP_) {
          return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291)), p1__14207_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14212, context, frame, vec__14209, seq__14210, first__14211, seq__14210__$1, ___$2, exprs, form), exprs));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14212;
    }
  }();
  if (cljs.core.truth_(frame)) {
  } else {
    throw cljs.analyzer.error.call(null, env, "Can't recur here");
  }
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, exprs__$1), cljs.core.count.call(null, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$1(frame)))) {
  } else {
    throw cljs.analyzer.error.call(null, env, "recur argument count mismatch");
  }
  cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "flag", "flag", 1088647881)).cljs$core$IFn$_invoke$arity$1(frame), true);
  return cljs.core.assoc.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "recur", "recur", -437573268), new cljs.core.Keyword(null, "form", "form", -1624062471), form], null), new cljs.core.Keyword(null, "frame", "frame", -1711082588), frame, new cljs.core.Keyword(null, "exprs", "exprs", 1795829094), exprs__$1, new cljs.core.Keyword(null, "children", 
  "children", -940561982), exprs__$1);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), function(_, env, p__14213, ___$1, ___$2) {
  var vec__14214 = p__14213;
  var ___$3 = cljs.core.nth.call(null, vec__14214, 0, null);
  var x = cljs.core.nth.call(null, vec__14214, 1, null);
  return cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "quoted?", "quoted?", 1464649621), true), x);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "new", "new", -444906321, null), function(_, env, p__14218, ___$1, ___$2) {
  var vec__14219 = p__14218;
  var seq__14220 = cljs.core.seq.call(null, vec__14219);
  var first__14221 = cljs.core.first.call(null, seq__14220);
  var seq__14220__$1 = cljs.core.next.call(null, seq__14220);
  var ___$3 = first__14221;
  var first__14221__$1 = cljs.core.first.call(null, seq__14220__$1);
  var seq__14220__$2 = cljs.core.next.call(null, seq__14220__$1);
  var ctor = first__14221__$1;
  var args = seq__14220__$2;
  var form = vec__14219;
  var _STAR_recur_frames_STAR_14222 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
    var ctorexpr = cljs.analyzer.analyze.call(null, enve, ctor);
    var ctor_var = cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ctorexpr), new cljs.core.Keyword(null, "var", "var", -769682797)) ? cljs.analyzer.resolve_existing_var.call(null, env, ctor) : null;
    var record_args = cljs.core.truth_(function() {
      var and__7398__auto__ = (new cljs.core.Keyword(null, "record", "record", -779106859)).cljs$core$IFn$_invoke$arity$1(ctor_var);
      if (cljs.core.truth_(and__7398__auto__)) {
        return cljs.core.not.call(null, (new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, ctor)));
      } else {
        return and__7398__auto__;
      }
    }()) ? cljs.core.repeat.call(null, 3, cljs.analyzer.analyze.call(null, enve, null)) : null;
    var argexprs = cljs.core.into.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, function(enve, ctorexpr, ctor_var, record_args, _STAR_recur_frames_STAR_14222, vec__14219, seq__14220, first__14221, seq__14220__$1, ___$3, first__14221__$1, seq__14220__$2, ctor, args, form) {
      return function(p1__14217_SHARP_) {
        return cljs.analyzer.analyze.call(null, enve, p1__14217_SHARP_);
      };
    }(enve, ctorexpr, ctor_var, record_args, _STAR_recur_frames_STAR_14222, vec__14219, seq__14220, first__14221, seq__14220__$1, ___$3, first__14221__$1, seq__14220__$2, ctor, args, form), args)), record_args);
    var known_num_fields = (new cljs.core.Keyword(null, "num-fields", "num-fields", 1529154024)).cljs$core$IFn$_invoke$arity$1(ctor_var);
    var argc = cljs.core.count.call(null, args);
    if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "internal-ctor", "internal-ctor", 937392560)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, ctor))) && !(known_num_fields == null) && cljs.core.not_EQ_.call(null, known_num_fields, argc)) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "argc", "argc", -1452839519), argc, new cljs.core.Keyword(null, "ctor", "ctor", 1750864802), ctor], null));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "new", "new", -2085437848), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "ctor", "ctor", 1750864802), ctorexpr, new cljs.core.Keyword(null, "args", "args", 1315556576), argexprs, new cljs.core.Keyword(null, "children", "children", -940561982), cljs.core.into.call(null, 
    new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [ctorexpr], null), argexprs), new cljs.core.Keyword(null, "tag", "tag", -1290361223), function() {
      var name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(ctorexpr));
      var or__7410__auto__ = (new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Symbol("js", "Object", "js/Object", 61215323, null), new cljs.core.Symbol(null, "object", "object", -1179821820, null), new cljs.core.Symbol("js", "String", "js/String", -2070054036, null), new cljs.core.Symbol(null, "string", "string", -349010059, null), new cljs.core.Symbol("js", "Array", "js/Array", -423508366, null), new cljs.core.Symbol(null, "array", "array", -440182315, null), new cljs.core.Symbol("js", 
      "Number", "js/Number", -508133572, null), new cljs.core.Symbol(null, "number", "number", -1084057331, null), new cljs.core.Symbol("js", "Function", "js/Function", -749892063, null), new cljs.core.Symbol(null, "function", "function", -486723946, null), new cljs.core.Symbol("js", "Boolean", "js/Boolean", 1661145260, null), new cljs.core.Symbol(null, "boolean", "boolean", -278886877, null)], null)).call(null, name);
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return name;
      }
    }()], null);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14222;
  }
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), function(_, env, p__14223, ___$1, ___$2) {
  var vec__14224 = p__14223;
  var ___$3 = cljs.core.nth.call(null, vec__14224, 0, null);
  var target = cljs.core.nth.call(null, vec__14224, 1, null);
  var val = cljs.core.nth.call(null, vec__14224, 2, null);
  var alt = cljs.core.nth.call(null, vec__14224, 3, null);
  var form = vec__14224;
  var vec__14227 = cljs.core.truth_(alt) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), function() {
    var x__8252__auto__ = target;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = val;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }()))), alt], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [target, val], null);
  var target__$1 = cljs.core.nth.call(null, vec__14227, 0, null);
  var val__$1 = cljs.core.nth.call(null, vec__14227, 1, null);
  var _STAR_recur_frames_STAR_14230 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
    var targetexpr = cljs.core._EQ_.call(null, target__$1, new cljs.core.Symbol(null, "*unchecked-if*", "*unchecked-if*", 1542408350, null)) && (val__$1 === true || val__$1 === false) ? function() {
      cljs.core._STAR_unchecked_if_STAR_ = val__$1;
      return new cljs.core.Keyword("cljs.analyzer", "set-unchecked-if", "cljs.analyzer/set-unchecked-if", 1413639250);
    }() : cljs.core._EQ_.call(null, target__$1, new cljs.core.Symbol(null, "*warn-on-infer*", "*warn-on-infer*", 1890277318, null)) ? function() {
      cljs.analyzer._STAR_cljs_warnings_STAR_ = cljs.core.assoc.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_, new cljs.core.Keyword(null, "infer-warning", "infer-warning", -1600671410), true);
      return new cljs.core.Keyword("cljs.analyzer", "set-warn-on-infer", "cljs.analyzer/set-warn-on-infer", 1143377544);
    }() : target__$1 instanceof cljs.core.Symbol ? function() {
      if (!((new cljs.core.Keyword(null, "const", "const", 1709929842)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), target__$1)) == null)) {
        throw cljs.analyzer.error.call(null, env, "Can't set! a constant");
      } else {
      }
      var local_14231 = target__$1.call(null, (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env));
      if (cljs.core.truth_(function() {
        var or__7410__auto__ = local_14231 == null;
        if (or__7410__auto__) {
          return or__7410__auto__;
        } else {
          var and__7398__auto__ = (new cljs.core.Keyword(null, "field", "field", -1302436500)).cljs$core$IFn$_invoke$arity$1(local_14231);
          if (cljs.core.truth_(and__7398__auto__)) {
            var or__7410__auto____$1 = (new cljs.core.Keyword(null, "mutable", "mutable", 875778266)).cljs$core$IFn$_invoke$arity$1(local_14231);
            if (cljs.core.truth_(or__7410__auto____$1)) {
              return or__7410__auto____$1;
            } else {
              var or__7410__auto____$2 = (new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950)).cljs$core$IFn$_invoke$arity$1(local_14231);
              if (cljs.core.truth_(or__7410__auto____$2)) {
                return or__7410__auto____$2;
              } else {
                return (new cljs.core.Keyword(null, "volatile-mutable", "volatile-mutable", 1731728411)).cljs$core$IFn$_invoke$arity$1(local_14231);
              }
            }
          } else {
            return and__7398__auto__;
          }
        }
      }())) {
      } else {
        throw cljs.analyzer.error.call(null, env, "Can't set! local var or non-mutable field");
      }
      return cljs.analyzer.analyze_symbol.call(null, enve, target__$1);
    }() : cljs.core.seq_QMARK_.call(null, target__$1) ? function() {
      var targetexpr = cljs.analyzer.analyze_seq.call(null, enve, target__$1, null);
      if (cljs.core.truth_((new cljs.core.Keyword(null, "field", "field", -1302436500)).cljs$core$IFn$_invoke$arity$1(targetexpr))) {
        return targetexpr;
      } else {
        return null;
      }
    }() : null;
    var valexpr = cljs.analyzer.analyze.call(null, enve, val__$1);
    if (cljs.core.truth_(targetexpr)) {
    } else {
      throw cljs.analyzer.error.call(null, env, "set! target must be a field or a symbol naming a var");
    }
    if (!((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword("cljs.analyzer", "set-warn-on-infer", "cljs.analyzer/set-warn-on-infer", 1143377544), null, new cljs.core.Keyword("cljs.analyzer", "set-unchecked-if", "cljs.analyzer/set-unchecked-if", 1413639250), null], null), null)).call(null, targetexpr) == null)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "no-op", "no-op", -93046065)], null);
    } else {
      return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "set!", "set!", -1389817006), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "target", "target", 253001721), targetexpr, new cljs.core.Keyword(null, "val", "val", 128701612), valexpr, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 
      2, 5, cljs.core.PersistentVector.EMPTY_NODE, [targetexpr, valexpr], null)], null);
    }
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14230;
  }
});
cljs.analyzer.foreign_dep_QMARK_ = function cljs$analyzer$foreign_dep_QMARK_(dep) {
  if (dep instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? dep)");
  }
  var js_index = (new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_));
  var temp__4659__auto__ = cljs.core.find.call(null, js_index, cljs.core.name.call(null, dep));
  if (temp__4659__auto__ == null) {
    return false;
  } else {
    var vec__14237 = temp__4659__auto__;
    var _ = cljs.core.nth.call(null, vec__14237, 0, null);
    var map__14240 = cljs.core.nth.call(null, vec__14237, 1, null);
    var map__14240__$1 = (!(map__14240 == null) ? map__14240.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14240.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14240) : map__14240;
    var foreign = cljs.core.get.call(null, map__14240__$1, new cljs.core.Keyword(null, "foreign", "foreign", 990521149));
    return foreign;
  }
};
cljs.analyzer.analyze_deps = function cljs$analyzer$analyze_deps(var_args) {
  var args14243 = [];
  var len__8523__auto___14251 = arguments.length;
  var i__8524__auto___14252 = 0;
  while (true) {
    if (i__8524__auto___14252 < len__8523__auto___14251) {
      args14243.push(arguments[i__8524__auto___14252]);
      var G__14253 = i__8524__auto___14252 + 1;
      i__8524__auto___14252 = G__14253;
      continue;
    } else {
    }
    break;
  }
  var G__14245 = args14243.length;
  switch(G__14245) {
    case 3:
      return cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14243.length)].join(""));
  }
};
cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$3 = function(lib, deps, env) {
  return cljs.analyzer.analyze_deps.call(null, lib, deps, env, cljs.core.truth_(cljs.env._STAR_compiler_STAR_) ? (new cljs.core.Keyword(null, "options", "options", 99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_)) : null);
};
cljs.analyzer.analyze_deps.cljs$core$IFn$_invoke$arity$4 = function(lib, deps, env, opts) {
  var compiler = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  var _STAR_cljs_dep_set_STAR_14246 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
  cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.call(null, cljs.core.conj.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_, lib), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)], null), cljs.core.conj, lib);
  try {
    if (cljs.core.every_QMARK_.call(null, function(_STAR_cljs_dep_set_STAR_14246, compiler) {
      return function(p1__14242_SHARP_) {
        return !cljs.core.contains_QMARK_.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_, p1__14242_SHARP_);
      };
    }(_STAR_cljs_dep_set_STAR_14246, compiler), deps)) {
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Circular dependency detected, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " -\x3e ", cljs.core.conj.call(null, (new cljs.core.Keyword(null, "dep-path", "dep-path", 723826558)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_)), 
      cljs.core.some.call(null, cljs.analyzer._STAR_cljs_dep_set_STAR_, deps)))))].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(every? (fn* [p1__14242#] (not (contains? *cljs-dep-set* p1__14242#))) deps)")].join(""));
    }
    var seq__14247 = cljs.core.seq.call(null, deps);
    var chunk__14248 = null;
    var count__14249 = 0;
    var i__14250 = 0;
    while (true) {
      if (i__14250 < count__14249) {
        var dep = cljs.core._nth.call(null, chunk__14248, i__14250);
        if (cljs.core.truth_(function() {
          var or__7410__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, compiler, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), dep, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)));
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131)).cljs$core$IFn$_invoke$arity$1(compiler), cljs.core.name.call(null, dep));
          }
        }())) {
        } else {
          throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), dep, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493), cljs.core.name.call(null, dep)], null)));
        }
        var G__14255 = seq__14247;
        var G__14256 = chunk__14248;
        var G__14257 = count__14249;
        var G__14258 = i__14250 + 1;
        seq__14247 = G__14255;
        chunk__14248 = G__14256;
        count__14249 = G__14257;
        i__14250 = G__14258;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__14247);
        if (temp__4657__auto__) {
          var seq__14247__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__14247__$1)) {
            var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__14247__$1);
            var G__14259 = cljs.core.chunk_rest.call(null, seq__14247__$1);
            var G__14260 = c__8229__auto__;
            var G__14261 = cljs.core.count.call(null, c__8229__auto__);
            var G__14262 = 0;
            seq__14247 = G__14259;
            chunk__14248 = G__14260;
            count__14249 = G__14261;
            i__14250 = G__14262;
            continue;
          } else {
            var dep = cljs.core.first.call(null, seq__14247__$1);
            if (cljs.core.truth_(function() {
              var or__7410__auto__ = cljs.core.not_empty.call(null, cljs.core.get_in.call(null, compiler, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), dep, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)));
              if (cljs.core.truth_(or__7410__auto__)) {
                return or__7410__auto__;
              } else {
                return cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131)).cljs$core$IFn$_invoke$arity$1(compiler), cljs.core.name.call(null, dep));
              }
            }())) {
            } else {
              throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns", "undeclared-ns", -1589012812), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns-sym", "ns-sym", -1696101605), dep, new cljs.core.Keyword(null, "js-provide", "js-provide", 1052912493), cljs.core.name.call(null, dep)], null)));
            }
            var G__14263 = cljs.core.next.call(null, seq__14247__$1);
            var G__14264 = null;
            var G__14265 = 0;
            var G__14266 = 0;
            seq__14247 = G__14263;
            chunk__14248 = G__14264;
            count__14249 = G__14265;
            i__14250 = G__14266;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  } finally {
    cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_14246;
  }
};
cljs.analyzer.analyze_deps.cljs$lang$maxFixedArity = 4;
cljs.analyzer.missing_use_QMARK_ = function cljs$analyzer$missing_use_QMARK_(lib, sym, cenv) {
  var js_lib = cljs.core.get_in.call(null, cenv, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131), cljs.core.name.call(null, lib)], null));
  return cljs.core._EQ_.call(null, cljs.core.get_in.call(null, cenv, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), lib, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null), new cljs.core.Keyword("cljs.analyzer", "not-found", "cljs.analyzer/not-found", 427220150)), new cljs.core.Keyword("cljs.analyzer", "not-found", "cljs.analyzer/not-found", 427220150)) && 
  !cljs.core._EQ_.call(null, cljs.core.get.call(null, js_lib, new cljs.core.Keyword(null, "group", "group", 582596132)), new cljs.core.Keyword(null, "goog", "goog", -1711135452)) && cljs.core.not.call(null, cljs.core.get.call(null, js_lib, new cljs.core.Keyword(null, "closure-lib", "closure-lib", 2105917916)));
};
cljs.analyzer.missing_rename_QMARK_ = function cljs$analyzer$missing_rename_QMARK_(sym, cenv) {
  var lib = cljs.core.symbol.call(null, cljs.core.namespace.call(null, sym));
  var sym__$1 = cljs.core.symbol.call(null, cljs.core.name.call(null, sym));
  return cljs.analyzer.missing_use_QMARK_.call(null, lib, sym__$1, cenv);
};
cljs.analyzer.missing_use_macro_QMARK_ = function cljs$analyzer$missing_use_macro_QMARK_(lib, sym) {
  var the_ns = cljs.core.find_macros_ns.call(null, lib);
  return the_ns == null || the_ns.findInternedVar(sym) == null;
};
cljs.analyzer.missing_rename_macro_QMARK_ = function cljs$analyzer$missing_rename_macro_QMARK_(sym) {
  var lib = cljs.core.symbol.call(null, cljs.core.namespace.call(null, sym));
  var sym__$1 = cljs.core.symbol.call(null, cljs.core.name.call(null, sym));
  var the_ns = cljs.core.find_macros_ns.call(null, lib);
  return the_ns == null || the_ns.findInternedVar(sym__$1) == null;
};
cljs.analyzer.missing_uses = function cljs$analyzer$missing_uses(uses, env) {
  var cenv = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(cenv) {
    return function(p__14271) {
      var vec__14272 = p__14271;
      var sym = cljs.core.nth.call(null, vec__14272, 0, null);
      var lib = cljs.core.nth.call(null, vec__14272, 1, null);
      return cljs.analyzer.missing_use_QMARK_.call(null, lib, sym, cenv);
    };
  }(cenv), uses));
};
cljs.analyzer.missing_renames = function cljs$analyzer$missing_renames(renames, env) {
  var cenv = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(cenv) {
    return function(p__14279) {
      var vec__14280 = p__14279;
      var _ = cljs.core.nth.call(null, vec__14280, 0, null);
      var qualified_sym = cljs.core.nth.call(null, vec__14280, 1, null);
      return cljs.analyzer.missing_rename_QMARK_.call(null, qualified_sym, cenv);
    };
  }(cenv), renames));
};
cljs.analyzer.missing_use_macros = function cljs$analyzer$missing_use_macros(use_macros, env) {
  var cenv = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(cenv) {
    return function(p__14287) {
      var vec__14288 = p__14287;
      var sym = cljs.core.nth.call(null, vec__14288, 0, null);
      var lib = cljs.core.nth.call(null, vec__14288, 1, null);
      return cljs.analyzer.missing_use_macro_QMARK_.call(null, lib, sym);
    };
  }(cenv), use_macros));
};
cljs.analyzer.inferred_use_macros = function cljs$analyzer$inferred_use_macros(use_macros, env) {
  var cenv = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(cenv) {
    return function(p__14295) {
      var vec__14296 = p__14295;
      var sym = cljs.core.nth.call(null, vec__14296, 0, null);
      var lib = cljs.core.nth.call(null, vec__14296, 1, null);
      return cljs.core.not.call(null, cljs.analyzer.missing_use_macro_QMARK_.call(null, lib, sym));
    };
  }(cenv), use_macros));
};
cljs.analyzer.inferred_rename_macros = function cljs$analyzer$inferred_rename_macros(rename_macros, env) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(p__14303) {
    var vec__14304 = p__14303;
    var _ = cljs.core.nth.call(null, vec__14304, 0, null);
    var qualified_sym = cljs.core.nth.call(null, vec__14304, 1, null);
    return cljs.core.not.call(null, cljs.analyzer.missing_rename_macro_QMARK_.call(null, qualified_sym));
  }, rename_macros));
};
cljs.analyzer.check_uses = function cljs$analyzer$check_uses(uses, env) {
  var cenv = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  var seq__14317 = cljs.core.seq.call(null, uses);
  var chunk__14318 = null;
  var count__14319 = 0;
  var i__14320 = 0;
  while (true) {
    if (i__14320 < count__14319) {
      var vec__14321 = cljs.core._nth.call(null, chunk__14318, i__14320);
      var sym = cljs.core.nth.call(null, vec__14321, 0, null);
      var lib = cljs.core.nth.call(null, vec__14321, 1, null);
      if (cljs.core.truth_(cljs.analyzer.missing_use_QMARK_.call(null, lib, sym, cenv))) {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "var", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null)));
      } else {
      }
      var G__14327 = seq__14317;
      var G__14328 = chunk__14318;
      var G__14329 = count__14319;
      var G__14330 = i__14320 + 1;
      seq__14317 = G__14327;
      chunk__14318 = G__14328;
      count__14319 = G__14329;
      i__14320 = G__14330;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__14317);
      if (temp__4657__auto__) {
        var seq__14317__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14317__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__14317__$1);
          var G__14331 = cljs.core.chunk_rest.call(null, seq__14317__$1);
          var G__14332 = c__8229__auto__;
          var G__14333 = cljs.core.count.call(null, c__8229__auto__);
          var G__14334 = 0;
          seq__14317 = G__14331;
          chunk__14318 = G__14332;
          count__14319 = G__14333;
          i__14320 = G__14334;
          continue;
        } else {
          var vec__14324 = cljs.core.first.call(null, seq__14317__$1);
          var sym = cljs.core.nth.call(null, vec__14324, 0, null);
          var lib = cljs.core.nth.call(null, vec__14324, 1, null);
          if (cljs.core.truth_(cljs.analyzer.missing_use_QMARK_.call(null, lib, sym, cenv))) {
            throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "var", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym], null)));
          } else {
          }
          var G__14335 = cljs.core.next.call(null, seq__14317__$1);
          var G__14336 = null;
          var G__14337 = 0;
          var G__14338 = 0;
          seq__14317 = G__14335;
          chunk__14318 = G__14336;
          count__14319 = G__14337;
          i__14320 = G__14338;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.check_use_macros = function cljs$analyzer$check_use_macros(var_args) {
  var args14339 = [];
  var len__8523__auto___14352 = arguments.length;
  var i__8524__auto___14353 = 0;
  while (true) {
    if (i__8524__auto___14353 < len__8523__auto___14352) {
      args14339.push(arguments[i__8524__auto___14353]);
      var G__14354 = i__8524__auto___14353 + 1;
      i__8524__auto___14353 = G__14354;
      continue;
    } else {
    }
    break;
  }
  var G__14341 = args14339.length;
  switch(G__14341) {
    case 2:
      return cljs.analyzer.check_use_macros.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.check_use_macros.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14339.length)].join(""));
  }
};
cljs.analyzer.check_use_macros.cljs$core$IFn$_invoke$arity$2 = function(use_macros, env) {
  return cljs.analyzer.check_use_macros.call(null, use_macros, null, env);
};
cljs.analyzer.check_use_macros.cljs$core$IFn$_invoke$arity$3 = function(use_macros, missing_uses, env) {
  var cenv = cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_);
  var seq__14342_14356 = cljs.core.seq.call(null, use_macros);
  var chunk__14343_14357 = null;
  var count__14344_14358 = 0;
  var i__14345_14359 = 0;
  while (true) {
    if (i__14345_14359 < count__14344_14358) {
      var vec__14346_14360 = cljs.core._nth.call(null, chunk__14343_14357, i__14345_14359);
      var sym_14361 = cljs.core.nth.call(null, vec__14346_14360, 0, null);
      var lib_14362 = cljs.core.nth.call(null, vec__14346_14360, 1, null);
      if (cljs.core.truth_(cljs.analyzer.missing_use_macro_QMARK_.call(null, lib_14362, sym_14361))) {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "macro", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib_14362, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym_14361], null)));
      } else {
      }
      var G__14363 = seq__14342_14356;
      var G__14364 = chunk__14343_14357;
      var G__14365 = count__14344_14358;
      var G__14366 = i__14345_14359 + 1;
      seq__14342_14356 = G__14363;
      chunk__14343_14357 = G__14364;
      count__14344_14358 = G__14365;
      i__14345_14359 = G__14366;
      continue;
    } else {
      var temp__4657__auto___14367 = cljs.core.seq.call(null, seq__14342_14356);
      if (temp__4657__auto___14367) {
        var seq__14342_14368__$1 = temp__4657__auto___14367;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14342_14368__$1)) {
          var c__8229__auto___14369 = cljs.core.chunk_first.call(null, seq__14342_14368__$1);
          var G__14370 = cljs.core.chunk_rest.call(null, seq__14342_14368__$1);
          var G__14371 = c__8229__auto___14369;
          var G__14372 = cljs.core.count.call(null, c__8229__auto___14369);
          var G__14373 = 0;
          seq__14342_14356 = G__14370;
          chunk__14343_14357 = G__14371;
          count__14344_14358 = G__14372;
          i__14345_14359 = G__14373;
          continue;
        } else {
          var vec__14349_14374 = cljs.core.first.call(null, seq__14342_14368__$1);
          var sym_14375 = cljs.core.nth.call(null, vec__14349_14374, 0, null);
          var lib_14376 = cljs.core.nth.call(null, vec__14349_14374, 1, null);
          if (cljs.core.truth_(cljs.analyzer.missing_use_macro_QMARK_.call(null, lib_14376, sym_14375))) {
            throw cljs.analyzer.error.call(null, env, cljs.analyzer.error_message.call(null, new cljs.core.Keyword(null, "undeclared-ns-form", "undeclared-ns-form", -248024137), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "type", "type", 1174270348), "macro", new cljs.core.Keyword(null, "lib", "lib", 191808726), lib_14376, new cljs.core.Keyword(null, "sym", "sym", -1444860305), sym_14375], null)));
          } else {
          }
          var G__14377 = cljs.core.next.call(null, seq__14342_14368__$1);
          var G__14378 = null;
          var G__14379 = 0;
          var G__14380 = 0;
          seq__14342_14356 = G__14377;
          chunk__14343_14357 = G__14378;
          count__14344_14358 = G__14379;
          i__14345_14359 = G__14380;
          continue;
        }
      } else {
      }
    }
    break;
  }
  cljs.analyzer.check_uses.call(null, cljs.analyzer.missing_use_macros.call(null, missing_uses, env), env);
  return cljs.analyzer.inferred_use_macros.call(null, missing_uses, env);
};
cljs.analyzer.check_use_macros.cljs$lang$maxFixedArity = 3;
cljs.analyzer.check_use_macros_inferring_missing = function cljs$analyzer$check_use_macros_inferring_missing(p__14384, env) {
  var map__14387 = p__14384;
  var map__14387__$1 = (!(map__14387 == null) ? map__14387.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14387.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14387) : map__14387;
  var ast = map__14387__$1;
  var name = cljs.core.get.call(null, map__14387__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var uses = cljs.core.get.call(null, map__14387__$1, new cljs.core.Keyword(null, "uses", "uses", 232664692));
  var use_macros = cljs.core.get.call(null, map__14387__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
  var missing_uses = cljs.analyzer._STAR_analyze_deps_STAR_ && cljs.core.seq.call(null, uses) ? cljs.analyzer.missing_uses.call(null, uses, env) : null;
  var maybe_macros = cljs.core.apply.call(null, cljs.core.dissoc, uses, cljs.core.keys.call(null, missing_uses));
  var remove_missing_uses = function(missing_uses, maybe_macros, map__14387, map__14387__$1, ast, name, uses, use_macros) {
    return function(p1__14381_SHARP_) {
      return cljs.core.apply.call(null, cljs.core.dissoc, p1__14381_SHARP_, cljs.core.keys.call(null, missing_uses));
    };
  }(missing_uses, maybe_macros, map__14387, map__14387__$1, ast, name, uses, use_macros);
  var ast_SINGLEQUOTE_ = cljs.core.update_in.call(null, cljs.core.update_in.call(null, ast, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393)], null), function(missing_uses, maybe_macros, remove_missing_uses, map__14387, map__14387__$1, ast, name, uses, use_macros) {
    return function(p1__14382_SHARP_) {
      return cljs.core.merge.call(null, cljs.core.merge.call(null, p1__14382_SHARP_, cljs.analyzer.check_use_macros.call(null, use_macros, missing_uses, env)), cljs.analyzer.inferred_use_macros.call(null, maybe_macros, env));
    };
  }(missing_uses, maybe_macros, remove_missing_uses, map__14387, map__14387__$1, ast, name, uses, use_macros)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "uses", "uses", 232664692)], null), remove_missing_uses);
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, function(missing_uses, maybe_macros, remove_missing_uses, ast_SINGLEQUOTE_, map__14387, map__14387__$1, ast, name, uses, use_macros) {
    return function(p1__14383_SHARP_) {
      return cljs.core.update_in.call(null, cljs.core.update_in.call(null, p1__14383_SHARP_, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393)], null), cljs.core.merge, (new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393)).cljs$core$IFn$_invoke$arity$1(ast_SINGLEQUOTE_)), new cljs.core.PersistentVector(null, 
      3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name, new cljs.core.Keyword(null, "uses", "uses", 232664692)], null), remove_missing_uses);
    };
  }(missing_uses, maybe_macros, remove_missing_uses, ast_SINGLEQUOTE_, map__14387, map__14387__$1, ast, name, uses, use_macros));
  return ast_SINGLEQUOTE_;
};
cljs.analyzer.check_rename_macros_inferring_missing = function cljs$analyzer$check_rename_macros_inferring_missing(p__14392, env) {
  var map__14395 = p__14392;
  var map__14395__$1 = (!(map__14395 == null) ? map__14395.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14395.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14395) : map__14395;
  var ast = map__14395__$1;
  var name = cljs.core.get.call(null, map__14395__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
  var renames = cljs.core.get.call(null, map__14395__$1, new cljs.core.Keyword(null, "renames", "renames", 343278368));
  var missing_renames = cljs.analyzer._STAR_analyze_deps_STAR_ && cljs.core.seq.call(null, renames) ? cljs.analyzer.missing_renames.call(null, renames, env) : null;
  var maybe_macros = cljs.core.apply.call(null, cljs.core.dissoc, renames, cljs.core.keys.call(null, missing_renames));
  var missing_rename_macros = cljs.analyzer.inferred_rename_macros.call(null, missing_renames, env);
  var remove_missing_renames = function(missing_renames, maybe_macros, missing_rename_macros, map__14395, map__14395__$1, ast, name, renames) {
    return function(p1__14389_SHARP_) {
      return cljs.core.apply.call(null, cljs.core.dissoc, p1__14389_SHARP_, cljs.core.keys.call(null, missing_renames));
    };
  }(missing_renames, maybe_macros, missing_rename_macros, map__14395, map__14395__$1, ast, name, renames);
  var ast_SINGLEQUOTE_ = cljs.core.update_in.call(null, cljs.core.update_in.call(null, ast, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512)], null), function(missing_renames, maybe_macros, missing_rename_macros, remove_missing_renames, map__14395, map__14395__$1, ast, name, renames) {
    return function(p1__14390_SHARP_) {
      return cljs.core.merge.call(null, cljs.core.merge.call(null, p1__14390_SHARP_, missing_rename_macros), cljs.analyzer.inferred_rename_macros.call(null, maybe_macros, env));
    };
  }(missing_renames, maybe_macros, missing_rename_macros, remove_missing_renames, map__14395, map__14395__$1, ast, name, renames)), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "renames", "renames", 343278368)], null), remove_missing_renames);
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, function(missing_renames, maybe_macros, missing_rename_macros, remove_missing_renames, ast_SINGLEQUOTE_, map__14395, map__14395__$1, ast, name, renames) {
    return function(p1__14391_SHARP_) {
      return cljs.core.update_in.call(null, cljs.core.update_in.call(null, p1__14391_SHARP_, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name, new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512)], null), cljs.core.merge, (new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512)).cljs$core$IFn$_invoke$arity$1(ast_SINGLEQUOTE_)), 
      new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name, new cljs.core.Keyword(null, "renames", "renames", 343278368)], null), remove_missing_renames);
    };
  }(missing_renames, maybe_macros, missing_rename_macros, remove_missing_renames, ast_SINGLEQUOTE_, map__14395, map__14395__$1, ast, name, renames));
  return ast_SINGLEQUOTE_;
};
cljs.analyzer.parse_ns_error_msg = function cljs$analyzer$parse_ns_error_msg(spec, msg) {
  return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg), cljs.core.str.cljs$core$IFn$_invoke$arity$1("; offending spec: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, spec))].join("");
};
cljs.analyzer.basic_validate_ns_spec = function cljs$analyzer$basic_validate_ns_spec(env, macros_QMARK_, spec) {
  if (spec instanceof cljs.core.Symbol || cljs.core.sequential_QMARK_.call(null, spec)) {
  } else {
    throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only [lib.ns \x26 options] and lib.ns specs supported in :require / :require-macros"));
  }
  if (cljs.core.sequential_QMARK_.call(null, spec)) {
    if (cljs.core.first.call(null, spec) instanceof cljs.core.Symbol) {
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Library name must be specified as a symbol in :require / :require-macros"));
    }
    if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, spec))) {
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only :as alias, :refer (names) and :rename {from to} options supported in :require"));
    }
    if (cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "as", "as", 1148689641), null, new cljs.core.Keyword(null, "rename", "rename", 1508157613), null, new cljs.core.Keyword(null, "refer", "refer", -964295553), null], null), null), cljs.core.map.call(null, cljs.core.first, cljs.core.partition.call(null, 2, cljs.core.next.call(null, spec))))) {
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only :as, :refer and :rename options supported in :require / :require-macros"));
    }
    if (function() {
      var fs = cljs.core.frequencies.call(null, cljs.core.next.call(null, spec));
      return fs.call(null, new cljs.core.Keyword(null, "as", "as", 1148689641), 0) <= 1 && fs.call(null, new cljs.core.Keyword(null, "refer", "refer", -964295553), 0) <= 1;
    }()) {
      return null;
    } else {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Each of :as and :refer options may only be specified once in :require / :require-macros"));
    }
  } else {
    return null;
  }
};
cljs.analyzer.parse_ns_excludes = function cljs$analyzer$parse_ns_excludes(env, args) {
  return cljs.core.reduce.call(null, function(s, p__14402) {
    var vec__14403 = p__14402;
    var seq__14404 = cljs.core.seq.call(null, vec__14403);
    var first__14405 = cljs.core.first.call(null, seq__14404);
    var seq__14404__$1 = cljs.core.next.call(null, seq__14404);
    var k = first__14405;
    var filters = seq__14404__$1;
    if (cljs.core._EQ_.call(null, k, new cljs.core.Keyword(null, "refer-clojure", "refer-clojure", 813784440))) {
      if (cljs.core.seq.call(null, (new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)).cljs$core$IFn$_invoke$arity$1(s))) {
        throw cljs.analyzer.error.call(null, env, "Only one :refer-clojure form is allowed per namespace definition");
      } else {
      }
      var valid_kws = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "exclude", "exclude", -1230250334), null, new cljs.core.Keyword(null, "rename", "rename", 1508157613), null], null), null);
      var xs = function() {
        var fs = cljs.core.seq.call(null, filters);
        var ret = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "renames", "renames", 343278368), cljs.core.PersistentArrayMap.EMPTY], null);
        var err = !cljs.core.even_QMARK_.call(null, cljs.core.count.call(null, filters));
        while (true) {
          if (err === true) {
            throw cljs.analyzer.error.call(null, env, "Only [:refer-clojure :exclude (names)] and optionally `:rename {from to}` specs supported");
          } else {
            if (!(fs == null)) {
              var kw = cljs.core.first.call(null, fs);
              if (cljs.core.truth_(valid_kws.call(null, kw))) {
                var refs = cljs.core.second.call(null, fs);
                if (!(cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "exclude", "exclude", -1230250334)) && cljs.core.sequential_QMARK_.call(null, refs) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, refs) || cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "rename", "rename", 1508157613)) && cljs.core.map_QMARK_.call(null, refs) && cljs.core.every_QMARK_.call(null, function(fs, ret, err, refs, kw, valid_kws, vec__14403, seq__14404, first__14405, seq__14404__$1, 
                k, filters) {
                  return function(p1__14397_SHARP_) {
                    return cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, p1__14397_SHARP_);
                  };
                }(fs, ret, err, refs, kw, valid_kws, vec__14403, seq__14404, first__14405, seq__14404__$1, k, filters), refs))) {
                  var G__14406 = fs;
                  var G__14407 = ret;
                  var G__14408 = true;
                  fs = G__14406;
                  ret = G__14407;
                  err = G__14408;
                  continue;
                } else {
                  if (cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "exclude", "exclude", -1230250334))) {
                    var G__14409 = cljs.core.nnext.call(null, fs);
                    var G__14410 = cljs.core.update_in.call(null, ret, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "excludes", "excludes", -1791725945)], null), cljs.core.into, refs);
                    var G__14411 = false;
                    fs = G__14409;
                    ret = G__14410;
                    err = G__14411;
                    continue;
                  } else {
                    if (cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "rename", "rename", 1508157613))) {
                      var G__14412 = cljs.core.nnext.call(null, fs);
                      var G__14413 = cljs.core.update_in.call(null, ret, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "renames", "renames", 343278368)], null), cljs.core.merge, refs);
                      var G__14414 = false;
                      fs = G__14412;
                      ret = G__14413;
                      err = G__14414;
                      continue;
                    } else {
                      return null;
                    }
                  }
                }
              } else {
                var G__14415 = fs;
                var G__14416 = ret;
                var G__14417 = true;
                fs = G__14415;
                ret = G__14416;
                err = G__14417;
                continue;
              }
            } else {
              return ret;
            }
          }
          break;
        }
      }();
      return cljs.core.merge_with.call(null, cljs.core.into, s, xs);
    } else {
      return s;
    }
  }, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "renames", "renames", 343278368), cljs.core.PersistentArrayMap.EMPTY], null), args);
};
cljs.analyzer.use__GT_require = function cljs$analyzer$use__GT_require(env, p__14419) {
  var vec__14423 = p__14419;
  var seq__14424 = cljs.core.seq.call(null, vec__14423);
  var first__14425 = cljs.core.first.call(null, seq__14424);
  var seq__14424__$1 = cljs.core.next.call(null, seq__14424);
  var lib = first__14425;
  var filters = seq__14424__$1;
  var spec = vec__14423;
  if (lib instanceof cljs.core.Symbol && cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, spec))) {
  } else {
    throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only [lib.ns :only (names)] and optionally `:rename {from to}` specs supported in :use / :use-macros"));
  }
  var fs = cljs.core.seq.call(null, filters);
  var ret = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [lib], null);
  var err = false;
  while (true) {
    if (err === true) {
      throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only [lib.ns :only (names)] and optionally `:rename {from to}` specs supported in :use / :use-macros"));
    } else {
      if (!(fs == null)) {
        var kw = cljs.core.first.call(null, fs);
        var only_QMARK_ = cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "only", "only", 1907811652));
        if (only_QMARK_ || cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "rename", "rename", 1508157613))) {
          if (!(cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([only_QMARK_ ? new cljs.core.Keyword(null, "refer", "refer", -964295553) : kw], true), ret) == null)) {
            throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Each of :only and :rename options may only be specified once in :use / :use-macros"));
          } else {
            var refs = cljs.core.second.call(null, fs);
            if (!(only_QMARK_ && cljs.core.sequential_QMARK_.call(null, refs) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, refs) || cljs.core._EQ_.call(null, kw, new cljs.core.Keyword(null, "rename", "rename", 1508157613)) && cljs.core.map_QMARK_.call(null, refs) && cljs.core.every_QMARK_.call(null, function(fs, ret, err, refs, kw, only_QMARK_, vec__14423, seq__14424, first__14425, seq__14424__$1, lib, filters, spec) {
              return function(p1__14418_SHARP_) {
                return cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, p1__14418_SHARP_);
              };
            }(fs, ret, err, refs, kw, only_QMARK_, vec__14423, seq__14424, first__14425, seq__14424__$1, lib, filters, spec), refs))) {
              var G__14426 = fs;
              var G__14427 = ret;
              var G__14428 = true;
              fs = G__14426;
              ret = G__14427;
              err = G__14428;
              continue;
            } else {
              var G__14429 = cljs.core.nnext.call(null, fs);
              var G__14430 = cljs.core.into.call(null, ret, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [only_QMARK_ ? new cljs.core.Keyword(null, "refer", "refer", -964295553) : kw, refs], null));
              var G__14431 = false;
              fs = G__14429;
              ret = G__14430;
              err = G__14431;
              continue;
            }
          }
        } else {
          var G__14432 = fs;
          var G__14433 = ret;
          var G__14434 = true;
          fs = G__14432;
          ret = G__14433;
          err = G__14434;
          continue;
        }
      } else {
        if (!(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "refer", "refer", -964295553), null], null), null), ret) == null)) {
          return ret;
        } else {
          var G__14435 = fs;
          var G__14436 = ret;
          var G__14437 = true;
          fs = G__14435;
          ret = G__14436;
          err = G__14437;
          continue;
        }
      }
    }
    break;
  }
};
cljs.analyzer.parse_require_spec = function cljs$analyzer$parse_require_spec(env, macros_QMARK_, deps, aliases, spec) {
  while (true) {
    if (spec instanceof cljs.core.Symbol) {
      var G__14468 = env;
      var G__14469 = macros_QMARK_;
      var G__14470 = deps;
      var G__14471 = aliases;
      var G__14472 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [spec], null);
      env = G__14468;
      macros_QMARK_ = G__14469;
      deps = G__14470;
      aliases = G__14471;
      spec = G__14472;
      continue;
    } else {
      cljs.analyzer.basic_validate_ns_spec.call(null, env, macros_QMARK_, spec);
      var vec__14453 = spec;
      var seq__14454 = cljs.core.seq.call(null, vec__14453);
      var first__14455 = cljs.core.first.call(null, seq__14454);
      var seq__14454__$1 = cljs.core.next.call(null, seq__14454);
      var lib = first__14455;
      var opts = seq__14454__$1;
      var vec__14456 = function() {
        var temp__4659__auto__ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "js-module-index", "js-module-index", 2072061931), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(lib)].join("")], null));
        if (temp__4659__auto__ == null) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [lib, null], null);
        } else {
          var js_module_name = temp__4659__auto__;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, js_module_name), lib], null);
        }
      }();
      var lib__$1 = cljs.core.nth.call(null, vec__14456, 0, null);
      var js_module_provides = cljs.core.nth.call(null, vec__14456, 1, null);
      var map__14459 = cljs.core.apply.call(null, cljs.core.hash_map, opts);
      var map__14459__$1 = (!(map__14459 == null) ? map__14459.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14459.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14459) : map__14459;
      var alias = cljs.core.get.call(null, map__14459__$1, new cljs.core.Keyword(null, "as", "as", 1148689641), lib__$1);
      var referred = cljs.core.get.call(null, map__14459__$1, new cljs.core.Keyword(null, "refer", "refer", -964295553));
      var renamed = cljs.core.get.call(null, map__14459__$1, new cljs.core.Keyword(null, "rename", "rename", 1508157613));
      var referred_without_renamed = cljs.core.seq.call(null, cljs.core.remove.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, renamed)), referred));
      var vec__14460 = cljs.core.truth_(macros_QMARK_) ? new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512)], null) : new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require", "require", 
      -468001333), new cljs.core.Keyword(null, "use", "use", -1846382424), new cljs.core.Keyword(null, "rename", "rename", 1508157613)], null);
      var rk = cljs.core.nth.call(null, vec__14460, 0, null);
      var uk = cljs.core.nth.call(null, vec__14460, 1, null);
      var renk = cljs.core.nth.call(null, vec__14460, 2, null);
      if (alias instanceof cljs.core.Symbol || alias == null) {
      } else {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, ":as must be followed by a symbol in :require / :require-macros"));
      }
      if (!(alias == null)) {
        var alias_type_14473 = cljs.core.truth_(macros_QMARK_) ? new cljs.core.Keyword(null, "macros", "macros", 811339431) : new cljs.core.Keyword(null, "fns", "fns", 1185138786);
        var lib_SINGLEQUOTE__14474 = alias_type_14473.call(null, cljs.core.deref.call(null, aliases)).call(null, alias);
        if (!(lib_SINGLEQUOTE__14474 == null) && cljs.core.not_EQ_.call(null, lib__$1, lib_SINGLEQUOTE__14474)) {
          throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, ":as alias must be unique"));
        } else {
        }
        cljs.core.swap_BANG_.call(null, aliases, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [alias_type_14473], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [alias, lib__$1], null), cljs.core.truth_(js_module_provides) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [js_module_provides, lib__$1], null) : null);
      } else {
      }
      if (cljs.core.sequential_QMARK_.call(null, referred) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, referred) || referred == null) {
      } else {
        throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, ":refer must be followed by a sequence of symbols in :require / :require-macros"));
      }
      if (cljs.core.truth_(macros_QMARK_)) {
      } else {
        cljs.core.swap_BANG_.call(null, deps, cljs.core.conj, lib__$1);
      }
      return cljs.core.merge.call(null, !(alias == null) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([rk, cljs.core.merge.call(null, cljs.core.PersistentArrayMap.createAsIfByAssoc([alias, lib__$1]), cljs.core.PersistentArrayMap.createAsIfByAssoc([lib__$1, lib__$1]), cljs.core.truth_(js_module_provides) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([js_module_provides, lib__$1]) : null)]) : null, !(referred_without_renamed == null) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([uk, cljs.core.apply.call(null, 
      cljs.core.hash_map, cljs.core.interleave.call(null, referred_without_renamed, cljs.core.repeat.call(null, lib__$1)))]) : null, !(renamed == null) ? cljs.core.PersistentArrayMap.createAsIfByAssoc([renk, cljs.core.reduce.call(null, function(env, macros_QMARK_, deps, aliases, spec, vec__14453, seq__14454, first__14455, seq__14454__$1, lib, opts, vec__14456, lib__$1, js_module_provides, map__14459, map__14459__$1, alias, referred, renamed, referred_without_renamed, vec__14460, rk, uk, renk) {
        return function(m, p__14464) {
          var vec__14465 = p__14464;
          var original = cljs.core.nth.call(null, vec__14465, 0, null);
          var renamed__$1 = cljs.core.nth.call(null, vec__14465, 1, null);
          if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([original], true), referred))) {
          } else {
            throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Renamed symbol "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(original), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" not referred")].join(""));
          }
          return cljs.core.assoc.call(null, m, renamed__$1, cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(lib__$1)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(original)].join("")));
        };
      }(env, macros_QMARK_, deps, aliases, spec, vec__14453, seq__14454, first__14455, seq__14454__$1, lib, opts, vec__14456, lib__$1, js_module_provides, map__14459, map__14459__$1, alias, referred, renamed, referred_without_renamed, vec__14460, rk, uk, renk), cljs.core.PersistentArrayMap.EMPTY, renamed)]) : null);
    }
    break;
  }
};
cljs.analyzer.parse_import_spec = function cljs$analyzer$parse_import_spec(env, deps, spec) {
  if (cljs.core.sequential_QMARK_.call(null, spec) && cljs.core.every_QMARK_.call(null, cljs.core.symbol_QMARK_, spec) || spec instanceof cljs.core.Symbol && cljs.core.namespace.call(null, spec) == null) {
  } else {
    throw cljs.analyzer.error.call(null, env, cljs.analyzer.parse_ns_error_msg.call(null, spec, "Only lib.ns.Ctor or [lib.ns Ctor*] spec supported in :import"));
  }
  var import_map = cljs.core.sequential_QMARK_.call(null, spec) ? cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p1__14475_SHARP_) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__14475_SHARP_, cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, spec)), cljs.core.str.cljs$core$IFn$_invoke$arity$1("."), cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__14475_SHARP_)].join(""))], null);
  }, cljs.core.rest.call(null, spec))) : cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.symbol.call(null, cljs.core.last.call(null, clojure.string.split.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(spec)].join(""), /\./))), spec]);
  var seq__14486_14496 = cljs.core.seq.call(null, import_map);
  var chunk__14487_14497 = null;
  var count__14488_14498 = 0;
  var i__14489_14499 = 0;
  while (true) {
    if (i__14489_14499 < count__14488_14498) {
      var vec__14490_14500 = cljs.core._nth.call(null, chunk__14487_14497, i__14489_14499);
      var __14501 = cljs.core.nth.call(null, vec__14490_14500, 0, null);
      var spec_14502__$1 = cljs.core.nth.call(null, vec__14490_14500, 1, null);
      cljs.core.swap_BANG_.call(null, deps, cljs.core.conj, spec_14502__$1);
      var G__14503 = seq__14486_14496;
      var G__14504 = chunk__14487_14497;
      var G__14505 = count__14488_14498;
      var G__14506 = i__14489_14499 + 1;
      seq__14486_14496 = G__14503;
      chunk__14487_14497 = G__14504;
      count__14488_14498 = G__14505;
      i__14489_14499 = G__14506;
      continue;
    } else {
      var temp__4657__auto___14507 = cljs.core.seq.call(null, seq__14486_14496);
      if (temp__4657__auto___14507) {
        var seq__14486_14508__$1 = temp__4657__auto___14507;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14486_14508__$1)) {
          var c__8229__auto___14509 = cljs.core.chunk_first.call(null, seq__14486_14508__$1);
          var G__14510 = cljs.core.chunk_rest.call(null, seq__14486_14508__$1);
          var G__14511 = c__8229__auto___14509;
          var G__14512 = cljs.core.count.call(null, c__8229__auto___14509);
          var G__14513 = 0;
          seq__14486_14496 = G__14510;
          chunk__14487_14497 = G__14511;
          count__14488_14498 = G__14512;
          i__14489_14499 = G__14513;
          continue;
        } else {
          var vec__14493_14514 = cljs.core.first.call(null, seq__14486_14508__$1);
          var __14515 = cljs.core.nth.call(null, vec__14493_14514, 0, null);
          var spec_14516__$1 = cljs.core.nth.call(null, vec__14493_14514, 1, null);
          cljs.core.swap_BANG_.call(null, deps, cljs.core.conj, spec_14516__$1);
          var G__14517 = cljs.core.next.call(null, seq__14486_14508__$1);
          var G__14518 = null;
          var G__14519 = 0;
          var G__14520 = 0;
          seq__14486_14496 = G__14517;
          chunk__14487_14497 = G__14518;
          count__14488_14498 = G__14519;
          i__14489_14499 = G__14520;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "import", "import", -1399500709), import_map, new cljs.core.Keyword(null, "require", "require", -468001333), import_map], null);
};
cljs.analyzer.macro_autoload_ns_QMARK_ = function cljs$analyzer$macro_autoload_ns_QMARK_(form) {
  if (cljs.analyzer._STAR_macro_infer_STAR_) {
    var ns = cljs.core.sequential_QMARK_.call(null, form) ? cljs.core.first.call(null, form) : form;
    var map__14523 = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns], null));
    var map__14523__$1 = (!(map__14523 == null) ? map__14523.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14523.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14523) : map__14523;
    var use_macros = cljs.core.get.call(null, map__14523__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
    var require_macros = cljs.core.get.call(null, map__14523__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
    var or__7410__auto__ = cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([ns], true), cljs.core.vals.call(null, use_macros));
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([ns], true), cljs.core.vals.call(null, require_macros));
    }
  } else {
    return null;
  }
};
cljs.analyzer.clj_ns__GT_cljs_ns = function cljs$analyzer$clj_ns__GT_cljs_ns(sym) {
  var segs = clojure.string.split.call(null, cljs.core.name.call(null, sym), /\./);
  if (cljs.core._EQ_.call(null, "clojure", cljs.core.first.call(null, segs))) {
    return cljs.core.symbol.call(null, clojure.string.join.call(null, ".", cljs.core.cons.call(null, "cljs", cljs.core.next.call(null, segs))));
  } else {
    return sym;
  }
};
cljs.analyzer.canonicalize_specs = function cljs$analyzer$canonicalize_specs(specs) {
  var canonicalize = function cljs$analyzer$canonicalize_specs_$_canonicalize(quoted_spec_or_kw) {
    if (quoted_spec_or_kw instanceof cljs.core.Keyword) {
      return quoted_spec_or_kw;
    } else {
      var spec = cljs.core.second.call(null, quoted_spec_or_kw);
      if (cljs.core.vector_QMARK_.call(null, spec)) {
        return spec;
      } else {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [spec], null);
      }
    }
  };
  return cljs.core.map.call(null, canonicalize, specs);
};
cljs.analyzer.canonicalize_import_specs = function cljs$analyzer$canonicalize_import_specs(specs) {
  var canonicalize = function cljs$analyzer$canonicalize_import_specs_$_canonicalize(quoted_spec_or_kw) {
    if (quoted_spec_or_kw instanceof cljs.core.Keyword) {
      return quoted_spec_or_kw;
    } else {
      return cljs.core.second.call(null, quoted_spec_or_kw);
    }
  };
  return cljs.core.map.call(null, canonicalize, specs);
};
cljs.analyzer.desugar_ns_specs = function cljs$analyzer$desugar_ns_specs(args) {
  var map__14538 = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__14539) {
    var vec__14540 = p__14539;
    var seq__14541 = cljs.core.seq.call(null, vec__14540);
    var first__14542 = cljs.core.first.call(null, seq__14541);
    var seq__14541__$1 = cljs.core.next.call(null, seq__14541);
    var k = first__14542;
    var specs = seq__14541__$1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, specs)], null);
  }, args));
  var map__14538__$1 = (!(map__14538 == null) ? map__14538.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14538.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14538) : map__14538;
  var indexed = map__14538__$1;
  var require = cljs.core.get.call(null, map__14538__$1, new cljs.core.Keyword(null, "require", "require", -468001333));
  var sugar_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "include-macros", "include-macros", 1228110289), null, new cljs.core.Keyword(null, "refer-macros", "refer-macros", -1906841953), null], null), null);
  var remove_from_spec = function(map__14538, map__14538__$1, indexed, require, sugar_keys) {
    return function(pred, spec) {
      while (true) {
        if (cljs.core.not.call(null, function() {
          var and__7398__auto__ = cljs.core.sequential_QMARK_.call(null, spec);
          if (and__7398__auto__) {
            return cljs.core.some.call(null, pred, spec);
          } else {
            return and__7398__auto__;
          }
        }())) {
          return spec;
        } else {
          var vec__14544 = cljs.core.split_with.call(null, cljs.core.complement.call(null, pred), spec);
          var l = cljs.core.nth.call(null, vec__14544, 0, null);
          var r = cljs.core.nth.call(null, vec__14544, 1, null);
          var G__14550 = pred;
          var G__14551 = cljs.core.concat.call(null, l, cljs.core.drop.call(null, 2, r));
          pred = G__14550;
          spec = G__14551;
          continue;
        }
        break;
      }
    };
  }(map__14538, map__14538__$1, indexed, require, sugar_keys);
  var replace_refer_macros = function(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec) {
    return function(spec) {
      if (!cljs.core.sequential_QMARK_.call(null, spec)) {
        return spec;
      } else {
        return cljs.core.map.call(null, function(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec) {
          return function(x) {
            if (cljs.core._EQ_.call(null, x, new cljs.core.Keyword(null, "refer-macros", "refer-macros", -1906841953))) {
              return new cljs.core.Keyword(null, "refer", "refer", -964295553);
            } else {
              return x;
            }
          };
        }(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec), spec);
      }
    };
  }(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec);
  var reload_spec_QMARK_ = function(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros) {
    return function(p1__14525_SHARP_) {
      return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null)).call(null, p1__14525_SHARP_);
    };
  }(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros);
  var to_macro_specs = function(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_) {
    return function(specs) {
      return cljs.core.map.call(null, function(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_) {
        return function(x) {
          if (cljs.core.not.call(null, reload_spec_QMARK_.call(null, x))) {
            return replace_refer_macros.call(null, remove_from_spec.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "rename", "rename", 1508157613), null], null), null), remove_from_spec.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "refer", "refer", -964295553), null], null), null), remove_from_spec.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 
            1, [new cljs.core.Keyword(null, "include-macros", "include-macros", 1228110289), null], null), null), x))));
          } else {
            return x;
          }
        };
      }(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_), cljs.core.filter.call(null, function(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_) {
        return function(x) {
          var or__7410__auto__ = function() {
            var and__7398__auto__ = cljs.core.sequential_QMARK_.call(null, x);
            if (and__7398__auto__) {
              return cljs.core.some.call(null, sugar_keys, x);
            } else {
              return and__7398__auto__;
            }
          }();
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            var or__7410__auto____$1 = reload_spec_QMARK_.call(null, x);
            if (cljs.core.truth_(or__7410__auto____$1)) {
              return or__7410__auto____$1;
            } else {
              return cljs.analyzer.macro_autoload_ns_QMARK_.call(null, x);
            }
          }
        };
      }(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_), specs));
    };
  }(map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_);
  var remove_sugar = cljs.core.partial.call(null, remove_from_spec, sugar_keys);
  var temp__4659__auto__ = cljs.core.seq.call(null, to_macro_specs.call(null, require));
  if (temp__4659__auto__ == null) {
    return args;
  } else {
    var require_specs = temp__4659__auto__;
    return cljs.core.map.call(null, function(require_specs, temp__4659__auto__, map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_, to_macro_specs, remove_sugar) {
      return function(x) {
        if (cljs.core.not.call(null, reload_spec_QMARK_.call(null, x))) {
          var vec__14547 = x;
          var k = cljs.core.nth.call(null, vec__14547, 0, null);
          var v = cljs.core.nth.call(null, vec__14547, 1, null);
          return cljs.core.cons.call(null, k, cljs.core.map.call(null, remove_sugar, v));
        } else {
          return x;
        }
      };
    }(require_specs, temp__4659__auto__, map__14538, map__14538__$1, indexed, require, sugar_keys, remove_from_spec, replace_refer_macros, reload_spec_QMARK_, to_macro_specs, remove_sugar), cljs.core.update_in.call(null, indexed, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)], null), cljs.core.fnil.call(null, cljs.core.into, cljs.core.PersistentVector.EMPTY), require_specs));
  }
};
cljs.analyzer.find_def_clash = function cljs$analyzer$find_def_clash(env, ns, segments) {
  var to_check = cljs.core.map.call(null, function(xs) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.symbol.call(null, clojure.string.join.call(null, ".", cljs.core.butlast.call(null, xs))), cljs.core.symbol.call(null, cljs.core.last.call(null, xs))], null);
  }, cljs.core.drop.call(null, 2, cljs.core.reductions.call(null, cljs.core.conj, cljs.core.PersistentVector.EMPTY, segments)));
  var seq__14562 = cljs.core.seq.call(null, to_check);
  var chunk__14563 = null;
  var count__14564 = 0;
  var i__14565 = 0;
  while (true) {
    if (i__14565 < count__14564) {
      var vec__14566 = cljs.core._nth.call(null, chunk__14563, i__14565);
      var clash_ns = cljs.core.nth.call(null, vec__14566, 0, null);
      var name = cljs.core.nth.call(null, vec__14566, 1, null);
      if (cljs.core.truth_(cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), clash_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), name], null)))) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clash_ns)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""))], null));
      } else {
      }
      var G__14572 = seq__14562;
      var G__14573 = chunk__14563;
      var G__14574 = count__14564;
      var G__14575 = i__14565 + 1;
      seq__14562 = G__14572;
      chunk__14563 = G__14573;
      count__14564 = G__14574;
      i__14565 = G__14575;
      continue;
    } else {
      var temp__4657__auto__ = cljs.core.seq.call(null, seq__14562);
      if (temp__4657__auto__) {
        var seq__14562__$1 = temp__4657__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__14562__$1)) {
          var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__14562__$1);
          var G__14576 = cljs.core.chunk_rest.call(null, seq__14562__$1);
          var G__14577 = c__8229__auto__;
          var G__14578 = cljs.core.count.call(null, c__8229__auto__);
          var G__14579 = 0;
          seq__14562 = G__14576;
          chunk__14563 = G__14577;
          count__14564 = G__14578;
          i__14565 = G__14579;
          continue;
        } else {
          var vec__14569 = cljs.core.first.call(null, seq__14562__$1);
          var clash_ns = cljs.core.nth.call(null, vec__14569, 0, null);
          var name = cljs.core.nth.call(null, vec__14569, 1, null);
          if (cljs.core.truth_(cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), clash_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), name], null)))) {
            cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "ns-var-clash", "ns-var-clash", -280494668), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ns", "ns", 441598760), ns, new cljs.core.Keyword(null, "var", "var", -769682797), cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(clash_ns)].join(""), [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(""))], null));
          } else {
          }
          var G__14580 = cljs.core.next.call(null, seq__14562__$1);
          var G__14581 = null;
          var G__14582 = 0;
          var G__14583 = 0;
          seq__14562 = G__14580;
          chunk__14563 = G__14581;
          count__14564 = G__14582;
          i__14565 = G__14583;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.analyzer.macro_ns_name = function cljs$analyzer$macro_ns_name(name) {
  var name_str = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("");
  if (cljs.core.not.call(null, goog.string.endsWith(name_str, "$macros"))) {
    return cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_str), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$macros")].join(""));
  } else {
    return name;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), function(_, env, p__14586, ___$1, opts) {
  var vec__14587 = p__14586;
  var seq__14588 = cljs.core.seq.call(null, vec__14587);
  var first__14589 = cljs.core.first.call(null, seq__14588);
  var seq__14588__$1 = cljs.core.next.call(null, seq__14588);
  var ___$2 = first__14589;
  var first__14589__$1 = cljs.core.first.call(null, seq__14588__$1);
  var seq__14588__$2 = cljs.core.next.call(null, seq__14588__$1);
  var name = first__14589__$1;
  var args = seq__14588__$2;
  var form = vec__14587;
  if (cljs.analyzer._STAR_allow_ns_STAR_) {
  } else {
    throw cljs.analyzer.error.call(null, env, "Namespace declarations must appear at the top-level.");
  }
  if (name instanceof cljs.core.Symbol) {
  } else {
    throw cljs.analyzer.error.call(null, env, "Namespaces must be named by a symbol.");
  }
  var name__$1 = function() {
    var G__14590 = name;
    if (cljs.core.truth_((new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)).cljs$core$IFn$_invoke$arity$1(opts))) {
      return cljs.analyzer.macro_ns_name.call(null, G__14590);
    } else {
      return G__14590;
    }
  }();
  var segments_14616 = clojure.string.split.call(null, cljs.core.name.call(null, name__$1), /\./);
  if (cljs.core._EQ_.call(null, 1, cljs.core.count.call(null, segments_14616))) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "single-segment-namespace", "single-segment-namespace", -491924469), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name__$1], null));
  } else {
  }
  if (!(cljs.core.some.call(null, cljs.analyzer.js_reserved, segments_14616) == null)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "munged-namespace", "munged-namespace", -101986199), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "name", "name", 1843675177), name__$1], null));
  } else {
  }
  cljs.analyzer.find_def_clash.call(null, env, name__$1, segments_14616);
  var docstring = typeof cljs.core.first.call(null, args) === "string" ? cljs.core.first.call(null, args) : null;
  var mdocstr = (new cljs.core.Keyword(null, "doc", "doc", 1913296891)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name__$1));
  var args__$1 = !(docstring == null) ? cljs.core.next.call(null, args) : args;
  var metadata = cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, args__$1)) ? cljs.core.first.call(null, args__$1) : null;
  var form_meta = cljs.core.meta.call(null, form);
  var args__$2 = cljs.analyzer.desugar_ns_specs.call(null, !(metadata == null) ? cljs.core.next.call(null, args__$1) : args__$1);
  var name__$2 = cljs.core.vary_meta.call(null, name__$1, cljs.core.merge, metadata);
  var map__14591 = cljs.analyzer.parse_ns_excludes.call(null, env, args__$2);
  var map__14591__$1 = (!(map__14591 == null) ? map__14591.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14591.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14591) : map__14591;
  var excludes = cljs.core.get.call(null, map__14591__$1, new cljs.core.Keyword(null, "excludes", "excludes", -1791725945));
  var core_renames = cljs.core.get.call(null, map__14591__$1, new cljs.core.Keyword(null, "renames", "renames", 343278368));
  var core_renames__$1 = cljs.core.reduce.call(null, function(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
    return function(m, p__14597) {
      var vec__14598 = p__14597;
      var original = cljs.core.nth.call(null, vec__14598, 0, null);
      var renamed = cljs.core.nth.call(null, vec__14598, 1, null);
      return cljs.core.assoc.call(null, m, renamed, cljs.core.symbol.call(null, "cljs.core", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(original)].join("")));
    };
  }(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), cljs.core.PersistentArrayMap.EMPTY, core_renames);
  var deps = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  var aliases = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fns", "fns", 1185138786), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "macros", "macros", 811339431), cljs.core.PersistentArrayMap.EMPTY], null));
  var spec_parsers = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "require", "require", -468001333), cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, false, deps, aliases), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, true, deps, aliases), new cljs.core.Keyword(null, "use", "use", -1846382424), cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, 
  env, false, deps, aliases), cljs.core.partial.call(null, cljs.analyzer.use__GT_require, env)), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, true, deps, aliases), cljs.core.partial.call(null, cljs.analyzer.use__GT_require, env)), new cljs.core.Keyword(null, "import", "import", -1399500709), cljs.core.partial.call(null, cljs.analyzer.parse_import_spec, env, deps)], null);
  var valid_forms = cljs.core.atom.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null, new cljs.core.Keyword(null, "import", "import", -1399500709), null], null), null));
  var reload = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null], null));
  var reloads = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var map__14592 = cljs.core.reduce.call(null, function(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
    return function(m, p__14601) {
      var vec__14602 = p__14601;
      var seq__14603 = cljs.core.seq.call(null, vec__14602);
      var first__14604 = cljs.core.first.call(null, seq__14603);
      var seq__14603__$1 = cljs.core.next.call(null, seq__14603);
      var k = first__14604;
      var libs = seq__14603__$1;
      var libspec = vec__14602;
      if (cljs.core.truth_((new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null, new cljs.core.Keyword(null, "import", "import", -1399500709), null], null), null)).call(null, k))) {
      } else {
        throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Only :refer-clojure, :require, :require-macros, :use, :use-macros, and :import libspecs supported. Got "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(libspec), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" instead.")].join(""));
      }
      if (cljs.core.truth_(cljs.core.deref.call(null, valid_forms).call(null, k))) {
      } else {
        throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Only one "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(k), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" form is allowed per namespace definition")].join(""));
      }
      cljs.core.swap_BANG_.call(null, valid_forms, cljs.core.disj, k);
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "import", "import", -1399500709), k)) {
      } else {
        if (!(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null], null), null), libs) == null)) {
          cljs.core.swap_BANG_.call(null, reload, cljs.core.assoc, k, new cljs.core.Keyword(null, "reload", "reload", 863702807));
        } else {
        }
        if (!(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null), libs) == null)) {
          cljs.core.swap_BANG_.call(null, reload, cljs.core.assoc, k, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200));
        } else {
        }
      }
      var temp__4657__auto___14617 = cljs.core.seq.call(null, cljs.core.filter.call(null, function(vec__14602, seq__14603, first__14604, seq__14603__$1, k, libs, libspec, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
        return function(p1__14584_SHARP_) {
          return (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__14584_SHARP_));
        };
      }(vec__14602, seq__14603, first__14604, seq__14603__$1, k, libs, libspec, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), libs));
      if (temp__4657__auto___14617) {
        var xs_14618 = temp__4657__auto___14617;
        cljs.core.swap_BANG_.call(null, reloads, cljs.core.assoc, k, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs.core.first, xs_14618), cljs.core.map.call(null, function(xs_14618, temp__4657__auto___14617, vec__14602, seq__14603, first__14604, seq__14603__$1, k, libs, libspec, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, 
        vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
          return function(p1__14585_SHARP_) {
            return (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__14585_SHARP_));
          };
        }(xs_14618, temp__4657__auto___14617, vec__14602, seq__14603, first__14604, seq__14603__$1, k, libs, libspec, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), xs_14618)));
      } else {
      }
      return cljs.core.apply.call(null, cljs.core.merge_with, cljs.core.merge, m, cljs.core.map.call(null, spec_parsers.call(null, k), cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null), libs)));
    };
  }(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), cljs.core.PersistentArrayMap.EMPTY, cljs.core.remove.call(null, function(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, 
  core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
    return function(p__14605) {
      var vec__14606 = p__14605;
      var r = cljs.core.nth.call(null, vec__14606, 0, null);
      return cljs.core._EQ_.call(null, r, new cljs.core.Keyword(null, "refer-clojure", "refer-clojure", 813784440));
    };
  }(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), args__$2));
  var map__14592__$1 = (!(map__14592 == null) ? map__14592.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14592.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14592) : map__14592;
  var params = map__14592__$1;
  var uses = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "use", "use", -1846382424));
  var requires = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "require", "require", -468001333));
  var renames = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "rename", "rename", 1508157613));
  var use_macros = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
  var require_macros = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
  var rename_macros = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512));
  var imports = cljs.core.get.call(null, map__14592__$1, new cljs.core.Keyword(null, "import", "import", -1399500709));
  var vec__14593 = cljs.core.map.call(null, function(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
    return function(spec_map) {
      if (cljs.core.truth_((new cljs.core.Keyword(null, "macros-ns", "macros-ns", 1626844933)).cljs$core$IFn$_invoke$arity$1(opts))) {
        var ns = cljs.core.symbol.call(null, cljs.core.subs.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$2)].join(""), 0, cljs.core.count.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$2)].join("")) - 7));
        return cljs.core.reduce.call(null, function(ns, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
          return function(m, p__14610) {
            var vec__14611 = p__14610;
            var k = cljs.core.nth.call(null, vec__14611, 0, null);
            var v = cljs.core.nth.call(null, vec__14611, 1, null);
            var G__14614 = m;
            if (!cljs.core.symbol_identical_QMARK_.call(null, v, ns)) {
              return cljs.core.assoc.call(null, G__14614, k, v);
            } else {
              return G__14614;
            }
          };
        }(ns, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), cljs.core.PersistentArrayMap.EMPTY, spec_map);
      } else {
        return spec_map;
      }
    };
  }(docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [require_macros, use_macros], null));
  var require_macros__$1 = cljs.core.nth.call(null, vec__14593, 0, null);
  var use_macros__$1 = cljs.core.nth.call(null, vec__14593, 1, null);
  cljs.analyzer._STAR_cljs_ns_STAR_ = name__$2;
  var ns_info = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), new cljs.core.Keyword(null, "renames", "renames", 343278368), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "imports", "imports", -1249933394), new cljs.core.Keyword(null, "requires", "requires", 
  -1201390927), new cljs.core.Keyword(null, "uses", "uses", 232664692), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), new cljs.core.Keyword(null, "doc", "doc", 1913296891)], [rename_macros, cljs.core.merge.call(null, renames, core_renames__$1), use_macros__$1, excludes, name__$2, imports, requires, uses, require_macros__$1, function() {
    var or__7410__auto__ = docstring;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return mdocstr;
    }
  }()]);
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name__$2], null), cljs.core.merge, ns_info);
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "deps", "deps", 1883360319), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.distinct.call(null, cljs.core.deref.call(null, deps))), new cljs.core.Keyword(null, 
  "reload", "reload", 863702807), cljs.core.deref.call(null, reload), new cljs.core.Keyword(null, "reloads", "reloads", 610698522), cljs.core.deref.call(null, reloads)], null), function() {
    var G__14615 = ns_info;
    var G__14615__$1 = cljs.core.truth_(cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "use", "use", -1846382424))) ? cljs.core.update_in.call(null, G__14615, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "uses", "uses", 232664692)], null), function(G__14615, ns_info, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, 
    deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, vec__14593, require_macros__$1, use_macros__$1, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
      return function(m) {
        return cljs.core.with_meta.call(null, m, cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "use", "use", -1846382424)), true]));
      };
    }(G__14615, ns_info, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, vec__14593, require_macros__$1, use_macros__$1, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, 
    form)) : G__14615;
    if (cljs.core.truth_(cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "require", "require", -468001333)))) {
      return cljs.core.update_in.call(null, G__14615__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "requires", "requires", -1201390927)], null), function(G__14615, G__14615__$1, ns_info, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, 
      renames, use_macros, require_macros, rename_macros, imports, vec__14593, require_macros__$1, use_macros__$1, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, name, args, form) {
        return function(m) {
          return cljs.core.with_meta.call(null, m, cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "require", "require", -468001333)), true]));
        };
      }(G__14615, G__14615__$1, ns_info, docstring, mdocstr, args__$1, metadata, form_meta, args__$2, name__$2, map__14591, map__14591__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, valid_forms, reload, reloads, map__14592, map__14592__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, vec__14593, require_macros__$1, use_macros__$1, name__$1, vec__14587, seq__14588, first__14589, seq__14588__$1, ___$2, first__14589__$1, seq__14588__$2, 
      name, args, form));
    } else {
      return G__14615__$1;
    }
  }());
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "ns*", "ns*", 1840949383, null), function(_, env, p__14622, ___$1, opts) {
  var vec__14623 = p__14622;
  var ___$2 = cljs.core.nth.call(null, vec__14623, 0, null);
  var quoted_specs = cljs.core.nth.call(null, vec__14623, 1, null);
  var form = vec__14623;
  var temp__4657__auto___14643 = cljs.core.first.call(null, cljs.core.remove.call(null, function(vec__14623, ___$2, quoted_specs, form) {
    return function(p1__14619_SHARP_) {
      return cljs.core.seq_QMARK_.call(null, p1__14619_SHARP_) && cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), cljs.core.first.call(null, p1__14619_SHARP_));
    };
  }(vec__14623, ___$2, quoted_specs, form), cljs.core.remove.call(null, cljs.core.keyword_QMARK_, quoted_specs)));
  if (cljs.core.truth_(temp__4657__auto___14643)) {
    var not_quoted_14644 = temp__4657__auto___14643;
    throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Arguments to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, cljs.core.first.call(null, quoted_specs))), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" must be quoted. Offending spec: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(not_quoted_14644)].join(""));
  } else {
  }
  if (cljs.analyzer._STAR_allow_ns_STAR_) {
  } else {
    throw cljs.analyzer.error.call(null, env, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Calls to `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.name.call(null, cljs.core.first.call(null, quoted_specs))), cljs.core.str.cljs$core$IFn$_invoke$arity$1("` must appear at the top-level.")].join(""));
  }
  var specs = cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "import", "import", -1399500709), cljs.core.first.call(null, quoted_specs)) ? cljs.analyzer.canonicalize_import_specs.call(null, quoted_specs) : cljs.analyzer.canonicalize_specs.call(null, quoted_specs);
  var name = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
  var args = cljs.analyzer.desugar_ns_specs.call(null, function() {
    var x__8252__auto__ = specs;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }());
  var map__14626 = cljs.analyzer.parse_ns_excludes.call(null, env, args);
  var map__14626__$1 = (!(map__14626 == null) ? map__14626.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14626.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14626) : map__14626;
  var excludes = cljs.core.get.call(null, map__14626__$1, new cljs.core.Keyword(null, "excludes", "excludes", -1791725945));
  var core_renames = cljs.core.get.call(null, map__14626__$1, new cljs.core.Keyword(null, "renames", "renames", 343278368));
  var core_renames__$1 = cljs.core.reduce.call(null, function(specs, name, args, map__14626, map__14626__$1, excludes, core_renames, vec__14623, ___$2, quoted_specs, form) {
    return function(m, p__14629) {
      var vec__14630 = p__14629;
      var original = cljs.core.nth.call(null, vec__14630, 0, null);
      var renamed = cljs.core.nth.call(null, vec__14630, 1, null);
      return cljs.core.assoc.call(null, m, renamed, cljs.core.symbol.call(null, "cljs.core", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(original)].join("")));
    };
  }(specs, name, args, map__14626, map__14626__$1, excludes, core_renames, vec__14623, ___$2, quoted_specs, form), cljs.core.PersistentArrayMap.EMPTY, core_renames);
  var deps = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
  var aliases = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fns", "fns", 1185138786), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "macros", "macros", 811339431), cljs.core.PersistentArrayMap.EMPTY], null));
  var spec_parsers = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "require", "require", -468001333), cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, false, deps, aliases), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, true, deps, aliases), new cljs.core.Keyword(null, "use", "use", -1846382424), cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, 
  env, false, deps, aliases), cljs.core.partial.call(null, cljs.analyzer.use__GT_require, env)), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), cljs.core.comp.call(null, cljs.core.partial.call(null, cljs.analyzer.parse_require_spec, env, true, deps, aliases), cljs.core.partial.call(null, cljs.analyzer.use__GT_require, env)), new cljs.core.Keyword(null, "import", "import", -1399500709), cljs.core.partial.call(null, cljs.analyzer.parse_import_spec, env, deps)], null);
  var reload = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "use", "use", -1846382424), null, new cljs.core.Keyword(null, "require", "require", -468001333), null, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), null, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), null], null));
  var reloads = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var map__14627 = cljs.core.reduce.call(null, function(specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form) {
    return function(m, p__14633) {
      var vec__14634 = p__14633;
      var seq__14635 = cljs.core.seq.call(null, vec__14634);
      var first__14636 = cljs.core.first.call(null, seq__14635);
      var seq__14635__$1 = cljs.core.next.call(null, seq__14635);
      var k = first__14636;
      var libs = seq__14635__$1;
      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "import", "import", -1399500709), k)) {
      } else {
        if (!(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null], null), null), libs) == null)) {
          cljs.core.swap_BANG_.call(null, reload, cljs.core.assoc, k, new cljs.core.Keyword(null, "reload", "reload", 863702807));
        } else {
        }
        if (!(cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null), libs) == null)) {
          cljs.core.swap_BANG_.call(null, reload, cljs.core.assoc, k, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200));
        } else {
        }
      }
      var temp__4661__auto___14645 = cljs.core.seq.call(null, cljs.core.filter.call(null, function(vec__14634, seq__14635, first__14636, seq__14635__$1, k, libs, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form) {
        return function(p1__14620_SHARP_) {
          return (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__14620_SHARP_));
        };
      }(vec__14634, seq__14635, first__14636, seq__14635__$1, k, libs, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form), libs));
      if (temp__4661__auto___14645 == null) {
      } else {
        var xs_14646 = temp__4661__auto___14645;
        cljs.core.swap_BANG_.call(null, reloads, cljs.core.assoc, k, cljs.core.zipmap.call(null, cljs.core.map.call(null, cljs.core.first, xs_14646), cljs.core.map.call(null, function(xs_14646, temp__4661__auto___14645, vec__14634, seq__14635, first__14636, seq__14635__$1, k, libs, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form) {
          return function(p1__14621_SHARP_) {
            return (new cljs.core.Keyword(null, "reload", "reload", 863702807)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, p1__14621_SHARP_));
          };
        }(xs_14646, temp__4661__auto___14645, vec__14634, seq__14635, first__14636, seq__14635__$1, k, libs, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form), xs_14646)));
      }
      return cljs.core.apply.call(null, cljs.core.merge_with, cljs.core.merge, m, cljs.core.map.call(null, spec_parsers.call(null, k), cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reload", "reload", 863702807), null, new cljs.core.Keyword(null, "reload-all", "reload-all", 761570200), null], null), null), libs)));
    };
  }(specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form), cljs.core.PersistentArrayMap.EMPTY, cljs.core.remove.call(null, function(specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form) {
    return function(p__14637) {
      var vec__14638 = p__14637;
      var r = cljs.core.nth.call(null, vec__14638, 0, null);
      return cljs.core._EQ_.call(null, r, new cljs.core.Keyword(null, "refer-clojure", "refer-clojure", 813784440));
    };
  }(specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, vec__14623, ___$2, quoted_specs, form), args));
  var map__14627__$1 = (!(map__14627 == null) ? map__14627.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14627.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14627) : map__14627;
  var params = map__14627__$1;
  var uses = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "use", "use", -1846382424));
  var requires = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "require", "require", -468001333));
  var renames = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "rename", "rename", 1508157613));
  var use_macros = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393));
  var require_macros = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416));
  var rename_macros = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512));
  var imports = cljs.core.get.call(null, map__14627__$1, new cljs.core.Keyword(null, "import", "import", -1399500709));
  cljs.analyzer._STAR_cljs_ns_STAR_ = name;
  var require_info = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), new cljs.core.Keyword(null, "renames", "renames", 343278368), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "imports", "imports", -1249933394), new cljs.core.Keyword(null, "requires", "requires", 
  -1201390927), new cljs.core.Keyword(null, "uses", "uses", 232664692), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)], [rename_macros, cljs.core.merge.call(null, renames, core_renames__$1), use_macros, excludes, name, imports, requires, uses, require_macros]);
  var ns_info = function() {
    var ns_info_SINGLEQUOTE_ = cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name], null));
    if (cljs.core.count.call(null, ns_info_SINGLEQUOTE_) > 0) {
      var merge_keys = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416), new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), new cljs.core.Keyword(null, "uses", "uses", 232664692), new cljs.core.Keyword(null, "requires", "requires", -1201390927), new cljs.core.Keyword(null, "renames", "renames", 343278368), 
      new cljs.core.Keyword(null, "imports", "imports", -1249933394)], null);
      return cljs.core.merge.call(null, ns_info_SINGLEQUOTE_, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), excludes], null), cljs.core.merge_with.call(null, cljs.core.merge, cljs.core.select_keys.call(null, ns_info_SINGLEQUOTE_, merge_keys), cljs.core.select_keys.call(null, require_info, merge_keys)));
    } else {
      return require_info;
    }
  }();
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), name], null), cljs.core.merge, ns_info);
  return cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "ns*", "ns*", 200417856), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "deps", "deps", 1883360319), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.distinct.call(null, cljs.core.deref.call(null, deps))), new cljs.core.Keyword(null, 
  "reload", "reload", 863702807), cljs.core.deref.call(null, reload), new cljs.core.Keyword(null, "reloads", "reloads", 610698522), cljs.core.deref.call(null, reloads)], null), function() {
    var G__14642 = require_info;
    var G__14642__$1 = cljs.core.truth_(cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "use", "use", -1846382424))) ? cljs.core.update_in.call(null, G__14642, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "uses", "uses", 232664692)], null), function(G__14642, require_info, ns_info, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, 
    reloads, map__14627, map__14627__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, vec__14623, ___$2, quoted_specs, form) {
      return function(m) {
        return cljs.core.with_meta.call(null, m, cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "use", "use", -1846382424)), true]));
      };
    }(G__14642, require_info, ns_info, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, map__14627, map__14627__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, vec__14623, ___$2, quoted_specs, form)) : G__14642;
    if (cljs.core.truth_(cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "require", "require", -468001333)))) {
      return cljs.core.update_in.call(null, G__14642__$1, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "requires", "requires", -1201390927)], null), function(G__14642, G__14642__$1, require_info, ns_info, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, map__14627, map__14627__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, 
      imports, vec__14623, ___$2, quoted_specs, form) {
        return function(m) {
          return cljs.core.with_meta.call(null, m, cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.deref.call(null, reload).call(null, new cljs.core.Keyword(null, "require", "require", -468001333)), true]));
        };
      }(G__14642, G__14642__$1, require_info, ns_info, specs, name, args, map__14626, map__14626__$1, excludes, core_renames, core_renames__$1, deps, aliases, spec_parsers, reload, reloads, map__14627, map__14627__$1, params, uses, requires, renames, use_macros, require_macros, rename_macros, imports, vec__14623, ___$2, quoted_specs, form));
    } else {
      return G__14642__$1;
    }
  }());
});
cljs.analyzer.parse_type = function cljs$analyzer$parse_type(op, env, p__14647) {
  var vec__14651 = p__14647;
  var _ = cljs.core.nth.call(null, vec__14651, 0, null);
  var tsym = cljs.core.nth.call(null, vec__14651, 1, null);
  var fields = cljs.core.nth.call(null, vec__14651, 2, null);
  var pmasks = cljs.core.nth.call(null, vec__14651, 3, null);
  var body = cljs.core.nth.call(null, vec__14651, 4, null);
  var form = vec__14651;
  var t = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), tsym));
  var locals = cljs.core.reduce.call(null, function(t, vec__14651, _, tsym, fields, pmasks, body, form) {
    return function(m, fld) {
      return cljs.core.assoc.call(null, m, fld, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "name", "name", 1843675177), new cljs.core.Keyword(null, "field", "field", -1302436500), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Keyword(null, "mutable", 
      "mutable", 875778266), new cljs.core.Keyword(null, "volatile-mutable", "volatile-mutable", 1731728411), new cljs.core.Keyword(null, "shadow", "shadow", 873231803)], [fld, true, cljs.analyzer.get_col.call(null, fld, env), (new cljs.core.Keyword(null, "unsynchronized-mutable", "unsynchronized-mutable", -164143950)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, fld)), cljs.analyzer.get_line.call(null, fld, env), (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, 
      fld)), (new cljs.core.Keyword(null, "mutable", "mutable", 875778266)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, fld)), (new cljs.core.Keyword(null, "volatile-mutable", "volatile-mutable", 1731728411)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, fld)), m.call(null, fld)]));
    };
  }(t, vec__14651, _, tsym, fields, pmasks, body, form), cljs.core.PersistentArrayMap.EMPTY, cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), op) ? cljs.core.concat.call(null, fields, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "__meta", "__meta", -946752628, null), new cljs.core.Symbol(null, "__extmap", "__extmap", -1435580931, null), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", 
  "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null)) : fields);
  var protocols = (new cljs.core.Keyword(null, "protocols", "protocols", -5615896)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tsym));
  cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "defs", "defs", 1398449717), tsym], 
  null), function(t, locals, protocols, vec__14651, _, tsym, fields, pmasks, body, form) {
    return function(m) {
      var m__$1 = cljs.core.assoc.call(null, function() {
        var or__7410__auto__ = m;
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), new cljs.core.Keyword(null, "name", "name", 1843675177), t, new cljs.core.Keyword(null, "type", "type", 1174270348), true, new cljs.core.Keyword(null, "num-fields", "num-fields", 1529154024), cljs.core.count.call(null, fields), new cljs.core.Keyword(null, "record", "record", -779106859), cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), op));
      return cljs.core.merge.call(null, m__$1, cljs.core.dissoc.call(null, cljs.core.meta.call(null, tsym), new cljs.core.Keyword(null, "protocols", "protocols", -5615896)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "protocols", "protocols", -5615896), protocols], null), cljs.analyzer.source_info.call(null, tsym, env));
    };
  }(t, locals, protocols, vec__14651, _, tsym, fields, pmasks, body, form));
  return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "op", "op", -1882987955), op, new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "t", "t", -1397832519), t, new cljs.core.Keyword(null, "fields", "fields", -1932066230), fields, new cljs.core.Keyword(null, "pmasks", "pmasks", -871416698), pmasks, new cljs.core.Keyword(null, "protocols", "protocols", -5615896), cljs.core.disj.call(null, 
  protocols, new cljs.core.Symbol("cljs.core", "Object", "cljs.core/Object", -345545431, null)), new cljs.core.Keyword(null, "body", "body", -2049205669), cljs.analyzer.analyze.call(null, cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783), locals), body)], null);
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), function(_, env, form, ___$1, ___$2) {
  return cljs.analyzer.parse_type.call(null, new cljs.core.Keyword(null, "deftype*", "deftype*", -677871637), env, form);
});
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), function(_, env, form, ___$1, ___$2) {
  return cljs.analyzer.parse_type.call(null, new cljs.core.Keyword(null, "defrecord*", "defrecord*", 718069562), env, form);
});
cljs.analyzer.property_symbol_QMARK_ = function cljs$analyzer$property_symbol_QMARK_(p1__14654_SHARP_) {
  return cljs.core.boolean$.call(null, function() {
    var and__7398__auto__ = p1__14654_SHARP_ instanceof cljs.core.Symbol;
    if (and__7398__auto__) {
      return cljs.core.re_matches.call(null, /^-.*/, cljs.core.name.call(null, p1__14654_SHARP_));
    } else {
      return and__7398__auto__;
    }
  }());
};
cljs.analyzer.classify_dot_form = function cljs$analyzer$classify_dot_form(p__14655) {
  var vec__14659 = p__14655;
  var target = cljs.core.nth.call(null, vec__14659, 0, null);
  var member = cljs.core.nth.call(null, vec__14659, 1, null);
  var args = cljs.core.nth.call(null, vec__14659, 2, null);
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [target == null ? new cljs.core.Keyword("cljs.analyzer", "error", "cljs.analyzer/error", -65289642) : new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), cljs.core.truth_(cljs.analyzer.property_symbol_QMARK_.call(null, member)) ? new cljs.core.Keyword("cljs.analyzer", "property", "cljs.analyzer/property", 1113330886) : member instanceof cljs.core.Symbol ? new cljs.core.Keyword("cljs.analyzer", 
  "symbol", "cljs.analyzer/symbol", 933248902) : cljs.core.seq_QMARK_.call(null, member) ? new cljs.core.Keyword("cljs.analyzer", "list", "cljs.analyzer/list", -539585923) : new cljs.core.Keyword("cljs.analyzer", "error", "cljs.analyzer/error", -65289642), args == null ? cljs.core.List.EMPTY : new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889)], null);
};
if (typeof cljs.analyzer.build_dot_form !== "undefined") {
} else {
  cljs.analyzer.build_dot_form = function() {
    var method_table__8343__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var prefer_table__8344__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var method_cache__8345__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var cached_hierarchy__8346__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
    var hierarchy__8347__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", -1053470341), cljs.core.get_global_hierarchy.call(null));
    return new cljs.core.MultiFn(cljs.core.symbol.call(null, "cljs.analyzer", "build-dot-form"), function(method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__, hierarchy__8347__auto__) {
      return function(p1__14662_SHARP_) {
        return cljs.analyzer.classify_dot_form.call(null, p1__14662_SHARP_);
      };
    }(method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__, hierarchy__8347__auto__), new cljs.core.Keyword(null, "default", "default", -1987822328), hierarchy__8347__auto__, method_table__8343__auto__, prefer_table__8344__auto__, method_cache__8345__auto__, cached_hierarchy__8346__auto__);
  }();
}
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "property", "cljs.analyzer/property", 1113330886), cljs.core.List.EMPTY], null), function(p__14663) {
  var vec__14664 = p__14663;
  var target = cljs.core.nth.call(null, vec__14664, 0, null);
  var prop = cljs.core.nth.call(null, vec__14664, 1, null);
  var _ = cljs.core.nth.call(null, vec__14664, 2, null);
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601), new cljs.core.Keyword("cljs.analyzer", "access", "cljs.analyzer/access", -1639036494), new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "field", "field", -1302436500), cljs.core.symbol.call(null, cljs.core.name.call(null, prop).substring(1))], null);
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "property", "cljs.analyzer/property", 1113330886), new cljs.core.Keyword("cljs.analyzer", "list", "cljs.analyzer/list", -539585923)], null), function(p__14667) {
  var vec__14668 = p__14667;
  var target = cljs.core.nth.call(null, vec__14668, 0, null);
  var prop = cljs.core.nth.call(null, vec__14668, 1, null);
  var args = cljs.core.nth.call(null, vec__14668, 2, null);
  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot provide arguments "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" on property access "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(prop)].join(""));
});
cljs.analyzer.build_method_call = function cljs$analyzer$build_method_call(target, meth, args) {
  if (meth instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601), new cljs.core.Keyword("cljs.analyzer", "call", "cljs.analyzer/call", 964149800), new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "method", "method", 55703592), meth, new cljs.core.Keyword(null, "args", "args", 1315556576), args], null);
  } else {
    return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601), new cljs.core.Keyword("cljs.analyzer", "call", "cljs.analyzer/call", 964149800), new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "method", "method", 55703592), cljs.core.first.call(null, meth), new cljs.core.Keyword(null, "args", "args", 1315556576), args], null);
  }
};
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "symbol", "cljs.analyzer/symbol", 933248902), new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889)], null), function(p__14671) {
  var vec__14672 = p__14671;
  var target = cljs.core.nth.call(null, vec__14672, 0, null);
  var meth = cljs.core.nth.call(null, vec__14672, 1, null);
  var args = cljs.core.nth.call(null, vec__14672, 2, null);
  return cljs.analyzer.build_method_call.call(null, target, meth, args);
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "symbol", "cljs.analyzer/symbol", 933248902), cljs.core.List.EMPTY], null), function(p__14675) {
  var vec__14676 = p__14675;
  var target = cljs.core.nth.call(null, vec__14676, 0, null);
  var meth = cljs.core.nth.call(null, vec__14676, 1, null);
  var args = cljs.core.nth.call(null, vec__14676, 2, null);
  return cljs.analyzer.build_method_call.call(null, target, meth, args);
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "expr", "cljs.analyzer/expr", 1708655889), new cljs.core.Keyword("cljs.analyzer", "list", "cljs.analyzer/list", -539585923), cljs.core.List.EMPTY], null), function(p__14679) {
  var vec__14680 = p__14679;
  var target = cljs.core.nth.call(null, vec__14680, 0, null);
  var meth_expr = cljs.core.nth.call(null, vec__14680, 1, null);
  var _ = cljs.core.nth.call(null, vec__14680, 2, null);
  return cljs.analyzer.build_method_call.call(null, target, cljs.core.first.call(null, meth_expr), cljs.core.rest.call(null, meth_expr));
});
cljs.core._add_method.call(null, cljs.analyzer.build_dot_form, new cljs.core.Keyword(null, "default", "default", -1987822328), function(dot_form) {
  throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Unknown dot form of "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.list_STAR_.call(null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), dot_form)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" with classification "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.analyzer.classify_dot_form.call(null, dot_form))].join(""));
});
cljs.analyzer.analyze_dot = function cljs$analyzer$analyze_dot(env, target, field, member_PLUS_, form) {
  var v = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [target, field, member_PLUS_], null);
  var map__14691 = cljs.analyzer.build_dot_form.call(null, v);
  var map__14691__$1 = (!(map__14691 == null) ? map__14691.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14691.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14691) : map__14691;
  var dot_action = cljs.core.get.call(null, map__14691__$1, new cljs.core.Keyword(null, "dot-action", "dot-action", -1460119601));
  var target__$1 = cljs.core.get.call(null, map__14691__$1, new cljs.core.Keyword(null, "target", "target", 253001721));
  var method = cljs.core.get.call(null, map__14691__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var field__$1 = cljs.core.get.call(null, map__14691__$1, new cljs.core.Keyword(null, "field", "field", -1302436500));
  var args = cljs.core.get.call(null, map__14691__$1, new cljs.core.Keyword(null, "args", "args", 1315556576));
  var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var targetexpr = cljs.analyzer.analyze.call(null, enve, target__$1);
  var form_meta = cljs.core.meta.call(null, form);
  var target_tag = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(targetexpr);
  var prop = function() {
    var or__7410__auto__ = field__$1;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return method;
    }
  }();
  var tag = function() {
    var or__7410__auto__ = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(form_meta);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      var or__7410__auto____$1 = function() {
        var and__7398__auto__ = cljs.analyzer.js_tag_QMARK_.call(null, target_tag);
        if (cljs.core.truth_(and__7398__auto__)) {
          return cljs.core.vary_meta.call(null, cljs.analyzer.normalize_js_tag.call(null, target_tag), cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "prefix", "prefix", -265908465)], null), cljs.core.fnil.call(null, cljs.core.conj, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "Object", "Object", 61210754, null)], null)), prop);
        } else {
          return and__7398__auto__;
        }
      }();
      if (cljs.core.truth_(or__7410__auto____$1)) {
        return or__7410__auto____$1;
      } else {
        return null;
      }
    }
  }();
  if (!clojure.string.starts_with_QMARK_.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(prop)].join(""), "cljs$")) {
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "Object", "Object", 61210754, null), cljs.core.first.call(null, (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tag))))) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "infer-warning", "infer-warning", -1600671410), env, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "warn-type", "warn-type", -790105219), new cljs.core.Keyword(null, "object", "object", 1474613949), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "property", "property", -1114278232), prop], null));
    } else {
    }
    if (cljs.core.not_EQ_.call(null, new cljs.core.Symbol(null, "js", "js", -886355190, null), target_tag)) {
      if (cljs.core.truth_(function() {
        var or__7410__auto__ = target_tag == null;
        if (or__7410__auto__) {
          return or__7410__auto__;
        } else {
          return (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "any", "any", -948528346, null), null], null), null)).call(null, target_tag);
        }
      }())) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "infer-warning", "infer-warning", -1600671410), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "warn-type", "warn-type", -790105219), new cljs.core.Keyword(null, "target", "target", 253001721), new cljs.core.Keyword(null, "form", "form", -1624062471), form], null));
      } else {
      }
      var vec__14693_14698 = cljs.core.juxt.call(null, cljs.core.butlast, cljs.core.identity).call(null, (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tag)));
      var pre_SINGLEQUOTE__14699 = cljs.core.nth.call(null, vec__14693_14698, 0, null);
      var pre_14700 = cljs.core.nth.call(null, vec__14693_14698, 1, null);
      if (cljs.core.truth_(function() {
        var and__7398__auto__ = cljs.analyzer.has_extern_QMARK_.call(null, pre_SINGLEQUOTE__14699);
        if (cljs.core.truth_(and__7398__auto__)) {
          return cljs.core.not.call(null, cljs.analyzer.has_extern_QMARK_.call(null, pre_14700));
        } else {
          return and__7398__auto__;
        }
      }())) {
        cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "infer-warning", "infer-warning", -1600671410), env, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "warn-type", "warn-type", -790105219), new cljs.core.Keyword(null, "property", "property", -1114278232), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "type", "type", 1174270348), cljs.core.symbol.call(null, "js", clojure.string.join.call(null, ".", function() {
          var G__14696 = pre_SINGLEQUOTE__14699;
          if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "prototype", "prototype", 519166522, null), cljs.core.last.call(null, pre_SINGLEQUOTE__14699))) {
            return cljs.core.butlast.call(null, G__14696);
          } else {
            return G__14696;
          }
        }())), new cljs.core.Keyword(null, "property", "property", -1114278232), prop], null));
      } else {
      }
    } else {
    }
  } else {
  }
  if (cljs.core.truth_(cljs.analyzer.js_tag_QMARK_.call(null, tag))) {
    var pre_14701 = (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tag));
    if (cljs.core.truth_(cljs.analyzer.has_extern_QMARK_.call(null, pre_14701))) {
    } else {
      cljs.core.swap_BANG_.call(null, cljs.env._STAR_compiler_STAR_, cljs.core.update_in, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env)), new cljs.core.Keyword(null, "externs", 
      "externs", 221720677)], null), pre_14701), cljs.core.merge, cljs.core.PersistentArrayMap.EMPTY);
    }
  } else {
  }
  var G__14697 = dot_action instanceof cljs.core.Keyword ? dot_action.fqn : null;
  switch(G__14697) {
    case "cljs.analyzer/access":
      var children = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [targetexpr], null);
      return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "dot", "dot", 1442709401), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "target", "target", 253001721), targetexpr, new cljs.core.Keyword(null, "field", "field", -1302436500), field__$1, new cljs.core.Keyword(null, "children", "children", -940561982), children, 
      new cljs.core.Keyword(null, "tag", "tag", -1290361223), cljs.core.truth_(cljs.analyzer.js_tag_QMARK_.call(null, tag)) ? function() {
        var or__7410__auto__ = cljs.analyzer.js_tag.call(null, (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tag)), new cljs.core.Keyword(null, "tag", "tag", -1290361223));
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return tag;
        }
      }() : tag], null);
      break;
    case "cljs.analyzer/call":
      var argexprs = cljs.core.map.call(null, function(G__14697, v, map__14691, map__14691__$1, dot_action, target__$1, method, field__$1, args, enve, targetexpr, form_meta, target_tag, prop, tag) {
        return function(p1__14683_SHARP_) {
          return cljs.analyzer.analyze.call(null, enve, p1__14683_SHARP_);
        };
      }(G__14697, v, map__14691, map__14691__$1, dot_action, target__$1, method, field__$1, args, enve, targetexpr, form_meta, target_tag, prop, tag), args);
      var children = cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [targetexpr], null), argexprs);
      return new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "dot", "dot", 1442709401), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "target", "target", 253001721), targetexpr, new cljs.core.Keyword(null, "method", "method", 55703592), method, new cljs.core.Keyword(null, "args", "args", 1315556576), argexprs, new cljs.core.Keyword(null, 
      "children", "children", -940561982), children, new cljs.core.Keyword(null, "tag", "tag", -1290361223), cljs.core.truth_(cljs.analyzer.js_tag_QMARK_.call(null, tag)) ? function() {
        var or__7410__auto__ = cljs.analyzer.js_tag.call(null, (new cljs.core.Keyword(null, "prefix", "prefix", -265908465)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, tag)), new cljs.core.Keyword(null, "ret-tag", "ret-tag", 1705919990));
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return new cljs.core.Symbol(null, "js", "js", -886355190, null);
        }
      }() : tag], null);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No matching clause: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dot_action)].join(""));
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, ".", ".", 1975675962, null), function(_, env, p__14703, ___$1, ___$2) {
  var vec__14704 = p__14703;
  var seq__14705 = cljs.core.seq.call(null, vec__14704);
  var first__14706 = cljs.core.first.call(null, seq__14705);
  var seq__14705__$1 = cljs.core.next.call(null, seq__14705);
  var ___$3 = first__14706;
  var first__14706__$1 = cljs.core.first.call(null, seq__14705__$1);
  var seq__14705__$2 = cljs.core.next.call(null, seq__14705__$1);
  var target = first__14706__$1;
  var vec__14707 = seq__14705__$2;
  var seq__14708 = cljs.core.seq.call(null, vec__14707);
  var first__14709 = cljs.core.first.call(null, seq__14708);
  var seq__14708__$1 = cljs.core.next.call(null, seq__14708);
  var field = first__14709;
  var member_PLUS_ = seq__14708__$1;
  var form = vec__14704;
  var _STAR_recur_frames_STAR_14710 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_dot.call(null, env, target, field, member_PLUS_, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14710;
  }
});
cljs.analyzer.get_js_tag = function cljs$analyzer$get_js_tag(form) {
  var form_meta = cljs.core.meta.call(null, form);
  var temp__4659__auto__ = (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(form_meta);
  if (temp__4659__auto__ == null) {
    if ((new cljs.core.Keyword(null, "numeric", "numeric", -1495594714)).cljs$core$IFn$_invoke$arity$1(form_meta) === true) {
      return new cljs.core.Symbol(null, "number", "number", -1084057331, null);
    } else {
      return null;
    }
  } else {
    var tag = temp__4659__auto__;
    return tag;
  }
};
cljs.analyzer.js_star_interp = function cljs$analyzer$js_star_interp(env, s) {
  var idx = s.indexOf("~{");
  if (-1 === idx) {
    var x__8252__auto__ = s;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  } else {
    var end = s.indexOf("}", idx);
    var inner = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_existing_var.call(null, env, cljs.core.symbol.call(null, cljs.core.subs.call(null, s, 2 + idx, end))));
    return new cljs.core.LazySeq(null, function(end, inner, idx) {
      return function() {
        return cljs.core.cons.call(null, cljs.core.subs.call(null, s, 0, idx), cljs.core.cons.call(null, inner, cljs.analyzer.js_star_interp.call(null, env, cljs.core.subs.call(null, s, end + 1))));
      };
    }(end, inner, idx), null, null);
  }
};
cljs.analyzer.js_star_seg = function cljs$analyzer$js_star_seg(s) {
  var idx = s.indexOf("~{");
  if (-1 === idx) {
    var x__8252__auto__ = s;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  } else {
    var end = s.indexOf("}", idx);
    return new cljs.core.LazySeq(null, function(end, idx) {
      return function() {
        return cljs.core.cons.call(null, cljs.core.subs.call(null, s, 0, idx), cljs.analyzer.js_star_seg.call(null, cljs.core.subs.call(null, s, end + 1)));
      };
    }(end, idx), null, null);
  }
};
cljs.analyzer.NUMERIC_SET = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Symbol(null, "any", "any", -948528346, null), null, new cljs.core.Symbol(null, "long", "long", 1469079434, null), null, new cljs.core.Symbol(null, "double", "double", -1769548886, null), null, new cljs.core.Symbol(null, "number", "number", -1084057331, null), null], null), null);
cljs.analyzer.numeric_type_QMARK_ = function cljs$analyzer$numeric_type_QMARK_(t) {
  if (t == null) {
    return true;
  } else {
    if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "clj-nil", "clj-nil", 1321798654, null), t)) {
      return true;
    } else {
      if (cljs.core.truth_(cljs.analyzer.js_tag_QMARK_.call(null, t))) {
        return true;
      } else {
        if (t instanceof cljs.core.Symbol && !(cljs.core.get.call(null, cljs.analyzer.NUMERIC_SET, t) == null)) {
          return true;
        } else {
          if (cljs.analyzer.cljs_set_QMARK_.call(null, t)) {
            return cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "number", "number", -1084057331, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "long", "long", 1469079434, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "double", "double", -1769548886, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, "any", "any", -948528346, null)) || cljs.core.contains_QMARK_.call(null, t, new cljs.core.Symbol(null, 
            "js", "js", -886355190, null));
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.analyzer.analyze_js_star_STAR_ = function cljs$analyzer$analyze_js_star_STAR_(env, jsform, args, form) {
  var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var argexprs = cljs.core.vec.call(null, cljs.core.map.call(null, function(enve) {
    return function(p1__14711_SHARP_) {
      return cljs.analyzer.analyze.call(null, enve, p1__14711_SHARP_);
    };
  }(enve), args));
  var form_meta = cljs.core.meta.call(null, form);
  var segs = cljs.analyzer.js_star_seg.call(null, jsform);
  var tag = cljs.analyzer.get_js_tag.call(null, form);
  var js_op = (new cljs.core.Keyword(null, "js-op", "js-op", -1046277897)).cljs$core$IFn$_invoke$arity$1(form_meta);
  var numeric = (new cljs.core.Keyword(null, "numeric", "numeric", -1495594714)).cljs$core$IFn$_invoke$arity$1(form_meta);
  if (numeric === true) {
    var types_14713 = cljs.core.map.call(null, function(enve, argexprs, form_meta, segs, tag, js_op, numeric) {
      return function(p1__14712_SHARP_) {
        return cljs.analyzer.infer_tag.call(null, env, p1__14712_SHARP_);
      };
    }(enve, argexprs, form_meta, segs, tag, js_op, numeric), argexprs);
    if (cljs.core.every_QMARK_.call(null, cljs.analyzer.numeric_type_QMARK_, types_14713)) {
    } else {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "invalid-arithmetic", "invalid-arithmetic", 1917075065), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), js_op, new cljs.core.Keyword(null, "types", "types", 590030639), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, types_14713)], null));
    }
  } else {
  }
  return cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "args", "args", 1315556576), new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.Keyword(null, "numeric", "numeric", -1495594714), new cljs.core.Keyword(null, "segs", "segs", -1940299576), new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), new cljs.core.Keyword(null, "form", "form", 
  -1624062471), new cljs.core.Keyword(null, "tag", "tag", -1290361223)], [argexprs, argexprs, numeric, segs, new cljs.core.Keyword(null, "js", "js", 1768080579), env, js_op, form, tag]);
};
cljs.analyzer.analyze_js_star = function cljs$analyzer$analyze_js_star(env, jsform, args, form) {
  var _STAR_recur_frames_STAR_14715 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.analyze_js_star_STAR_.call(null, env, jsform, args, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14715;
  }
};
cljs.core._add_method.call(null, cljs.analyzer.parse, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), function(op, env, p__14716, _, ___$1) {
  var vec__14717 = p__14716;
  var seq__14718 = cljs.core.seq.call(null, vec__14717);
  var first__14719 = cljs.core.first.call(null, seq__14718);
  var seq__14718__$1 = cljs.core.next.call(null, seq__14718);
  var ___$2 = first__14719;
  var first__14719__$1 = cljs.core.first.call(null, seq__14718__$1);
  var seq__14718__$2 = cljs.core.next.call(null, seq__14718__$1);
  var jsform = first__14719__$1;
  var args = seq__14718__$2;
  var form = vec__14717;
  if (typeof jsform === "string") {
  } else {
    throw cljs.analyzer.error.call(null, env, "Invalid js* form");
  }
  if (!(args == null)) {
    return cljs.analyzer.analyze_js_star.call(null, env, jsform, args, form);
  } else {
    var code = cljs.core.apply.call(null, cljs.core.str, cljs.analyzer.js_star_interp.call(null, env, jsform));
    var tag = cljs.analyzer.get_js_tag.call(null, form);
    var form_meta = cljs.core.meta.call(null, form);
    var js_op = (new cljs.core.Keyword(null, "js-op", "js-op", -1046277897)).cljs$core$IFn$_invoke$arity$1(form_meta);
    var numeric = (new cljs.core.Keyword(null, "numeric", "numeric", -1495594714)).cljs$core$IFn$_invoke$arity$1(form_meta);
    return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "js", "js", 1768080579), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "code", "code", 1586293142), code, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag, new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), js_op, new cljs.core.Keyword(null, 
    "numeric", "numeric", -1495594714), numeric], null);
  }
});
cljs.analyzer.analyzed_QMARK_ = function cljs$analyzer$analyzed_QMARK_(f) {
  return cljs.core.contains_QMARK_.call(null, cljs.core.meta.call(null, f), new cljs.core.Keyword("cljs.analyzer", "analyzed", "cljs.analyzer/analyzed", -735094162));
};
cljs.analyzer.all_values_QMARK_ = function cljs$analyzer$all_values_QMARK_(exprs) {
  return cljs.core.every_QMARK_.call(null, function(p1__14720_SHARP_) {
    return p1__14720_SHARP_ == null || p1__14720_SHARP_ instanceof cljs.core.Symbol || typeof p1__14720_SHARP_ === "string" || typeof p1__14720_SHARP_ === "number" || p1__14720_SHARP_ === true || p1__14720_SHARP_ === false;
  }, exprs);
};
cljs.analyzer.valid_arity_QMARK_ = function cljs$analyzer$valid_arity_QMARK_(argc, method_params) {
  return cljs.core.boolean$.call(null, cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([argc], true), cljs.core.map.call(null, cljs.core.count, method_params)));
};
cljs.analyzer.parse_invoke_STAR_ = function cljs$analyzer$parse_invoke_STAR_(env, p__14722) {
  var vec__14728 = p__14722;
  var seq__14729 = cljs.core.seq.call(null, vec__14728);
  var first__14730 = cljs.core.first.call(null, seq__14729);
  var seq__14729__$1 = cljs.core.next.call(null, seq__14729);
  var f = first__14730;
  var args = seq__14729__$1;
  var form = vec__14728;
  var enve = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var fexpr = cljs.analyzer.analyze.call(null, enve, f);
  var argc = cljs.core.count.call(null, args);
  var fn_var_QMARK_ = (new cljs.core.Keyword(null, "fn-var", "fn-var", 1086204730)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr));
  var kw_QMARK_ = cljs.core._EQ_.call(null, new cljs.core.Symbol("cljs.core", "Keyword", "cljs.core/Keyword", -451434488, null), (new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(fexpr));
  var cur_ns = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env));
  if (cljs.core.truth_(fn_var_QMARK_)) {
    var map__14731_14733 = (new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr);
    var map__14731_14734__$1 = (!(map__14731_14733 == null) ? map__14731_14733.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14731_14733.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14731_14733) : map__14731_14733;
    var variadic_14735 = cljs.core.get.call(null, map__14731_14734__$1, new cljs.core.Keyword(null, "variadic", "variadic", 882626057));
    var max_fixed_arity_14736 = cljs.core.get.call(null, map__14731_14734__$1, new cljs.core.Keyword(null, "max-fixed-arity", "max-fixed-arity", -690205543));
    var method_params_14737 = cljs.core.get.call(null, map__14731_14734__$1, new cljs.core.Keyword(null, "method-params", "method-params", -980792179));
    var name_14738 = cljs.core.get.call(null, map__14731_14734__$1, new cljs.core.Keyword(null, "name", "name", 1843675177));
    var ns_14739 = cljs.core.get.call(null, map__14731_14734__$1, new cljs.core.Keyword(null, "ns", "ns", 441598760));
    var macro_14740 = cljs.core.get.call(null, map__14731_14734__$1, new cljs.core.Keyword(null, "macro", "macro", -867863404));
    if (cljs.core.not.call(null, function() {
      var and__7398__auto__ = goog.string.endsWith([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cur_ns)].join(""), "$macros");
      if (cljs.core.truth_(and__7398__auto__)) {
        return cljs.core.symbol_identical_QMARK_.call(null, cur_ns, ns_14739) && macro_14740 === true;
      } else {
        return and__7398__auto__;
      }
    }()) && !cljs.analyzer.valid_arity_QMARK_.call(null, argc, method_params_14737) && (!variadic_14735 || variadic_14735 && argc < max_fixed_arity_14736)) {
      cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), name_14738, new cljs.core.Keyword(null, "argc", "argc", -1452839519), argc], null));
    } else {
    }
  } else {
  }
  if (kw_QMARK_ && !(1 === argc || 2 === argc)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-arity", "fn-arity", -403576501), env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "name", "name", 1843675177), cljs.core.first.call(null, form), new cljs.core.Keyword(null, "argc", "argc", -1452839519), argc], null));
  } else {
  }
  var deprecated_QMARK__14741 = (new cljs.core.Keyword(null, "deprecated", "deprecated", 1498275348)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr));
  var no_warn_QMARK__14742 = (new cljs.core.Keyword(null, "deprecation-nowarn", "deprecation-nowarn", -1762828044)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
  if (cljs.core.boolean$.call(null, deprecated_QMARK__14741) && !cljs.core.boolean$.call(null, no_warn_QMARK__14742)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "fn-deprecated", "fn-deprecated", 626877647), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150), fexpr], null));
  } else {
  }
  if (!((new cljs.core.Keyword(null, "type", "type", 1174270348)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "info", "info", -317069002)).cljs$core$IFn$_invoke$arity$1(fexpr)) == null)) {
    cljs.analyzer.warning.call(null, new cljs.core.Keyword(null, "invoke-ctor", "invoke-ctor", -756052704), env, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "fexpr", "fexpr", -122857150), fexpr], null));
  } else {
  }
  if (cljs.core.truth_(function() {
    var or__7410__auto__ = !cljs.core.boolean$.call(null, cljs.analyzer._STAR_cljs_static_fns_STAR_);
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      var or__7410__auto____$1 = !(f instanceof cljs.core.Symbol);
      if (or__7410__auto____$1) {
        return or__7410__auto____$1;
      } else {
        var or__7410__auto____$2 = fn_var_QMARK_;
        if (cljs.core.truth_(or__7410__auto____$2)) {
          return or__7410__auto____$2;
        } else {
          return cljs.analyzer.analyzed_QMARK_.call(null, f) || cljs.analyzer.all_values_QMARK_.call(null, args);
        }
      }
    }
  }())) {
    var ana_expr = function(enve, fexpr, argc, fn_var_QMARK_, kw_QMARK_, cur_ns, vec__14728, seq__14729, first__14730, seq__14729__$1, f, args, form) {
      return function(p1__14721_SHARP_) {
        return cljs.analyzer.analyze.call(null, enve, p1__14721_SHARP_);
      };
    }(enve, fexpr, argc, fn_var_QMARK_, kw_QMARK_, cur_ns, vec__14728, seq__14729, first__14730, seq__14729__$1, f, args, form);
    var argexprs = cljs.core.map.call(null, ana_expr, args);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "invoke", "invoke", 1145927159), new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "f", "f", -1597136552), fexpr, new cljs.core.Keyword(null, "args", "args", 1315556576), cljs.core.vec.call(null, argexprs), new cljs.core.Keyword(null, "children", "children", -940561982), 
    cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [fexpr], null), argexprs)], null);
  } else {
    var arg_syms = cljs.core.take.call(null, argc, cljs.core.repeatedly.call(null, cljs.core.gensym));
    return cljs.analyzer.analyze.call(null, env, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core.vec.call(null, cljs.core.interleave.call(null, arg_syms, args))))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = cljs.core.vary_meta.call(null, f, cljs.core.assoc, new cljs.core.Keyword("cljs.analyzer", "analyzed", "cljs.analyzer/analyzed", -735094162), true);
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), arg_syms)));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }()))));
  }
};
cljs.analyzer.parse_invoke = function cljs$analyzer$parse_invoke(env, form) {
  var _STAR_recur_frames_STAR_14744 = cljs.analyzer._STAR_recur_frames_STAR_;
  cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
  try {
    return cljs.analyzer.parse_invoke_STAR_.call(null, env, form);
  } finally {
    cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14744;
  }
};
cljs.analyzer.analyze_symbol = function cljs$analyzer$analyze_symbol(env, sym) {
  if ((new cljs.core.Keyword(null, "quoted?", "quoted?", 1464649621)).cljs$core$IFn$_invoke$arity$1(env)) {
    cljs.analyzer.register_constant_BANG_.call(null, env, sym);
    return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "constant", "constant", -379609303), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), sym, new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "Symbol", "cljs.core/Symbol", 292989338, null)], null));
  } else {
    var map__14747 = cljs.core.meta.call(null, sym);
    var map__14747__$1 = (!(map__14747 == null) ? map__14747.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__14747.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__14747) : map__14747;
    var line = cljs.core.get.call(null, map__14747__$1, new cljs.core.Keyword(null, "line", "line", 212345235));
    var column = cljs.core.get.call(null, map__14747__$1, new cljs.core.Keyword(null, "column", "column", 2078222095));
    var env__$1 = !(line == null) ? cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "line", "line", 212345235), line) : env;
    var env__$2 = !(column == null) ? cljs.core.assoc.call(null, env__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), column) : env__$1;
    var ret = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "env", "env", -1815813235), env__$2, new cljs.core.Keyword(null, "form", "form", -1624062471), sym], null);
    var lcls = (new cljs.core.Keyword(null, "locals", "locals", 535295783)).cljs$core$IFn$_invoke$arity$1(env__$2);
    var temp__4659__auto__ = cljs.core.get.call(null, lcls, sym);
    if (temp__4659__auto__ == null) {
      var sym_meta = cljs.core.meta.call(null, sym);
      var sym_ns = cljs.core.namespace.call(null, sym);
      var cur_ns = [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env__$2)))].join("");
      var sym__$1 = cljs.core.truth_(function() {
        var and__7398__auto__ = sym_ns;
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = cljs.core.not_EQ_.call(null, sym_ns, "cljs.core");
          if (and__7398__auto____$1) {
            var and__7398__auto____$2 = goog.string.endsWith(cur_ns, "$macros");
            if (cljs.core.truth_(and__7398__auto____$2)) {
              return cljs.core.not.call(null, goog.string.endsWith(sym_ns, "$macros")) && cljs.core._EQ_.call(null, sym_ns, cljs.core.subs.call(null, cur_ns, 0, cljs.core.count.call(null, cur_ns) - 7));
            } else {
              return and__7398__auto____$2;
            }
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }()) ? cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym_ns), cljs.core.str.cljs$core$IFn$_invoke$arity$1("$macros")].join(""), cljs.core.name.call(null, sym)) : sym;
      var info = !cljs.core.contains_QMARK_.call(null, sym_meta, new cljs.core.Keyword("cljs.analyzer", "analyzed", "cljs.analyzer/analyzed", -735094162)) ? cljs.analyzer.resolve_existing_var.call(null, env__$2, sym__$1) : cljs.analyzer.resolve_var.call(null, env__$2, sym__$1);
      if (!((new cljs.core.Keyword(null, "def-var", "def-var", -698214377)).cljs$core$IFn$_invoke$arity$1(env__$2) === true)) {
        return cljs.core.assoc.call(null, ret, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.Keyword(null, "info", "info", -317069002), info);
      } else {
        var info__$1 = cljs.analyzer.resolve_var.call(null, env__$2, sym__$1);
        return cljs.core.assoc.call(null, ret, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.Keyword(null, "info", "info", -317069002), info__$1);
      }
    } else {
      var lb = temp__4659__auto__;
      return cljs.core.assoc.call(null, ret, new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "var", "var", -769682797), new cljs.core.Keyword(null, "info", "info", -317069002), lb);
    }
  }
};
cljs.analyzer.excluded_QMARK_ = function cljs$analyzer$excluded_QMARK_(env, sym) {
  return !(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), sym) == null) || !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177)), 
  new cljs.core.Keyword(null, "excludes", "excludes", -1791725945), sym) == null);
};
cljs.analyzer.used_QMARK_ = function cljs$analyzer$used_QMARK_(env, sym) {
  return !(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym) == null) || !(cljs.analyzer.gets.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "name", "name", 1843675177)), 
  new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym) == null);
};
cljs.analyzer.get_expander_ns = function cljs$analyzer$get_expander_ns(env, nstr) {
  var res = function() {
    var or__7410__auto__ = cljs.analyzer.resolve_macro_ns_alias.call(null, env, nstr, null);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return cljs.analyzer.resolve_ns_alias.call(null, env, nstr, null);
    }
  }();
  var nstr__$1 = !(res == null) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(res)].join("") : nstr;
  if ("clojure.core" === nstr__$1) {
    return cljs.core.find_macros_ns.call(null, cljs.analyzer.CLJS_CORE_MACROS_SYM);
  } else {
    if ("clojure.repl" === nstr__$1) {
      return cljs.core.find_macros_ns.call(null, new cljs.core.Symbol(null, "cljs.repl", "cljs.repl", 1767065658, null));
    } else {
      if (cljs.core.truth_(goog.string.contains(nstr__$1, "."))) {
        return cljs.core.find_macros_ns.call(null, cljs.core.symbol.call(null, nstr__$1));
      } else {
        var G__14750 = env;
        var G__14750__$1 = G__14750 == null ? null : (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(G__14750);
        var G__14750__$2 = G__14750__$1 == null ? null : (new cljs.core.Keyword(null, "require-macros", "require-macros", 707947416)).cljs$core$IFn$_invoke$arity$1(G__14750__$1);
        var G__14750__$3 = G__14750__$2 == null ? null : cljs.core.get.call(null, G__14750__$2, cljs.core.symbol.call(null, nstr__$1));
        if (G__14750__$3 == null) {
          return null;
        } else {
          return cljs.core.find_macros_ns.call(null, G__14750__$3);
        }
      }
    }
  }
};
cljs.analyzer.get_expander_STAR_ = function cljs$analyzer$get_expander_STAR_(sym, env) {
  if (!(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783), sym) == null) || cljs.analyzer.excluded_QMARK_.call(null, env, sym) && !cljs.analyzer.used_QMARK_.call(null, env, sym)) {
    return null;
  } else {
    var nstr = cljs.core.namespace.call(null, sym);
    if (!(nstr == null)) {
      var ns = cljs.analyzer.get_expander_ns.call(null, env, nstr);
      if (!(ns == null)) {
        return ns.findInternedVar(cljs.core.symbol.call(null, cljs.core.name.call(null, sym)));
      } else {
        return null;
      }
    } else {
      if (!(cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), sym) == null)) {
        var qualified_symbol = cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "rename-macros", "rename-macros", 1076432512), sym);
        var nsym = cljs.core.symbol.call(null, cljs.core.namespace.call(null, qualified_symbol));
        var sym__$1 = cljs.core.symbol.call(null, cljs.core.name.call(null, qualified_symbol));
        return cljs.core.find_macros_ns.call(null, nsym).findInternedVar(sym__$1);
      } else {
        var temp__4659__auto__ = cljs.analyzer.gets.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), new cljs.core.Keyword(null, "use-macros", "use-macros", -905638393), sym);
        if (temp__4659__auto__ == null) {
          return cljs.core.find_macros_ns.call(null, cljs.analyzer.CLJS_CORE_MACROS_SYM).findInternedVar(sym);
        } else {
          var nsym = temp__4659__auto__;
          return cljs.core.find_macros_ns.call(null, nsym).findInternedVar(sym);
        }
      }
    }
  }
};
cljs.analyzer.get_expander = function cljs$analyzer$get_expander(sym, env) {
  var mvar = cljs.analyzer.get_expander_STAR_.call(null, sym, env);
  if (!(mvar == null) && mvar.isMacro()) {
    return mvar;
  } else {
    return null;
  }
};
var cached_var_14751 = new cljs.core.Delay(function() {
  return cljs.core.get.call(null, cljs.core.ns_interns_STAR_.call(null, new cljs.core.Symbol(null, "cljs.spec", "cljs.spec", -1965249603, null)), new cljs.core.Symbol(null, "macroexpand-check", "macroexpand-check", 699092091, null));
}, null);
cljs.analyzer.get_macroexpand_check_var = function(cached_var_14751) {
  return function cljs$analyzer$get_macroexpand_check_var() {
    if (!(cljs.core.find_ns_obj.call(null, new cljs.core.Symbol(null, "cljs.spec", "cljs.spec", -1965249603, null)) == null)) {
      return cljs.core.deref.call(null, cached_var_14751);
    } else {
      return null;
    }
  };
}(cached_var_14751);
cljs.analyzer.macroexpand_1_STAR_ = function cljs$analyzer$macroexpand_1_STAR_(env, form) {
  var op = cljs.core.first.call(null, form);
  if (cljs.core.contains_QMARK_.call(null, cljs.analyzer.specials, op)) {
    return form;
  } else {
    var temp__4659__auto__ = op instanceof cljs.core.Symbol ? cljs.analyzer.get_expander.call(null, op, env) : null;
    if (temp__4659__auto__ == null) {
      if (op instanceof cljs.core.Symbol) {
        var opname = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(op)].join("");
        if ("." === opname.charAt(0)) {
          var vec__14755 = cljs.core.next.call(null, form);
          var seq__14756 = cljs.core.seq.call(null, vec__14755);
          var first__14757 = cljs.core.first.call(null, seq__14756);
          var seq__14756__$1 = cljs.core.next.call(null, seq__14756);
          var target = first__14757;
          var args = seq__14756__$1;
          return cljs.core.with_meta.call(null, cljs.core.list_STAR_.call(null, cljs.analyzer.DOT_SYM, target, cljs.core.symbol.call(null, cljs.core.subs.call(null, opname, 1)), args), cljs.core.meta.call(null, form));
        } else {
          if ("." === opname.charAt(opname.length - 1)) {
            return cljs.core.with_meta.call(null, cljs.core.list_STAR_.call(null, cljs.analyzer.NEW_SYM, cljs.core.symbol.call(null, cljs.core.subs.call(null, opname, 0, cljs.core.count.call(null, opname) - 1)), cljs.core.next.call(null, form)), cljs.core.meta.call(null, form));
          } else {
            return form;
          }
        }
      } else {
        return form;
      }
    } else {
      var mac_var = temp__4659__auto__;
      var mchk = cljs.analyzer.get_macroexpand_check_var.call(null);
      var _ = !(mchk == null) ? mchk.call(null, mac_var, cljs.core.next.call(null, form)) : null;
      var form_SINGLEQUOTE_ = cljs.core.apply.call(null, cljs.core.deref.call(null, mac_var), form, env, cljs.core.rest.call(null, form));
      if (cljs.analyzer.cljs_seq_QMARK_.call(null, form_SINGLEQUOTE_)) {
        var sym_SINGLEQUOTE_ = cljs.core.first.call(null, form_SINGLEQUOTE_);
        var sym = cljs.core.first.call(null, form);
        if (cljs.core.symbol_identical_QMARK_.call(null, sym_SINGLEQUOTE_, cljs.analyzer.JS_STAR_SYM)) {
          var sym__$1 = !(cljs.core.namespace.call(null, sym) == null) ? sym : cljs.core.symbol.call(null, "cljs.core", [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(""));
          var js_op = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "js-op", "js-op", -1046277897), sym__$1], null);
          var numeric = function() {
            var mac_var_ns = cljs.core.symbol.call(null, cljs.core.namespace.call(null, mac_var.sym));
            var mac_var_name = cljs.core.symbol.call(null, cljs.core.name.call(null, mac_var.sym));
            return cljs.core.get_in.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), mac_var_ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), mac_var_name, new cljs.core.Keyword(null, "meta", "meta", 1499536964), new cljs.core.Keyword("cljs.analyzer", "numeric", "cljs.analyzer/numeric", 1415704188)], 
            null));
          }();
          var js_op__$1 = numeric === true ? cljs.core.assoc.call(null, js_op, new cljs.core.Keyword(null, "numeric", "numeric", -1495594714), true) : js_op;
          return cljs.core.vary_meta.call(null, form_SINGLEQUOTE_, cljs.core.merge, js_op__$1);
        } else {
          return form_SINGLEQUOTE_;
        }
      } else {
        return form_SINGLEQUOTE_;
      }
    }
  }
};
cljs.analyzer.macroexpand_1 = function cljs$analyzer$macroexpand_1(env, form) {
  var val__13681__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__13681__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    try {
      return cljs.analyzer.macroexpand_1_STAR_.call(null, env, form);
    } catch (e14759) {
      var err__13717__auto__ = e14759;
      if (cljs.analyzer.analysis_error_QMARK_.call(null, err__13717__auto__)) {
        throw err__13717__auto__;
      } else {
        throw cljs.analyzer.error.call(null, env, err__13717__auto__.message, err__13717__auto__);
      }
    }
  } finally {
    if (val__13681__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.analyzer.analyze_seq_STAR_ = function cljs$analyzer$analyze_seq_STAR_(op, env, form, name, opts) {
  if (cljs.core.contains_QMARK_.call(null, cljs.analyzer.specials, op)) {
    return cljs.analyzer.parse.call(null, op, env, form, name, opts);
  } else {
    return cljs.analyzer.parse_invoke.call(null, env, form);
  }
};
cljs.analyzer.analyze_seq_STAR__wrap = function cljs$analyzer$analyze_seq_STAR__wrap(op, env, form, name, opts) {
  try {
    return cljs.analyzer.analyze_seq_STAR_.call(null, op, env, form, name, opts);
  } catch (e14761) {
    var err__13717__auto__ = e14761;
    if (cljs.analyzer.analysis_error_QMARK_.call(null, err__13717__auto__)) {
      throw err__13717__auto__;
    } else {
      throw cljs.analyzer.error.call(null, env, err__13717__auto__.message, err__13717__auto__);
    }
  }
};
cljs.analyzer.analyze_seq = function cljs$analyzer$analyze_seq(var_args) {
  var args14762 = [];
  var len__8523__auto___14765 = arguments.length;
  var i__8524__auto___14766 = 0;
  while (true) {
    if (i__8524__auto___14766 < len__8523__auto___14765) {
      args14762.push(arguments[i__8524__auto___14766]);
      var G__14767 = i__8524__auto___14766 + 1;
      i__8524__auto___14766 = G__14767;
      continue;
    } else {
    }
    break;
  }
  var G__14764 = args14762.length;
  switch(G__14764) {
    case 3:
      return cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14762.length)].join(""));
  }
};
cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$3 = function(env, form, name) {
  return cljs.analyzer.analyze_seq.call(null, env, form, name, cljs.core.truth_(cljs.env._STAR_compiler_STAR_) ? (new cljs.core.Keyword(null, "options", "options", 99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_)) : null);
};
cljs.analyzer.analyze_seq.cljs$core$IFn$_invoke$arity$4 = function(env, form, name, opts) {
  if ((new cljs.core.Keyword(null, "quoted?", "quoted?", 1464649621)).cljs$core$IFn$_invoke$arity$1(env)) {
    return cljs.analyzer.analyze_list.call(null, env, form);
  } else {
    var line = (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
    var line__$1 = line == null ? (new cljs.core.Keyword(null, "line", "line", 212345235)).cljs$core$IFn$_invoke$arity$1(env) : line;
    var col = (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, form));
    var col__$1 = col == null ? (new cljs.core.Keyword(null, "column", "column", 2078222095)).cljs$core$IFn$_invoke$arity$1(env) : col;
    var env__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "line", "line", 212345235), line__$1, new cljs.core.Keyword(null, "column", "column", 2078222095), col__$1);
    var op = cljs.core.first.call(null, form);
    if (op == null) {
      throw cljs.analyzer.error.call(null, env__$1, "Can't call nil");
    } else {
    }
    var mform = cljs.analyzer.macroexpand_1.call(null, env__$1, form);
    if (form === mform) {
      return cljs.analyzer.analyze_seq_STAR__wrap.call(null, op, env__$1, form, name, opts);
    } else {
      return cljs.analyzer.analyze.call(null, env__$1, mform, name, opts);
    }
  }
};
cljs.analyzer.analyze_seq.cljs$lang$maxFixedArity = 4;
cljs.analyzer.analyze_map = function cljs$analyzer$analyze_map(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var ks = function() {
    var _STAR_recur_frames_STAR_14773 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14773, expr_env) {
        return function(p1__14769_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14769_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14773, expr_env), cljs.core.keys.call(null, form)));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14773;
    }
  }();
  var vs = function() {
    var _STAR_recur_frames_STAR_14774 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14774, expr_env, ks) {
        return function(p1__14770_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14770_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14774, expr_env, ks), cljs.core.vals.call(null, form)));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14774;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "keys", "keys", 1068423698), ks, new cljs.core.Keyword(null, "vals", "vals", 768058733), vs, new cljs.core.Keyword(null, "children", "children", 
  -940561982), cljs.core.vec.call(null, cljs.core.interleave.call(null, ks, vs)), new cljs.core.Keyword(null, "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "IMap", "cljs.core/IMap", 1407777598, null)], null));
};
cljs.analyzer.analyze_list = function cljs$analyzer$analyze_list(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = function() {
    var _STAR_recur_frames_STAR_14777 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.doall.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14777, expr_env) {
        return function(p1__14775_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14775_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14777, expr_env), form));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14777;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "list", "list", 765357683), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, "tag", 
  "tag", -1290361223), new cljs.core.Symbol("cljs.core", "IList", "cljs.core/IList", 1015168964, null)], null));
};
cljs.analyzer.analyze_vector = function cljs$analyzer$analyze_vector(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = function() {
    var _STAR_recur_frames_STAR_14780 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14780, expr_env) {
        return function(p1__14778_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14778_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14780, expr_env), form));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14780;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "vector", "vector", 1902966158), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, 
  "tag", "tag", -1290361223), new cljs.core.Symbol("cljs.core", "IVector", "cljs.core/IVector", 1711112835, null)], null));
};
cljs.analyzer.analyze_set = function cljs$analyzer$analyze_set(env, form) {
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = function() {
    var _STAR_recur_frames_STAR_14783 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.vec.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14783, expr_env) {
        return function(p1__14781_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14781_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14783, expr_env), form));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14783;
    }
  }();
  return cljs.analyzer.analyze_wrap_meta.call(null, new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "set", "set", 304602554), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, "tag", 
  "tag", -1290361223), new cljs.core.Symbol("cljs.core", "ISet", "cljs.core/ISet", 2003412810, null)], null));
};
cljs.analyzer.analyze_js_value = function cljs$analyzer$analyze_js_value(env, form) {
  var val = form.val;
  var expr_env = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "context", "context", -830191113), new cljs.core.Keyword(null, "expr", "expr", 745722291));
  var items = cljs.core.map_QMARK_.call(null, val) ? cljs.core.zipmap.call(null, cljs.core.keys.call(null, val), function() {
    var _STAR_recur_frames_STAR_14788 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.doall.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14788, val, expr_env) {
        return function(p1__14784_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14784_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14788, val, expr_env), cljs.core.vals.call(null, val)));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14788;
    }
  }()) : function() {
    var _STAR_recur_frames_STAR_14789 = cljs.analyzer._STAR_recur_frames_STAR_;
    cljs.analyzer._STAR_recur_frames_STAR_ = cljs.core.cons.call(null, null, cljs.analyzer._STAR_recur_frames_STAR_);
    try {
      return cljs.core.doall.call(null, cljs.core.map.call(null, function(_STAR_recur_frames_STAR_14789, val, expr_env) {
        return function(p1__14785_SHARP_) {
          return cljs.analyzer.analyze.call(null, expr_env, p1__14785_SHARP_);
        };
      }(_STAR_recur_frames_STAR_14789, val, expr_env), val));
    } finally {
      cljs.analyzer._STAR_recur_frames_STAR_ = _STAR_recur_frames_STAR_14789;
    }
  }();
  return new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "js-value", "js-value", -758336661), new cljs.core.Keyword(null, "js-type", "js-type", 539386702), cljs.core.map_QMARK_.call(null, val) ? new cljs.core.Keyword(null, "object", "object", 1474613949) : new cljs.core.Keyword(null, "array", "array", -2080713842), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), 
  form, new cljs.core.Keyword(null, "items", "items", 1031954938), items, new cljs.core.Keyword(null, "children", "children", -940561982), items, new cljs.core.Keyword(null, "tag", "tag", -1290361223), cljs.core.map_QMARK_.call(null, val) ? new cljs.core.Symbol(null, "object", "object", -1179821820, null) : new cljs.core.Symbol(null, "array", "array", -440182315, null)], null);
};
cljs.analyzer.elide_reader_meta = function cljs$analyzer$elide_reader_meta(m) {
  return cljs.core.dissoc.call(null, m, new cljs.core.Keyword(null, "file", "file", -1269645878), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "column", "column", 2078222095), new cljs.core.Keyword(null, "end-column", "end-column", 1425389514), new cljs.core.Keyword(null, "end-line", "end-line", 1837326455), new cljs.core.Keyword(null, "source", "source", -433931539));
};
cljs.analyzer.analyze_wrap_meta = function cljs$analyzer$analyze_wrap_meta(expr) {
  var form = (new cljs.core.Keyword(null, "form", "form", -1624062471)).cljs$core$IFn$_invoke$arity$1(expr);
  var m = cljs.analyzer.elide_reader_meta.call(null, cljs.core.meta.call(null, form));
  if (!(cljs.core.seq.call(null, m) == null)) {
    var env = (new cljs.core.Keyword(null, "env", "env", -1815813235)).cljs$core$IFn$_invoke$arity$1(expr);
    var expr__$1 = cljs.core.assoc_in.call(null, expr, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "env", "env", -1815813235), new cljs.core.Keyword(null, "context", "context", -830191113)], null), new cljs.core.Keyword(null, "expr", "expr", 745722291));
    var meta_expr = cljs.analyzer.analyze_map.call(null, (new cljs.core.Keyword(null, "env", "env", -1815813235)).cljs$core$IFn$_invoke$arity$1(expr__$1), m);
    return new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "meta", "meta", 1499536964), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form, new cljs.core.Keyword(null, "meta", "meta", 1499536964), meta_expr, new cljs.core.Keyword(null, "expr", "expr", 745722291), expr__$1, new cljs.core.Keyword(null, "children", "children", -940561982), new cljs.core.PersistentVector(null, 
    2, 5, cljs.core.PersistentVector.EMPTY_NODE, [meta_expr, expr__$1], null)], null);
  } else {
    return expr;
  }
};
cljs.analyzer.infer_type = function cljs$analyzer$infer_type(env, ast, _) {
  if ((new cljs.core.Keyword(null, "tag", "tag", -1290361223)).cljs$core$IFn$_invoke$arity$1(ast) == null) {
    var temp__4659__auto__ = cljs.analyzer.infer_tag.call(null, env, ast);
    if (temp__4659__auto__ == null) {
      return ast;
    } else {
      var tag = temp__4659__auto__;
      return cljs.core.assoc.call(null, ast, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag);
    }
  } else {
    return ast;
  }
};
cljs.analyzer.repl_self_require_QMARK_ = function cljs$analyzer$repl_self_require_QMARK_(env, deps) {
  var and__7398__auto__ = (new cljs.core.Keyword(null, "repl-env", "repl-env", -1976503928)).cljs$core$IFn$_invoke$arity$1(env);
  if (cljs.core.truth_(and__7398__auto__)) {
    return cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.analyzer._STAR_cljs_ns_STAR_], true), deps);
  } else {
    return and__7398__auto__;
  }
};
cljs.analyzer._STAR_passes_STAR_ = null;
cljs.analyzer.analyze_form = function cljs$analyzer$analyze_form(env, form, name, opts) {
  if (form instanceof cljs.core.Symbol) {
    return cljs.analyzer.analyze_symbol.call(null, env, form);
  } else {
    if (cljs.analyzer.cljs_seq_QMARK_.call(null, form) && !(cljs.core.seq.call(null, form) == null)) {
      return cljs.analyzer.analyze_seq.call(null, env, form, name, opts);
    } else {
      if (cljs.analyzer.cljs_map_QMARK_.call(null, form)) {
        return cljs.analyzer.analyze_map.call(null, env, form);
      } else {
        if (cljs.analyzer.cljs_vector_QMARK_.call(null, form)) {
          return cljs.analyzer.analyze_vector.call(null, env, form);
        } else {
          if (cljs.analyzer.cljs_set_QMARK_.call(null, form)) {
            return cljs.analyzer.analyze_set.call(null, env, form);
          } else {
            if (form instanceof cljs.core.Keyword) {
              return cljs.analyzer.analyze_keyword.call(null, env, form);
            } else {
              if (form instanceof cljs.tagged_literals.JSValue) {
                return cljs.analyzer.analyze_js_value.call(null, env, form);
              } else {
                if (cljs.core._EQ_.call(null, cljs.core.List.EMPTY, form)) {
                  return cljs.analyzer.analyze_list.call(null, env, form);
                } else {
                  var tag = form == null ? cljs.analyzer.CLJ_NIL_SYM : typeof form === "number" ? cljs.analyzer.NUMBER_SYM : typeof form === "string" ? cljs.analyzer.STRING_SYM : form === true ? cljs.analyzer.BOOLEAN_SYM : form === false ? cljs.analyzer.BOOLEAN_SYM : null;
                  var G__14791 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "op", "op", -1882987955), new cljs.core.Keyword(null, "constant", "constant", -379609303), new cljs.core.Keyword(null, "env", "env", -1815813235), env, new cljs.core.Keyword(null, "form", "form", -1624062471), form], null);
                  if (cljs.core.truth_(tag)) {
                    return cljs.core.assoc.call(null, G__14791, new cljs.core.Keyword(null, "tag", "tag", -1290361223), tag);
                  } else {
                    return G__14791;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.analyzer.analyze_STAR_ = function cljs$analyzer$analyze_STAR_(env, form, name, opts) {
  var passes = cljs.analyzer._STAR_passes_STAR_;
  var passes__$1 = passes == null ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.analyzer.infer_type], null) : passes;
  var form__$1 = form instanceof cljs.core.LazySeq ? cljs.core.seq.call(null, form) ? form : cljs.core.List.EMPTY : form;
  var ast = cljs.analyzer.analyze_form.call(null, env, form__$1, name, opts);
  return cljs.core.reduce.call(null, function(passes, passes__$1, form__$1, ast) {
    return function(ast__$1, pass) {
      return pass.call(null, env, ast__$1, opts);
    };
  }(passes, passes__$1, form__$1, ast), ast, passes__$1);
};
cljs.analyzer.analyze = function cljs$analyzer$analyze(var_args) {
  var args14792 = [];
  var len__8523__auto___14797 = arguments.length;
  var i__8524__auto___14798 = 0;
  while (true) {
    if (i__8524__auto___14798 < len__8523__auto___14797) {
      args14792.push(arguments[i__8524__auto___14798]);
      var G__14799 = i__8524__auto___14798 + 1;
      i__8524__auto___14798 = G__14799;
      continue;
    } else {
    }
    break;
  }
  var G__14794 = args14792.length;
  switch(G__14794) {
    case 2:
      return cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14792.length)].join(""));
  }
};
cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$2 = function(env, form) {
  return cljs.analyzer.analyze.call(null, env, form, null);
};
cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$3 = function(env, form, name) {
  return cljs.analyzer.analyze.call(null, env, form, name, cljs.core.truth_(cljs.env._STAR_compiler_STAR_) ? (new cljs.core.Keyword(null, "options", "options", 99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_)) : null);
};
cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4 = function(env, form, name, opts) {
  var val__13681__auto__ = cljs.env._STAR_compiler_STAR_;
  if (val__13681__auto__ == null) {
    cljs.env._STAR_compiler_STAR_ = cljs.env.default_compiler_env.call(null);
  } else {
  }
  try {
    try {
      var _STAR_alias_map_STAR_14796 = cljs.tools.reader._STAR_alias_map_STAR_;
      cljs.tools.reader._STAR_alias_map_STAR_ = function() {
        var or__7410__auto__ = cljs.tools.reader._STAR_alias_map_STAR_;
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }();
      try {
        return cljs.analyzer.analyze_STAR_.call(null, env, form, name, opts);
      } finally {
        cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_14796;
      }
    } catch (e14795) {
      var err__13717__auto__ = e14795;
      if (cljs.analyzer.analysis_error_QMARK_.call(null, err__13717__auto__)) {
        throw err__13717__auto__;
      } else {
        throw cljs.analyzer.error.call(null, env, err__13717__auto__.message, err__13717__auto__);
      }
    }
  } finally {
    if (val__13681__auto__ == null) {
      cljs.env._STAR_compiler_STAR_ = null;
    } else {
    }
  }
};
cljs.analyzer.analyze.cljs$lang$maxFixedArity = 4;
cljs.analyzer.resolve_symbol = function cljs$analyzer$resolve_symbol(s) {
  return (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.assoc.call(null, cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_), new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_)), s));
};
cljs.analyzer.analyze_form_seq = function cljs$analyzer$analyze_form_seq(var_args) {
  var args14801 = [];
  var len__8523__auto___14808 = arguments.length;
  var i__8524__auto___14809 = 0;
  while (true) {
    if (i__8524__auto___14809 < len__8523__auto___14808) {
      args14801.push(arguments[i__8524__auto___14809]);
      var G__14810 = i__8524__auto___14809 + 1;
      i__8524__auto___14809 = G__14810;
      continue;
    } else {
    }
    break;
  }
  var G__14803 = args14801.length;
  switch(G__14803) {
    case 1:
      return cljs.analyzer.analyze_form_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.analyze_form_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args14801.length)].join(""));
  }
};
cljs.analyzer.analyze_form_seq.cljs$core$IFn$_invoke$arity$1 = function(forms) {
  return cljs.analyzer.analyze_form_seq.call(null, forms, cljs.core.truth_(cljs.env._STAR_compiler_STAR_) ? (new cljs.core.Keyword(null, "options", "options", 99638489)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, cljs.env._STAR_compiler_STAR_)) : null);
};
cljs.analyzer.analyze_form_seq.cljs$core$IFn$_invoke$arity$2 = function(forms, opts) {
  var env = cljs.core.assoc.call(null, cljs.analyzer.empty_env.call(null), new cljs.core.Keyword(null, "build-options", "build-options", 1183685779), opts);
  var _STAR_file_defs_STAR_14804 = cljs.analyzer._STAR_file_defs_STAR_;
  var _STAR_cljs_ns_STAR_14805 = cljs.analyzer._STAR_cljs_ns_STAR_;
  var _STAR_cljs_file_STAR_14806 = cljs.analyzer._STAR_cljs_file_STAR_;
  var _STAR_alias_map_STAR_14807 = cljs.tools.reader._STAR_alias_map_STAR_;
  cljs.analyzer._STAR_file_defs_STAR_ = null;
  cljs.analyzer._STAR_cljs_ns_STAR_ = new cljs.core.Symbol(null, "cljs.user", "cljs.user", 877795071, null);
  cljs.analyzer._STAR_cljs_file_STAR_ = null;
  cljs.tools.reader._STAR_alias_map_STAR_ = function() {
    var or__7410__auto__ = cljs.tools.reader._STAR_alias_map_STAR_;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return cljs.core.PersistentArrayMap.EMPTY;
    }
  }();
  try {
    var ns = null;
    var forms__$1 = forms;
    while (true) {
      if (!(forms__$1 == null)) {
        var form = cljs.core.first.call(null, forms__$1);
        var env__$1 = cljs.core.assoc.call(null, env, new cljs.core.Keyword(null, "ns", "ns", 441598760), cljs.analyzer.get_namespace.call(null, cljs.analyzer._STAR_cljs_ns_STAR_));
        var ast = cljs.analyzer.analyze.call(null, env__$1, form, null, opts);
        if (cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "op", "op", -1882987955)).cljs$core$IFn$_invoke$arity$1(ast), new cljs.core.Keyword(null, "ns", "ns", 441598760))) {
          var G__14812 = (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(ast);
          var G__14813 = cljs.core.next.call(null, forms__$1);
          ns = G__14812;
          forms__$1 = G__14813;
          continue;
        } else {
          var G__14814 = ns;
          var G__14815 = cljs.core.next.call(null, forms__$1);
          ns = G__14814;
          forms__$1 = G__14815;
          continue;
        }
      } else {
        return ns;
      }
      break;
    }
  } finally {
    cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_14807;
    cljs.analyzer._STAR_cljs_file_STAR_ = _STAR_cljs_file_STAR_14806;
    cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_14805;
    cljs.analyzer._STAR_file_defs_STAR_ = _STAR_file_defs_STAR_14804;
  }
};
cljs.analyzer.analyze_form_seq.cljs$lang$maxFixedArity = 2;
goog.provide("cljs.analyzer.api");
goog.require("cljs.core");
goog.require("cljs.env");
goog.require("cljs.analyzer");
cljs.analyzer.api.empty_state = function cljs$analyzer$api$empty_state() {
  return cljs.env.default_compiler_env.call(null);
};
cljs.analyzer.api.with_state = function cljs$analyzer$api$with_state(_AMPERSAND_form, _AMPERSAND_env, state, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.env", "with-compiler-env", "cljs.env/with-compiler-env", -1219561832, null)), function() {
    var x__8252__auto__ = state;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), body)));
};
cljs.analyzer.api.with_state.cljs$lang$macro = true;
cljs.analyzer.api.empty_env = function cljs$analyzer$api$empty_env() {
  return cljs.analyzer.empty_env.call(null);
};
cljs.analyzer.api.no_warn = function cljs$analyzer$api$no_warn(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16831 = arguments.length;
  var i__8524__auto___16832 = 0;
  while (true) {
    if (i__8524__auto___16832 < len__8523__auto___16831) {
      args__8530__auto__.push(arguments[i__8524__auto___16832]);
      var G__16833 = i__8524__auto___16832 + 1;
      i__8524__auto___16832 = G__16833;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 2 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(2), 0, null) : null;
  return cljs.analyzer.api.no_warn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8531__auto__);
};
cljs.analyzer.api.no_warn.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, body) {
  var no_warnings = cljs.core.zipmap.call(null, cljs.core.keys.call(null, cljs.analyzer._STAR_cljs_warnings_STAR_), cljs.core.repeat.call(null, false));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "binding", "cljs.core/binding", 2050379843, null)), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.analyzer", "*cljs-warnings*", "cljs.analyzer/*cljs-warnings*", -289667730, null)), function() {
      var x__8252__auto__ = no_warnings;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }()))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), body)));
};
cljs.analyzer.api.no_warn.cljs$lang$maxFixedArity = 2;
cljs.analyzer.api.no_warn.cljs$lang$applyTo = function(seq16828) {
  var G__16829 = cljs.core.first.call(null, seq16828);
  var seq16828__$1 = cljs.core.next.call(null, seq16828);
  var G__16830 = cljs.core.first.call(null, seq16828__$1);
  var seq16828__$2 = cljs.core.next.call(null, seq16828__$1);
  return cljs.analyzer.api.no_warn.cljs$core$IFn$_invoke$arity$variadic(G__16829, G__16830, seq16828__$2);
};
cljs.analyzer.api.no_warn.cljs$lang$macro = true;
cljs.analyzer.api.warning_enabled_QMARK_ = function cljs$analyzer$api$warning_enabled_QMARK_(warning_type) {
  return cljs.analyzer._STAR_cljs_warnings_STAR_.call(null, warning_type);
};
cljs.analyzer.api.default_warning_handler = function cljs$analyzer$api$default_warning_handler(warning_type, env, extra) {
  return cljs.analyzer.default_warning_handler.call(null, warning_type, env, extra);
};
cljs.analyzer.api.get_options = function cljs$analyzer$api$get_options(var_args) {
  var args16834 = [];
  var len__8523__auto___16837 = arguments.length;
  var i__8524__auto___16838 = 0;
  while (true) {
    if (i__8524__auto___16838 < len__8523__auto___16837) {
      args16834.push(arguments[i__8524__auto___16838]);
      var G__16839 = i__8524__auto___16838 + 1;
      i__8524__auto___16838 = G__16839;
      continue;
    } else {
    }
    break;
  }
  var G__16836 = args16834.length;
  switch(G__16836) {
    case 0:
      return cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16834.length)].join(""));
  }
};
cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.analyzer.api.get_options.call(null, cljs.env._STAR_compiler_STAR_);
};
cljs.analyzer.api.get_options.cljs$core$IFn$_invoke$arity$1 = function(state) {
  return cljs.core.get.call(null, cljs.core.deref.call(null, state), new cljs.core.Keyword(null, "options", "options", 99638489));
};
cljs.analyzer.api.get_options.cljs$lang$maxFixedArity = 1;
cljs.analyzer.api.get_js_index = function cljs$analyzer$api$get_js_index(var_args) {
  var args16841 = [];
  var len__8523__auto___16844 = arguments.length;
  var i__8524__auto___16845 = 0;
  while (true) {
    if (i__8524__auto___16845 < len__8523__auto___16844) {
      args16841.push(arguments[i__8524__auto___16845]);
      var G__16846 = i__8524__auto___16845 + 1;
      i__8524__auto___16845 = G__16846;
      continue;
    } else {
    }
    break;
  }
  var G__16843 = args16841.length;
  switch(G__16843) {
    case 0:
      return cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16841.length)].join(""));
  }
};
cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.analyzer.api.get_options.call(null, cljs.env._STAR_compiler_STAR_);
};
cljs.analyzer.api.get_js_index.cljs$core$IFn$_invoke$arity$1 = function(state) {
  return cljs.core.get.call(null, cljs.core.deref.call(null, state), new cljs.core.Keyword(null, "js-dependency-index", "js-dependency-index", -1887042131));
};
cljs.analyzer.api.get_js_index.cljs$lang$maxFixedArity = 1;
cljs.analyzer.api.resolve = function cljs$analyzer$api$resolve(env, sym) {
  if (cljs.core.map_QMARK_.call(null, env)) {
  } else {
    throw new Error("Assert failed: (map? env)");
  }
  if (sym instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? sym)");
  }
  try {
    return cljs.analyzer.resolve_var.call(null, env, sym, cljs.analyzer.confirm_var_exists_throw.call(null));
  } catch (e16849) {
    var e = e16849;
    return cljs.analyzer.resolve_macro_var.call(null, env, sym);
  }
};
cljs.analyzer.api.all_ns = function cljs$analyzer$api$all_ns(var_args) {
  var args16850 = [];
  var len__8523__auto___16853 = arguments.length;
  var i__8524__auto___16854 = 0;
  while (true) {
    if (i__8524__auto___16854 < len__8523__auto___16853) {
      args16850.push(arguments[i__8524__auto___16854]);
      var G__16855 = i__8524__auto___16854 + 1;
      i__8524__auto___16854 = G__16855;
      continue;
    } else {
    }
    break;
  }
  var G__16852 = args16850.length;
  switch(G__16852) {
    case 0:
      return cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16850.length)].join(""));
  }
};
cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.analyzer.api.all_ns.call(null, cljs.env._STAR_compiler_STAR_);
};
cljs.analyzer.api.all_ns.cljs$core$IFn$_invoke$arity$1 = function(state) {
  return cljs.core.keys.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, state), new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)));
};
cljs.analyzer.api.all_ns.cljs$lang$maxFixedArity = 1;
cljs.analyzer.api.find_ns = function cljs$analyzer$api$find_ns(var_args) {
  var args16857 = [];
  var len__8523__auto___16860 = arguments.length;
  var i__8524__auto___16861 = 0;
  while (true) {
    if (i__8524__auto___16861 < len__8523__auto___16860) {
      args16857.push(arguments[i__8524__auto___16861]);
      var G__16862 = i__8524__auto___16861 + 1;
      i__8524__auto___16861 = G__16862;
      continue;
    } else {
    }
    break;
  }
  var G__16859 = args16857.length;
  switch(G__16859) {
    case 1:
      return cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16857.length)].join(""));
  }
};
cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.analyzer.api.find_ns.call(null, cljs.env._STAR_compiler_STAR_, sym);
};
cljs.analyzer.api.find_ns.cljs$core$IFn$_invoke$arity$2 = function(state, sym) {
  if (sym instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? sym)");
  }
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), sym], null));
};
cljs.analyzer.api.find_ns.cljs$lang$maxFixedArity = 2;
cljs.analyzer.api.ns_interns = function cljs$analyzer$api$ns_interns(var_args) {
  var args16864 = [];
  var len__8523__auto___16867 = arguments.length;
  var i__8524__auto___16868 = 0;
  while (true) {
    if (i__8524__auto___16868 < len__8523__auto___16867) {
      args16864.push(arguments[i__8524__auto___16868]);
      var G__16869 = i__8524__auto___16868 + 1;
      i__8524__auto___16868 = G__16869;
      continue;
    } else {
    }
    break;
  }
  var G__16866 = args16864.length;
  switch(G__16866) {
    case 1:
      return cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16864.length)].join(""));
  }
};
cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.api.ns_interns.call(null, cljs.env._STAR_compiler_STAR_, ns);
};
cljs.analyzer.api.ns_interns.cljs$core$IFn$_invoke$arity$2 = function(state, ns) {
  if (ns instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? ns)");
  }
  return cljs.core.merge.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, state), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "macros", "macros", 811339431)], null)), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", 
  "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)));
};
cljs.analyzer.api.ns_interns.cljs$lang$maxFixedArity = 2;
cljs.analyzer.api.ns_publics = function cljs$analyzer$api$ns_publics(var_args) {
  var args16871 = [];
  var len__8523__auto___16878 = arguments.length;
  var i__8524__auto___16879 = 0;
  while (true) {
    if (i__8524__auto___16879 < len__8523__auto___16878) {
      args16871.push(arguments[i__8524__auto___16879]);
      var G__16880 = i__8524__auto___16879 + 1;
      i__8524__auto___16879 = G__16880;
      continue;
    } else {
    }
    break;
  }
  var G__16873 = args16871.length;
  switch(G__16873) {
    case 1:
      return cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16871.length)].join(""));
  }
};
cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.api.ns_publics.call(null, cljs.env._STAR_compiler_STAR_, ns);
};
cljs.analyzer.api.ns_publics.cljs$core$IFn$_invoke$arity$2 = function(state, ns) {
  if (ns instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? ns)");
  }
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.remove.call(null, function(p__16874) {
    var vec__16875 = p__16874;
    var k = cljs.core.nth.call(null, vec__16875, 0, null);
    var v = cljs.core.nth.call(null, vec__16875, 1, null);
    return (new cljs.core.Keyword(null, "private", "private", -558947994)).cljs$core$IFn$_invoke$arity$1(v);
  }, cljs.core.merge.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, state), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "macros", "macros", 811339431)], null)), cljs.core.get_in.call(null, cljs.core.deref.call(null, state), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", 
  "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717)], null)))));
};
cljs.analyzer.api.ns_publics.cljs$lang$maxFixedArity = 2;
cljs.analyzer.api.ns_resolve = function cljs$analyzer$api$ns_resolve(var_args) {
  var args16882 = [];
  var len__8523__auto___16885 = arguments.length;
  var i__8524__auto___16886 = 0;
  while (true) {
    if (i__8524__auto___16886 < len__8523__auto___16885) {
      args16882.push(arguments[i__8524__auto___16886]);
      var G__16887 = i__8524__auto___16886 + 1;
      i__8524__auto___16886 = G__16887;
      continue;
    } else {
    }
    break;
  }
  var G__16884 = args16882.length;
  switch(G__16884) {
    case 2:
      return cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16882.length)].join(""));
  }
};
cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$2 = function(ns, sym) {
  return cljs.analyzer.api.ns_resolve.call(null, cljs.env._STAR_compiler_STAR_, ns, sym);
};
cljs.analyzer.api.ns_resolve.cljs$core$IFn$_invoke$arity$3 = function(state, ns, sym) {
  if (ns instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? ns)");
  }
  if (sym instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? sym)");
  }
  return cljs.core.get_in.call(null, cljs.core.deref.call(null, state), new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927), ns, new cljs.core.Keyword(null, "defs", "defs", 1398449717), sym], null));
};
cljs.analyzer.api.ns_resolve.cljs$lang$maxFixedArity = 3;
cljs.analyzer.api.remove_ns = function cljs$analyzer$api$remove_ns(var_args) {
  var args16889 = [];
  var len__8523__auto___16892 = arguments.length;
  var i__8524__auto___16893 = 0;
  while (true) {
    if (i__8524__auto___16893 < len__8523__auto___16892) {
      args16889.push(arguments[i__8524__auto___16893]);
      var G__16894 = i__8524__auto___16893 + 1;
      i__8524__auto___16893 = G__16894;
      continue;
    } else {
    }
    break;
  }
  var G__16891 = args16889.length;
  switch(G__16891) {
    case 1:
      return cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16889.length)].join(""));
  }
};
cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$1 = function(ns) {
  return cljs.analyzer.api.remove_ns.call(null, cljs.env._STAR_compiler_STAR_, ns);
};
cljs.analyzer.api.remove_ns.cljs$core$IFn$_invoke$arity$2 = function(state, ns) {
  if (ns instanceof cljs.core.Symbol) {
  } else {
    throw new Error("Assert failed: (symbol? ns)");
  }
  return cljs.core.swap_BANG_.call(null, state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("cljs.analyzer", "namespaces", "cljs.analyzer/namespaces", -260788927)], null), cljs.core.dissoc, ns);
};
cljs.analyzer.api.remove_ns.cljs$lang$maxFixedArity = 2;
cljs.analyzer.api.in_cljs_user = function cljs$analyzer$api$in_cljs_user(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___16900 = arguments.length;
  var i__8524__auto___16901 = 0;
  while (true) {
    if (i__8524__auto___16901 < len__8523__auto___16900) {
      args__8530__auto__.push(arguments[i__8524__auto___16901]);
      var G__16902 = i__8524__auto___16901 + 1;
      i__8524__auto___16901 = G__16902;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 3 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(3), 0, null) : null;
  return cljs.analyzer.api.in_cljs_user.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8531__auto__);
};
cljs.analyzer.api.in_cljs_user.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, env, body) {
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "binding", "cljs.core/binding", 2050379843, null)), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.analyzer", "*cljs-ns*", "cljs.analyzer/*cljs-ns*", 1242529789, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs", "user", "cljs/user", -1293320483, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }()))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.env", "with-compiler-env", "cljs.env/with-compiler-env", -1219561832, null)), function() {
      var x__8252__auto__ = env;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), body)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
};
cljs.analyzer.api.in_cljs_user.cljs$lang$maxFixedArity = 3;
cljs.analyzer.api.in_cljs_user.cljs$lang$applyTo = function(seq16896) {
  var G__16897 = cljs.core.first.call(null, seq16896);
  var seq16896__$1 = cljs.core.next.call(null, seq16896);
  var G__16898 = cljs.core.first.call(null, seq16896__$1);
  var seq16896__$2 = cljs.core.next.call(null, seq16896__$1);
  var G__16899 = cljs.core.first.call(null, seq16896__$2);
  var seq16896__$3 = cljs.core.next.call(null, seq16896__$2);
  return cljs.analyzer.api.in_cljs_user.cljs$core$IFn$_invoke$arity$variadic(G__16897, G__16898, G__16899, seq16896__$3);
};
cljs.analyzer.api.in_cljs_user.cljs$lang$macro = true;
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("om.next.protocols");
goog.require("cljs.core");
om.next.protocols.IIndexer = function() {
};
om.next.protocols.indexes = function om$next$protocols$indexes(this$) {
  if (!(this$ == null) && !(this$.om$next$protocols$IIndexer$indexes$arity$1 == null)) {
    return this$.om$next$protocols$IIndexer$indexes$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.indexes[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next.protocols.indexes["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IIndexer.indexes", this$);
      }
    }
  }
};
om.next.protocols.index_root = function om$next$protocols$index_root(this$, x) {
  if (!(this$ == null) && !(this$.om$next$protocols$IIndexer$index_root$arity$2 == null)) {
    return this$.om$next$protocols$IIndexer$index_root$arity$2(this$, x);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.index_root[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, x);
    } else {
      var m__8079__auto____$1 = om.next.protocols.index_root["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, x);
      } else {
        throw cljs.core.missing_protocol.call(null, "IIndexer.index-root", this$);
      }
    }
  }
};
om.next.protocols.index_component_BANG_ = function om$next$protocols$index_component_BANG_(this$, component) {
  if (!(this$ == null) && !(this$.om$next$protocols$IIndexer$index_component_BANG_$arity$2 == null)) {
    return this$.om$next$protocols$IIndexer$index_component_BANG_$arity$2(this$, component);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.index_component_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, component);
    } else {
      var m__8079__auto____$1 = om.next.protocols.index_component_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, component);
      } else {
        throw cljs.core.missing_protocol.call(null, "IIndexer.index-component!", this$);
      }
    }
  }
};
om.next.protocols.drop_component_BANG_ = function om$next$protocols$drop_component_BANG_(this$, component) {
  if (!(this$ == null) && !(this$.om$next$protocols$IIndexer$drop_component_BANG_$arity$2 == null)) {
    return this$.om$next$protocols$IIndexer$drop_component_BANG_$arity$2(this$, component);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.drop_component_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, component);
    } else {
      var m__8079__auto____$1 = om.next.protocols.drop_component_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, component);
      } else {
        throw cljs.core.missing_protocol.call(null, "IIndexer.drop-component!", this$);
      }
    }
  }
};
om.next.protocols.ref_for = function om$next$protocols$ref_for(this$, component) {
  if (!(this$ == null) && !(this$.om$next$protocols$IIndexer$ref_for$arity$2 == null)) {
    return this$.om$next$protocols$IIndexer$ref_for$arity$2(this$, component);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.ref_for[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, component);
    } else {
      var m__8079__auto____$1 = om.next.protocols.ref_for["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, component);
      } else {
        throw cljs.core.missing_protocol.call(null, "IIndexer.ref-for", this$);
      }
    }
  }
};
om.next.protocols.key__GT_components = function om$next$protocols$key__GT_components(this$, k) {
  if (!(this$ == null) && !(this$.om$next$protocols$IIndexer$key__GT_components$arity$2 == null)) {
    return this$.om$next$protocols$IIndexer$key__GT_components$arity$2(this$, k);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.key__GT_components[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, k);
    } else {
      var m__8079__auto____$1 = om.next.protocols.key__GT_components["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, k);
      } else {
        throw cljs.core.missing_protocol.call(null, "IIndexer.key-\x3ecomponents", this$);
      }
    }
  }
};
om.next.protocols.IReconciler = function() {
};
om.next.protocols.basis_t = function om$next$protocols$basis_t(this$) {
  if (!(this$ == null) && !(this$.om$next$protocols$IReconciler$basis_t$arity$1 == null)) {
    return this$.om$next$protocols$IReconciler$basis_t$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.protocols.basis_t[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next.protocols.basis_t["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.basis-t", this$);
      }
    }
  }
};
om.next.protocols.add_root_BANG_ = function om$next$protocols$add_root_BANG_(reconciler, root_class, target, options) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$add_root_BANG_$arity$4 == null)) {
    return reconciler.om$next$protocols$IReconciler$add_root_BANG_$arity$4(reconciler, root_class, target, options);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.add_root_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler, root_class, target, options);
    } else {
      var m__8079__auto____$1 = om.next.protocols.add_root_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler, root_class, target, options);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.add-root!", reconciler);
      }
    }
  }
};
om.next.protocols.remove_root_BANG_ = function om$next$protocols$remove_root_BANG_(reconciler, target) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$remove_root_BANG_$arity$2 == null)) {
    return reconciler.om$next$protocols$IReconciler$remove_root_BANG_$arity$2(reconciler, target);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.remove_root_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler, target);
    } else {
      var m__8079__auto____$1 = om.next.protocols.remove_root_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler, target);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.remove-root!", reconciler);
      }
    }
  }
};
om.next.protocols.schedule_render_BANG_ = function om$next$protocols$schedule_render_BANG_(reconciler) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$schedule_render_BANG_$arity$1 == null)) {
    return reconciler.om$next$protocols$IReconciler$schedule_render_BANG_$arity$1(reconciler);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.schedule_render_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler);
    } else {
      var m__8079__auto____$1 = om.next.protocols.schedule_render_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.schedule-render!", reconciler);
      }
    }
  }
};
om.next.protocols.schedule_sends_BANG_ = function om$next$protocols$schedule_sends_BANG_(reconciler) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$schedule_sends_BANG_$arity$1 == null)) {
    return reconciler.om$next$protocols$IReconciler$schedule_sends_BANG_$arity$1(reconciler);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.schedule_sends_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler);
    } else {
      var m__8079__auto____$1 = om.next.protocols.schedule_sends_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.schedule-sends!", reconciler);
      }
    }
  }
};
om.next.protocols.queue_BANG_ = function om$next$protocols$queue_BANG_(var_args) {
  var args17063 = [];
  var len__8523__auto___17069 = arguments.length;
  var i__8524__auto___17070 = 0;
  while (true) {
    if (i__8524__auto___17070 < len__8523__auto___17069) {
      args17063.push(arguments[i__8524__auto___17070]);
      var G__17071 = i__8524__auto___17070 + 1;
      i__8524__auto___17070 = G__17071;
      continue;
    } else {
    }
    break;
  }
  var G__17065 = args17063.length;
  switch(G__17065) {
    case 2:
      return om.next.protocols.queue_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.protocols.queue_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17063.length)].join(""));
  }
};
om.next.protocols.queue_BANG_.cljs$core$IFn$_invoke$arity$2 = function(reconciler, ks) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$queue_BANG_$arity$2 == null)) {
    return reconciler.om$next$protocols$IReconciler$queue_BANG_$arity$2(reconciler, ks);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.queue_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler, ks);
    } else {
      var m__8079__auto____$1 = om.next.protocols.queue_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler, ks);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.queue!", reconciler);
      }
    }
  }
};
om.next.protocols.queue_BANG_.cljs$core$IFn$_invoke$arity$3 = function(reconciler, ks, remote) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$queue_BANG_$arity$3 == null)) {
    return reconciler.om$next$protocols$IReconciler$queue_BANG_$arity$3(reconciler, ks, remote);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.queue_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler, ks, remote);
    } else {
      var m__8079__auto____$1 = om.next.protocols.queue_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler, ks, remote);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.queue!", reconciler);
      }
    }
  }
};
om.next.protocols.queue_BANG_.cljs$lang$maxFixedArity = 3;
om.next.protocols.queue_sends_BANG_ = function om$next$protocols$queue_sends_BANG_(reconciler, sends) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$queue_sends_BANG_$arity$2 == null)) {
    return reconciler.om$next$protocols$IReconciler$queue_sends_BANG_$arity$2(reconciler, sends);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.queue_sends_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler, sends);
    } else {
      var m__8079__auto____$1 = om.next.protocols.queue_sends_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler, sends);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.queue-sends!", reconciler);
      }
    }
  }
};
om.next.protocols.reindex_BANG_ = function om$next$protocols$reindex_BANG_(reconciler) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$reindex_BANG_$arity$1 == null)) {
    return reconciler.om$next$protocols$IReconciler$reindex_BANG_$arity$1(reconciler);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.reindex_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler);
    } else {
      var m__8079__auto____$1 = om.next.protocols.reindex_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.reindex!", reconciler);
      }
    }
  }
};
om.next.protocols.reconcile_BANG_ = function om$next$protocols$reconcile_BANG_(var_args) {
  var args17066 = [];
  var len__8523__auto___17073 = arguments.length;
  var i__8524__auto___17074 = 0;
  while (true) {
    if (i__8524__auto___17074 < len__8523__auto___17073) {
      args17066.push(arguments[i__8524__auto___17074]);
      var G__17075 = i__8524__auto___17074 + 1;
      i__8524__auto___17074 = G__17075;
      continue;
    } else {
    }
    break;
  }
  var G__17068 = args17066.length;
  switch(G__17068) {
    case 1:
      return om.next.protocols.reconcile_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.protocols.reconcile_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17066.length)].join(""));
  }
};
om.next.protocols.reconcile_BANG_.cljs$core$IFn$_invoke$arity$1 = function(reconciler) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$reconcile_BANG_$arity$1 == null)) {
    return reconciler.om$next$protocols$IReconciler$reconcile_BANG_$arity$1(reconciler);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.reconcile_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler);
    } else {
      var m__8079__auto____$1 = om.next.protocols.reconcile_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.reconcile!", reconciler);
      }
    }
  }
};
om.next.protocols.reconcile_BANG_.cljs$core$IFn$_invoke$arity$2 = function(reconciler, remote) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$reconcile_BANG_$arity$2 == null)) {
    return reconciler.om$next$protocols$IReconciler$reconcile_BANG_$arity$2(reconciler, remote);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.reconcile_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler, remote);
    } else {
      var m__8079__auto____$1 = om.next.protocols.reconcile_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler, remote);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.reconcile!", reconciler);
      }
    }
  }
};
om.next.protocols.reconcile_BANG_.cljs$lang$maxFixedArity = 2;
om.next.protocols.send_BANG_ = function om$next$protocols$send_BANG_(reconciler) {
  if (!(reconciler == null) && !(reconciler.om$next$protocols$IReconciler$send_BANG_$arity$1 == null)) {
    return reconciler.om$next$protocols$IReconciler$send_BANG_$arity$1(reconciler);
  } else {
    var x__8078__auto__ = reconciler == null ? null : reconciler;
    var m__8079__auto__ = om.next.protocols.send_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, reconciler);
    } else {
      var m__8079__auto____$1 = om.next.protocols.send_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, reconciler);
      } else {
        throw cljs.core.missing_protocol.call(null, "IReconciler.send!", reconciler);
      }
    }
  }
};
goog.provide("om.tempid");
goog.require("cljs.core");
om.tempid.TempId = function(id, __hash) {
  this.id = id;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
om.tempid.TempId.prototype.toString = function() {
  var self__ = this;
  var this$ = this;
  return cljs.core.pr_str.call(null, this$);
};
om.tempid.TempId.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof om.tempid.TempId && cljs.core._EQ_.call(null, this$__$1.id, other.id);
};
om.tempid.TempId.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash.call(null, self__.id);
  } else {
  }
  return self__.__hash;
};
om.tempid.TempId.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core.write_all.call(null, writer, '#om/id["', self__.id, '"]');
};
om.tempid.TempId.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(new cljs.core.Symbol(null, "id", "id", 252129435, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null)), cljs.core.with_meta(new cljs.core.Symbol(null, "__hash", "__hash", -1328796629, null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "mutable", "mutable", 875778266), true], null))], null);
};
om.tempid.TempId.cljs$lang$type = true;
om.tempid.TempId.cljs$lang$ctorStr = "om.tempid/TempId";
om.tempid.TempId.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "om.tempid/TempId");
};
om.tempid.__GT_TempId = function om$tempid$__GT_TempId(id, __hash) {
  return new om.tempid.TempId(id, __hash);
};
om.tempid.tempid = function om$tempid$tempid(var_args) {
  var args17079 = [];
  var len__8523__auto___17082 = arguments.length;
  var i__8524__auto___17083 = 0;
  while (true) {
    if (i__8524__auto___17083 < len__8523__auto___17082) {
      args17079.push(arguments[i__8524__auto___17083]);
      var G__17084 = i__8524__auto___17083 + 1;
      i__8524__auto___17083 = G__17084;
      continue;
    } else {
    }
    break;
  }
  var G__17081 = args17079.length;
  switch(G__17081) {
    case 0:
      return om.tempid.tempid.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.tempid.tempid.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17079.length)].join(""));
  }
};
om.tempid.tempid.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.tempid.tempid.call(null, cljs.core.random_uuid.call(null));
};
om.tempid.tempid.cljs$core$IFn$_invoke$arity$1 = function(id) {
  return new om.tempid.TempId(id, null);
};
om.tempid.tempid.cljs$lang$maxFixedArity = 1;
om.tempid.tempid_QMARK_ = function om$tempid$tempid_QMARK_(x) {
  return x instanceof om.tempid.TempId;
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\x3d";
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
  util.btoa = function(input) {
    if (typeof btoa != "undefined") {
      return btoa(input);
    } else {
      var str = String(input);
      for (var block, charCode, idx = 0, map = util.chars, output = "";str.charAt(idx | 0) || (map = "\x3d", idx % 1);output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new Error("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
        }
        block = block << 8 | charCode;
      }
      return output;
    }
  };
  util.atob = function(input) {
    if (typeof atob != "undefined") {
      return atob(input);
    } else {
      var str = String(input).replace(/=+$/, "");
      if (str.length % 4 == 1) {
        throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
      }
      for (var bc = 0, bs, buffer, idx = 0, output = "";buffer = str.charAt(idx++);~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
        buffer = util.chars.indexOf(buffer);
      }
      return output;
    }
  };
  util.Uint8ToBase64 = function(u8Arr) {
    var CHUNK_SIZE = 32768, index = 0, length = u8Arr.length, result = "", slice = null;
    while (index < length) {
      slice = u8Arr.subarray(index, Math.min(index + CHUNK_SIZE, length));
      result += String.fromCharCode.apply(null, slice);
      index += CHUNK_SIZE;
    }
    return util.btoa(result);
  };
  util.Base64ToUint8 = function(base64) {
    var binary_string = util.atob(base64), len = binary_string.length, bytes = new Uint8Array(len);
    for (var i = 0;i < len;i++) {
      var ascii = binary_string.charCodeAt(i);
      bytes[i] = ascii;
    }
    return bytes;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.hashCodeProperty = "transit$hashCode$";
  eq.hashCodeCounter = 1;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      switch(typeof x) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        case "function":
          var code = x[eq.hashCodeProperty];
          if (code) {
            return code;
          } else {
            code = eq.hashCodeCounter;
            if (typeof Object.defineProperty != "undefined") {
              Object.defineProperty(x, eq.hashCodeProperty, {value:code, enumerable:false});
            } else {
              x[eq.hashCodeProperty] = code;
            }
            eq.hashCodeCounter++;
            return code;
          }
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  if (typeof Symbol != "undefined") {
    types.ITERATOR = Symbol.iterator;
  } else {
    types.ITERATOR = "@@iterator";
  }
  types.TaggedValue = function Transit$TaggedValue(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740991");
  types.MIN_INT = Long.fromString("-9007199254740991");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x, 10);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function Transit$Keyword(name) {
    this._name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this._name;
  };
  types.Keyword.prototype["namespace"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(0, idx);
    } else {
      return null;
    }
  };
  types.Keyword.prototype["name"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(idx + 1, this._name.length);
    } else {
      return this._name;
    }
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this._name == other._name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this._name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function Transit$Symbol(name) {
    this._name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype["namespace"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(0, idx);
    } else {
      return null;
    }
  };
  types.Symbol.prototype["name"] = function() {
    var idx = this._name.indexOf("/");
    if (idx != -1) {
      return this._name.substring(idx + 1, this._name.length);
    } else {
      return this._name;
    }
  };
  types.Symbol.prototype.toString = function() {
    return this._name;
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this._name == other._name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this._name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function Transit$UUID(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function() {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str, decoder) {
    if ((!decoder || decoder.preferBuffers !== false) && typeof Buffer != "undefined") {
      return new Buffer(str, "base64");
    } else {
      if (typeof Uint8Array != "undefined") {
        return util.Base64ToUint8(str);
      } else {
        return types.taggedValue("b", str);
      }
    }
  };
  types.isBinary = function(x) {
    if (typeof Buffer != "undefined" && x instanceof Buffer) {
      return true;
    } else {
      if (typeof Uint8Array != "undefined" && x instanceof Uint8Array) {
        return true;
      } else {
        return x instanceof types.TaggedValue && x.tag === "b";
      }
    }
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function Transit$ArrayMapIterator(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function() {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitArrayMapIterator.prototype[types.ITERATOR] = function() {
    return this;
  };
  types.TransitMapIterator = function Transit$MapIterator(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return {"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.TransitMapIterator.prototype[types.ITERATOR] = function() {
    return this;
  };
  types.mapEquals = function(me, you) {
    if (me instanceof types.TransitMap && types.isMap(you)) {
      if (me.size !== you.size) {
        return false;
      }
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (me instanceof types.TransitArrayMap && types.isMap(you)) {
        if (me.size !== you.size) {
          return false;
        }
        var entries = me._entries;
        for (var j = 0;j < entries.length;j += 2) {
          if (!eq.equals(entries[j + 1], you.get(entries[j]))) {
            return false;
          }
        }
        return true;
      } else {
        if (you != null && typeof you === "object") {
          var ks = util.objectKeys(you), kslen = ks.length;
          if (me.size === kslen) {
            for (var i = 0;i < kslen;i++) {
              var k = ks[i];
              if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
                return false;
              }
            }
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.print = function(x) {
    if (x == null) {
      return "null";
    }
    if (goog.isArray(x)) {
      return "[" + x.toString() + "]";
    } else {
      if (goog.isString(x)) {
        return '"' + x + '"';
      } else {
        return x.toString();
      }
    }
  };
  types.printMap = function(map) {
    var idx = 0, str = "TransitMap {";
    map.forEach(function(v, k) {
      str += types.print(k) + " \x3d\x3e " + types.print(v);
      if (idx < map.size - 1) {
        str += ", ";
      }
      idx++;
    });
    return str + "}";
  };
  types.printSet = function(set) {
    var idx = 0, str = "TransitSet {";
    set.forEach(function(v) {
      str += types.print(v);
      if (idx < set.size - 1) {
        str += ", ";
      }
      idx++;
    });
    return str + "}";
  };
  types.TransitArrayMap = function Transit$ArrayMap(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return types.printMap(this);
  };
  types.TransitArrayMap.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k, notFound) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return notFound;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      var ret = this.backingMap["delete"](k);
      this.size = this.backingMap.size;
      return ret;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          var ret = this._entries[i + 1];
          this._entries.splice(i, 2);
          this.size--;
          return ret;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.clone = function() {
    var clone = types.map();
    this.forEach(function(v, k) {
      clone.set(k, v);
    });
    return clone;
  };
  types.TransitArrayMap.prototype["clone"] = types.TransitArrayMap.prototype.clone;
  types.TransitArrayMap.prototype[types.ITERATOR] = function() {
    return this.entries();
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function Transit$Map(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return types.printMap(this);
  };
  types.TransitMap.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        var ret = bucket[i + 1];
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        return ret;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k, notFound) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return notFound;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.clone = function() {
    var clone = types.map();
    this.forEach(function(v, k) {
      clone.set(k, v);
    });
    return clone;
  };
  types.TransitMap.prototype["clone"] = types.TransitMap.prototype.clone;
  types.TransitMap.prototype[types.ITERATOR] = function() {
    return this.entries();
  };
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function Transit$Set(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return types.printSet(this);
  };
  types.TransitSet.prototype["inspect"] = function() {
    return this.toString();
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    var ret = this.map["delete"](value);
    this.size = this.map.size;
    return ret;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.clone = function() {
    var clone = types.set();
    this.forEach(function(k) {
      clone.add(k);
    });
    return clone;
  };
  types.TransitSet.prototype["clone"] = types.TransitSet.prototype.clone;
  types.TransitSet.prototype[types.ITERATOR] = function() {
    return this.values();
  };
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.TaggedValue && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
  types.specialDouble = function(v) {
    switch(v) {
      case "-INF":
        return -Infinity;
      case "INF":
        return Infinity;
      case "NaN":
        return NaN;
      default:
        throw new Error("Invalid special double value " + v);
        break;
    }
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function Transit$WriteCache() {
    this.idx = 0;
    this.gen++;
  };
  caching.writeCache = function() {
    return new caching.WriteCache;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function Transit$ReadCache() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
  caching.readCache = function() {
    return new caching.ReadCache;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function Transit$Tag(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      case "s":
      case "?":
      case "i":
      case "d":
      case "b":
      case "'":
      case "array":
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function Transit$Decoder(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.preferBuffers = this.options["preferBuffers"] != null ? this.options["preferBuffers"] : this.defaults.preferBuffers;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v, d) {
    return types.nullValue();
  }, "?":function(v, d) {
    return types.boolValue(v);
  }, "b":function(v, d) {
    return types.binary(v, d);
  }, "i":function(v, d) {
    return types.intValue(v);
  }, "n":function(v, d) {
    return types.bigInteger(v);
  }, "d":function(v, d) {
    return types.floatValue(v);
  }, "f":function(v, d) {
    return types.bigDecimalValue(v);
  }, "c":function(v, d) {
    return types.charValue(v);
  }, ":":function(v, d) {
    return types.keyword(v);
  }, "$":function(v, d) {
    return types.symbol(v);
  }, "r":function(v, d) {
    return types.uri(v);
  }, "z":function(v, d) {
    return types.specialDouble(v);
  }, "'":function(v, d) {
    return v;
  }, "m":function(v, d) {
    return types.date(v);
  }, "t":function(v, d) {
    return types.verboseDate(v);
  }, "u":function(v, d) {
    return types.uuid(v);
  }, "set":function(v, d) {
    return types.set(v);
  }, "list":function(v, d) {
    return types.list(v);
  }, "link":function(v, d) {
    return types.link(v);
  }, "cmap":function(v, d) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true, preferBuffers:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, asMapKey, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true), this);
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, asMapKey, true), this);
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, asMapKey, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init(node);
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2), this);
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function Transit$JSONUnmarshaller(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function Transit$Reader(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function Transit$NilHandler() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function Transit$StringHandler() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function Transit$NumberHandler() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function Transit$IntegerHandler() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function Transit$BooleanHandler() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function Transit$ArrayHandler() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function Transit$MapHandler() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function Transit$VerboseDateHandler() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function Transit$DateHandler() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function Transit$UUIDHandler() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function Transit$KeywordHandler() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v._name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function Transit$SymbolHandler() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v._name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function Transit$TaggedHandler() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function Transit$TransitSetHandler() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function Transit$ArrayMapHandler() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function Transit$MapHandler() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.BufferHandler = function Transit$BufferHandler() {
  };
  handlers.BufferHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.BufferHandler.prototype.rep = function(v) {
    return v.toString("base64");
  };
  handlers.BufferHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.Uint8ArrayHandler = function Transit$Uint8ArrayHandler() {
  };
  handlers.Uint8ArrayHandler.prototype.tag = function(v) {
    return "b";
  };
  handlers.Uint8ArrayHandler.prototype.rep = function(v) {
    return util.Uint8ToBase64(v);
  };
  handlers.Uint8ArrayHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    if (typeof Buffer != "undefined") {
      hs.set(Buffer, new handlers.BufferHandler);
    }
    if (typeof Uint8Array != "undefined") {
      hs.set(Uint8Array, new handlers.Uint8ArrayHandler);
    }
    return hs;
  };
  handlers.Handlers = function Transit$Handlers() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    var h = null;
    if (typeof ctor === "string") {
      h = this.handlers[ctor];
    } else {
      h = this.handlers[handlers.typeTag(ctor)];
    }
    if (h != null) {
      return h;
    } else {
      return this.handlers["default"];
    }
  };
  handlers.Handlers.prototype["get"] = handlers.Handlers.prototype.get;
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      case "string":
      case "boolean":
      case "number":
      case "array":
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function Transit$JSONMarshaller(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        if (k !== undefined) {
          self.handlers.set(k, v);
        } else {
          throw new Error("Cannot create handler for JavaScript undefined");
        }
      });
    }
    this.handlerForForeign = this.opts["handlerForForeign"];
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (i === Infinity) {
      return this.emitString(d.ESC, "z", "INF", asMapKey, cache);
    } else {
      if (i === -Infinity) {
        return this.emitString(d.ESC, "z", "-INF", asMapKey, cache);
      } else {
        if (isNaN(i)) {
          return this.emitString(d.ESC, "z", "NaN", asMapKey, cache);
        } else {
          if (asMapKey || typeof i === "string" || i instanceof Long) {
            return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
          } else {
            return i;
          }
        }
      }
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return [this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys(), step = null;
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.isForeignObject = function(x) {
    if (x.constructor["transit$isObject"]) {
      return true;
    }
    var ret = x.constructor.toString();
    ret = ret.substr("function ".length);
    ret = ret.substr(0, ret.indexOf("("));
    isObject = ret == "Object";
    if (typeof Object.defineProperty != "undefined") {
      Object.defineProperty(x.constructor, "transit$isObject", {value:isObject, enumerable:false});
    } else {
      x.constructor["transit$isObject"] = isObject;
    }
    return isObject;
  };
  writer.emitMap = function(em, obj, skip, cache) {
    var arr = null, rep = null, tag = null, ks = null, i = 0;
    if (obj.constructor === Object || obj.forEach != null || em.handlerForForeign && writer.isForeignObject(obj)) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            arr = em.unpack(obj);
            rep = [];
            tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], false, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, false, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          ks = util.objectKeys(obj);
          ret = {};
          for (;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            arr = em.unpack(obj);
            ret = ["^ "];
            if (arr) {
              for (;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            arr = em.unpack(obj);
            rep = [];
            tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], false, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, false, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return [tag, rep];
          }
        } else {
          ret = ["^ "];
          ks = util.objectKeys(obj);
          for (;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return [em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj) || (em.handlerForForeign ? em.handlerForForeign(obj, em.handlers) : null);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function Transit$Writer(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
var TRANSIT_DEV = true;
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var util = com.cognitect.transit.util, reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq, caching = com.cognitect.transit.caching;
  transit.MapLike;
  transit.SetLike;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashArrayLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.objectToMap = function(obj) {
    var ret = transit.map();
    for (var p in obj) {
      if (obj.hasOwnProperty(p)) {
        ret.set(p, obj[p]);
      }
    }
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.readCache = caching.readCache;
  transit.writeCache = caching.writeCache;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = util.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.objectToMap", transit.objectToMap);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", util.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
    goog.exportSymbol("transit.readCache", caching.readCache);
    goog.exportSymbol("transit.writeCache", caching.writeCache);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, objectToMap:transit.objectToMap, decoder:decoder.decoder, 
    UUIDfromString:types.UUIDfromString, randomUUID:util.randomUUID, stringableKeys:writer.stringableKeys, readCache:caching.readCache, writeCache:caching.writeCache};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
cljs.core.UUID.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return this$__$1.uuid === other.uuid;
  } else {
    if (other instanceof com.cognitect.transit.types.UUID) {
      return this$__$1.uuid === other.toString();
    } else {
      return false;
    }
  }
};
cljs.core.UUID.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID || other instanceof com.cognitect.transit.types.UUID) {
    return cljs.core.compare.call(null, this$__$1.toString(), other.toString());
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join(""));
  }
};
goog.math.Long.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof cljs.core.UUID) {
    return cljs.core._equiv.call(null, other, this$__$1);
  } else {
    return this$__$1.equiv(other);
  }
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IHash$ = cljs.core.PROTOCOL_SENTINEL;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.hash.call(null, this$__$1.toString());
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;
com.cognitect.transit.types.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(uuid, writer, _) {
  var uuid__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str.cljs$core$IFn$_invoke$arity$1('#uuid "'), cljs.core.str.cljs$core$IFn$_invoke$arity$1(uuid__$1.toString()), cljs.core.str.cljs$core$IFn$_invoke$arity$1('"')].join(""));
};
cognitect.transit.opts_merge = function cognitect$transit$opts_merge(a, b) {
  var seq__16909_16913 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__16910_16914 = null;
  var count__16911_16915 = 0;
  var i__16912_16916 = 0;
  while (true) {
    if (i__16912_16916 < count__16911_16915) {
      var k_16917 = cljs.core._nth.call(null, chunk__16910_16914, i__16912_16916);
      var v_16918 = b[k_16917];
      a[k_16917] = v_16918;
      var G__16919 = seq__16909_16913;
      var G__16920 = chunk__16910_16914;
      var G__16921 = count__16911_16915;
      var G__16922 = i__16912_16916 + 1;
      seq__16909_16913 = G__16919;
      chunk__16910_16914 = G__16920;
      count__16911_16915 = G__16921;
      i__16912_16916 = G__16922;
      continue;
    } else {
      var temp__4657__auto___16923 = cljs.core.seq.call(null, seq__16909_16913);
      if (temp__4657__auto___16923) {
        var seq__16909_16924__$1 = temp__4657__auto___16923;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16909_16924__$1)) {
          var c__8229__auto___16925 = cljs.core.chunk_first.call(null, seq__16909_16924__$1);
          var G__16926 = cljs.core.chunk_rest.call(null, seq__16909_16924__$1);
          var G__16927 = c__8229__auto___16925;
          var G__16928 = cljs.core.count.call(null, c__8229__auto___16925);
          var G__16929 = 0;
          seq__16909_16913 = G__16926;
          chunk__16910_16914 = G__16927;
          count__16911_16915 = G__16928;
          i__16912_16916 = G__16929;
          continue;
        } else {
          var k_16930 = cljs.core.first.call(null, seq__16909_16924__$1);
          var v_16931 = b[k_16930];
          a[k_16930] = v_16931;
          var G__16932 = cljs.core.next.call(null, seq__16909_16924__$1);
          var G__16933 = null;
          var G__16934 = 0;
          var G__16935 = 0;
          seq__16909_16913 = G__16932;
          chunk__16910_16914 = G__16933;
          count__16911_16915 = G__16934;
          i__16912_16916 = G__16935;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.MapBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.__GT_MapBuilder = function cognitect$transit$__GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.VectorBuilder.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.__GT_VectorBuilder = function cognitect$transit$__GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function cognitect$transit$reader(var_args) {
  var args16936 = [];
  var len__8523__auto___16939 = arguments.length;
  var i__8524__auto___16940 = 0;
  while (true) {
    if (i__8524__auto___16940 < len__8523__auto___16939) {
      args16936.push(arguments[i__8524__auto___16940]);
      var G__16941 = i__8524__auto___16940 + 1;
      i__8524__auto___16940 = G__16941;
      continue;
    } else {
    }
    break;
  }
  var G__16938 = args16936.length;
  switch(G__16938) {
    case 1:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args16936.length)].join(""));
  }
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.reader.call(null, type, null);
};
cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
    return cljs.core.symbol.call(null, v);
  }, ":", function(v) {
    return cljs.core.keyword.call(null, v);
  }, "set", function(v) {
    return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
  }, "list", function(v) {
    return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
  }, "cmap", function(v) {
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < v.length) {
        var G__16943 = i + 2;
        var G__16944 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
        i = G__16943;
        ret = G__16944;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, ret);
      }
      break;
    }
  }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts))), "mapBuilder":new cognitect.transit.MapBuilder, "arrayBuilder":new cognitect.transit.VectorBuilder, "prefersStrings":false}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.reader.cljs$lang$maxFixedArity = 2;
cognitect.transit.read = function cognitect$transit$read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.__GT_KeywordHandler = function cognitect$transit$__GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.__GT_SymbolHandler = function cognitect$transit$__GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__16945_16949 = cljs.core.seq.call(null, v);
  var chunk__16946_16950 = null;
  var count__16947_16951 = 0;
  var i__16948_16952 = 0;
  while (true) {
    if (i__16948_16952 < count__16947_16951) {
      var x_16953 = cljs.core._nth.call(null, chunk__16946_16950, i__16948_16952);
      ret.push(x_16953);
      var G__16954 = seq__16945_16949;
      var G__16955 = chunk__16946_16950;
      var G__16956 = count__16947_16951;
      var G__16957 = i__16948_16952 + 1;
      seq__16945_16949 = G__16954;
      chunk__16946_16950 = G__16955;
      count__16947_16951 = G__16956;
      i__16948_16952 = G__16957;
      continue;
    } else {
      var temp__4657__auto___16958 = cljs.core.seq.call(null, seq__16945_16949);
      if (temp__4657__auto___16958) {
        var seq__16945_16959__$1 = temp__4657__auto___16958;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16945_16959__$1)) {
          var c__8229__auto___16960 = cljs.core.chunk_first.call(null, seq__16945_16959__$1);
          var G__16961 = cljs.core.chunk_rest.call(null, seq__16945_16959__$1);
          var G__16962 = c__8229__auto___16960;
          var G__16963 = cljs.core.count.call(null, c__8229__auto___16960);
          var G__16964 = 0;
          seq__16945_16949 = G__16961;
          chunk__16946_16950 = G__16962;
          count__16947_16951 = G__16963;
          i__16948_16952 = G__16964;
          continue;
        } else {
          var x_16965 = cljs.core.first.call(null, seq__16945_16959__$1);
          ret.push(x_16965);
          var G__16966 = cljs.core.next.call(null, seq__16945_16959__$1);
          var G__16967 = null;
          var G__16968 = 0;
          var G__16969 = 0;
          seq__16945_16949 = G__16966;
          chunk__16946_16950 = G__16967;
          count__16947_16951 = G__16968;
          i__16948_16952 = G__16969;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.ListHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.__GT_ListHandler = function cognitect$transit$__GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.MapHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.__GT_MapHandler = function cognitect$transit$__GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__16970_16974 = cljs.core.seq.call(null, v);
  var chunk__16971_16975 = null;
  var count__16972_16976 = 0;
  var i__16973_16977 = 0;
  while (true) {
    if (i__16973_16977 < count__16972_16976) {
      var x_16978 = cljs.core._nth.call(null, chunk__16971_16975, i__16973_16977);
      ret.push(x_16978);
      var G__16979 = seq__16970_16974;
      var G__16980 = chunk__16971_16975;
      var G__16981 = count__16972_16976;
      var G__16982 = i__16973_16977 + 1;
      seq__16970_16974 = G__16979;
      chunk__16971_16975 = G__16980;
      count__16972_16976 = G__16981;
      i__16973_16977 = G__16982;
      continue;
    } else {
      var temp__4657__auto___16983 = cljs.core.seq.call(null, seq__16970_16974);
      if (temp__4657__auto___16983) {
        var seq__16970_16984__$1 = temp__4657__auto___16983;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16970_16984__$1)) {
          var c__8229__auto___16985 = cljs.core.chunk_first.call(null, seq__16970_16984__$1);
          var G__16986 = cljs.core.chunk_rest.call(null, seq__16970_16984__$1);
          var G__16987 = c__8229__auto___16985;
          var G__16988 = cljs.core.count.call(null, c__8229__auto___16985);
          var G__16989 = 0;
          seq__16970_16974 = G__16986;
          chunk__16971_16975 = G__16987;
          count__16972_16976 = G__16988;
          i__16973_16977 = G__16989;
          continue;
        } else {
          var x_16990 = cljs.core.first.call(null, seq__16970_16984__$1);
          ret.push(x_16990);
          var G__16991 = cljs.core.next.call(null, seq__16970_16984__$1);
          var G__16992 = null;
          var G__16993 = 0;
          var G__16994 = 0;
          seq__16970_16974 = G__16991;
          chunk__16971_16975 = G__16992;
          count__16972_16976 = G__16993;
          i__16973_16977 = G__16994;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.SetHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.__GT_SetHandler = function cognitect$transit$__GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__16995_16999 = cljs.core.seq.call(null, v);
  var chunk__16996_17000 = null;
  var count__16997_17001 = 0;
  var i__16998_17002 = 0;
  while (true) {
    if (i__16998_17002 < count__16997_17001) {
      var x_17003 = cljs.core._nth.call(null, chunk__16996_17000, i__16998_17002);
      ret.push(x_17003);
      var G__17004 = seq__16995_16999;
      var G__17005 = chunk__16996_17000;
      var G__17006 = count__16997_17001;
      var G__17007 = i__16998_17002 + 1;
      seq__16995_16999 = G__17004;
      chunk__16996_17000 = G__17005;
      count__16997_17001 = G__17006;
      i__16998_17002 = G__17007;
      continue;
    } else {
      var temp__4657__auto___17008 = cljs.core.seq.call(null, seq__16995_16999);
      if (temp__4657__auto___17008) {
        var seq__16995_17009__$1 = temp__4657__auto___17008;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__16995_17009__$1)) {
          var c__8229__auto___17010 = cljs.core.chunk_first.call(null, seq__16995_17009__$1);
          var G__17011 = cljs.core.chunk_rest.call(null, seq__16995_17009__$1);
          var G__17012 = c__8229__auto___17010;
          var G__17013 = cljs.core.count.call(null, c__8229__auto___17010);
          var G__17014 = 0;
          seq__16995_16999 = G__17011;
          chunk__16996_17000 = G__17012;
          count__16997_17001 = G__17013;
          i__16998_17002 = G__17014;
          continue;
        } else {
          var x_17015 = cljs.core.first.call(null, seq__16995_17009__$1);
          ret.push(x_17015);
          var G__17016 = cljs.core.next.call(null, seq__16995_17009__$1);
          var G__17017 = null;
          var G__17018 = 0;
          var G__17019 = 0;
          seq__16995_16999 = G__17016;
          chunk__16996_17000 = G__17017;
          count__16997_17001 = G__17018;
          i__16998_17002 = G__17019;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.VectorHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.__GT_VectorHandler = function cognitect$transit$__GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.UUIDHandler = function() {
};
cognitect.transit.UUIDHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "u";
};
cognitect.transit.UUIDHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.uuid;
};
cognitect.transit.UUIDHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var this$ = this;
  return this$.rep(v);
};
cognitect.transit.UUIDHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cognitect.transit.UUIDHandler.cljs$lang$type = true;
cognitect.transit.UUIDHandler.cljs$lang$ctorStr = "cognitect.transit/UUIDHandler";
cognitect.transit.UUIDHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/UUIDHandler");
};
cognitect.transit.__GT_UUIDHandler = function cognitect$transit$__GT_UUIDHandler() {
  return new cognitect.transit.UUIDHandler;
};
cognitect.transit.writer = function cognitect$transit$writer(var_args) {
  var args17020 = [];
  var len__8523__auto___17035 = arguments.length;
  var i__8524__auto___17036 = 0;
  while (true) {
    if (i__8524__auto___17036 < len__8523__auto___17035) {
      args17020.push(arguments[i__8524__auto___17036]);
      var G__17037 = i__8524__auto___17036 + 1;
      i__8524__auto___17036 = G__17037;
      continue;
    } else {
    }
    break;
  }
  var G__17022 = args17020.length;
  switch(G__17022) {
    case 1:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17020.length)].join(""));
  }
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(type) {
  return cognitect.transit.writer.call(null, type, null);
};
cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2 = function(type, opts) {
  var keyword_handler = new cognitect.transit.KeywordHandler;
  var symbol_handler = new cognitect.transit.SymbolHandler;
  var list_handler = new cognitect.transit.ListHandler;
  var map_handler = new cognitect.transit.MapHandler;
  var set_handler = new cognitect.transit.SetHandler;
  var vector_handler = new cognitect.transit.VectorHandler;
  var uuid_handler = new cognitect.transit.UUIDHandler;
  var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
  cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.UUID, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, 
  symbol_handler, uuid_handler, list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
  return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(m, kfn, vfn) {
      return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
        return function(obj, k, v) {
          var G__17023 = obj;
          G__17023.push(kfn.call(null, k), vfn.call(null, v));
          return G__17023;
        };
      }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), ["^ "], m);
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers), "handlers":function() {
    var x17024 = cljs.core.clone.call(null, handlers);
    x17024.forEach = function(x17024, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
      return function(f) {
        var coll = this;
        var seq__17025 = cljs.core.seq.call(null, coll);
        var chunk__17026 = null;
        var count__17027 = 0;
        var i__17028 = 0;
        while (true) {
          if (i__17028 < count__17027) {
            var vec__17029 = cljs.core._nth.call(null, chunk__17026, i__17028);
            var k = cljs.core.nth.call(null, vec__17029, 0, null);
            var v = cljs.core.nth.call(null, vec__17029, 1, null);
            f.call(null, v, k);
            var G__17039 = seq__17025;
            var G__17040 = chunk__17026;
            var G__17041 = count__17027;
            var G__17042 = i__17028 + 1;
            seq__17025 = G__17039;
            chunk__17026 = G__17040;
            count__17027 = G__17041;
            i__17028 = G__17042;
            continue;
          } else {
            var temp__4657__auto__ = cljs.core.seq.call(null, seq__17025);
            if (temp__4657__auto__) {
              var seq__17025__$1 = temp__4657__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__17025__$1)) {
                var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__17025__$1);
                var G__17043 = cljs.core.chunk_rest.call(null, seq__17025__$1);
                var G__17044 = c__8229__auto__;
                var G__17045 = cljs.core.count.call(null, c__8229__auto__);
                var G__17046 = 0;
                seq__17025 = G__17043;
                chunk__17026 = G__17044;
                count__17027 = G__17045;
                i__17028 = G__17046;
                continue;
              } else {
                var vec__17032 = cljs.core.first.call(null, seq__17025__$1);
                var k = cljs.core.nth.call(null, vec__17032, 0, null);
                var v = cljs.core.nth.call(null, vec__17032, 1, null);
                f.call(null, v, k);
                var G__17047 = cljs.core.next.call(null, seq__17025__$1);
                var G__17048 = null;
                var G__17049 = 0;
                var G__17050 = 0;
                seq__17025 = G__17047;
                chunk__17026 = G__17048;
                count__17027 = G__17049;
                i__17028 = G__17050;
                continue;
              }
            } else {
              return null;
            }
          }
          break;
        }
      };
    }(x17024, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers);
    return x17024;
  }(), "unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers) {
    return function(x) {
      if (x instanceof cljs.core.PersistentArrayMap) {
        return x.arr;
      } else {
        return false;
      }
    };
  }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, uuid_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
};
cognitect.transit.writer.cljs$lang$maxFixedArity = 2;
cognitect.transit.write = function cognitect$transit$write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function cognitect$transit$read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function cognitect$transit$write_handler(var_args) {
  var args17051 = [];
  var len__8523__auto___17057 = arguments.length;
  var i__8524__auto___17058 = 0;
  while (true) {
    if (i__8524__auto___17058 < len__8523__auto___17057) {
      args17051.push(arguments[i__8524__auto___17058]);
      var G__17059 = i__8524__auto___17058 + 1;
      i__8524__auto___17058 = G__17059;
      continue;
    } else {
    }
    break;
  }
  var G__17053 = args17051.length;
  switch(G__17053) {
    case 2:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17051.length)].join(""));
  }
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$2 = function(tag_fn, rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, null, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$3 = function(tag_fn, rep_fn, str_rep_fn) {
  return cognitect.transit.write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
};
cognitect.transit.write_handler.cljs$core$IFn$_invoke$arity$4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
  if (typeof cognitect.transit.t_cognitect$transit17054 !== "undefined") {
  } else {
    cognitect.transit.t_cognitect$transit17054 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, meta17055) {
      this.tag_fn = tag_fn;
      this.rep_fn = rep_fn;
      this.str_rep_fn = str_rep_fn;
      this.verbose_handler_fn = verbose_handler_fn;
      this.meta17055 = meta17055;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cognitect.transit.t_cognitect$transit17054.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_17056, meta17055__$1) {
      var self__ = this;
      var _17056__$1 = this;
      return new cognitect.transit.t_cognitect$transit17054(self__.tag_fn, self__.rep_fn, self__.str_rep_fn, self__.verbose_handler_fn, meta17055__$1);
    };
    cognitect.transit.t_cognitect$transit17054.prototype.cljs$core$IMeta$_meta$arity$1 = function(_17056) {
      var self__ = this;
      var _17056__$1 = this;
      return self__.meta17055;
    };
    cognitect.transit.t_cognitect$transit17054.prototype.tag = function(o) {
      var self__ = this;
      var _ = this;
      return self__.tag_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit17054.prototype.rep = function(o) {
      var self__ = this;
      var _ = this;
      return self__.rep_fn.call(null, o);
    };
    cognitect.transit.t_cognitect$transit17054.prototype.stringRep = function(o) {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.str_rep_fn)) {
        return self__.str_rep_fn.call(null, o);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit17054.prototype.getVerboseHandler = function() {
      var self__ = this;
      var _ = this;
      if (cljs.core.truth_(self__.verbose_handler_fn)) {
        return self__.verbose_handler_fn.call(null);
      } else {
        return null;
      }
    };
    cognitect.transit.t_cognitect$transit17054.getBasis = function() {
      return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "tag-fn", "tag-fn", 242055482, null), new cljs.core.Symbol(null, "rep-fn", "rep-fn", -1724891035, null), new cljs.core.Symbol(null, "str-rep-fn", "str-rep-fn", -1179615016, null), new cljs.core.Symbol(null, "verbose-handler-fn", "verbose-handler-fn", 547340594, null), new cljs.core.Symbol(null, "meta17055", "meta17055", 453017073, null)], null);
    };
    cognitect.transit.t_cognitect$transit17054.cljs$lang$type = true;
    cognitect.transit.t_cognitect$transit17054.cljs$lang$ctorStr = "cognitect.transit/t_cognitect$transit17054";
    cognitect.transit.t_cognitect$transit17054.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
      return cljs.core._write.call(null, writer__8022__auto__, "cognitect.transit/t_cognitect$transit17054");
    };
    cognitect.transit.__GT_t_cognitect$transit17054 = function cognitect$transit$__GT_t_cognitect$transit17054(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta17055) {
      return new cognitect.transit.t_cognitect$transit17054(tag_fn__$1, rep_fn__$1, str_rep_fn__$1, verbose_handler_fn__$1, meta17055);
    };
  }
  return new cognitect.transit.t_cognitect$transit17054(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.write_handler.cljs$lang$maxFixedArity = 4;
cognitect.transit.tagged_value = function cognitect$transit$tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function cognitect$transit$tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function cognitect$transit$integer(s) {
  return com.cognitect.transit.types.intValue.call(null, s);
};
cognitect.transit.integer_QMARK_ = function cognitect$transit$integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function cognitect$transit$bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function cognitect$transit$bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function cognitect$transit$bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function cognitect$transit$bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function cognitect$transit$uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function cognitect$transit$uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function cognitect$transit$uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function cognitect$transit$uuid_QMARK_(x) {
  var or__7410__auto__ = com.cognitect.transit.types.isUUID.call(null, x);
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return x instanceof cljs.core.UUID;
  }
};
cognitect.transit.binary = function cognitect$transit$binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function cognitect$transit$binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function cognitect$transit$quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function cognitect$transit$quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function cognitect$transit$link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function cognitect$transit$link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("om.transit");
goog.require("cljs.core");
goog.require("cognitect.transit");
goog.require("com.cognitect.transit");
goog.require("om.tempid");
om.transit.TempIdHandler = function() {
};
om.transit.TempIdHandler.prototype.tag = function(_) {
  var self__ = this;
  var ___$1 = this;
  return "om/id";
};
om.transit.TempIdHandler.prototype.rep = function(r) {
  var self__ = this;
  var _ = this;
  return r.id;
};
om.transit.TempIdHandler.prototype.stringRep = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
om.transit.TempIdHandler.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
om.transit.TempIdHandler.cljs$lang$type = true;
om.transit.TempIdHandler.cljs$lang$ctorStr = "om.transit/TempIdHandler";
om.transit.TempIdHandler.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "om.transit/TempIdHandler");
};
om.transit.__GT_TempIdHandler = function om$transit$__GT_TempIdHandler() {
  return new om.transit.TempIdHandler;
};
om.transit.writer = function om$transit$writer(var_args) {
  var args17088 = [];
  var len__8523__auto___17091 = arguments.length;
  var i__8524__auto___17092 = 0;
  while (true) {
    if (i__8524__auto___17092 < len__8523__auto___17091) {
      args17088.push(arguments[i__8524__auto___17092]);
      var G__17093 = i__8524__auto___17092 + 1;
      i__8524__auto___17092 = G__17093;
      continue;
    } else {
    }
    break;
  }
  var G__17090 = args17088.length;
  switch(G__17090) {
    case 0:
      return om.transit.writer.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.transit.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17088.length)].join(""));
  }
};
om.transit.writer.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.transit.writer.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
om.transit.writer.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  return cognitect.transit.writer.call(null, new cljs.core.Keyword(null, "json", "json", 1279968570), cljs.core.assoc_in.call(null, opts, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "handlers", "handlers", 79528781), om.tempid.TempId], null), new om.transit.TempIdHandler));
};
om.transit.writer.cljs$lang$maxFixedArity = 1;
om.transit.reader = function om$transit$reader(var_args) {
  var args17095 = [];
  var len__8523__auto___17098 = arguments.length;
  var i__8524__auto___17099 = 0;
  while (true) {
    if (i__8524__auto___17099 < len__8523__auto___17098) {
      args17095.push(arguments[i__8524__auto___17099]);
      var G__17100 = i__8524__auto___17099 + 1;
      i__8524__auto___17099 = G__17100;
      continue;
    } else {
    }
    break;
  }
  var G__17097 = args17095.length;
  switch(G__17097) {
    case 0:
      return om.transit.reader.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.transit.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args17095.length)].join(""));
  }
};
om.transit.reader.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.transit.reader.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
om.transit.reader.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  return cognitect.transit.reader.call(null, new cljs.core.Keyword(null, "json", "json", 1279968570), cljs.core.assoc_in.call(null, opts, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "handlers", "handlers", 79528781), "om/id"], null), function(id) {
    return om.tempid.tempid.call(null, id);
  }));
};
om.transit.reader.cljs$lang$maxFixedArity = 1;
goog.provide("om.next");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.log");
goog.require("om.next.cache");
goog.require("om.next.impl.parser");
goog.require("om.tempid");
goog.require("om.transit");
goog.require("om.util");
goog.require("clojure.zip");
goog.require("om.next.protocols");
goog.require("cljs.analyzer");
goog.require("cljs.analyzer.api");
goog.require("clojure.string");
goog.require("goog.debug.Console");
om.next.collect_statics = function om$next$collect_statics(dt) {
  var split_on_static = function om$next$collect_statics_$_split_on_static(forms) {
    return cljs.core.split_with.call(null, cljs.core.complement.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "static", "static", -1440077198, null), null], null), null)), forms);
  };
  var split_on_symbol = function om$next$collect_statics_$_split_on_symbol(forms) {
    return cljs.core.split_with.call(null, cljs.core.complement.call(null, cljs.core.symbol_QMARK_), forms);
  };
  var dt__$1 = cljs.core.seq.call(null, dt);
  var dt_SINGLEQUOTE_ = cljs.core.PersistentVector.EMPTY;
  var statics = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "fields", "fields", -1932066230), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "protocols", "protocols", -5615896), cljs.core.PersistentVector.EMPTY], null);
  while (true) {
    if (dt__$1) {
      var vec__18333 = split_on_static.call(null, dt__$1);
      var pre = cljs.core.nth.call(null, vec__18333, 0, null);
      var vec__18336 = cljs.core.nth.call(null, vec__18333, 1, null);
      var seq__18337 = cljs.core.seq.call(null, vec__18336);
      var first__18338 = cljs.core.first.call(null, seq__18337);
      var seq__18337__$1 = cljs.core.next.call(null, seq__18337);
      var _ = first__18338;
      var first__18338__$1 = cljs.core.first.call(null, seq__18337__$1);
      var seq__18337__$2 = cljs.core.next.call(null, seq__18337__$1);
      var sym = first__18338__$1;
      var remaining = seq__18337__$2;
      var post = vec__18336;
      var dt_SINGLEQUOTE___$1 = cljs.core.into.call(null, dt_SINGLEQUOTE_, pre);
      if (cljs.core.seq.call(null, post)) {
        if (cljs.core._EQ_.call(null, sym, new cljs.core.Symbol(null, "field", "field", 338095027, null))) {
          var vec__18339 = cljs.core.split_at.call(null, 2, remaining);
          var field_info = cljs.core.nth.call(null, vec__18339, 0, null);
          var dt__$2 = cljs.core.nth.call(null, vec__18339, 1, null);
          var G__18345 = cljs.core.seq.call(null, dt__$2);
          var G__18346 = dt_SINGLEQUOTE___$1;
          var G__18347 = cljs.core.update_in.call(null, statics, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "fields", "fields", -1932066230)], null), cljs.core.conj, cljs.core.vec.call(null, field_info));
          dt__$1 = G__18345;
          dt_SINGLEQUOTE_ = G__18346;
          statics = G__18347;
          continue;
        } else {
          if (sym instanceof cljs.core.Symbol) {
            var vec__18342 = split_on_symbol.call(null, remaining);
            var protocol_info = cljs.core.nth.call(null, vec__18342, 0, null);
            var dt__$2 = cljs.core.nth.call(null, vec__18342, 1, null);
            var G__18348 = cljs.core.seq.call(null, dt__$2);
            var G__18349 = dt_SINGLEQUOTE___$1;
            var G__18350 = cljs.core.update_in.call(null, statics, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "protocols", "protocols", -5615896)], null), cljs.core.into, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [sym], null), protocol_info));
            dt__$1 = G__18348;
            dt_SINGLEQUOTE_ = G__18349;
            statics = G__18350;
            continue;
          } else {
            throw new Error("Malformed static");
          }
        }
      } else {
        var G__18351 = null;
        var G__18352 = dt_SINGLEQUOTE___$1;
        var G__18353 = statics;
        dt__$1 = G__18351;
        dt_SINGLEQUOTE_ = G__18352;
        statics = G__18353;
        continue;
      }
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "dt", "dt", -368444759), dt_SINGLEQUOTE_, new cljs.core.Keyword(null, "statics", "statics", -1984882809), statics], null);
    }
    break;
  }
};
om.next.validate_statics = function om$next$validate_statics(dt) {
  var temp__4657__auto__ = cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, ["IQueryParams", null, "IQuery", null, "Ident", null], null), null), cljs.core.map.call(null, function(p1__18354_SHARP_) {
    return cljs.core.last.call(null, clojure.string.split.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__18354_SHARP_)].join(""), /\//));
  }, cljs.core.filter.call(null, cljs.core.symbol_QMARK_, dt)));
  if (cljs.core.truth_(temp__4657__auto__)) {
    var invalid = temp__4657__auto__;
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(invalid), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" protocol declaration must appear with `static`.")].join(""));
  } else {
    return null;
  }
};
om.next.lifecycle_sigs = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Symbol(null, "initLocalState", "initLocalState", 1594027651, null), new cljs.core.Symbol(null, "componentWillMount", "componentWillMount", 1355203908, null), new cljs.core.Symbol(null, "componentDidUpdate", "componentDidUpdate", -342946454, null), new cljs.core.Symbol(null, "componentWillUnmount", "componentWillUnmount", -1080646955, null), new cljs.core.Symbol(null, "componentWillReceiveProps", "componentWillReceiveProps", 
-2094446795, null), new cljs.core.Symbol(null, "shouldComponentUpdate", "shouldComponentUpdate", -858684809, null), new cljs.core.Symbol(null, "render", "render", 232498073, null), new cljs.core.Symbol(null, "componentWillUpdate", "componentWillUpdate", -1997044837, null), new cljs.core.Symbol(null, "componentDidMount", "componentDidMount", -1698724833, null)], [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, 
null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null), new cljs.core.Symbol(null, "prev-props", "prev-props", 1081981230, null), new cljs.core.Symbol(null, "prev-state", "prev-state", 1365252518, null)], null), new cljs.core.PersistentVector(null, 
1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null), new cljs.core.Symbol(null, "next-props", "next-props", -266324026, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null), new cljs.core.Symbol(null, 
"next-props", "next-props", -266324026, null), new cljs.core.Symbol(null, "next-state", "next-state", 211803275, null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null)], null), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null), new cljs.core.Symbol(null, "next-props", "next-props", -266324026, null), new cljs.core.Symbol(null, 
"next-state", "next-state", 211803275, null)], null), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "this", "this", 1028897902, null)], null)]);
om.next.validate_sig = function om$next$validate_sig(p__18355) {
  var vec__18359 = p__18355;
  var name = cljs.core.nth.call(null, vec__18359, 0, null);
  var sig = cljs.core.nth.call(null, vec__18359, 1, null);
  var method = vec__18359;
  var sig_SINGLEQUOTE_ = cljs.core.get.call(null, om.next.lifecycle_sigs, name);
  if (cljs.core._EQ_.call(null, cljs.core.count.call(null, sig_SINGLEQUOTE_), cljs.core.count.call(null, sig))) {
    return null;
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid signature for "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" got "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sig), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", need "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(sig_SINGLEQUOTE_)].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), 
    cljs.core.str.cljs$core$IFn$_invoke$arity$1("(\x3d (count sig') (count sig))")].join(""));
  }
};
om.next.reshape_map = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reshape", "reshape", 1588089910), new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Symbol(null, "initLocalState", "initLocalState", 1594027651, null), function(p__18405) {
  var vec__18406 = p__18405;
  var seq__18407 = cljs.core.seq.call(null, vec__18406);
  var first__18408 = cljs.core.first.call(null, seq__18407);
  var seq__18407__$1 = cljs.core.next.call(null, seq__18407);
  var name = first__18408;
  var first__18408__$1 = cljs.core.first.call(null, seq__18407__$1);
  var seq__18407__$2 = cljs.core.next.call(null, seq__18407__$1);
  var vec__18409 = first__18408__$1;
  var this$ = cljs.core.nth.call(null, vec__18409, 0, null);
  var args = vec__18409;
  var body = seq__18407__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = args;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__18369__auto__", "ret__18369__auto__", 1701329681, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body)));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "js-obj", "cljs.core/js-obj", 1009370607, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$state"), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__18369__auto__", "ret__18369__auto__", 1701329681, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}, new cljs.core.Symbol(null, "componentWillReceiveProps", "componentWillReceiveProps", -2094446795, null), function(p__18412) {
  var vec__18413 = p__18412;
  var seq__18414 = cljs.core.seq.call(null, vec__18413);
  var first__18415 = cljs.core.first.call(null, seq__18414);
  var seq__18414__$1 = cljs.core.next.call(null, seq__18414);
  var name = first__18415;
  var first__18415__$1 = cljs.core.first.call(null, seq__18414__$1);
  var seq__18414__$2 = cljs.core.next.call(null, seq__18414__$1);
  var vec__18416 = first__18415__$1;
  var this$ = cljs.core.nth.call(null, vec__18416, 0, null);
  var next_props = cljs.core.nth.call(null, vec__18416, 1, null);
  var args = vec__18416;
  var body = seq__18414__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18370__auto__", "this__18370__auto__", -2025289596, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18371__auto__", "next-props__18371__auto__", -1572869052, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = this$;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18370__auto__", "this__18370__auto__", -2025289596, null)), function() {
        var x__8252__auto__ = next_props;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-next-props", "om.next/-next-props", 1700067080, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18371__auto__", "next-props__18371__auto__", -1572869052, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18370__auto__", 
        "this__18370__auto__", -2025289596, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), body)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}, new cljs.core.Symbol(null, "componentWillUpdate", "componentWillUpdate", -1997044837, null), function(p__18419) {
  var vec__18420 = p__18419;
  var seq__18421 = cljs.core.seq.call(null, vec__18420);
  var first__18422 = cljs.core.first.call(null, seq__18421);
  var seq__18421__$1 = cljs.core.next.call(null, seq__18421);
  var name = first__18422;
  var first__18422__$1 = cljs.core.first.call(null, seq__18421__$1);
  var seq__18421__$2 = cljs.core.next.call(null, seq__18421__$1);
  var vec__18423 = first__18422__$1;
  var this$ = cljs.core.nth.call(null, vec__18423, 0, null);
  var next_props = cljs.core.nth.call(null, vec__18423, 1, null);
  var next_state = cljs.core.nth.call(null, vec__18423, 2, null);
  var args = vec__18423;
  var body = seq__18421__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18373__auto__", "next-props__18373__auto__", 780501543, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "next-state__18374__auto__", "next-state__18374__auto__", -874947409, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = this$;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)), function() {
        var x__8252__auto__ = next_props;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-next-props", "om.next/-next-props", 1700067080, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18373__auto__", "next-props__18373__auto__", 780501543, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", 
        "this__18372__auto__", -1740753426, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = next_state;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "or", "cljs.core/or", 1201033885, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "get", "goog.object/get", -1684509985, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-state__18374__auto__", "next-state__18374__auto__", -874947409, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$pendingState"))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "get", "goog.object/get", -1684509985, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-state__18374__auto__", "next-state__18374__auto__", -874947409, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$state"))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__18375__auto__", "ret__18375__auto__", -465018663, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), body)));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "implements?", "cljs.core/implements?", -251485149, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "Ident", "om.next/Ident", -1165621946, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", 
        -1740753426, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
          var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ident__18376__auto__", "ident__18376__auto__", -1598017108, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "ident", "om.next/ident", -1255218310, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "props", "om.next/props", 679329025, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)))));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }())));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-ident__18377__auto__", "next-ident__18377__auto__", 657236319, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "ident", "om.next/ident", -1255218310, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)), function() {
              var x__8252__auto__ = next_props;
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }())));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }()))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not\x3d", "cljs.core/not\x3d", 1017572457, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ident__18376__auto__", "ident__18376__auto__", -1598017108, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-ident__18377__auto__", 
            "next-ident__18377__auto__", 657236319, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
              var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "idxr__18378__auto__", "idxr__18378__auto__", 1429026684, null)), function() {
                var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-in", "cljs.core/get-in", -1307311504, null)), function() {
                  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)))));
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                }(), function() {
                  var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "config", "config", 994861415)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315))))));
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                }())));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }()))));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }(), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
                var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "idxr__18378__auto__", "idxr__18378__auto__", 1429026684, null)))));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }(), function() {
                var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "swap!", "cljs.core/swap!", -2144679919, null)), function() {
                  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexes", "indexes", 1496475545)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "idxr__18378__auto__", "idxr__18378__auto__", 1429026684, null)))));
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                }(), function() {
                  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), function() {
                    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexes__18379__auto__", "indexes__18379__auto__", 254187542, null))))));
                    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                  }(), function() {
                    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-\x3e", "cljs.core/-\x3e", 1488366311, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexes__18379__auto__", "indexes__18379__auto__", 254187542, null)), function() {
                      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "update-in", "cljs.core/update-in", -2120854498, null)), function() {
                        var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ident__18376__auto__", "ident__18376__auto__", -1598017108, null))))));
                        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "disj", "cljs.core/disj", 1679005177, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)))));
                      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                    }(), function() {
                      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "update-in", "cljs.core/update-in", -2120854498, null)), function() {
                        var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-ident__18377__auto__", "next-ident__18377__auto__", 657236319, null))))));
                        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                      }(), function() {
                        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fnil", "cljs.core/fnil", 479587341, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "conj", "cljs.core/conj", -460750931, null)), function() {
                          var x__8252__auto__ = cljs.core.apply.call(null, cljs.core.hash_set, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))));
                          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                        }())));
                        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)))));
                      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                    }())));
                    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                  }())));
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                }())));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }())));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }())));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "merge-pending-props!", "om.next/merge-pending-props!", -1035300673, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "merge-pending-state!", "om.next/merge-pending-state!", 1487578810, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18372__auto__", "this__18372__auto__", -1740753426, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ret__18375__auto__", "ret__18375__auto__", -465018663, null)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}, new cljs.core.Symbol(null, "componentDidUpdate", "componentDidUpdate", -342946454, null), function(p__18426) {
  var vec__18427 = p__18426;
  var seq__18428 = cljs.core.seq.call(null, vec__18427);
  var first__18429 = cljs.core.first.call(null, seq__18428);
  var seq__18428__$1 = cljs.core.next.call(null, seq__18428);
  var name = first__18429;
  var first__18429__$1 = cljs.core.first.call(null, seq__18428__$1);
  var seq__18428__$2 = cljs.core.next.call(null, seq__18428__$1);
  var vec__18430 = first__18429__$1;
  var this$ = cljs.core.nth.call(null, vec__18430, 0, null);
  var prev_props = cljs.core.nth.call(null, vec__18430, 1, null);
  var prev_state = cljs.core.nth.call(null, vec__18430, 2, null);
  var args = vec__18430;
  var body = seq__18428__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18380__auto__", "this__18380__auto__", -307169058, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "prev-props__18381__auto__", "prev-props__18381__auto__", 1556808256, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "prev-state__18382__auto__", "prev-state__18382__auto__", -1080467823, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = this$;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18380__auto__", "this__18380__auto__", -307169058, null)), function() {
        var x__8252__auto__ = prev_props;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-prev-props", "om.next/-prev-props", -1189686117, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "prev-props__18381__auto__", "prev-props__18381__auto__", 1556808256, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18380__auto__", 
        "this__18380__auto__", -307169058, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = prev_state;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "get", "goog.object/get", -1684509985, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "prev-state__18382__auto__", "prev-state__18382__auto__", -1080467823, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$previousState"))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), body, function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "clear-prev-props!", "om.next/clear-prev-props!", 1240655595, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18380__auto__", "this__18380__auto__", -307169058, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}, new cljs.core.Symbol(null, "componentWillMount", "componentWillMount", 1355203908, null), function(p__18433) {
  var vec__18434 = p__18433;
  var seq__18435 = cljs.core.seq.call(null, vec__18434);
  var first__18436 = cljs.core.first.call(null, seq__18435);
  var seq__18435__$1 = cljs.core.next.call(null, seq__18435);
  var name = first__18436;
  var first__18436__$1 = cljs.core.first.call(null, seq__18435__$1);
  var seq__18435__$2 = cljs.core.next.call(null, seq__18435__$1);
  var vec__18437 = first__18436__$1;
  var this$ = cljs.core.nth.call(null, vec__18437, 0, null);
  var args = vec__18437;
  var body = seq__18435__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18383__auto__", "this__18383__auto__", 524079996, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = this$;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18383__auto__", "this__18383__auto__", 524079996, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18384__auto__", "indexer__18384__auto__", 1387575853, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-in", "cljs.core/get-in", -1307311504, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18383__auto__", "this__18383__auto__", 524079996, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "config", "config", 994861415)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315))))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18384__auto__", "indexer__18384__auto__", 1387575853, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next.protocols", "index-component!", "om.next.protocols/index-component!", -1047911549, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18384__auto__", "indexer__18384__auto__", 1387575853, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
        "this__18383__auto__", "this__18383__auto__", 524079996, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), body)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}, new cljs.core.Symbol(null, "componentWillUnmount", "componentWillUnmount", -1080646955, null), function(p__18440) {
  var vec__18441 = p__18440;
  var seq__18442 = cljs.core.seq.call(null, vec__18441);
  var first__18443 = cljs.core.first.call(null, seq__18442);
  var seq__18442__$1 = cljs.core.next.call(null, seq__18442);
  var name = first__18443;
  var first__18443__$1 = cljs.core.first.call(null, seq__18442__$1);
  var seq__18442__$2 = cljs.core.next.call(null, seq__18442__$1);
  var vec__18444 = first__18443__$1;
  var this$ = cljs.core.nth.call(null, vec__18444, 0, null);
  var args = vec__18444;
  var body = seq__18442__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18385__auto__", "this__18385__auto__", 665650220, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = this$;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18385__auto__", "this__18385__auto__", 665650220, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "r__18386__auto__", "r__18386__auto__", 1274816809, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18385__auto__", "this__18385__auto__", 665650220, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cfg__18387__auto__", "cfg__18387__auto__", -1692381274, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "config", "config", 994861415)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "r__18386__auto__", "r__18386__auto__", 1274816809, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18388__auto__", "st__18388__auto__", 1523063387, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "state", "state", -1988618099)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cfg__18387__auto__", "cfg__18387__auto__", -1692381274, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18389__auto__", "indexer__18389__auto__", -1275073943, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cfg__18387__auto__", "cfg__18387__auto__", -1692381274, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "and", "cljs.core/and", -6692549, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not", "cljs.core/not", 100665144, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18388__auto__", "st__18388__auto__", 1523063387, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-in", "cljs.core/get-in", -1307311504, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "deref", "cljs.core/deref", 1901963335, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18388__auto__", "st__18388__auto__", 1523063387, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), function() {
            var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18385__auto__", "this__18385__auto__", 665650220, null))))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "swap!", "cljs.core/swap!", -2144679919, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18388__auto__", "st__18388__auto__", 1523063387, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "update-in", "cljs.core/update-in", 
        -2120854498, null)), function() {
          var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146))))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dissoc", "cljs.core/dissoc", -432349815, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18385__auto__", "this__18385__auto__", 665650220, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18389__auto__", "indexer__18389__auto__", -1275073943, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next.protocols", "drop-component!", "om.next.protocols/drop-component!", 1227662523, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18389__auto__", "indexer__18389__auto__", -1275073943, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
        "this__18385__auto__", "this__18385__auto__", 665650220, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), body)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}, new cljs.core.Symbol(null, "render", "render", 232498073, null), function(p__18447) {
  var vec__18448 = p__18447;
  var seq__18449 = cljs.core.seq.call(null, vec__18448);
  var first__18450 = cljs.core.first.call(null, seq__18449);
  var seq__18449__$1 = cljs.core.next.call(null, seq__18449);
  var name = first__18450;
  var first__18450__$1 = cljs.core.first.call(null, seq__18449__$1);
  var seq__18449__$2 = cljs.core.next.call(null, seq__18449__$1);
  var vec__18451 = first__18450__$1;
  var this$ = cljs.core.nth.call(null, vec__18451, 0, null);
  var args = vec__18451;
  var body = seq__18449__$2;
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = name;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
        var x__8252__auto__ = this$;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null))))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "binding", "cljs.core/binding", 2050379843, null)), function() {
        var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "*reconciler*", "om.next/*reconciler*", 2063201960, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "*depth*", "om.next/*depth*", 161261240, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "inc", "cljs.core/inc", -879172610, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "depth", "om.next/depth", -1750843006, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "*shared*", "om.next/*shared*", -270307055, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "shared", "om.next/shared", 426941171, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "*instrument*", "om.next/*instrument*", -1428199886, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "instrument", "om.next/instrument", 1410710376, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "*parent*", "om.next/*parent*", -764653121, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18390__auto__", "this__18390__auto__", -1647662176, null))))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), body)));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
}], null), new cljs.core.Keyword(null, "defaults", "defaults", 976027214), cljs.core.apply.call(null, cljs.core.array_map, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "isMounted", "isMounted", -1263254906, null)), function() {
  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "boolean", "cljs.core/boolean", -1222483266, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "getValueByKeys", "goog.object/getValueByKeys", -1135358948, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "_reactInternalInstance"), cljs.core._conj.call(null, 
      cljs.core.List.EMPTY, "_renderedComponent"))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
}(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "shouldComponentUpdate", "shouldComponentUpdate", -858684809, null)), function() {
  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "next-state__18393__auto__", "next-state__18393__auto__", -1052079143, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-children__18394__auto__", "next-children__18394__auto__", 325205680, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-children", "om.next/-children", -16965396, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "get", "goog.object/get", -1684509985, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$value"))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "cond-\x3e", "cljs.core/cond-\x3e", -113941356, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "instance?", "cljs.core/instance?", 2044751870, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "OmProps", "om.next/OmProps", -1258962915, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 
          1330591969, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "unwrap", "om.next/unwrap", -621667282, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "or", "cljs.core/or", 1201033885, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not\x3d", "cljs.core/not\x3d", 1017572457, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "props", "om.next/props", 679329025, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "and", "cljs.core/and", -6692549, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-state", "-state", 1439972041, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not\x3d", "cljs.core/not\x3d", 1017572457, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "get", "goog.object/get", -1684509985, null)), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-state", "-state", 1439972041, null)))));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$state"))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "get", "goog.object/get", -1684509985, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-state__18393__auto__", "next-state__18393__auto__", -1052079143, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "omcljs$state"))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not\x3d", "cljs.core/not\x3d", 1017572457, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-props", "om.next/-props", 1063294959, null)), cljs.core._conj.call(null, 
          cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-children", "om.next/-children", -16965396, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-children__18394__auto__", "next-children__18394__auto__", 325205680, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
}(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "componentWillUpdate", "componentWillUpdate", -1997044837, null)), function() {
  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "next-state__18393__auto__", "next-state__18393__auto__", -1052079143, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "implements?", "cljs.core/implements?", -251485149, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "Ident", "om.next/Ident", -1165621946, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", 
      -934861657, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
        var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ident__18395__auto__", "ident__18395__auto__", 1518073874, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "ident", "om.next/ident", -1255218310, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "props", "om.next/props", 679329025, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-ident__18396__auto__", "next-ident__18396__auto__", 898796848, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "ident", "om.next/ident", -1255218310, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-next-props", "om.next/-next-props", 1700067080, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-props__18392__auto__", "next-props__18392__auto__", 1330591969, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", 
            "this__18391__auto__", -934861657, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }()))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not\x3d", "cljs.core/not\x3d", 1017572457, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ident__18395__auto__", "ident__18395__auto__", 1518073874, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-ident__18396__auto__", "next-ident__18396__auto__", 
          898796848, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
            var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "idxr__18397__auto__", "idxr__18397__auto__", 2143501408, null)), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-in", "cljs.core/get-in", -1307311504, null)), function() {
                var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }(), function() {
                var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "config", "config", 994861415)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315))))));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }())));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }()))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "idxr__18397__auto__", "idxr__18397__auto__", 2143501408, null)))));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }(), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "swap!", "cljs.core/swap!", -2144679919, null)), function() {
                var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexes", "indexes", 1496475545)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "idxr__18397__auto__", "idxr__18397__auto__", 2143501408, null)))));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }(), function() {
                var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), function() {
                  var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexes__18398__auto__", "indexes__18398__auto__", 1896445783, null))))));
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                }(), function() {
                  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-\x3e", "cljs.core/-\x3e", 1488366311, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexes__18398__auto__", "indexes__18398__auto__", 1896445783, null)), function() {
                    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "update-in", "cljs.core/update-in", -2120854498, null)), function() {
                      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "ident__18395__auto__", "ident__18395__auto__", 1518073874, null))))));
                      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                    }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "disj", "cljs.core/disj", 1679005177, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
                    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                  }(), function() {
                    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "update-in", "cljs.core/update-in", -2120854498, null)), function() {
                      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "next-ident__18396__auto__", "next-ident__18396__auto__", 898796848, null))))));
                      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                    }(), function() {
                      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fnil", "cljs.core/fnil", 479587341, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "conj", "cljs.core/conj", -460750931, null)), function() {
                        var x__8252__auto__ = cljs.core.apply.call(null, cljs.core.hash_set, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))));
                        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                      }())));
                      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                    }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
                    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                  }())));
                  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
                }())));
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }())));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }())));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "merge-pending-props!", "om.next/merge-pending-props!", -1035300673, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "merge-pending-state!", "om.next/merge-pending-state!", 1487578810, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
}(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "componentDidUpdate", "componentDidUpdate", -342946454, null)), function() {
  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "prev-props__18399__auto__", "prev-props__18399__auto__", -1468653667, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
    "prev-state__18400__auto__", "prev-state__18400__auto__", -1322137363, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "clear-prev-props!", "om.next/clear-prev-props!", 1240655595, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
}(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "componentWillMount", "componentWillMount", 1355203908, null)), function() {
  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18401__auto__", "indexer__18401__auto__", 1776634217, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-in", "cljs.core/get-in", -1307311504, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "config", "config", 994861415)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315))))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18401__auto__", "indexer__18401__auto__", 1776634217, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next.protocols", "index-component!", "om.next.protocols/index-component!", -1047911549, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18401__auto__", "indexer__18401__auto__", 1776634217, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
        "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
}(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "componentWillUnmount", "componentWillUnmount", -1080646955, null)), function() {
  var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null))))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "r__18402__auto__", "r__18402__auto__", -132457492, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "get-reconciler", "om.next/get-reconciler", 1605739065, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cfg__18403__auto__", "cfg__18403__auto__", -1671827842, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "config", "config", 994861415)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "r__18402__auto__", "r__18402__auto__", -132457492, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18404__auto__", "st__18404__auto__", -295587500, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "state", "state", -1988618099)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cfg__18403__auto__", "cfg__18403__auto__", -1671827842, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18401__auto__", "indexer__18401__auto__", 1776634217, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "cfg__18403__auto__", "cfg__18403__auto__", -1671827842, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }()))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when", "cljs.core/when", 120293186, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "and", "cljs.core/and", -6692549, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "not", "cljs.core/not", 100665144, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18404__auto__", "st__18404__auto__", -295587500, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "get-in", "cljs.core/get-in", -1307311504, null)), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "deref", "cljs.core/deref", 1901963335, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18404__auto__", "st__18404__auto__", -295587500, null)))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), function() {
            var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null))))));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "swap!", "cljs.core/swap!", -2144679919, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "st__18404__auto__", "st__18404__auto__", -295587500, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "update-in", "cljs.core/update-in", 
        -2120854498, null)), function() {
          var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146))))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "dissoc", "cljs.core/dissoc", -432349815, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18401__auto__", "indexer__18401__auto__", 1776634217, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next.protocols", "drop-component!", "om.next.protocols/drop-component!", 1227662523, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "indexer__18401__auto__", "indexer__18401__auto__", 1776634217, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
        "this__18391__auto__", "this__18391__auto__", -934861657, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
}()))))], null);
om.next.reshape = function om$next$reshape(dt, p__18454) {
  var map__18495 = p__18454;
  var map__18495__$1 = (!(map__18495 == null) ? map__18495.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__18495.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18495) : map__18495;
  var reshape = cljs.core.get.call(null, map__18495__$1, new cljs.core.Keyword(null, "reshape", "reshape", 1588089910));
  var defaults = cljs.core.get.call(null, map__18495__$1, new cljs.core.Keyword(null, "defaults", "defaults", 976027214));
  var reshape_STAR_ = function(map__18495, map__18495__$1, reshape, defaults) {
    return function om$next$reshape_$_reshape_STAR_(x) {
      if (cljs.core.sequential_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, reshape, cljs.core.first.call(null, x))) {
        var reshapef = cljs.core.get.call(null, reshape, cljs.core.first.call(null, x));
        om.next.validate_sig.call(null, x);
        return reshapef.call(null, x);
      } else {
        return x;
      }
    };
  }(map__18495, map__18495__$1, reshape, defaults);
  var add_defaults_step = function(map__18495, map__18495__$1, reshape, defaults) {
    return function om$next$reshape_$_add_defaults_step(ret, p__18516) {
      var vec__18526 = p__18516;
      var name = cljs.core.nth.call(null, vec__18526, 0, null);
      var impl = cljs.core.nth.call(null, vec__18526, 1, null);
      if (cljs.core.not.call(null, cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([name], true), cljs.core.map.call(null, cljs.core.first, cljs.core.filter.call(null, cljs.core.seq_QMARK_, ret))))) {
        var vec__18529 = cljs.core.split_with.call(null, cljs.core.complement.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "Object", "Object", 61210754, null), null], null), null)), ret);
        var before = cljs.core.nth.call(null, vec__18529, 0, null);
        var vec__18532 = cljs.core.nth.call(null, vec__18529, 1, null);
        var seq__18533 = cljs.core.seq.call(null, vec__18532);
        var first__18534 = cljs.core.first.call(null, seq__18533);
        var seq__18533__$1 = cljs.core.next.call(null, seq__18533);
        var p = first__18534;
        var after = seq__18533__$1;
        return cljs.core.into.call(null, cljs.core.conj.call(null, cljs.core.vec.call(null, before), p, cljs.core.cons.call(null, name, impl)), after);
      } else {
        return ret;
      }
    };
  }(map__18495, map__18495__$1, reshape, defaults);
  var add_defaults = function(map__18495, map__18495__$1, reshape, defaults) {
    return function om$next$reshape_$_add_defaults(dt__$1) {
      return cljs.core.reduce.call(null, add_defaults_step, dt__$1, defaults);
    };
  }(map__18495, map__18495__$1, reshape, defaults);
  var add_object_protocol = function(map__18495, map__18495__$1, reshape, defaults) {
    return function om$next$reshape_$_add_object_protocol(dt__$1) {
      if (cljs.core.not.call(null, cljs.core.some.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Symbol(null, "Object", "Object", 61210754, null), null], null), null), dt__$1))) {
        return cljs.core.conj.call(null, dt__$1, new cljs.core.Symbol(null, "Object", "Object", 61210754, null));
      } else {
        return dt__$1;
      }
    };
  }(map__18495, map__18495__$1, reshape, defaults);
  return add_defaults.call(null, add_object_protocol.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, reshape_STAR_, dt))));
};
om.next.defui_STAR_ = function om$next$defui_STAR_(var_args) {
  var args18550 = [];
  var len__8523__auto___18572 = arguments.length;
  var i__8524__auto___18573 = 0;
  while (true) {
    if (i__8524__auto___18573 < len__8523__auto___18572) {
      args18550.push(arguments[i__8524__auto___18573]);
      var G__18574 = i__8524__auto___18573 + 1;
      i__8524__auto___18573 = G__18574;
      continue;
    } else {
    }
    break;
  }
  var G__18552 = args18550.length;
  switch(G__18552) {
    case 2:
      return om.next.defui_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.defui_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18550.length)].join(""));
  }
};
om.next.defui_STAR_.cljs$core$IFn$_invoke$arity$2 = function(name, form) {
  return om.next.defui_STAR_.call(null, name, form, null);
};
om.next.defui_STAR_.cljs$core$IFn$_invoke$arity$3 = function(name, forms, env) {
  var field_set_BANG_ = function om$next$field_set_BANG_(obj, p__18560) {
    var vec__18564 = p__18560;
    var field = cljs.core.nth.call(null, vec__18564, 0, null);
    var value = cljs.core.nth.call(null, vec__18564, 1, null);
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), function() {
        var x__8252__auto__ = obj;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.symbol.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(field)].join(""));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = value;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
  };
  var docstring = typeof cljs.core.first.call(null, forms) === "string" ? cljs.core.first.call(null, forms) : null;
  var forms__$1 = function() {
    var G__18568 = forms;
    if (cljs.core.truth_(docstring)) {
      return cljs.core.rest.call(null, G__18568);
    } else {
      return G__18568;
    }
  }();
  var map__18567 = om.next.collect_statics.call(null, forms__$1);
  var map__18567__$1 = (!(map__18567 == null) ? map__18567.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__18567.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18567) : map__18567;
  var dt = cljs.core.get.call(null, map__18567__$1, new cljs.core.Keyword(null, "dt", "dt", -368444759));
  var statics = cljs.core.get.call(null, map__18567__$1, new cljs.core.Keyword(null, "statics", "statics", -1984882809));
  var _ = om.next.validate_statics.call(null, dt);
  var rname = cljs.core.truth_(env) ? (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(cljs.analyzer.resolve_var.call(null, cljs.core.dissoc.call(null, env, new cljs.core.Keyword(null, "locals", "locals", 535295783)), name)) : name;
  var ctor = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "defn", "cljs.core/defn", -1606493717, null)), function() {
    var x__8252__auto__ = cljs.core.with_meta.call(null, name, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "jsdoc", "jsdoc", 1745183516), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null)], null), cljs.core.meta.call(null, name), cljs.core.truth_(docstring) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "doc", "doc", 1913296891), docstring], null) : null));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "this-as", "cljs.core/this-as", 623378171, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".apply", ".apply", -1176201338, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "React.Component", "js/React.Component", 752301916, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)), 
      function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "js-arguments", "cljs.core/js-arguments", 464029257, null)))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "if-not", "cljs.core/if-not", -1997686824, null)), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-initLocalState", ".-initLocalState", -1875308467, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-state", ".-state", 2145135971, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".initLocalState", ".initLocalState", -104173886, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-state", ".-state", 2145135971, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }(), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "js-obj", "cljs.core/js-obj", 1009370607, null)))));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18544__auto__", "this__18544__auto__", -210386760, null)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  var set_react_proto_BANG_ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-prototype", ".-prototype", -1562038608, null)), function() {
      var x__8252__auto__ = name;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.object", "clone", "goog.object/clone", -508199474, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("js", "React.Component.prototype", "js/React.Component.prototype", 259217051, null)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  var ctor__$1 = cljs.core.truth_((new cljs.core.Keyword(null, "once", "once", -262568523)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, name))) ? cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "exists?", "cljs.core/exists?", 1852387968, null)), function() {
      var x__8252__auto__ = name;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = ctor;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = set_react_proto_BANG_;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }()))) : cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), function() {
    var x__8252__auto__ = ctor;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = set_react_proto_BANG_;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
  var display_name = cljs.core.truth_(env) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(env))), cljs.core.str.cljs$core$IFn$_invoke$arity$1("/"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join("") : new cljs.core.Symbol("js", "undefined", "js/undefined", -329966622, null);
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), function() {
    var x__8252__auto__ = ctor__$1;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "specify!", "cljs.core/specify!", -585401629, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-prototype", ".-prototype", -1562038608, null)), function() {
        var x__8252__auto__ = name;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), om.next.reshape.call(null, dt, om.next.reshape_map))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), function() {
        var x__8252__auto__ = name;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-prototype", "om.next/-prototype", 951061230, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-constructor", "om.next/-constructor", -675008524, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = name;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), function() {
        var x__8252__auto__ = name;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-prototype", "om.next/-prototype", 951061230, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-constructor", "om.next/-constructor", -675008524, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-displayName", "om.next/-displayName", 250349469, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = display_name;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "..", "..", -300507420, null)), function() {
        var x__8252__auto__ = name;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-prototype", "om.next/-prototype", 951061230, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "-om$isComponent", "om.next/-om$isComponent", -1994912590, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), cljs.core.map.call(null, function(docstring, forms__$1, map__18567, map__18567__$1, dt, statics, _, rname, ctor, set_react_proto_BANG_, ctor__$1, display_name) {
    return function(p1__18545_SHARP_) {
      return field_set_BANG_.call(null, name, p1__18545_SHARP_);
    };
  }(docstring, forms__$1, map__18567, map__18567__$1, dt, statics, _, rname, ctor, set_react_proto_BANG_, ctor__$1, display_name), (new cljs.core.Keyword(null, "fields", "fields", -1932066230)).cljs$core$IFn$_invoke$arity$1(statics)), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "specify!", "cljs.core/specify!", -585401629, null)), function() {
      var x__8252__auto__ = name;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), cljs.core.mapv.call(null, function(docstring, forms__$1, map__18567, map__18567__$1, dt, statics, _, rname, ctor, set_react_proto_BANG_, ctor__$1, display_name) {
      return function(p1__18546_SHARP_) {
        var G__18571 = p1__18546_SHARP_;
        if (p1__18546_SHARP_ instanceof cljs.core.Symbol) {
          return cljs.core.vary_meta.call(null, G__18571, cljs.core.assoc, new cljs.core.Keyword(null, "static", "static", 1214358571), true);
        } else {
          return G__18571;
        }
      };
    }(docstring, forms__$1, map__18567, map__18567__$1, dt, statics, _, rname, ctor, set_react_proto_BANG_, ctor__$1, display_name), (new cljs.core.Keyword(null, "protocols", "protocols", -5615896)).cljs$core$IFn$_invoke$arity$1(statics)))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "specify!", "cljs.core/specify!", -585401629, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".", ".", 1975675962, null)), function() {
        var x__8252__auto__ = name;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "-prototype", "-prototype", -450831903, null)))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), (new cljs.core.Keyword(null, "protocols", "protocols", -5615896)).cljs$core$IFn$_invoke$arity$1(statics))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$type", ".-cljs$lang$type", -1029307724, null)), function() {
        var x__8252__auto__ = rname;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, true))));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$ctorStr", ".-cljs$lang$ctorStr", -1820706991, null)), function() {
        var x__8252__auto__ = rname;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(rname)].join("");
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "set!", "set!", 250714521, null)), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, ".-cljs$lang$ctorPrWriter", ".-cljs$lang$ctorPrWriter", 255834464, null)), function() {
        var x__8252__auto__ = rname;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "fn", "cljs.core/fn", -1065745098, null)), function() {
        var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "this__18547__auto__", "this__18547__auto__", -296339860, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__18548__auto__", "writer__18548__auto__", 564669737, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, 
        "opt__18549__auto__", "opt__18549__auto__", 1827100419, null))))));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "-write", "cljs.core/-write", 527220517, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "writer__18548__auto__", "writer__18548__auto__", 564669737, null)), function() {
          var x__8252__auto__ = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(rname)].join("");
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
};
om.next.defui_STAR_.cljs$lang$maxFixedArity = 3;
om.next.defui = function om$next$defui(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___18580 = arguments.length;
  var i__8524__auto___18581 = 0;
  while (true) {
    if (i__8524__auto___18581 < len__8523__auto___18580) {
      args__8530__auto__.push(arguments[i__8524__auto___18581]);
      var G__18582 = i__8524__auto___18581 + 1;
      i__8524__auto___18581 = G__18582;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 3 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(3), 0, null) : null;
  return om.next.defui.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__8531__auto__);
};
om.next.defui.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, name, forms) {
  if (cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_env))) {
    return om.next.defui_STAR_.call(null, name, forms, _AMPERSAND_env);
  } else {
    return null;
  }
};
om.next.defui.cljs$lang$maxFixedArity = 3;
om.next.defui.cljs$lang$applyTo = function(seq18576) {
  var G__18577 = cljs.core.first.call(null, seq18576);
  var seq18576__$1 = cljs.core.next.call(null, seq18576);
  var G__18578 = cljs.core.first.call(null, seq18576__$1);
  var seq18576__$2 = cljs.core.next.call(null, seq18576__$1);
  var G__18579 = cljs.core.first.call(null, seq18576__$2);
  var seq18576__$3 = cljs.core.next.call(null, seq18576__$2);
  return om.next.defui.cljs$core$IFn$_invoke$arity$variadic(G__18577, G__18578, G__18579, seq18576__$3);
};
om.next.defui.cljs$lang$macro = true;
om.next.ui = function om$next$ui(var_args) {
  var args__8530__auto__ = [];
  var len__8523__auto___18586 = arguments.length;
  var i__8524__auto___18587 = 0;
  while (true) {
    if (i__8524__auto___18587 < len__8523__auto___18586) {
      args__8530__auto__.push(arguments[i__8524__auto___18587]);
      var G__18588 = i__8524__auto___18587 + 1;
      i__8524__auto___18587 = G__18588;
      continue;
    } else {
    }
    break;
  }
  var argseq__8531__auto__ = 2 < args__8530__auto__.length ? new cljs.core.IndexedSeq(args__8530__auto__.slice(2), 0, null) : null;
  return om.next.ui.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__8531__auto__);
};
om.next.ui.cljs$core$IFn$_invoke$arity$variadic = function(_AMPERSAND_form, _AMPERSAND_env, forms) {
  var t = cljs.core.with_meta.call(null, cljs.core.gensym.call(null, "ui_"), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "anonymous", "anonymous", 447897231), true], null));
  return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "do", "do", 1686842252, null)), function() {
    var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "defui", "om.next/defui", 1665242576, null)), function() {
      var x__8252__auto__ = t;
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), forms)));
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), function() {
    var x__8252__auto__ = t;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }())));
};
om.next.ui.cljs$lang$maxFixedArity = 2;
om.next.ui.cljs$lang$applyTo = function(seq18583) {
  var G__18584 = cljs.core.first.call(null, seq18583);
  var seq18583__$1 = cljs.core.next.call(null, seq18583);
  var G__18585 = cljs.core.first.call(null, seq18583__$1);
  var seq18583__$2 = cljs.core.next.call(null, seq18583__$1);
  return om.next.ui.cljs$core$IFn$_invoke$arity$variadic(G__18584, G__18585, seq18583__$2);
};
om.next.ui.cljs$lang$macro = true;
om.next.invariant_STAR_ = function om$next$invariant_STAR_(condition, message, env) {
  var opts = cljs.analyzer.api.get_options.call(null);
  var fn_scope = (new cljs.core.Keyword(null, "fn-scope", "fn-scope", -865664859)).cljs$core$IFn$_invoke$arity$1(env);
  var fn_name = function() {
    var G__18591 = fn_scope;
    var G__18591__$1 = G__18591 == null ? null : cljs.core.first.call(null, G__18591);
    var G__18591__$2 = G__18591__$1 == null ? null : (new cljs.core.Keyword(null, "name", "name", 1843675177)).cljs$core$IFn$_invoke$arity$1(G__18591__$1);
    if (G__18591__$2 == null) {
      return null;
    } else {
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__18591__$2)].join("");
    }
  }();
  if (cljs.core.truth_((new cljs.core.Keyword(null, "elide-asserts", "elide-asserts", 537063272)).cljs$core$IFn$_invoke$arity$1(opts))) {
    return null;
  } else {
    return cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "let", "cljs.core/let", -308701135, null)), function() {
      var x__8252__auto__ = cljs.core.vec.call(null, cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "l__18589__auto__", "l__18589__auto__", 1974200156, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("om.next", "*logger*", "om.next/*logger*", -530662591, null))))));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }(), function() {
      var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
        var x__8252__auto__ = condition;
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }(), function() {
        var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("goog.log", "error", "goog.log/error", -1510663407, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol(null, "l__18589__auto__", "l__18589__auto__", 1974200156, null)), function() {
          var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "str", "cljs.core/str", -1971828991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, "Invariant Violation"), function() {
            var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "when-not", "cljs.core/when-not", -556141047, null)), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "nil?", "cljs.core/nil?", 945071861, null)), function() {
                var x__8252__auto__ = fn_name;
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }())));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }(), function() {
              var x__8252__auto__ = cljs.core.sequence.call(null, cljs.core.seq.call(null, cljs.core.concat.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, new cljs.core.Symbol("cljs.core", "str", "cljs.core/str", -1971828991, null)), cljs.core._conj.call(null, cljs.core.List.EMPTY, " (in function: `"), function() {
                var x__8252__auto__ = fn_name;
                return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
              }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, "`)"))));
              return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
            }())));
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }(), cljs.core._conj.call(null, cljs.core.List.EMPTY, ": "), function() {
            var x__8252__auto__ = message;
            return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
          }())));
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
        }())));
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
      }())));
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
    }())));
  }
};
om.next.invariant = function om$next$invariant(_AMPERSAND_form, _AMPERSAND_env, condition, message) {
  if (cljs.core.boolean$.call(null, (new cljs.core.Keyword(null, "ns", "ns", 441598760)).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_env))) {
    return om.next.invariant_STAR_.call(null, condition, message, _AMPERSAND_env);
  } else {
    return null;
  }
};
om.next.invariant.cljs$lang$macro = true;
if (typeof om.next._STAR_logger_STAR_ !== "undefined") {
} else {
  om.next._STAR_logger_STAR_ = goog.DEBUG ? function() {
    (new goog.debug.Console).setCapturing(true);
    return goog.log.getLogger("om.next");
  }() : null;
}
om.next.roots = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
om.next._STAR_raf_STAR_ = null;
om.next._STAR_reconciler_STAR_ = null;
om.next._STAR_parent_STAR_ = null;
om.next._STAR_shared_STAR_ = null;
om.next._STAR_instrument_STAR_ = null;
om.next._STAR_depth_STAR_ = 0;
om.next.nil_or_map_QMARK_ = function om$next$nil_or_map_QMARK_(x) {
  return x == null || cljs.core.map_QMARK_.call(null, x);
};
om.next.expr__GT_key = function om$next$expr__GT_key(expr) {
  if (expr instanceof cljs.core.Keyword) {
    return expr;
  } else {
    if (cljs.core.map_QMARK_.call(null, expr)) {
      return cljs.core.ffirst.call(null, expr);
    } else {
      if (cljs.core.seq_QMARK_.call(null, expr)) {
        var expr_SINGLEQUOTE_ = cljs.core.first.call(null, expr);
        if (cljs.core.map_QMARK_.call(null, expr_SINGLEQUOTE_)) {
          return cljs.core.ffirst.call(null, expr_SINGLEQUOTE_);
        } else {
          return null;
        }
      } else {
        if (om.util.ident_QMARK_.call(null, expr)) {
          var G__18593 = expr;
          if (cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1201019570, null), cljs.core.second.call(null, expr))) {
            return cljs.core.first.call(null, G__18593);
          } else {
            return G__18593;
          }
        } else {
          throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid query expr "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(expr)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("error", "invalid-expression", "error/invalid-expression", -881565136)], null));
        }
      }
    }
  }
};
om.next.query_zip = function om$next$query_zip(root) {
  return clojure.zip.zipper.call(null, function(p1__18594_SHARP_) {
    return cljs.core.vector_QMARK_.call(null, p1__18594_SHARP_) || cljs.core.map_QMARK_.call(null, p1__18594_SHARP_) || cljs.core.seq_QMARK_.call(null, p1__18594_SHARP_);
  }, cljs.core.seq, function(node, children) {
    var ret = cljs.core.vector_QMARK_.call(null, node) ? cljs.core.vec.call(null, children) : cljs.core.map_QMARK_.call(null, node) ? cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, children) : cljs.core.seq_QMARK_.call(null, node) ? children : null;
    return cljs.core.with_meta.call(null, ret, cljs.core.meta.call(null, node));
  }, root);
};
om.next.move_to_key = function om$next$move_to_key(loc, k) {
  var loc__$1 = clojure.zip.down.call(null, loc);
  while (true) {
    var node = clojure.zip.node.call(null, loc__$1);
    if (cljs.core._EQ_.call(null, k, cljs.core.first.call(null, node))) {
      return clojure.zip.right.call(null, clojure.zip.down.call(null, loc__$1));
    } else {
      var G__18595 = clojure.zip.right.call(null, loc__$1);
      loc__$1 = G__18595;
      continue;
    }
    break;
  }
};
om.next.query_template = function om$next$query_template(query, path) {
  var query_template_STAR_ = function om$next$query_template_$_query_template_STAR_(loc, path__$1) {
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, path__$1)) {
        return loc;
      } else {
        var node = clojure.zip.node.call(null, loc);
        if (cljs.core.vector_QMARK_.call(null, node)) {
          var G__18628 = clojure.zip.down.call(null, loc);
          var G__18629 = path__$1;
          loc = G__18628;
          path__$1 = G__18629;
          continue;
        } else {
          var vec__18624 = path__$1;
          var seq__18625 = cljs.core.seq.call(null, vec__18624);
          var first__18626 = cljs.core.first.call(null, seq__18625);
          var seq__18625__$1 = cljs.core.next.call(null, seq__18625);
          var k = first__18626;
          var ks = seq__18625__$1;
          var k_SINGLEQUOTE_ = om.next.expr__GT_key.call(null, node);
          if (cljs.core._EQ_.call(null, k, k_SINGLEQUOTE_)) {
            if (cljs.core.map_QMARK_.call(null, node) || cljs.core.seq_QMARK_.call(null, node) && cljs.core.map_QMARK_.call(null, cljs.core.first.call(null, node))) {
              var loc_SINGLEQUOTE_ = om.next.move_to_key.call(null, function() {
                var G__18627 = loc;
                if (cljs.core.seq_QMARK_.call(null, node)) {
                  return clojure.zip.down.call(null, G__18627);
                } else {
                  return G__18627;
                }
              }(), k);
              var node_SINGLEQUOTE_ = clojure.zip.node.call(null, loc_SINGLEQUOTE_);
              if (cljs.core.map_QMARK_.call(null, node_SINGLEQUOTE_)) {
                if (cljs.core.seq.call(null, ks)) {
                  var G__18630 = clojure.zip.replace.call(null, loc_SINGLEQUOTE_, clojure.zip.node.call(null, om.next.move_to_key.call(null, loc_SINGLEQUOTE_, cljs.core.first.call(null, ks))));
                  var G__18631 = cljs.core.next.call(null, ks);
                  loc = G__18630;
                  path__$1 = G__18631;
                  continue;
                } else {
                  return loc_SINGLEQUOTE_;
                }
              } else {
                var G__18632 = loc_SINGLEQUOTE_;
                var G__18633 = ks;
                loc = G__18632;
                path__$1 = G__18633;
                continue;
              }
            } else {
              var G__18634 = clojure.zip.right.call(null, clojure.zip.down.call(null, clojure.zip.down.call(null, clojure.zip.down.call(null, loc))));
              var G__18635 = ks;
              loc = G__18634;
              path__$1 = G__18635;
              continue;
            }
          } else {
            var G__18636 = clojure.zip.right.call(null, loc);
            var G__18637 = path__$1;
            loc = G__18636;
            path__$1 = G__18637;
            continue;
          }
        }
      }
      break;
    }
  };
  return query_template_STAR_.call(null, om.next.query_zip.call(null, query), path);
};
om.next.replace = function om$next$replace(template, new_query) {
  return clojure.zip.root.call(null, clojure.zip.replace.call(null, template, new_query));
};
om.next.focused_join = function om$next$focused_join(expr, ks, full_expr, union_expr) {
  var expr_meta = cljs.core.meta.call(null, expr);
  var expr_SINGLEQUOTE_ = cljs.core.map_QMARK_.call(null, expr) ? function() {
    var join_value = cljs.core.second.call(null, cljs.core.first.call(null, expr));
    var join_value__$1 = om.util.recursion_QMARK_.call(null, join_value) && cljs.core.seq.call(null, ks) ? !(union_expr == null) ? union_expr : full_expr : join_value;
    return cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.ffirst.call(null, expr), om.next.focus_query_STAR_.call(null, join_value__$1, ks, null)]);
  }() : cljs.core.seq_QMARK_.call(null, expr) ? function() {
    var x__8252__auto__ = om.next.focused_join.call(null, cljs.core.first.call(null, expr), ks, null, null);
    return cljs.core._conj.call(null, function() {
      var x__8252__auto____$1 = cljs.core.second.call(null, expr);
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto____$1);
    }(), x__8252__auto__);
  }() : expr;
  var G__18639 = expr_SINGLEQUOTE_;
  if (!(expr_meta == null)) {
    return cljs.core.with_meta.call(null, G__18639, expr_meta);
  } else {
    return G__18639;
  }
};
om.next.focus_query_STAR_ = function om$next$focus_query_STAR_(query, path, union_expr) {
  if (cljs.core.empty_QMARK_.call(null, path)) {
    return query;
  } else {
    var vec__18643 = path;
    var seq__18644 = cljs.core.seq.call(null, vec__18643);
    var first__18645 = cljs.core.first.call(null, seq__18644);
    var seq__18644__$1 = cljs.core.next.call(null, seq__18644);
    var k = first__18645;
    var ks = seq__18644__$1;
    var match = function(vec__18643, seq__18644, first__18645, seq__18644__$1, k, ks) {
      return function om$next$focus_query_STAR__$_match(x) {
        return cljs.core._EQ_.call(null, k, om.util.join_key.call(null, x));
      };
    }(vec__18643, seq__18644, first__18645, seq__18644__$1, k, ks);
    var value = function(vec__18643, seq__18644, first__18645, seq__18644__$1, k, ks) {
      return function om$next$focus_query_STAR__$_value(x) {
        return om.next.focused_join.call(null, x, ks, query, union_expr);
      };
    }(vec__18643, seq__18644, first__18645, seq__18644__$1, k, ks);
    if (cljs.core.map_QMARK_.call(null, query)) {
      return cljs.core.PersistentArrayMap.createAsIfByAssoc([k, om.next.focus_query_STAR_.call(null, cljs.core.get.call(null, query, k), ks, query)]);
    } else {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.comp.call(null, cljs.core.filter.call(null, match), cljs.core.map.call(null, value), cljs.core.take.call(null, 1)), query);
    }
  }
};
om.next.focus_query = function om$next$focus_query(query, path) {
  return om.next.focus_query_STAR_.call(null, query, path, null);
};
om.next.focus__GT_path = function om$next$focus__GT_path(var_args) {
  var args18646 = [];
  var len__8523__auto___18652 = arguments.length;
  var i__8524__auto___18653 = 0;
  while (true) {
    if (i__8524__auto___18653 < len__8523__auto___18652) {
      args18646.push(arguments[i__8524__auto___18653]);
      var G__18654 = i__8524__auto___18653 + 1;
      i__8524__auto___18653 = G__18654;
      continue;
    } else {
    }
    break;
  }
  var G__18648 = args18646.length;
  switch(G__18648) {
    case 1:
      return om.next.focus__GT_path.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.focus__GT_path.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.focus__GT_path.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18646.length)].join(""));
  }
};
om.next.focus__GT_path.cljs$core$IFn$_invoke$arity$1 = function(focus) {
  return om.next.focus__GT_path.call(null, focus, new cljs.core.Symbol(null, "*", "*", 345799209, null), cljs.core.PersistentVector.EMPTY);
};
om.next.focus__GT_path.cljs$core$IFn$_invoke$arity$2 = function(focus, bound) {
  return om.next.focus__GT_path.call(null, focus, bound, cljs.core.PersistentVector.EMPTY);
};
om.next.focus__GT_path.cljs$core$IFn$_invoke$arity$3 = function(focus, bound, path) {
  while (true) {
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = cljs.core._EQ_.call(null, bound, new cljs.core.Symbol(null, "*", "*", 345799209, null)) || cljs.core.not_EQ_.call(null, path, bound) && cljs.core.count.call(null, path) < cljs.core.count.call(null, bound);
      if (and__7398__auto__) {
        var and__7398__auto____$1 = cljs.core.some.call(null, om.util.join_QMARK_, focus);
        if (cljs.core.truth_(and__7398__auto____$1)) {
          return 1 === cljs.core.count.call(null, focus);
        } else {
          return and__7398__auto____$1;
        }
      } else {
        return and__7398__auto__;
      }
    }())) {
      var vec__18649 = om.util.join_entry.call(null, cljs.core.first.call(null, focus));
      var k = cljs.core.nth.call(null, vec__18649, 0, null);
      var focus_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__18649, 1, null);
      var focus_SINGLEQUOTE___$1 = om.util.recursion_QMARK_.call(null, focus_SINGLEQUOTE_) ? focus : focus_SINGLEQUOTE_;
      var G__18656 = focus_SINGLEQUOTE___$1;
      var G__18657 = bound;
      var G__18658 = cljs.core.conj.call(null, path, k);
      focus = G__18656;
      bound = G__18657;
      path = G__18658;
      continue;
    } else {
      return path;
    }
    break;
  }
};
om.next.focus__GT_path.cljs$lang$maxFixedArity = 3;
om.next.Ident = function() {
};
om.next.ident = function om$next$ident(this$, props) {
  if (!(this$ == null) && !(this$.om$next$Ident$ident$arity$2 == null)) {
    return this$.om$next$Ident$ident$arity$2(this$, props);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.ident[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, props);
    } else {
      var m__8079__auto____$1 = om.next.ident["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, props);
      } else {
        throw cljs.core.missing_protocol.call(null, "Ident.ident", this$);
      }
    }
  }
};
om.next.IQueryParams = function() {
};
om.next.params = function om$next$params(this$) {
  if (!(this$ == null) && !(this$.om$next$IQueryParams$params$arity$1 == null)) {
    return this$.om$next$IQueryParams$params$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.params[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next.params["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IQueryParams.params", this$);
      }
    }
  }
};
om.next.IQueryParams["_"] = true;
om.next.params["_"] = function(_) {
  return null;
};
om.next.IQuery = function() {
};
om.next.query = function om$next$query(this$) {
  if (!(this$ == null) && !(this$.om$next$IQuery$query$arity$1 == null)) {
    return this$.om$next$IQuery$query$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next.query[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next.query["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "IQuery.query", this$);
      }
    }
  }
};
om.next.ILocalState = function() {
};
om.next._set_state_BANG_ = function om$next$_set_state_BANG_(this$, new_state) {
  if (!(this$ == null) && !(this$.om$next$ILocalState$_set_state_BANG_$arity$2 == null)) {
    return this$.om$next$ILocalState$_set_state_BANG_$arity$2(this$, new_state);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next._set_state_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$, new_state);
    } else {
      var m__8079__auto____$1 = om.next._set_state_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$, new_state);
      } else {
        throw cljs.core.missing_protocol.call(null, "ILocalState.-set-state!", this$);
      }
    }
  }
};
om.next._get_state = function om$next$_get_state(this$) {
  if (!(this$ == null) && !(this$.om$next$ILocalState$_get_state$arity$1 == null)) {
    return this$.om$next$ILocalState$_get_state$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next._get_state[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next._get_state["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "ILocalState.-get-state", this$);
      }
    }
  }
};
om.next._get_rendered_state = function om$next$_get_rendered_state(this$) {
  if (!(this$ == null) && !(this$.om$next$ILocalState$_get_rendered_state$arity$1 == null)) {
    return this$.om$next$ILocalState$_get_rendered_state$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next._get_rendered_state[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next._get_rendered_state["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "ILocalState.-get-rendered-state", this$);
      }
    }
  }
};
om.next._merge_pending_state_BANG_ = function om$next$_merge_pending_state_BANG_(this$) {
  if (!(this$ == null) && !(this$.om$next$ILocalState$_merge_pending_state_BANG_$arity$1 == null)) {
    return this$.om$next$ILocalState$_merge_pending_state_BANG_$arity$1(this$);
  } else {
    var x__8078__auto__ = this$ == null ? null : this$;
    var m__8079__auto__ = om.next._merge_pending_state_BANG_[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, this$);
    } else {
      var m__8079__auto____$1 = om.next._merge_pending_state_BANG_["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol.call(null, "ILocalState.-merge-pending-state!", this$);
      }
    }
  }
};
om.next.var_QMARK_ = function om$next$var_QMARK_(x) {
  var and__7398__auto__ = x instanceof cljs.core.Symbol;
  if (and__7398__auto__) {
    return goog.string.startsWith([cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join(""), "?");
  } else {
    return and__7398__auto__;
  }
};
om.next.var__GT_keyword = function om$next$var__GT_keyword(x) {
  return cljs.core.keyword.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join("").substring(1));
};
om.next.replace_var = function om$next$replace_var(expr, params) {
  if (cljs.core.truth_(om.next.var_QMARK_.call(null, expr))) {
    return cljs.core.get.call(null, params, om.next.var__GT_keyword.call(null, expr), expr);
  } else {
    return expr;
  }
};
om.next.bind_query = function om$next$bind_query(query, params) {
  var qm = cljs.core.meta.call(null, query);
  var tr = cljs.core.map.call(null, function(qm) {
    return function(p1__18659_SHARP_) {
      return om.next.bind_query.call(null, p1__18659_SHARP_, params);
    };
  }(qm));
  var ret = cljs.core.seq_QMARK_.call(null, query) ? cljs.core.apply.call(null, cljs.core.list, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, tr, query)) : cljs.core.coll_QMARK_.call(null, query) ? cljs.core.into.call(null, cljs.core.empty.call(null, query), tr, query) : om.next.replace_var.call(null, query, params);
  var G__18662 = ret;
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = qm;
    if (cljs.core.truth_(and__7398__auto__)) {
      if (!(ret == null)) {
        if (ret.cljs$lang$protocol_mask$partition0$ & 131072 || cljs.core.PROTOCOL_SENTINEL === ret.cljs$core$IMeta$) {
          return true;
        } else {
          if (!ret.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, ret);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, ret);
      }
    } else {
      return and__7398__auto__;
    }
  }())) {
    return cljs.core.with_meta.call(null, G__18662, qm);
  } else {
    return G__18662;
  }
};
om.next.component__GT_query_data = function om$next$component__GT_query_data(component) {
  var G__18665 = om.next.get_reconciler.call(null, component);
  var G__18665__$1 = G__18665 == null ? null : (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(G__18665);
  var G__18665__$2 = G__18665__$1 == null ? null : (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(G__18665__$1);
  var G__18665__$3 = G__18665__$2 == null ? null : cljs.core.deref.call(null, G__18665__$2);
  var G__18665__$4 = G__18665__$3 == null ? null : (new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146)).cljs$core$IFn$_invoke$arity$1(G__18665__$3);
  if (G__18665__$4 == null) {
    return null;
  } else {
    return cljs.core.get.call(null, G__18665__$4, component);
  }
};
om.next.get_unbound_query = function om$next$get_unbound_query(component) {
  return (new cljs.core.Keyword(null, "query", "query", -1288509510)).cljs$core$IFn$_invoke$arity$2(om.next.component__GT_query_data.call(null, component), om.next.query.call(null, component));
};
om.next.get_params = function om$next$get_params(component) {
  return (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$2(om.next.component__GT_query_data.call(null, component), om.next.params.call(null, component));
};
om.next.get_component_query = function om$next$get_component_query(var_args) {
  var args18666 = [];
  var len__8523__auto___18669 = arguments.length;
  var i__8524__auto___18670 = 0;
  while (true) {
    if (i__8524__auto___18670 < len__8523__auto___18669) {
      args18666.push(arguments[i__8524__auto___18670]);
      var G__18671 = i__8524__auto___18670 + 1;
      i__8524__auto___18670 = G__18671;
      continue;
    } else {
    }
    break;
  }
  var G__18668 = args18666.length;
  switch(G__18668) {
    case 1:
      return om.next.get_component_query.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.get_component_query.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18666.length)].join(""));
  }
};
om.next.get_component_query.cljs$core$IFn$_invoke$arity$1 = function(component) {
  return om.next.get_component_query.call(null, component, om.next.component__GT_query_data.call(null, component));
};
om.next.get_component_query.cljs$core$IFn$_invoke$arity$2 = function(component, query_data) {
  var q = (new cljs.core.Keyword(null, "query", "query", -1288509510)).cljs$core$IFn$_invoke$arity$2(query_data, om.next.query.call(null, component));
  var c_SINGLEQUOTE_ = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, q));
  if (c_SINGLEQUOTE_ == null) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Query violation, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(component), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" reuses "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(c_SINGLEQUOTE_), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" query")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(nil? c')")].join(""));
  }
  return cljs.core.with_meta.call(null, om.next.bind_query.call(null, q, (new cljs.core.Keyword(null, "params", "params", 710516235)).cljs$core$IFn$_invoke$arity$2(query_data, om.next.params.call(null, component))), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), om.next.react_type.call(null, component)], null));
};
om.next.get_component_query.cljs$lang$maxFixedArity = 2;
om.next.iquery_QMARK_ = function om$next$iquery_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.om$next$IQuery$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
om.next.get_class_or_instance_query = function om$next$get_class_or_instance_query(x) {
  if (cljs.core.truth_(om.next.component_QMARK_.call(null, x))) {
    return om.next.get_component_query.call(null, x);
  } else {
    var q = om.next.query.call(null, x);
    var c = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, q));
    if (c == null) {
    } else {
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Query violation, "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(x), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" reuses "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(c), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" query")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(nil? c)")].join(""));
    }
    return cljs.core.with_meta.call(null, om.next.bind_query.call(null, q, om.next.params.call(null, x)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "component", "component", 1555936782), x], null));
  }
};
om.next.get_indexed_query = function om$next$get_indexed_query(component, class_path_query_data, data_path) {
  while (true) {
    var qs = cljs.core.filter.call(null, function(component, class_path_query_data, data_path) {
      return function(p1__18675_SHARP_) {
        return cljs.core._EQ_.call(null, data_path, om.next.focus__GT_path.call(null, clojure.zip.root.call(null, p1__18675_SHARP_), data_path));
      };
    }(component, class_path_query_data, data_path), class_path_query_data);
    var qs__$1 = cljs.core.empty_QMARK_.call(null, qs) ? class_path_query_data : qs;
    if (!cljs.core.empty_QMARK_.call(null, qs__$1)) {
      var q = cljs.core.first.call(null, qs__$1);
      var node = clojure.zip.node.call(null, q);
      if (!om.util.recursion_QMARK_.call(null, node)) {
        return node;
      } else {
        var G__18676 = component;
        var G__18677 = class_path_query_data;
        var G__18678 = cljs.core.pop.call(null, data_path);
        component = G__18676;
        class_path_query_data = G__18677;
        data_path = G__18678;
        continue;
      }
    } else {
      return om.next.get_class_or_instance_query.call(null, component);
    }
    break;
  }
};
om.next.get_query = function om$next$get_query(x) {
  if (!(x == null) ? false || cljs.core.PROTOCOL_SENTINEL === x.om$next$IQuery$ ? true : false : false) {
    if (cljs.core.truth_(om.next.component_QMARK_.call(null, x))) {
      var temp__4655__auto__ = om.next.component__GT_query_data.call(null, x);
      if (cljs.core.truth_(temp__4655__auto__)) {
        var query_data = temp__4655__auto__;
        return om.next.get_component_query.call(null, x, query_data);
      } else {
        var cp = om.next.class_path.call(null, x);
        var r = om.next.get_reconciler.call(null, x);
        var data_path = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.number_QMARK_), om.next.path.call(null, x));
        var class_path_query_data = cljs.core.get.call(null, (new cljs.core.Keyword(null, "class-path-\x3equery", "class-path-\x3equery", -1222593700)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, om.next.get_indexer.call(null, r))), cp);
        return om.next.get_indexed_query.call(null, x, class_path_query_data, data_path);
      }
    } else {
      return om.next.get_class_or_instance_query.call(null, x);
    }
  } else {
    return null;
  }
};
om.next.tag = function om$next$tag(x, class$) {
  return cljs.core.vary_meta.call(null, x, cljs.core.assoc, new cljs.core.Keyword(null, "component", "component", 1555936782), class$);
};
om.next.OmProps = function(props, basis_t) {
  this.props = props;
  this.basis_t = basis_t;
};
om.next.OmProps.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "props", "props", 2093813254, null), new cljs.core.Symbol(null, "basis-t", "basis-t", 216455797, null)], null);
};
om.next.OmProps.cljs$lang$type = true;
om.next.OmProps.cljs$lang$ctorStr = "om.next/OmProps";
om.next.OmProps.cljs$lang$ctorPrWriter = function(this__8021__auto__, writer__8022__auto__, opt__8023__auto__) {
  return cljs.core._write.call(null, writer__8022__auto__, "om.next/OmProps");
};
om.next.__GT_OmProps = function om$next$__GT_OmProps(props, basis_t) {
  return new om.next.OmProps(props, basis_t);
};
om.next.om_props = function om$next$om_props(props, basis_t) {
  return new om.next.OmProps(props, basis_t);
};
om.next.om_props_basis = function om$next$om_props_basis(om_props) {
  return om_props.basis_t;
};
om.next.nil_props = om.next.om_props.call(null, null, -1);
om.next.unwrap = function om$next$unwrap(om_props) {
  return om_props.props;
};
om.next.compute_react_key = function om$next$compute_react_key(cl, props) {
  var temp__4655__auto__ = (new cljs.core.Keyword(null, "react-key", "react-key", 1337881348)).cljs$core$IFn$_invoke$arity$1(props);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var rk = temp__4655__auto__;
    return rk;
  } else {
    var temp__4655__auto____$1 = (new cljs.core.Keyword(null, "om-path", "om-path", -1911443978)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, props));
    if (cljs.core.truth_(temp__4655__auto____$1)) {
      var idx = temp__4655__auto____$1;
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cl.name), cljs.core.str.cljs$core$IFn$_invoke$arity$1("_"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join("");
    } else {
      return undefined;
    }
  }
};
om.next.factory = function om$next$factory(var_args) {
  var args18681 = [];
  var len__8523__auto___18689 = arguments.length;
  var i__8524__auto___18690 = 0;
  while (true) {
    if (i__8524__auto___18690 < len__8523__auto___18689) {
      args18681.push(arguments[i__8524__auto___18690]);
      var G__18691 = i__8524__auto___18690 + 1;
      i__8524__auto___18690 = G__18691;
      continue;
    } else {
    }
    break;
  }
  var G__18683 = args18681.length;
  switch(G__18683) {
    case 1:
      return om.next.factory.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.factory.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18681.length)].join(""));
  }
};
om.next.factory.cljs$core$IFn$_invoke$arity$1 = function(class$) {
  return om.next.factory.call(null, class$, null);
};
om.next.factory.cljs$core$IFn$_invoke$arity$2 = function(class$, p__18684) {
  var map__18685 = p__18684;
  var map__18685__$1 = (!(map__18685 == null) ? map__18685.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__18685.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18685) : map__18685;
  var opts = map__18685__$1;
  var validator = cljs.core.get.call(null, map__18685__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
  var keyfn = cljs.core.get.call(null, map__18685__$1, new cljs.core.Keyword(null, "keyfn", "keyfn", 780060332));
  var instrument_QMARK_ = cljs.core.get.call(null, map__18685__$1, new cljs.core.Keyword(null, "instrument?", "instrument?", -1835582396), true);
  if (cljs.core.fn_QMARK_.call(null, class$)) {
  } else {
    throw new Error("Assert failed: (fn? class)");
  }
  return function(map__18685, map__18685__$1, opts, validator, keyfn, instrument_QMARK_) {
    return function() {
      var om$next$self__delegate = function(props, children) {
        if (validator == null) {
        } else {
          if (cljs.core.truth_(validator.call(null, props))) {
          } else {
            throw new Error("Assert failed: (validator props)");
          }
        }
        if (cljs.core.truth_(function() {
          var and__7398__auto__ = om.next._STAR_instrument_STAR_;
          if (cljs.core.truth_(and__7398__auto__)) {
            return instrument_QMARK_;
          } else {
            return and__7398__auto__;
          }
        }())) {
          return om.next._STAR_instrument_STAR_.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "props", "props", 453281727), props, new cljs.core.Keyword(null, "children", "children", -940561982), children, new cljs.core.Keyword(null, "class", "class", -2030961996), class$, new cljs.core.Keyword(null, "factory", "factory", 63933746), om.next.factory.call(null, class$, cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "instrument?", "instrument?", -1835582396), 
          false))], null));
        } else {
          var key = !(keyfn == null) ? keyfn.call(null, props) : om.next.compute_react_key.call(null, class$, props);
          var ref = (new cljs.core.Keyword(null, "ref", "ref", 1289896967)).cljs$core$IFn$_invoke$arity$1(props);
          var ref__$1 = function() {
            var G__18688 = ref;
            if (ref instanceof cljs.core.Keyword) {
              return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__18688)].join("");
            } else {
              return G__18688;
            }
          }();
          var t = !(om.next._STAR_reconciler_STAR_ == null) ? om.next.protocols.basis_t.call(null, om.next._STAR_reconciler_STAR_) : 0;
          return React.createElement(class$, {"omcljs$value":om.next.om_props.call(null, props, t), "omcljs$instrument":om.next._STAR_instrument_STAR_, "key":key, "omcljs$reactKey":key, "ref":ref__$1, "omcljs$shared":om.next._STAR_shared_STAR_, "omcljs$path":(new cljs.core.Keyword(null, "om-path", "om-path", -1911443978)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, props)), "omcljs$reconciler":om.next._STAR_reconciler_STAR_, "omcljs$depth":om.next._STAR_depth_STAR_, "omcljs$parent":om.next._STAR_parent_STAR_}, 
          om.util.force_children.call(null, children));
        }
      };
      var om$next$self = function(props, var_args) {
        var children = null;
        if (arguments.length > 1) {
          var G__18693__i = 0, G__18693__a = new Array(arguments.length - 1);
          while (G__18693__i < G__18693__a.length) {
            G__18693__a[G__18693__i] = arguments[G__18693__i + 1];
            ++G__18693__i;
          }
          children = new cljs.core.IndexedSeq(G__18693__a, 0);
        }
        return om$next$self__delegate.call(this, props, children);
      };
      om$next$self.cljs$lang$maxFixedArity = 1;
      om$next$self.cljs$lang$applyTo = function(arglist__18694) {
        var props = cljs.core.first(arglist__18694);
        var children = cljs.core.rest(arglist__18694);
        return om$next$self__delegate(props, children);
      };
      om$next$self.cljs$core$IFn$_invoke$arity$variadic = om$next$self__delegate;
      return om$next$self;
    }();
  }(map__18685, map__18685__$1, opts, validator, keyfn, instrument_QMARK_);
};
om.next.factory.cljs$lang$maxFixedArity = 2;
om.next.component_QMARK_ = function om$next$component_QMARK_(x) {
  if (!(x == null)) {
    return x.om$isComponent === true;
  } else {
    return false;
  }
};
om.next.state = function om$next$state(c) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  return c.state;
};
om.next.get_prop = function om$next$get_prop(c, k) {
  return goog.object.get(c.props, k);
};
om.next.get_props_STAR_ = function om$next$get_props_STAR_(x, k) {
  if (x == null) {
    return om.next.nil_props;
  } else {
    var y = goog.object.get(x, k);
    if (y == null) {
      return om.next.nil_props;
    } else {
      return y;
    }
  }
};
om.next.get_prev_props = function om$next$get_prev_props(x) {
  return om.next.get_props_STAR_.call(null, x, "omcljs$prev$value");
};
om.next.get_next_props = function om$next$get_next_props(x) {
  return om.next.get_props_STAR_.call(null, x, "omcljs$next$value");
};
om.next.get_props = function om$next$get_props(x) {
  return om.next.get_props_STAR_.call(null, x, "omcljs$value");
};
om.next.set_prop_BANG_ = function om$next$set_prop_BANG_(c, k, v) {
  return goog.object.set(c.props, k, v);
};
om.next.get_reconciler = function om$next$get_reconciler(c) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  return om.next.get_prop.call(null, c, "omcljs$reconciler");
};
om.next.props_STAR_ = function om$next$props_STAR_(var_args) {
  var args18695 = [];
  var len__8523__auto___18698 = arguments.length;
  var i__8524__auto___18699 = 0;
  while (true) {
    if (i__8524__auto___18699 < len__8523__auto___18698) {
      args18695.push(arguments[i__8524__auto___18699]);
      var G__18700 = i__8524__auto___18699 + 1;
      i__8524__auto___18699 = G__18700;
      continue;
    } else {
    }
    break;
  }
  var G__18697 = args18695.length;
  switch(G__18697) {
    case 2:
      return om.next.props_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.props_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18695.length)].join(""));
  }
};
om.next.props_STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core.max_key.call(null, om.next.om_props_basis, x, y);
};
om.next.props_STAR_.cljs$core$IFn$_invoke$arity$3 = function(x, y, z) {
  return cljs.core.max_key.call(null, om.next.om_props_basis, x, om.next.props_STAR_.call(null, y, z));
};
om.next.props_STAR_.cljs$lang$maxFixedArity = 3;
om.next.prev_props_STAR_ = function om$next$prev_props_STAR_(var_args) {
  var args18702 = [];
  var len__8523__auto___18705 = arguments.length;
  var i__8524__auto___18706 = 0;
  while (true) {
    if (i__8524__auto___18706 < len__8523__auto___18705) {
      args18702.push(arguments[i__8524__auto___18706]);
      var G__18707 = i__8524__auto___18706 + 1;
      i__8524__auto___18706 = G__18707;
      continue;
    } else {
    }
    break;
  }
  var G__18704 = args18702.length;
  switch(G__18704) {
    case 2:
      return om.next.prev_props_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.prev_props_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18702.length)].join(""));
  }
};
om.next.prev_props_STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core.min_key.call(null, om.next.om_props_basis, x, y);
};
om.next.prev_props_STAR_.cljs$core$IFn$_invoke$arity$3 = function(x, y, z) {
  return cljs.core.min_key.call(null, om.next.om_props_basis, om.next.props_STAR_.call(null, x, y), om.next.props_STAR_.call(null, y, z));
};
om.next.prev_props_STAR_.cljs$lang$maxFixedArity = 3;
om.next._prev_props = function om$next$_prev_props(prev_props, component) {
  var cst = component.state;
  var props = component.props;
  return om.next.unwrap.call(null, om.next.prev_props_STAR_.call(null, om.next.props_STAR_.call(null, om.next.get_props.call(null, prev_props), om.next.get_prev_props.call(null, cst)), om.next.props_STAR_.call(null, om.next.get_props.call(null, cst), om.next.get_props.call(null, props))));
};
om.next._next_props = function om$next$_next_props(next_props, component) {
  return om.next.unwrap.call(null, om.next.props_STAR_.call(null, om.next.get_props.call(null, component.props), om.next.get_props.call(null, next_props), om.next.get_next_props.call(null, component.state)));
};
om.next.merge_pending_props_BANG_ = function om$next$merge_pending_props_BANG_(c) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  var cst = c.state;
  var props = c.props;
  var pending = goog.object.get(cst, "omcljs$next$value");
  var prev = om.next.props_STAR_.call(null, om.next.get_props.call(null, cst), om.next.get_props.call(null, props));
  goog.object.set(cst, "omcljs$prev$value", prev);
  if (pending == null) {
    return null;
  } else {
    goog.object.remove(cst, "omcljs$next$value");
    return goog.object.set(cst, "omcljs$value", pending);
  }
};
om.next.clear_prev_props_BANG_ = function om$next$clear_prev_props_BANG_(c) {
  return goog.object.remove(c.state, "omcljs$prev$value");
};
om.next.t = function om$next$t(c) {
  return om.next.om_props_basis.call(null, om.next.props_STAR_.call(null, om.next.get_props.call(null, c.props), om.next.get_props.call(null, c.state)));
};
om.next.parent = function om$next$parent(component) {
  return om.next.get_prop.call(null, component, "omcljs$parent");
};
om.next.depth = function om$next$depth(component) {
  if (om.next.component_QMARK_.call(null, component)) {
    return om.next.get_prop.call(null, component, "omcljs$depth");
  } else {
    return null;
  }
};
om.next.react_key = function om$next$react_key(component) {
  return om.next.get_prop.call(null, component, "omcljs$reactKey");
};
om.next.react_type = function om$next$react_type(x) {
  var or__7410__auto__ = goog.object.get(x, "type");
  if (cljs.core.truth_(or__7410__auto__)) {
    return or__7410__auto__;
  } else {
    return cljs.core.type.call(null, x);
  }
};
om.next.path = function om$next$path(c) {
  return om.next.get_prop.call(null, c, "omcljs$path");
};
om.next.shared = function om$next$shared(var_args) {
  var args18709 = [];
  var len__8523__auto___18714 = arguments.length;
  var i__8524__auto___18715 = 0;
  while (true) {
    if (i__8524__auto___18715 < len__8523__auto___18714) {
      args18709.push(arguments[i__8524__auto___18715]);
      var G__18716 = i__8524__auto___18715 + 1;
      i__8524__auto___18715 = G__18716;
      continue;
    } else {
    }
    break;
  }
  var G__18711 = args18709.length;
  switch(G__18711) {
    case 1:
      return om.next.shared.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.shared.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18709.length)].join(""));
  }
};
om.next.shared.cljs$core$IFn$_invoke$arity$1 = function(component) {
  return om.next.shared.call(null, component, cljs.core.PersistentVector.EMPTY);
};
om.next.shared.cljs$core$IFn$_invoke$arity$2 = function(component, k_or_ks) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  var shared = goog.object.get(component.props, "omcljs$shared");
  var ks = function() {
    var G__18712 = k_or_ks;
    if (!cljs.core.sequential_QMARK_.call(null, k_or_ks)) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__18712], null);
    } else {
      return G__18712;
    }
  }();
  var G__18713 = shared;
  if (!cljs.core.empty_QMARK_.call(null, ks)) {
    return cljs.core.get_in.call(null, G__18713, ks);
  } else {
    return G__18713;
  }
};
om.next.shared.cljs$lang$maxFixedArity = 2;
om.next.instrument = function om$next$instrument(component) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  return om.next.get_prop.call(null, component, "omcljs$instrument");
};
om.next.update_props_BANG_ = function om$next$update_props_BANG_(c, next_props) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  var G__18719 = c.state;
  goog.object.set(G__18719, "omcljs$next$value", om.next.om_props.call(null, next_props, om.next.protocols.basis_t.call(null, om.next.get_reconciler.call(null, c))));
  return G__18719;
};
om.next.props = function om$next$props(component) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  return om.next.unwrap.call(null, om.next.props_STAR_.call(null, om.next.get_props.call(null, component.props), om.next.get_props.call(null, component.state)));
};
om.next.computed = function om$next$computed(props, computed_map) {
  if (props == null) {
    return null;
  } else {
    if (cljs.core.vector_QMARK_.call(null, props)) {
      var G__18722 = props;
      if (!cljs.core.empty_QMARK_.call(null, computed_map)) {
        return cljs.core.vary_meta.call(null, G__18722, cljs.core.assoc, new cljs.core.Keyword("om.next", "computed", "om.next/computed", 1947886329), computed_map);
      } else {
        return G__18722;
      }
    } else {
      var G__18723 = props;
      if (!cljs.core.empty_QMARK_.call(null, computed_map)) {
        return cljs.core.assoc.call(null, G__18723, new cljs.core.Keyword("om.next", "computed", "om.next/computed", 1947886329), computed_map);
      } else {
        return G__18723;
      }
    }
  }
};
om.next.get_computed = function om$next$get_computed(var_args) {
  var args18724 = [];
  var len__8523__auto___18729 = arguments.length;
  var i__8524__auto___18730 = 0;
  while (true) {
    if (i__8524__auto___18730 < len__8523__auto___18729) {
      args18724.push(arguments[i__8524__auto___18730]);
      var G__18731 = i__8524__auto___18730 + 1;
      i__8524__auto___18730 = G__18731;
      continue;
    } else {
    }
    break;
  }
  var G__18726 = args18724.length;
  switch(G__18726) {
    case 1:
      return om.next.get_computed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.get_computed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18724.length)].join(""));
  }
};
om.next.get_computed.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return om.next.get_computed.call(null, x, cljs.core.PersistentVector.EMPTY);
};
om.next.get_computed.cljs$core$IFn$_invoke$arity$2 = function(x, k_or_ks) {
  if (x == null) {
    return null;
  } else {
    var props = function() {
      var G__18727 = x;
      if (om.next.component_QMARK_.call(null, x)) {
        return om.next.props.call(null, G__18727);
      } else {
        return G__18727;
      }
    }();
    var ks = cljs.core.into.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("om.next", "computed", "om.next/computed", 1947886329)], null), function() {
      var G__18728 = k_or_ks;
      if (!cljs.core.sequential_QMARK_.call(null, k_or_ks)) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__18728], null);
      } else {
        return G__18728;
      }
    }());
    if (cljs.core.vector_QMARK_.call(null, props)) {
      return cljs.core.get_in.call(null, cljs.core.meta.call(null, props), ks);
    } else {
      return cljs.core.get_in.call(null, props, ks);
    }
  }
};
om.next.get_computed.cljs$lang$maxFixedArity = 2;
om.next.set_state_BANG_ = function om$next$set_state_BANG_(component, new_state) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  if (!(component == null) ? false || cljs.core.PROTOCOL_SENTINEL === component.om$next$ILocalState$ ? true : false : false) {
    om.next._set_state_BANG_.call(null, component, new_state);
  } else {
    goog.object.set(component.state, "omcljs$pendingState", new_state);
  }
  var temp__4655__auto__ = om.next.get_reconciler.call(null, component);
  if (cljs.core.truth_(temp__4655__auto__)) {
    var r = temp__4655__auto__;
    om.next.protocols.queue_BANG_.call(null, r, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [component], null));
    return om.next.schedule_render_BANG_.call(null, r);
  } else {
    return component.forceUpdate();
  }
};
om.next.get_state = function om$next$get_state(var_args) {
  var args18735 = [];
  var len__8523__auto___18739 = arguments.length;
  var i__8524__auto___18740 = 0;
  while (true) {
    if (i__8524__auto___18740 < len__8523__auto___18739) {
      args18735.push(arguments[i__8524__auto___18740]);
      var G__18741 = i__8524__auto___18740 + 1;
      i__8524__auto___18740 = G__18741;
      continue;
    } else {
    }
    break;
  }
  var G__18737 = args18735.length;
  switch(G__18737) {
    case 1:
      return om.next.get_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.get_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18735.length)].join(""));
  }
};
om.next.get_state.cljs$core$IFn$_invoke$arity$1 = function(component) {
  return om.next.get_state.call(null, component, cljs.core.PersistentVector.EMPTY);
};
om.next.get_state.cljs$core$IFn$_invoke$arity$2 = function(component, k_or_ks) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  var cst = (!(component == null) ? false || cljs.core.PROTOCOL_SENTINEL === component.om$next$ILocalState$ ? true : false : false) ? om.next._get_state.call(null, component) : function() {
    var temp__4657__auto__ = component.state;
    if (cljs.core.truth_(temp__4657__auto__)) {
      var state = temp__4657__auto__;
      var or__7410__auto__ = goog.object.get(state, "omcljs$pendingState");
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return goog.object.get(state, "omcljs$state");
      }
    } else {
      return null;
    }
  }();
  return cljs.core.get_in.call(null, cst, cljs.core.sequential_QMARK_.call(null, k_or_ks) ? k_or_ks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_or_ks], null));
};
om.next.get_state.cljs$lang$maxFixedArity = 2;
om.next.update_state_BANG_ = function om$next$update_state_BANG_(var_args) {
  var args18743 = [];
  var len__8523__auto___18753 = arguments.length;
  var i__8524__auto___18754 = 0;
  while (true) {
    if (i__8524__auto___18754 < len__8523__auto___18753) {
      args18743.push(arguments[i__8524__auto___18754]);
      var G__18755 = i__8524__auto___18754 + 1;
      i__8524__auto___18754 = G__18755;
      continue;
    } else {
    }
    break;
  }
  var G__18752 = args18743.length;
  switch(G__18752) {
    case 2:
      return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args18743.slice(6), 0, null);
      return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8542__auto__);
  }
};
om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = function(component, f) {
  return om.next.set_state_BANG_.call(null, component, f.call(null, om.next.get_state.call(null, component)));
};
om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(component, f, arg0) {
  return om.next.set_state_BANG_.call(null, component, f.call(null, om.next.get_state.call(null, component), arg0));
};
om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$4 = function(component, f, arg0, arg1) {
  return om.next.set_state_BANG_.call(null, component, f.call(null, om.next.get_state.call(null, component), arg0, arg1));
};
om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$5 = function(component, f, arg0, arg1, arg2) {
  return om.next.set_state_BANG_.call(null, component, f.call(null, om.next.get_state.call(null, component), arg0, arg1, arg2));
};
om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$6 = function(component, f, arg0, arg1, arg2, arg3) {
  return om.next.set_state_BANG_.call(null, component, f.call(null, om.next.get_state.call(null, component), arg0, arg1, arg2, arg3));
};
om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(component, f, arg0, arg1, arg2, arg3, arg_rest) {
  return om.next.set_state_BANG_.call(null, component, cljs.core.apply.call(null, f, om.next.get_state.call(null, component), arg0, arg1, arg2, arg3, arg_rest));
};
om.next.update_state_BANG_.cljs$lang$applyTo = function(seq18744) {
  var G__18745 = cljs.core.first.call(null, seq18744);
  var seq18744__$1 = cljs.core.next.call(null, seq18744);
  var G__18746 = cljs.core.first.call(null, seq18744__$1);
  var seq18744__$2 = cljs.core.next.call(null, seq18744__$1);
  var G__18747 = cljs.core.first.call(null, seq18744__$2);
  var seq18744__$3 = cljs.core.next.call(null, seq18744__$2);
  var G__18748 = cljs.core.first.call(null, seq18744__$3);
  var seq18744__$4 = cljs.core.next.call(null, seq18744__$3);
  var G__18749 = cljs.core.first.call(null, seq18744__$4);
  var seq18744__$5 = cljs.core.next.call(null, seq18744__$4);
  var G__18750 = cljs.core.first.call(null, seq18744__$5);
  var seq18744__$6 = cljs.core.next.call(null, seq18744__$5);
  return om.next.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__18745, G__18746, G__18747, G__18748, G__18749, G__18750, seq18744__$6);
};
om.next.update_state_BANG_.cljs$lang$maxFixedArity = 6;
om.next.get_rendered_state = function om$next$get_rendered_state(var_args) {
  var args18757 = [];
  var len__8523__auto___18762 = arguments.length;
  var i__8524__auto___18763 = 0;
  while (true) {
    if (i__8524__auto___18763 < len__8523__auto___18762) {
      args18757.push(arguments[i__8524__auto___18763]);
      var G__18764 = i__8524__auto___18763 + 1;
      i__8524__auto___18763 = G__18764;
      continue;
    } else {
    }
    break;
  }
  var G__18759 = args18757.length;
  switch(G__18759) {
    case 1:
      return om.next.get_rendered_state.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.get_rendered_state.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18757.length)].join(""));
  }
};
om.next.get_rendered_state.cljs$core$IFn$_invoke$arity$1 = function(component) {
  return om.next.get_rendered_state.call(null, component, cljs.core.PersistentVector.EMPTY);
};
om.next.get_rendered_state.cljs$core$IFn$_invoke$arity$2 = function(component, k_or_ks) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  var cst = (!(component == null) ? false || cljs.core.PROTOCOL_SENTINEL === component.om$next$ILocalState$ ? true : false : false) ? om.next._get_rendered_state.call(null, component) : function() {
    var G__18761 = component;
    var G__18761__$1 = G__18761 == null ? null : G__18761.state;
    if (G__18761__$1 == null) {
      return null;
    } else {
      return goog.object.get(G__18761__$1, "omcljs$state");
    }
  }();
  return cljs.core.get_in.call(null, cst, cljs.core.sequential_QMARK_.call(null, k_or_ks) ? k_or_ks : new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_or_ks], null));
};
om.next.get_rendered_state.cljs$lang$maxFixedArity = 2;
om.next.merge_pending_state_BANG_ = function om$next$merge_pending_state_BANG_(c) {
  if (!(c == null) ? false || cljs.core.PROTOCOL_SENTINEL === c.om$next$ILocalState$ ? true : false : false) {
    return om.next._merge_pending_state_BANG_.call(null, c);
  } else {
    var temp__4657__auto__ = function() {
      var G__18769 = c;
      var G__18769__$1 = G__18769 == null ? null : G__18769.state;
      if (G__18769__$1 == null) {
        return null;
      } else {
        return goog.object.get(G__18769__$1, "omcljs$pendingState");
      }
    }();
    if (cljs.core.truth_(temp__4657__auto__)) {
      var pending = temp__4657__auto__;
      var state = c.state;
      var previous = goog.object.get(state, "omcljs$state");
      goog.object.remove(state, "omcljs$pendingState");
      goog.object.set(state, "omcljs$previousState", previous);
      return goog.object.set(state, "omcljs$state", pending);
    } else {
      return null;
    }
  }
};
om.next.react_set_state_BANG_ = function om$next$react_set_state_BANG_(var_args) {
  var args18770 = [];
  var len__8523__auto___18773 = arguments.length;
  var i__8524__auto___18774 = 0;
  while (true) {
    if (i__8524__auto___18774 < len__8523__auto___18773) {
      args18770.push(arguments[i__8524__auto___18774]);
      var G__18775 = i__8524__auto___18774 + 1;
      i__8524__auto___18774 = G__18775;
      continue;
    } else {
    }
    break;
  }
  var G__18772 = args18770.length;
  switch(G__18772) {
    case 2:
      return om.next.react_set_state_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.react_set_state_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18770.length)].join(""));
  }
};
om.next.react_set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = function(component, new_state) {
  return om.next.react_set_state_BANG_.call(null, component, new_state, null);
};
om.next.react_set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = function(component, new_state, cb) {
  if (om.next.component_QMARK_.call(null, component)) {
  } else {
    throw new Error("Assert failed: (component? component)");
  }
  return component.setState({"omcljs$state":new_state}, cb);
};
om.next.react_set_state_BANG_.cljs$lang$maxFixedArity = 3;
om.next.gather_sends = function om$next$gather_sends(p__18778, q, remotes) {
  var map__18785 = p__18778;
  var map__18785__$1 = (!(map__18785 == null) ? map__18785.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__18785.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18785) : map__18785;
  var env = map__18785__$1;
  var parser = cljs.core.get.call(null, map__18785__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.comp.call(null, cljs.core.map.call(null, function(map__18785, map__18785__$1, env, parser) {
    return function(p1__18777_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__18777_SHARP_, parser.call(null, env, q, p1__18777_SHARP_)], null);
    };
  }(map__18785, map__18785__$1, env, parser)), cljs.core.filter.call(null, function(map__18785, map__18785__$1, env, parser) {
    return function(p__18787) {
      var vec__18788 = p__18787;
      var _ = cljs.core.nth.call(null, vec__18788, 0, null);
      var v = cljs.core.nth.call(null, vec__18788, 1, null);
      return cljs.core.count.call(null, v) > 0;
    };
  }(map__18785, map__18785__$1, env, parser))), remotes);
};
om.next.transform_reads = function om$next$transform_reads(r, tx) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "easy-reads", "easy-reads", 803667467)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(r)))) {
    var with_target = function om$next$transform_reads_$_with_target(target, q) {
      if (!(target == null)) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.next.force.call(null, cljs.core.first.call(null, q), target)], null);
      } else {
        return q;
      }
    };
    var add_focused_query = function om$next$transform_reads_$_add_focused_query(k, target, tx__$1, c) {
      var transformed = om.next.full_query.call(null, c, with_target.call(null, target, om.next.focus_query.call(null, om.next.get_query.call(null, c), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null))));
      return cljs.core.into.call(null, tx__$1, cljs.core.remove.call(null, cljs.core.set.call(null, tx__$1)), transformed);
    };
    var exprs = cljs.core.seq.call(null, tx);
    var tx_SINGLEQUOTE_ = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (!(exprs == null)) {
        var expr = cljs.core.first.call(null, exprs);
        var ast = om.next.impl.parser.expr__GT_ast.call(null, expr);
        var key = (new cljs.core.Keyword(null, "key", "key", -1516042587)).cljs$core$IFn$_invoke$arity$1(ast);
        var tgt = (new cljs.core.Keyword(null, "target", "target", 253001721)).cljs$core$IFn$_invoke$arity$1(ast);
        if (key instanceof cljs.core.Keyword) {
          var cs = om.next.ref__GT_components.call(null, r, key);
          var G__18795 = cljs.core.next.call(null, exprs);
          var G__18796 = cljs.core.reduce.call(null, function(exprs, tx_SINGLEQUOTE_, cs, expr, ast, key, tgt) {
            return function(p1__18791_SHARP_, p2__18792_SHARP_) {
              return add_focused_query.call(null, key, tgt, p1__18791_SHARP_, p2__18792_SHARP_);
            };
          }(exprs, tx_SINGLEQUOTE_, cs, expr, ast, key, tgt), function() {
            var G__18794 = tx_SINGLEQUOTE_;
            if (cljs.core.empty_QMARK_.call(null, cs)) {
              return cljs.core.conj.call(null, G__18794, expr);
            } else {
              return G__18794;
            }
          }(), cs);
          exprs = G__18795;
          tx_SINGLEQUOTE_ = G__18796;
          continue;
        } else {
          var G__18797 = cljs.core.next.call(null, exprs);
          var G__18798 = cljs.core.conj.call(null, tx_SINGLEQUOTE_, expr);
          exprs = G__18797;
          tx_SINGLEQUOTE_ = G__18798;
          continue;
        }
      } else {
        return tx_SINGLEQUOTE_;
      }
      break;
    }
  } else {
    return tx;
  }
};
om.next.set_query_BANG_ = function om$next$set_query_BANG_(var_args) {
  var args18799 = [];
  var len__8523__auto___18816 = arguments.length;
  var i__8524__auto___18817 = 0;
  while (true) {
    if (i__8524__auto___18817 < len__8523__auto___18816) {
      args18799.push(arguments[i__8524__auto___18817]);
      var G__18818 = i__8524__auto___18817 + 1;
      i__8524__auto___18817 = G__18818;
      continue;
    } else {
    }
    break;
  }
  var G__18801 = args18799.length;
  switch(G__18801) {
    case 2:
      return om.next.set_query_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.set_query_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18799.length)].join(""));
  }
};
om.next.set_query_BANG_.cljs$core$IFn$_invoke$arity$2 = function(x, params_AMPERSAND_query) {
  return om.next.set_query_BANG_.call(null, x, params_AMPERSAND_query, null);
};
om.next.set_query_BANG_.cljs$core$IFn$_invoke$arity$3 = function(x, p__18802, reads) {
  var map__18803 = p__18802;
  var map__18803__$1 = (!(map__18803 == null) ? map__18803.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__18803.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18803) : map__18803;
  var params = cljs.core.get.call(null, map__18803__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var query = cljs.core.get.call(null, map__18803__$1, new cljs.core.Keyword(null, "query", "query", -1288509510));
  if (cljs.core.truth_(function() {
    var or__7410__auto__ = om.next.reconciler_QMARK_.call(null, x);
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return om.next.component_QMARK_.call(null, x);
    }
  }())) {
  } else {
    throw new Error("Assert failed: (or (reconciler? x) (component? x))");
  }
  if (!(params == null) || !(query == null)) {
  } else {
    throw new Error("Assert failed: (or (not (nil? params)) (not (nil? query)))");
  }
  if (reads == null || cljs.core.vector_QMARK_.call(null, reads)) {
  } else {
    throw new Error("Assert failed: (or (nil? reads) (vector? reads))");
  }
  var r = om.next.component_QMARK_.call(null, x) ? om.next.get_reconciler.call(null, x) : x;
  var c = om.next.component_QMARK_.call(null, x) ? x : null;
  var xs = !(c == null) ? new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [c], null) : cljs.core.PersistentVector.EMPTY;
  var root = (new cljs.core.Keyword(null, "root", "root", -448657453)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(r)));
  var cfg = (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(r);
  var st = (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(cfg);
  var id = cljs.core.random_uuid.call(null);
  (new cljs.core.Keyword(null, "history", "history", -247395220)).cljs$core$IFn$_invoke$arity$1(cfg).add(id, cljs.core.deref.call(null, st));
  var temp__4657__auto___18820 = (new cljs.core.Keyword(null, "logger", "logger", -220675947)).cljs$core$IFn$_invoke$arity$1(cfg);
  if (cljs.core.truth_(temp__4657__auto___18820)) {
    var l_18821 = temp__4657__auto___18820;
    goog.log.info(l_18821, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
      var temp__4657__auto____$1 = (!(c == null) ? false || cljs.core.PROTOCOL_SENTINEL === c.om$next$Ident$ ? true : false : false) ? om.next.ident.call(null, c, om.next.props.call(null, c)) : null;
      if (cljs.core.truth_(temp__4657__auto____$1)) {
        var ident = temp__4657__auto____$1;
        return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, ident)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" ")].join("");
      } else {
        return null;
      }
    }()), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x)) ? "reconciler " : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(query) ? function() {
      return ", ";
    }() : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(params) ? function() {
      return " ";
    }() : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, id))].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, st, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146), function() {
    var or__7410__auto__ = c;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return root;
    }
  }()], null), cljs.core.merge, cljs.core.merge.call(null, cljs.core.truth_(query) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "query", "query", -1288509510), query], null) : null, cljs.core.truth_(params) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "params", "params", 710516235), params], null) : null));
  if (!(c == null) && reads == null) {
    om.next.protocols.queue_BANG_.call(null, r, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [c], null));
  } else {
  }
  if (reads == null) {
  } else {
    om.next.protocols.queue_BANG_.call(null, r, reads);
  }
  om.next.protocols.reindex_BANG_.call(null, r);
  var rootq_18822 = !(c == null) ? om.next.full_query.call(null, c) : reads == null ? om.next.get_query.call(null, root) : null;
  var sends_18823 = om.next.gather_sends.call(null, om.next.to_env.call(null, cfg), cljs.core.into.call(null, function() {
    var or__7410__auto__ = rootq_18822;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return cljs.core.PersistentVector.EMPTY;
    }
  }(), om.next.transform_reads.call(null, r, reads)), (new cljs.core.Keyword(null, "remotes", "remotes", 1132366312)).cljs$core$IFn$_invoke$arity$1(cfg));
  if (cljs.core.empty_QMARK_.call(null, sends_18823)) {
  } else {
    var seq__18806_18824 = cljs.core.seq.call(null, sends_18823);
    var chunk__18807_18825 = null;
    var count__18808_18826 = 0;
    var i__18809_18827 = 0;
    while (true) {
      if (i__18809_18827 < count__18808_18826) {
        var vec__18810_18828 = cljs.core._nth.call(null, chunk__18807_18825, i__18809_18827);
        var remote_18829 = cljs.core.nth.call(null, vec__18810_18828, 0, null);
        var __18830 = cljs.core.nth.call(null, vec__18810_18828, 1, null);
        om.next.protocols.queue_BANG_.call(null, r, xs, remote_18829);
        var G__18831 = seq__18806_18824;
        var G__18832 = chunk__18807_18825;
        var G__18833 = count__18808_18826;
        var G__18834 = i__18809_18827 + 1;
        seq__18806_18824 = G__18831;
        chunk__18807_18825 = G__18832;
        count__18808_18826 = G__18833;
        i__18809_18827 = G__18834;
        continue;
      } else {
        var temp__4657__auto___18835 = cljs.core.seq.call(null, seq__18806_18824);
        if (temp__4657__auto___18835) {
          var seq__18806_18836__$1 = temp__4657__auto___18835;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18806_18836__$1)) {
            var c__8229__auto___18837 = cljs.core.chunk_first.call(null, seq__18806_18836__$1);
            var G__18838 = cljs.core.chunk_rest.call(null, seq__18806_18836__$1);
            var G__18839 = c__8229__auto___18837;
            var G__18840 = cljs.core.count.call(null, c__8229__auto___18837);
            var G__18841 = 0;
            seq__18806_18824 = G__18838;
            chunk__18807_18825 = G__18839;
            count__18808_18826 = G__18840;
            i__18809_18827 = G__18841;
            continue;
          } else {
            var vec__18813_18842 = cljs.core.first.call(null, seq__18806_18836__$1);
            var remote_18843 = cljs.core.nth.call(null, vec__18813_18842, 0, null);
            var __18844 = cljs.core.nth.call(null, vec__18813_18842, 1, null);
            om.next.protocols.queue_BANG_.call(null, r, xs, remote_18843);
            var G__18845 = cljs.core.next.call(null, seq__18806_18836__$1);
            var G__18846 = null;
            var G__18847 = 0;
            var G__18848 = 0;
            seq__18806_18824 = G__18845;
            chunk__18807_18825 = G__18846;
            count__18808_18826 = G__18847;
            i__18809_18827 = G__18848;
            continue;
          }
        } else {
        }
      }
      break;
    }
    om.next.protocols.queue_sends_BANG_.call(null, r, sends_18823);
    om.next.schedule_sends_BANG_.call(null, r);
  }
  return null;
};
om.next.set_query_BANG_.cljs$lang$maxFixedArity = 3;
om.next.update_query_BANG_ = function om$next$update_query_BANG_(var_args) {
  var args18849 = [];
  var len__8523__auto___18859 = arguments.length;
  var i__8524__auto___18860 = 0;
  while (true) {
    if (i__8524__auto___18860 < len__8523__auto___18859) {
      args18849.push(arguments[i__8524__auto___18860]);
      var G__18861 = i__8524__auto___18860 + 1;
      i__8524__auto___18860 = G__18861;
      continue;
    } else {
    }
    break;
  }
  var G__18858 = args18849.length;
  switch(G__18858) {
    case 2:
      return om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__8542__auto__ = new cljs.core.IndexedSeq(args18849.slice(6), 0, null);
      return om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__8542__auto__);
  }
};
om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$2 = function(component, f) {
  return om.next.set_query_BANG_.call(null, component, f.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "query", "query", -1288509510), om.next.get_unbound_query.call(null, component), new cljs.core.Keyword(null, "params", "params", 710516235), om.next.get_params.call(null, component)], null)));
};
om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$3 = function(component, f, arg0) {
  return om.next.set_query_BANG_.call(null, component, f.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "query", "query", -1288509510), om.next.get_unbound_query.call(null, component), new cljs.core.Keyword(null, "params", "params", 710516235), om.next.get_params.call(null, component)], null), arg0));
};
om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$4 = function(component, f, arg0, arg1) {
  return om.next.set_query_BANG_.call(null, component, f.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "query", "query", -1288509510), om.next.get_unbound_query.call(null, component), new cljs.core.Keyword(null, "params", "params", 710516235), om.next.get_params.call(null, component)], null), arg0, arg1));
};
om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$5 = function(component, f, arg0, arg1, arg2) {
  return om.next.set_query_BANG_.call(null, component, f.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "query", "query", -1288509510), om.next.get_unbound_query.call(null, component), new cljs.core.Keyword(null, "params", "params", 710516235), om.next.get_params.call(null, component)], null), arg0, arg1, arg2));
};
om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(component, f, arg0, arg1, arg2, arg3, arg_rest) {
  return om.next.set_query_BANG_.call(null, component, cljs.core.apply.call(null, f, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "query", "query", -1288509510), om.next.get_unbound_query.call(null, component), new cljs.core.Keyword(null, "params", "params", 710516235), om.next.get_params.call(null, component)], null), arg0, arg1, arg2, arg3, arg_rest));
};
om.next.update_query_BANG_.cljs$lang$applyTo = function(seq18850) {
  var G__18851 = cljs.core.first.call(null, seq18850);
  var seq18850__$1 = cljs.core.next.call(null, seq18850);
  var G__18852 = cljs.core.first.call(null, seq18850__$1);
  var seq18850__$2 = cljs.core.next.call(null, seq18850__$1);
  var G__18853 = cljs.core.first.call(null, seq18850__$2);
  var seq18850__$3 = cljs.core.next.call(null, seq18850__$2);
  var G__18854 = cljs.core.first.call(null, seq18850__$3);
  var seq18850__$4 = cljs.core.next.call(null, seq18850__$3);
  var G__18855 = cljs.core.first.call(null, seq18850__$4);
  var seq18850__$5 = cljs.core.next.call(null, seq18850__$4);
  var G__18856 = cljs.core.first.call(null, seq18850__$5);
  var seq18850__$6 = cljs.core.next.call(null, seq18850__$5);
  return om.next.update_query_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__18851, G__18852, G__18853, G__18854, G__18855, G__18856, seq18850__$6);
};
om.next.update_query_BANG_.cljs$lang$maxFixedArity = 6;
om.next.mounted_QMARK_ = function om$next$mounted_QMARK_(x) {
  return om.next.component_QMARK_.call(null, x) && x.isMounted();
};
om.next.react_ref = function om$next$react_ref(component, name) {
  var G__18864 = component.refs;
  if (G__18864 == null) {
    return null;
  } else {
    return goog.object.get(G__18864, name);
  }
};
om.next.children = function om$next$children(component) {
  return component.props.children;
};
om.next.update_component_BANG_ = function om$next$update_component_BANG_(c, next_props) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  om.next.update_props_BANG_.call(null, c, next_props);
  return c.forceUpdate();
};
om.next.should_update_QMARK_ = function om$next$should_update_QMARK_(var_args) {
  var args18865 = [];
  var len__8523__auto___18868 = arguments.length;
  var i__8524__auto___18869 = 0;
  while (true) {
    if (i__8524__auto___18869 < len__8523__auto___18868) {
      args18865.push(arguments[i__8524__auto___18869]);
      var G__18870 = i__8524__auto___18869 + 1;
      i__8524__auto___18869 = G__18870;
      continue;
    } else {
    }
    break;
  }
  var G__18867 = args18865.length;
  switch(G__18867) {
    case 2:
      return om.next.should_update_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.should_update_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18865.length)].join(""));
  }
};
om.next.should_update_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(c, next_props) {
  return om.next.should_update_QMARK_.call(null, c, next_props, null);
};
om.next.should_update_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(c, next_props, next_state) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  return c.shouldComponentUpdate({"omcljs$value":next_props}, {"omcljs$state":next_state});
};
om.next.should_update_QMARK_.cljs$lang$maxFixedArity = 3;
om.next.raw_class_path = function om$next$raw_class_path(c) {
  var c__$1 = c;
  var ret = function() {
    var x__8252__auto__ = om.next.react_type.call(null, c__$1);
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }();
  while (true) {
    var temp__4655__auto__ = om.next.parent.call(null, c__$1);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var p = temp__4655__auto__;
      if (om.next.iquery_QMARK_.call(null, p)) {
        var G__18872 = p;
        var G__18873 = cljs.core.cons.call(null, om.next.react_type.call(null, p), ret);
        c__$1 = G__18872;
        ret = G__18873;
        continue;
      } else {
        var G__18874 = p;
        var G__18875 = ret;
        c__$1 = G__18874;
        ret = G__18875;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
om.next.class_path = function om$next$class_path(c) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  var raw_cp = om.next.raw_class_path.call(null, c);
  var cp = cljs.core.seq.call(null, raw_cp);
  var ret = cljs.core.PersistentVector.EMPTY;
  var seen = cljs.core.PersistentHashSet.EMPTY;
  while (true) {
    if (cp) {
      var c__$1 = cljs.core.first.call(null, cp);
      if (cljs.core.contains_QMARK_.call(null, seen, c__$1)) {
        var G__18876 = cljs.core.next.call(null, cp);
        var G__18877 = ret;
        var G__18878 = seen;
        cp = G__18876;
        ret = G__18877;
        seen = G__18878;
        continue;
      } else {
        var G__18879 = cljs.core.next.call(null, cp);
        var G__18880 = cljs.core.conj.call(null, ret, c__$1);
        var G__18881 = cljs.core.conj.call(null, seen, c__$1);
        cp = G__18879;
        ret = G__18880;
        seen = G__18881;
        continue;
      }
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
om.next.recursive_class_path_QMARK_ = function om$next$recursive_class_path_QMARK_(c) {
  if (om.next.component_QMARK_.call(null, c)) {
  } else {
    throw new Error("Assert failed: (component? c)");
  }
  return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core.distinct_QMARK_, om.next.raw_class_path.call(null, c)));
};
om.next.subquery = function om$next$subquery(x, subquery_ref, subquery_class) {
  if (subquery_ref instanceof cljs.core.Keyword || typeof subquery_ref === "string") {
  } else {
    throw new Error("Assert failed: (or (keyword? subquery-ref) (string? subquery-ref))");
  }
  if (cljs.core.fn_QMARK_.call(null, subquery_class)) {
  } else {
    throw new Error("Assert failed: (fn? subquery-class)");
  }
  var ref = function() {
    var G__18883 = subquery_ref;
    if (subquery_ref instanceof cljs.core.Keyword) {
      return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__18883)].join("");
    } else {
      return G__18883;
    }
  }();
  if (om.next.component_QMARK_.call(null, x) && om.next.mounted_QMARK_.call(null, x)) {
    return om.next.get_query.call(null, om.next.react_ref.call(null, x, ref));
  } else {
    return om.next.get_query.call(null, subquery_class);
  }
};
om.next.get_ident = function om$next$get_ident(x) {
  if (om.next.component_QMARK_.call(null, x)) {
  } else {
    throw new Error("Assert failed: (component? x)");
  }
  var m = om.next.props.call(null, x);
  if (!(m == null)) {
  } else {
    throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("get-ident invoked on component with nil props"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(not (nil? m))")].join(""));
  }
  return om.next.ident.call(null, x, m);
};
om.next.basis_t = function om$next$basis_t(reconciler) {
  return om.next.protocols.basis_t.call(null, reconciler);
};
om.next.queue_render_BANG_ = function om$next$queue_render_BANG_(f) {
  if (cljs.core.fn_QMARK_.call(null, om.next._STAR_raf_STAR_)) {
    return om.next._STAR_raf_STAR_.call(null, f);
  } else {
    if (!(typeof requestAnimationFrame !== "undefined")) {
      return setTimeout(f, 16);
    } else {
      return requestAnimationFrame(f);
    }
  }
};
om.next.schedule_render_BANG_ = function om$next$schedule_render_BANG_(reconciler) {
  if (cljs.core.truth_(om.next.protocols.schedule_render_BANG_.call(null, reconciler))) {
    return om.next.queue_render_BANG_.call(null, function() {
      return om.next.protocols.reconcile_BANG_.call(null, reconciler);
    });
  } else {
    return null;
  }
};
om.next.schedule_sends_BANG_ = function om$next$schedule_sends_BANG_(reconciler) {
  if (cljs.core.truth_(om.next.protocols.schedule_sends_BANG_.call(null, reconciler))) {
    return setTimeout(function() {
      return om.next.protocols.send_BANG_.call(null, reconciler);
    }, 0);
  } else {
    return null;
  }
};
om.next.add_root_BANG_ = function om$next$add_root_BANG_(var_args) {
  var args18884 = [];
  var len__8523__auto___18887 = arguments.length;
  var i__8524__auto___18888 = 0;
  while (true) {
    if (i__8524__auto___18888 < len__8523__auto___18887) {
      args18884.push(arguments[i__8524__auto___18888]);
      var G__18889 = i__8524__auto___18888 + 1;
      i__8524__auto___18888 = G__18889;
      continue;
    } else {
    }
    break;
  }
  var G__18886 = args18884.length;
  switch(G__18886) {
    case 3:
      return om.next.add_root_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.add_root_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18884.length)].join(""));
  }
};
om.next.add_root_BANG_.cljs$core$IFn$_invoke$arity$3 = function(reconciler, root_class, target) {
  return om.next.add_root_BANG_.call(null, reconciler, root_class, target, null);
};
om.next.add_root_BANG_.cljs$core$IFn$_invoke$arity$4 = function(reconciler, root_class, target, options) {
  if (cljs.core.truth_(om.next.reconciler_QMARK_.call(null, reconciler))) {
  } else {
    throw new Error("Assert failed: (reconciler? reconciler)");
  }
  if (cljs.core.fn_QMARK_.call(null, root_class)) {
  } else {
    throw new Error("Assert failed: (fn? root-class)");
  }
  var temp__4657__auto___18891 = cljs.core.get.call(null, cljs.core.deref.call(null, om.next.roots), target);
  if (cljs.core.truth_(temp__4657__auto___18891)) {
    var old_reconciler_18892 = temp__4657__auto___18891;
    om.next.remove_root_BANG_.call(null, old_reconciler_18892, target);
  } else {
  }
  cljs.core.swap_BANG_.call(null, om.next.roots, cljs.core.assoc, target, reconciler);
  return om.next.protocols.add_root_BANG_.call(null, reconciler, root_class, target, options);
};
om.next.add_root_BANG_.cljs$lang$maxFixedArity = 4;
om.next.remove_root_BANG_ = function om$next$remove_root_BANG_(reconciler, target) {
  return om.next.protocols.remove_root_BANG_.call(null, reconciler, target);
};
om.next.ITxIntercept = function() {
};
om.next.tx_intercept = function om$next$tx_intercept(c, tx) {
  if (!(c == null) && !(c.om$next$ITxIntercept$tx_intercept$arity$2 == null)) {
    return c.om$next$ITxIntercept$tx_intercept$arity$2(c, tx);
  } else {
    var x__8078__auto__ = c == null ? null : c;
    var m__8079__auto__ = om.next.tx_intercept[goog.typeOf(x__8078__auto__)];
    if (!(m__8079__auto__ == null)) {
      return m__8079__auto__.call(null, c, tx);
    } else {
      var m__8079__auto____$1 = om.next.tx_intercept["_"];
      if (!(m__8079__auto____$1 == null)) {
        return m__8079__auto____$1.call(null, c, tx);
      } else {
        throw cljs.core.missing_protocol.call(null, "ITxIntercept.tx-intercept", c);
      }
    }
  }
};
om.next.to_env = function om$next$to_env(x) {
  var config = cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x)) ? (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(x) : x;
  return cljs.core.select_keys.call(null, config, new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "shared", "shared", -384145993), new cljs.core.Keyword(null, "parser", "parser", -1543495310), new cljs.core.Keyword(null, "logger", "logger", -220675947), new cljs.core.Keyword(null, "pathopt", "pathopt", -61073149)], null));
};
om.next.transact_STAR_ = function om$next$transact_STAR_(r, c, ref, tx) {
  var cfg = (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(r);
  var ref__$1 = cljs.core.truth_(function() {
    var and__7398__auto__ = c;
    if (cljs.core.truth_(and__7398__auto__)) {
      var and__7398__auto____$1 = !(c == null) ? false || cljs.core.PROTOCOL_SENTINEL === c.om$next$Ident$ ? true : false : false;
      if (and__7398__auto____$1) {
        return cljs.core.not.call(null, ref);
      } else {
        return and__7398__auto____$1;
      }
    } else {
      return and__7398__auto__;
    }
  }()) ? om.next.ident.call(null, c, om.next.props.call(null, c)) : ref;
  var env = cljs.core.merge.call(null, om.next.to_env.call(null, cfg), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "reconciler", "reconciler", -1832826966), r, new cljs.core.Keyword(null, "component", "component", 1555936782), c], null), cljs.core.truth_(ref__$1) ? new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ref", "ref", 1289896967), ref__$1], null) : null);
  var id = cljs.core.random_uuid.call(null);
  var _ = (new cljs.core.Keyword(null, "history", "history", -247395220)).cljs$core$IFn$_invoke$arity$1(cfg).add(id, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(cfg)));
  var ___$1 = function() {
    var temp__4657__auto__ = (new cljs.core.Keyword(null, "logger", "logger", -220675947)).cljs$core$IFn$_invoke$arity$1(cfg);
    if (cljs.core.truth_(temp__4657__auto__)) {
      var l = temp__4657__auto__;
      return goog.log.info(l, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ref__$1) ? [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, ref__$1)), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" ")].join("") : null), cljs.core.str.cljs$core$IFn$_invoke$arity$1("transacted '"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(tx), cljs.core.str.cljs$core$IFn$_invoke$arity$1(", "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, id))].join(""));
    } else {
      return null;
    }
  }();
  var old_state = cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(cfg));
  var v = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(cfg).call(null, env, tx);
  var snds = om.next.gather_sends.call(null, env, tx, (new cljs.core.Keyword(null, "remotes", "remotes", 1132366312)).cljs$core$IFn$_invoke$arity$1(cfg));
  var xs = function() {
    var G__18908 = cljs.core.PersistentVector.EMPTY;
    var G__18908__$1 = !(c == null) ? cljs.core.conj.call(null, G__18908, c) : G__18908;
    if (!(ref__$1 == null)) {
      return cljs.core.conj.call(null, G__18908__$1, ref__$1);
    } else {
      return G__18908__$1;
    }
  }();
  om.next.protocols.queue_BANG_.call(null, r, cljs.core.into.call(null, xs, cljs.core.remove.call(null, cljs.core.symbol_QMARK_), cljs.core.keys.call(null, v)));
  if (cljs.core.empty_QMARK_.call(null, snds)) {
  } else {
    var seq__18909_18919 = cljs.core.seq.call(null, snds);
    var chunk__18910_18920 = null;
    var count__18911_18921 = 0;
    var i__18912_18922 = 0;
    while (true) {
      if (i__18912_18922 < count__18911_18921) {
        var vec__18913_18923 = cljs.core._nth.call(null, chunk__18910_18920, i__18912_18922);
        var remote_18924 = cljs.core.nth.call(null, vec__18913_18923, 0, null);
        var __18925__$2 = cljs.core.nth.call(null, vec__18913_18923, 1, null);
        om.next.protocols.queue_BANG_.call(null, r, xs, remote_18924);
        var G__18926 = seq__18909_18919;
        var G__18927 = chunk__18910_18920;
        var G__18928 = count__18911_18921;
        var G__18929 = i__18912_18922 + 1;
        seq__18909_18919 = G__18926;
        chunk__18910_18920 = G__18927;
        count__18911_18921 = G__18928;
        i__18912_18922 = G__18929;
        continue;
      } else {
        var temp__4657__auto___18930 = cljs.core.seq.call(null, seq__18909_18919);
        if (temp__4657__auto___18930) {
          var seq__18909_18931__$1 = temp__4657__auto___18930;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__18909_18931__$1)) {
            var c__8229__auto___18932 = cljs.core.chunk_first.call(null, seq__18909_18931__$1);
            var G__18933 = cljs.core.chunk_rest.call(null, seq__18909_18931__$1);
            var G__18934 = c__8229__auto___18932;
            var G__18935 = cljs.core.count.call(null, c__8229__auto___18932);
            var G__18936 = 0;
            seq__18909_18919 = G__18933;
            chunk__18910_18920 = G__18934;
            count__18911_18921 = G__18935;
            i__18912_18922 = G__18936;
            continue;
          } else {
            var vec__18916_18937 = cljs.core.first.call(null, seq__18909_18931__$1);
            var remote_18938 = cljs.core.nth.call(null, vec__18916_18937, 0, null);
            var __18939__$2 = cljs.core.nth.call(null, vec__18916_18937, 1, null);
            om.next.protocols.queue_BANG_.call(null, r, xs, remote_18938);
            var G__18940 = cljs.core.next.call(null, seq__18909_18931__$1);
            var G__18941 = null;
            var G__18942 = 0;
            var G__18943 = 0;
            seq__18909_18919 = G__18940;
            chunk__18910_18920 = G__18941;
            count__18911_18921 = G__18942;
            i__18912_18922 = G__18943;
            continue;
          }
        } else {
        }
      }
      break;
    }
    om.next.protocols.queue_sends_BANG_.call(null, r, snds);
    om.next.schedule_sends_BANG_.call(null, r);
  }
  var temp__4657__auto___18944 = (new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367)).cljs$core$IFn$_invoke$arity$1(cfg);
  if (cljs.core.truth_(temp__4657__auto___18944)) {
    var f_18945 = temp__4657__auto___18944;
    var tx_data_18946 = cljs.core.merge.call(null, env, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "old-state", "old-state", 1039580704), old_state, new cljs.core.Keyword(null, "new-state", "new-state", -490349212), cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(cfg))], null));
    f_18945.call(null, tx_data_18946, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tx", "tx", 466630418), tx, new cljs.core.Keyword(null, "ret", "ret", -468222814), v, new cljs.core.Keyword(null, "sends", "sends", -1708040810), snds], null));
  } else {
  }
  return v;
};
om.next.annotate_mutations = function om$next$annotate_mutations(tx, ident) {
  var annotate = function om$next$annotate_mutations_$_annotate(expr, ident__$1) {
    var G__18955 = expr;
    if (om.util.mutation_QMARK_.call(null, expr)) {
      return cljs.core.vary_meta.call(null, G__18955, cljs.core.assoc, new cljs.core.Keyword(null, "mutator", "mutator", -1326825366), ident__$1);
    } else {
      return G__18955;
    }
  };
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(p1__18947_SHARP_) {
    return annotate.call(null, p1__18947_SHARP_, ident);
  }), tx);
};
om.next.some_iquery_QMARK_ = function om$next$some_iquery_QMARK_(c) {
  var c__$1 = c;
  while (true) {
    if (c__$1 == null) {
      return false;
    } else {
      if (om.next.iquery_QMARK_.call(null, c__$1)) {
        return true;
      } else {
        var G__18956 = om.next.parent.call(null, c__$1);
        c__$1 = G__18956;
        continue;
      }
    }
    break;
  }
};
om.next.transact_BANG_ = function om$next$transact_BANG_(var_args) {
  var args18957 = [];
  var len__8523__auto___18967 = arguments.length;
  var i__8524__auto___18968 = 0;
  while (true) {
    if (i__8524__auto___18968 < len__8523__auto___18967) {
      args18957.push(arguments[i__8524__auto___18968]);
      var G__18969 = i__8524__auto___18968 + 1;
      i__8524__auto___18968 = G__18969;
      continue;
    } else {
    }
    break;
  }
  var G__18959 = args18957.length;
  switch(G__18959) {
    case 2:
      return om.next.transact_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.transact_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args18957.length)].join(""));
  }
};
om.next.transact_BANG_.cljs$core$IFn$_invoke$arity$2 = function(x, tx) {
  if (cljs.core.truth_(function() {
    var or__7410__auto__ = om.next.component_QMARK_.call(null, x);
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      return om.next.reconciler_QMARK_.call(null, x);
    }
  }())) {
  } else {
    throw new Error("Assert failed: (or (component? x) (reconciler? x))");
  }
  if (cljs.core.vector_QMARK_.call(null, tx)) {
  } else {
    throw new Error("Assert failed: (vector? tx)");
  }
  var tx__$1 = function() {
    var G__18960 = tx;
    if (function() {
      var and__7398__auto__ = om.next.component_QMARK_.call(null, x);
      if (and__7398__auto__) {
        if (!(x == null)) {
          if (false || cljs.core.PROTOCOL_SENTINEL === x.om$next$Ident$) {
            return true;
          } else {
            if (!x.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, om.next.Ident, x);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, om.next.Ident, x);
        }
      } else {
        return and__7398__auto__;
      }
    }()) {
      return om.next.annotate_mutations.call(null, G__18960, om.next.get_ident.call(null, x));
    } else {
      return G__18960;
    }
  }();
  if (cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x))) {
    return om.next.transact_STAR_.call(null, x, null, null, tx__$1);
  } else {
    if (!om.next.iquery_QMARK_.call(null, x)) {
      var l__17549__auto___18971 = om.next._STAR_logger_STAR_;
      if (cljs.core.truth_(om.next.some_iquery_QMARK_.call(null, x))) {
      } else {
        goog.log.error(l__17549__auto___18971, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invariant Violation"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(null == null ? null : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(" (in function: `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(null), cljs.core.str.cljs$core$IFn$_invoke$arity$1("`)")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("transact! should be called on a component"), 
        cljs.core.str.cljs$core$IFn$_invoke$arity$1("that implements IQuery or has a parent that"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("implements IQuery")].join(""))].join(""));
      }
      return om.next.transact_STAR_.call(null, om.next.get_reconciler.call(null, x), null, null, tx__$1);
    } else {
      var p = om.next.parent.call(null, x);
      var x__$1 = x;
      var tx__$2 = tx__$1;
      while (true) {
        if (p == null) {
          var r = om.next.get_reconciler.call(null, x__$1);
          return om.next.transact_STAR_.call(null, r, x__$1, null, om.next.transform_reads.call(null, r, tx__$2));
        } else {
          var vec__18963 = (!(p == null) ? false || cljs.core.PROTOCOL_SENTINEL === p.om$next$ITxIntercept$ ? true : false : false) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, om.next.tx_intercept.call(null, p, tx__$2)], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x__$1, tx__$2], null);
          var x_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__18963, 0, null);
          var tx__$3 = cljs.core.nth.call(null, vec__18963, 1, null);
          var G__18972 = om.next.parent.call(null, p);
          var G__18973 = x_SINGLEQUOTE_;
          var G__18974 = tx__$3;
          p = G__18972;
          x__$1 = G__18973;
          tx__$2 = G__18974;
          continue;
        }
        break;
      }
    }
  }
};
om.next.transact_BANG_.cljs$core$IFn$_invoke$arity$3 = function(r, ref, tx) {
  return om.next.transact_STAR_.call(null, r, null, ref, tx);
};
om.next.transact_BANG_.cljs$lang$maxFixedArity = 3;
om.next.parser = function om$next$parser(p__18975) {
  var map__18978 = p__18975;
  var map__18978__$1 = (!(map__18978 == null) ? map__18978.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__18978.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__18978) : map__18978;
  var opts = map__18978__$1;
  var read = cljs.core.get.call(null, map__18978__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  var mutate = cljs.core.get.call(null, map__18978__$1, new cljs.core.Keyword(null, "mutate", "mutate", 1422419038));
  if (cljs.core.map_QMARK_.call(null, opts)) {
  } else {
    throw new Error("Assert failed: (map? opts)");
  }
  return om.next.impl.parser.parser.call(null, opts);
};
om.next.dispatch = function om$next$dispatch(_, key, ___$1) {
  return key;
};
om.next.query__GT_ast = function om$next$query__GT_ast(query_expr) {
  return om.next.impl.parser.query__GT_ast.call(null, query_expr);
};
om.next.ast__GT_query = function om$next$ast__GT_query(query_ast) {
  return om.next.impl.parser.ast__GT_expr.call(null, query_ast, true);
};
om.next.get_dispatch_key = function om$next$get_dispatch_key(prop) {
  var G__18981 = prop;
  if (!om.util.ident_QMARK_.call(null, prop) || cljs.core._EQ_.call(null, cljs.core.second.call(null, prop), new cljs.core.Symbol(null, "_", "_", -1201019570, null))) {
    return cljs.core.comp.call(null, new cljs.core.Keyword(null, "dispatch-key", "dispatch-key", 733619510), om.next.impl.parser.expr__GT_ast).call(null, G__18981);
  } else {
    return G__18981;
  }
};
om.next.cascade_query = function om$next$cascade_query(class_path__GT_query, classpath, data_path, new_query, union_keys) {
  var cp = classpath;
  var data_path__$1 = data_path;
  var new_query__$1 = new_query;
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  while (true) {
    if (!cljs.core.empty_QMARK_.call(null, cp)) {
      var rendered_data_path = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.set.call(null, union_keys)), data_path__$1);
      var filter_data_path = function() {
        var G__18984 = rendered_data_path;
        if (!cljs.core.empty_QMARK_.call(null, rendered_data_path)) {
          return cljs.core.pop.call(null, G__18984);
        } else {
          return G__18984;
        }
      }();
      var qs = cljs.core.filter.call(null, function(cp, data_path__$1, new_query__$1, ret, rendered_data_path, filter_data_path) {
        return function(p1__18982_SHARP_) {
          return cljs.core._EQ_.call(null, filter_data_path, om.next.focus__GT_path.call(null, clojure.zip.root.call(null, p1__18982_SHARP_), filter_data_path));
        };
      }(cp, data_path__$1, new_query__$1, ret, rendered_data_path, filter_data_path), cljs.core.get.call(null, class_path__GT_query, cp));
      var qs_SINGLEQUOTE_ = cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.map.call(null, function(cp, data_path__$1, new_query__$1, ret, rendered_data_path, filter_data_path, qs) {
        return function(q) {
          var new_query__$2 = cljs.core.truth_(function() {
            var or__7410__auto__ = cljs.core.map_QMARK_.call(null, clojure.zip.node.call(null, q));
            if (or__7410__auto__) {
              return or__7410__auto__;
            } else {
              return cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core.peek.call(null, data_path__$1)], true), union_keys);
            }
          }()) ? function() {
            var union_key = cljs.core.peek.call(null, data_path__$1);
            return cljs.core.assoc.call(null, clojure.zip.node.call(null, om.next.query_template.call(null, clojure.zip.root.call(null, q), rendered_data_path)), union_key, new_query__$1);
          }() : new_query__$1;
          return om.next.query_template.call(null, om.next.focus_query.call(null, om.next.replace.call(null, om.next.query_template.call(null, clojure.zip.root.call(null, q), rendered_data_path), new_query__$2), filter_data_path), filter_data_path);
        };
      }(cp, data_path__$1, new_query__$1, ret, rendered_data_path, filter_data_path, qs)), qs);
      var G__18985 = cljs.core.pop.call(null, cp);
      var G__18986 = cljs.core.pop.call(null, data_path__$1);
      var G__18987 = clojure.zip.node.call(null, cljs.core.first.call(null, qs_SINGLEQUOTE_));
      var G__18988 = cljs.core.assoc.call(null, ret, cp, qs_SINGLEQUOTE_);
      cp = G__18985;
      data_path__$1 = G__18986;
      new_query__$1 = G__18987;
      ret = G__18988;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
om.next.Indexer = function(indexes, extfs, __meta, __extmap, __hash) {
  this.indexes = indexes;
  this.extfs = extfs;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229700362;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.next.Indexer.prototype.om$next$protocols$IIndexer$ = cljs.core.PROTOCOL_SENTINEL;
om.next.Indexer.prototype.om$next$protocols$IIndexer$index_root$arity$2 = function(_, x) {
  var self__ = this;
  var ___$1 = this;
  var prop__GT_classes = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var class_path__GT_query = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var rootq = om.next.get_query.call(null, x);
  var root_class = function() {
    var G__18996 = x;
    if (om.next.component_QMARK_.call(null, x)) {
      return om.next.react_type.call(null, G__18996);
    } else {
      return G__18996;
    }
  }();
  var build_index_STAR_ = function(prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
    return function om$next$build_index_STAR_(class$, query, path, classpath, union_expr, union_keys) {
      var l__17549__auto___19113 = om.next._STAR_logger_STAR_;
      if (!om.next.iquery_QMARK_.call(null, class$) || om.next.iquery_QMARK_.call(null, class$) && !cljs.core.empty_QMARK_.call(null, query)) {
      } else {
        goog.log.error(l__17549__auto___19113, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invariant Violation"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("build-index*" == null ? null : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(" (in function: `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("build-index*"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("`)")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("`IQuery` implementation must return a non-empty query."), 
        cljs.core.str.cljs$core$IFn$_invoke$arity$1(" Check the `IQuery` implementation of component `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(om.next.component_QMARK_.call(null, class$) ? class$.constructor.displayName : class$.prototype.constructor.displayName), cljs.core.str.cljs$core$IFn$_invoke$arity$1("`.")].join(""))].join(""));
      }
      var recursive_QMARK_ = cljs.core.some.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([class$], true), classpath);
      var classpath__$1 = function() {
        var G__19078 = classpath;
        if (!(class$ == null) && cljs.core.not.call(null, recursive_QMARK_)) {
          return cljs.core.conj.call(null, G__19078, class$);
        } else {
          return G__19078;
        }
      }();
      var dp__GT_cs = cljs.core.get_in.call(null, cljs.core.deref.call(null, self__.indexes), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data-path-\x3ecomponents", "data-path-\x3ecomponents", -1244619750)], null));
      if (cljs.core.truth_(class$)) {
        var root_query_19114 = cljs.core.empty_QMARK_.call(null, path) ? rootq : clojure.zip.root.call(null, cljs.core.first.call(null, cljs.core.get.call(null, cljs.core.deref.call(null, class_path__GT_query), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [root_class], null))));
        cljs.core.swap_BANG_.call(null, class_path__GT_query, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [classpath__$1], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), om.next.query_template.call(null, om.next.focus_query.call(null, root_query_19114, path), path));
      } else {
      }
      var recursive_join_QMARK_ = function() {
        var and__7398__auto__ = recursive_QMARK_;
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = cljs.core.some.call(null, function(and__7398__auto__, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
            return function(e) {
              var and__7398__auto____$1 = om.util.join_QMARK_.call(null, e);
              if (cljs.core.truth_(and__7398__auto____$1)) {
                return !om.util.recursion_QMARK_.call(null, om.util.join_value.call(null, e));
              } else {
                return and__7398__auto____$1;
              }
            };
          }(and__7398__auto__, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1), query);
          if (cljs.core.truth_(and__7398__auto____$1)) {
            return cljs.core._EQ_.call(null, cljs.core.distinct.call(null, path), path);
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }();
      var recursive_union_QMARK_ = function() {
        var and__7398__auto__ = recursive_QMARK_;
        if (cljs.core.truth_(and__7398__auto__)) {
          var and__7398__auto____$1 = union_expr;
          if (cljs.core.truth_(and__7398__auto____$1)) {
            return cljs.core._EQ_.call(null, cljs.core.distinct.call(null, path), path);
          } else {
            return and__7398__auto____$1;
          }
        } else {
          return and__7398__auto__;
        }
      }();
      if (cljs.core.truth_(function() {
        var or__7410__auto__ = cljs.core.not.call(null, recursive_QMARK_);
        if (or__7410__auto__) {
          return or__7410__auto__;
        } else {
          var or__7410__auto____$1 = recursive_join_QMARK_;
          if (cljs.core.truth_(or__7410__auto____$1)) {
            return or__7410__auto____$1;
          } else {
            return recursive_union_QMARK_;
          }
        }
      }())) {
        if (cljs.core.vector_QMARK_.call(null, query)) {
          var map__19079 = cljs.core.group_by.call(null, om.util.join_QMARK_, query);
          var map__19079__$1 = (!(map__19079 == null) ? map__19079.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19079.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19079) : map__19079;
          var props = cljs.core.get.call(null, map__19079__$1, false);
          var joins = cljs.core.get.call(null, map__19079__$1, true);
          cljs.core.swap_BANG_.call(null, prop__GT_classes, function(map__19079, map__19079__$1, props, joins, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
            return function(p1__18989_SHARP_) {
              return cljs.core.merge_with.call(null, cljs.core.into, p1__18989_SHARP_, cljs.core.zipmap.call(null, cljs.core.map.call(null, om.next.get_dispatch_key, props), cljs.core.repeat.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([class$], true))));
            };
          }(map__19079, map__19079__$1, props, joins, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1));
          var seq__19081 = cljs.core.seq.call(null, joins);
          var chunk__19082 = null;
          var count__19083 = 0;
          var i__19084 = 0;
          while (true) {
            if (i__19084 < count__19083) {
              var join = cljs.core._nth.call(null, chunk__19082, i__19084);
              var vec__19085_19115 = om.util.join_entry.call(null, join);
              var prop_19116 = cljs.core.nth.call(null, vec__19085_19115, 0, null);
              var query_SINGLEQUOTE__19117 = cljs.core.nth.call(null, vec__19085_19115, 1, null);
              var prop_dispatch_key_19118 = om.next.get_dispatch_key.call(null, prop_19116);
              var recursion_QMARK__19119 = om.util.recursion_QMARK_.call(null, query_SINGLEQUOTE__19117);
              var union_recursion_QMARK__19120 = function() {
                var and__7398__auto__ = recursion_QMARK__19119;
                if (and__7398__auto__) {
                  return union_expr;
                } else {
                  return and__7398__auto__;
                }
              }();
              var query_SINGLEQUOTE__19121__$1 = recursion_QMARK__19119 ? !(union_expr == null) ? union_expr : query : query_SINGLEQUOTE__19117;
              var path_SINGLEQUOTE__19122 = cljs.core.conj.call(null, path, prop_19116);
              var rendered_path_SINGLEQUOTE__19123 = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.set.call(null, union_keys), path_SINGLEQUOTE__19122));
              var cs_19124 = cljs.core.get.call(null, dp__GT_cs, rendered_path_SINGLEQUOTE__19123);
              var cascade_query_QMARK__19125 = cljs.core._EQ_.call(null, cljs.core.count.call(null, cs_19124), 1) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query_SINGLEQUOTE__19121__$1)), om.next.react_type.call(null, cljs.core.first.call(null, cs_19124))) && !cljs.core.map_QMARK_.call(null, query_SINGLEQUOTE__19121__$1);
              var query_SINGLEQUOTE__SINGLEQUOTE__19126 = cascade_query_QMARK__19125 ? om.next.get_query.call(null, cljs.core.first.call(null, cs_19124)) : query_SINGLEQUOTE__19121__$1;
              cljs.core.swap_BANG_.call(null, prop__GT_classes, function(seq__19081, chunk__19082, count__19083, i__19084, vec__19085_19115, prop_19116, query_SINGLEQUOTE__19117, prop_dispatch_key_19118, recursion_QMARK__19119, union_recursion_QMARK__19120, query_SINGLEQUOTE__19121__$1, path_SINGLEQUOTE__19122, rendered_path_SINGLEQUOTE__19123, cs_19124, cascade_query_QMARK__19125, query_SINGLEQUOTE__SINGLEQUOTE__19126, join, map__19079, map__19079__$1, props, joins, recursive_join_QMARK_, recursive_union_QMARK_, 
              recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
                return function(p1__18990_SHARP_) {
                  return cljs.core.merge_with.call(null, cljs.core.into, p1__18990_SHARP_, cljs.core.PersistentArrayMap.createAsIfByAssoc([prop_dispatch_key_19118, cljs.core.PersistentHashSet.createAsIfByAssoc([class$], true)]));
                };
              }(seq__19081, chunk__19082, count__19083, i__19084, vec__19085_19115, prop_19116, query_SINGLEQUOTE__19117, prop_dispatch_key_19118, recursion_QMARK__19119, union_recursion_QMARK__19120, query_SINGLEQUOTE__19121__$1, path_SINGLEQUOTE__19122, rendered_path_SINGLEQUOTE__19123, cs_19124, cascade_query_QMARK__19125, query_SINGLEQUOTE__SINGLEQUOTE__19126, join, map__19079, map__19079__$1, props, joins, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, 
              prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1));
              if (cascade_query_QMARK__19125 && cljs.core.not_EQ_.call(null, query_SINGLEQUOTE__19121__$1, query_SINGLEQUOTE__SINGLEQUOTE__19126)) {
                var cp__GT_q_SINGLEQUOTE__19127 = om.next.cascade_query.call(null, cljs.core.deref.call(null, class_path__GT_query), classpath__$1, path_SINGLEQUOTE__19122, query_SINGLEQUOTE__SINGLEQUOTE__19126, union_keys);
                cljs.core.swap_BANG_.call(null, class_path__GT_query, cljs.core.merge, cp__GT_q_SINGLEQUOTE__19127);
              } else {
              }
              var class_SINGLEQUOTE__19128 = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query_SINGLEQUOTE__SINGLEQUOTE__19126));
              if (recursion_QMARK__19119 && class_SINGLEQUOTE__19128 == null) {
              } else {
                om$next$build_index_STAR_.call(null, class_SINGLEQUOTE__19128, query_SINGLEQUOTE__SINGLEQUOTE__19126, path_SINGLEQUOTE__19122, classpath__$1, recursion_QMARK__19119 ? union_expr : null, union_keys);
              }
              var G__19129 = seq__19081;
              var G__19130 = chunk__19082;
              var G__19131 = count__19083;
              var G__19132 = i__19084 + 1;
              seq__19081 = G__19129;
              chunk__19082 = G__19130;
              count__19083 = G__19131;
              i__19084 = G__19132;
              continue;
            } else {
              var temp__4657__auto__ = cljs.core.seq.call(null, seq__19081);
              if (temp__4657__auto__) {
                var seq__19081__$1 = temp__4657__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__19081__$1)) {
                  var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__19081__$1);
                  var G__19133 = cljs.core.chunk_rest.call(null, seq__19081__$1);
                  var G__19134 = c__8229__auto__;
                  var G__19135 = cljs.core.count.call(null, c__8229__auto__);
                  var G__19136 = 0;
                  seq__19081 = G__19133;
                  chunk__19082 = G__19134;
                  count__19083 = G__19135;
                  i__19084 = G__19136;
                  continue;
                } else {
                  var join = cljs.core.first.call(null, seq__19081__$1);
                  var vec__19088_19137 = om.util.join_entry.call(null, join);
                  var prop_19138 = cljs.core.nth.call(null, vec__19088_19137, 0, null);
                  var query_SINGLEQUOTE__19139 = cljs.core.nth.call(null, vec__19088_19137, 1, null);
                  var prop_dispatch_key_19140 = om.next.get_dispatch_key.call(null, prop_19138);
                  var recursion_QMARK__19141 = om.util.recursion_QMARK_.call(null, query_SINGLEQUOTE__19139);
                  var union_recursion_QMARK__19142 = function() {
                    var and__7398__auto__ = recursion_QMARK__19141;
                    if (and__7398__auto__) {
                      return union_expr;
                    } else {
                      return and__7398__auto__;
                    }
                  }();
                  var query_SINGLEQUOTE__19143__$1 = recursion_QMARK__19141 ? !(union_expr == null) ? union_expr : query : query_SINGLEQUOTE__19139;
                  var path_SINGLEQUOTE__19144 = cljs.core.conj.call(null, path, prop_19138);
                  var rendered_path_SINGLEQUOTE__19145 = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.set.call(null, union_keys), path_SINGLEQUOTE__19144));
                  var cs_19146 = cljs.core.get.call(null, dp__GT_cs, rendered_path_SINGLEQUOTE__19145);
                  var cascade_query_QMARK__19147 = cljs.core._EQ_.call(null, cljs.core.count.call(null, cs_19146), 1) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query_SINGLEQUOTE__19143__$1)), om.next.react_type.call(null, cljs.core.first.call(null, cs_19146))) && !cljs.core.map_QMARK_.call(null, query_SINGLEQUOTE__19143__$1);
                  var query_SINGLEQUOTE__SINGLEQUOTE__19148 = cascade_query_QMARK__19147 ? om.next.get_query.call(null, cljs.core.first.call(null, cs_19146)) : query_SINGLEQUOTE__19143__$1;
                  cljs.core.swap_BANG_.call(null, prop__GT_classes, function(seq__19081, chunk__19082, count__19083, i__19084, vec__19088_19137, prop_19138, query_SINGLEQUOTE__19139, prop_dispatch_key_19140, recursion_QMARK__19141, union_recursion_QMARK__19142, query_SINGLEQUOTE__19143__$1, path_SINGLEQUOTE__19144, rendered_path_SINGLEQUOTE__19145, cs_19146, cascade_query_QMARK__19147, query_SINGLEQUOTE__SINGLEQUOTE__19148, join, seq__19081__$1, temp__4657__auto__, map__19079, map__19079__$1, props, 
                  joins, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
                    return function(p1__18990_SHARP_) {
                      return cljs.core.merge_with.call(null, cljs.core.into, p1__18990_SHARP_, cljs.core.PersistentArrayMap.createAsIfByAssoc([prop_dispatch_key_19140, cljs.core.PersistentHashSet.createAsIfByAssoc([class$], true)]));
                    };
                  }(seq__19081, chunk__19082, count__19083, i__19084, vec__19088_19137, prop_19138, query_SINGLEQUOTE__19139, prop_dispatch_key_19140, recursion_QMARK__19141, union_recursion_QMARK__19142, query_SINGLEQUOTE__19143__$1, path_SINGLEQUOTE__19144, rendered_path_SINGLEQUOTE__19145, cs_19146, cascade_query_QMARK__19147, query_SINGLEQUOTE__SINGLEQUOTE__19148, join, seq__19081__$1, temp__4657__auto__, map__19079, map__19079__$1, props, joins, recursive_join_QMARK_, recursive_union_QMARK_, 
                  recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1));
                  if (cascade_query_QMARK__19147 && cljs.core.not_EQ_.call(null, query_SINGLEQUOTE__19143__$1, query_SINGLEQUOTE__SINGLEQUOTE__19148)) {
                    var cp__GT_q_SINGLEQUOTE__19149 = om.next.cascade_query.call(null, cljs.core.deref.call(null, class_path__GT_query), classpath__$1, path_SINGLEQUOTE__19144, query_SINGLEQUOTE__SINGLEQUOTE__19148, union_keys);
                    cljs.core.swap_BANG_.call(null, class_path__GT_query, cljs.core.merge, cp__GT_q_SINGLEQUOTE__19149);
                  } else {
                  }
                  var class_SINGLEQUOTE__19150 = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query_SINGLEQUOTE__SINGLEQUOTE__19148));
                  if (recursion_QMARK__19141 && class_SINGLEQUOTE__19150 == null) {
                  } else {
                    om$next$build_index_STAR_.call(null, class_SINGLEQUOTE__19150, query_SINGLEQUOTE__SINGLEQUOTE__19148, path_SINGLEQUOTE__19144, classpath__$1, recursion_QMARK__19141 ? union_expr : null, union_keys);
                  }
                  var G__19151 = cljs.core.next.call(null, seq__19081__$1);
                  var G__19152 = null;
                  var G__19153 = 0;
                  var G__19154 = 0;
                  seq__19081 = G__19151;
                  chunk__19082 = G__19152;
                  count__19083 = G__19153;
                  i__19084 = G__19154;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        } else {
          if (cljs.core.map_QMARK_.call(null, query)) {
            var seq__19091 = cljs.core.seq.call(null, query);
            var chunk__19092 = null;
            var count__19093 = 0;
            var i__19094 = 0;
            while (true) {
              if (i__19094 < count__19093) {
                var vec__19095 = cljs.core._nth.call(null, chunk__19092, i__19094);
                var prop = cljs.core.nth.call(null, vec__19095, 0, null);
                var query_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__19095, 1, null);
                var path_SINGLEQUOTE__19155 = cljs.core.conj.call(null, path, prop);
                var class_SINGLEQUOTE__19156 = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query_SINGLEQUOTE_));
                var cs_19157 = cljs.core.filter.call(null, function(seq__19091, chunk__19092, count__19093, i__19094, path_SINGLEQUOTE__19155, class_SINGLEQUOTE__19156, vec__19095, prop, query_SINGLEQUOTE_, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
                  return function(p1__18991_SHARP_) {
                    return cljs.core._EQ_.call(null, class_SINGLEQUOTE__19156, om.next.react_type.call(null, p1__18991_SHARP_));
                  };
                }(seq__19091, chunk__19092, count__19093, i__19094, path_SINGLEQUOTE__19155, class_SINGLEQUOTE__19156, vec__19095, prop, query_SINGLEQUOTE_, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1), cljs.core.get.call(null, dp__GT_cs, path));
                var cascade_query_QMARK__19158 = function() {
                  var and__7398__auto__ = class_SINGLEQUOTE__19156;
                  if (cljs.core.truth_(and__7398__auto__)) {
                    return cljs.core._EQ_.call(null, cljs.core.count.call(null, cs_19157), 1);
                  } else {
                    return and__7398__auto__;
                  }
                }();
                var query_SINGLEQUOTE__SINGLEQUOTE__19159 = cljs.core.truth_(cascade_query_QMARK__19158) ? om.next.get_query.call(null, cljs.core.first.call(null, cs_19157)) : query_SINGLEQUOTE_;
                if (cljs.core.truth_(function() {
                  var and__7398__auto__ = cascade_query_QMARK__19158;
                  if (cljs.core.truth_(and__7398__auto__)) {
                    return cljs.core.not_EQ_.call(null, query_SINGLEQUOTE_, query_SINGLEQUOTE__SINGLEQUOTE__19159);
                  } else {
                    return and__7398__auto__;
                  }
                }())) {
                  var qs_19160 = cljs.core.get.call(null, cljs.core.deref.call(null, class_path__GT_query), classpath__$1);
                  var q_19161 = cljs.core.first.call(null, qs_19160);
                  var qnode_19162 = clojure.zip.node.call(null, function() {
                    var G__19098 = q_19161;
                    if (class$ == null) {
                      return om.next.query_template.call(null, G__19098, path);
                    } else {
                      return G__19098;
                    }
                  }());
                  var new_query_19163 = cljs.core.assoc.call(null, qnode_19162, prop, query_SINGLEQUOTE__SINGLEQUOTE__19159);
                  var q_SINGLEQUOTE__19164 = function() {
                    var G__19099 = clojure.zip.replace.call(null, om.next.query_template.call(null, clojure.zip.root.call(null, q_19161), path), new_query_19163);
                    if (class$ == null) {
                      return om.next.query_template.call(null, om.next.focus_query.call(null, clojure.zip.root.call(null, G__19099), cljs.core.pop.call(null, path)), cljs.core.pop.call(null, path));
                    } else {
                      return G__19099;
                    }
                  }();
                  var qs_SINGLEQUOTE__19165 = cljs.core.into.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([q_SINGLEQUOTE__19164], true), cljs.core.remove.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([q_19161], true)), qs_19160);
                  var cp__GT_q_SINGLEQUOTE__19166 = cljs.core.merge.call(null, cljs.core.PersistentArrayMap.createAsIfByAssoc([classpath__$1, qs_SINGLEQUOTE__19165]), om.next.cascade_query.call(null, cljs.core.deref.call(null, class_path__GT_query), cljs.core.pop.call(null, classpath__$1), path, clojure.zip.node.call(null, q_SINGLEQUOTE__19164), union_keys));
                  cljs.core.swap_BANG_.call(null, class_path__GT_query, cljs.core.merge, cp__GT_q_SINGLEQUOTE__19166);
                } else {
                }
                om$next$build_index_STAR_.call(null, class_SINGLEQUOTE__19156, query_SINGLEQUOTE__SINGLEQUOTE__19159, path_SINGLEQUOTE__19155, classpath__$1, query, cljs.core.conj.call(null, union_keys, prop));
                var G__19167 = seq__19091;
                var G__19168 = chunk__19092;
                var G__19169 = count__19093;
                var G__19170 = i__19094 + 1;
                seq__19091 = G__19167;
                chunk__19092 = G__19168;
                count__19093 = G__19169;
                i__19094 = G__19170;
                continue;
              } else {
                var temp__4657__auto__ = cljs.core.seq.call(null, seq__19091);
                if (temp__4657__auto__) {
                  var seq__19091__$1 = temp__4657__auto__;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__19091__$1)) {
                    var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__19091__$1);
                    var G__19171 = cljs.core.chunk_rest.call(null, seq__19091__$1);
                    var G__19172 = c__8229__auto__;
                    var G__19173 = cljs.core.count.call(null, c__8229__auto__);
                    var G__19174 = 0;
                    seq__19091 = G__19171;
                    chunk__19092 = G__19172;
                    count__19093 = G__19173;
                    i__19094 = G__19174;
                    continue;
                  } else {
                    var vec__19100 = cljs.core.first.call(null, seq__19091__$1);
                    var prop = cljs.core.nth.call(null, vec__19100, 0, null);
                    var query_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__19100, 1, null);
                    var path_SINGLEQUOTE__19175 = cljs.core.conj.call(null, path, prop);
                    var class_SINGLEQUOTE__19176 = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query_SINGLEQUOTE_));
                    var cs_19177 = cljs.core.filter.call(null, function(seq__19091, chunk__19092, count__19093, i__19094, path_SINGLEQUOTE__19175, class_SINGLEQUOTE__19176, vec__19100, prop, query_SINGLEQUOTE_, seq__19091__$1, temp__4657__auto__, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1) {
                      return function(p1__18991_SHARP_) {
                        return cljs.core._EQ_.call(null, class_SINGLEQUOTE__19176, om.next.react_type.call(null, p1__18991_SHARP_));
                      };
                    }(seq__19091, chunk__19092, count__19093, i__19094, path_SINGLEQUOTE__19175, class_SINGLEQUOTE__19176, vec__19100, prop, query_SINGLEQUOTE_, seq__19091__$1, temp__4657__auto__, recursive_join_QMARK_, recursive_union_QMARK_, recursive_QMARK_, classpath__$1, dp__GT_cs, prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1), cljs.core.get.call(null, dp__GT_cs, path));
                    var cascade_query_QMARK__19178 = function() {
                      var and__7398__auto__ = class_SINGLEQUOTE__19176;
                      if (cljs.core.truth_(and__7398__auto__)) {
                        return cljs.core._EQ_.call(null, cljs.core.count.call(null, cs_19177), 1);
                      } else {
                        return and__7398__auto__;
                      }
                    }();
                    var query_SINGLEQUOTE__SINGLEQUOTE__19179 = cljs.core.truth_(cascade_query_QMARK__19178) ? om.next.get_query.call(null, cljs.core.first.call(null, cs_19177)) : query_SINGLEQUOTE_;
                    if (cljs.core.truth_(function() {
                      var and__7398__auto__ = cascade_query_QMARK__19178;
                      if (cljs.core.truth_(and__7398__auto__)) {
                        return cljs.core.not_EQ_.call(null, query_SINGLEQUOTE_, query_SINGLEQUOTE__SINGLEQUOTE__19179);
                      } else {
                        return and__7398__auto__;
                      }
                    }())) {
                      var qs_19180 = cljs.core.get.call(null, cljs.core.deref.call(null, class_path__GT_query), classpath__$1);
                      var q_19181 = cljs.core.first.call(null, qs_19180);
                      var qnode_19182 = clojure.zip.node.call(null, function() {
                        var G__19103 = q_19181;
                        if (class$ == null) {
                          return om.next.query_template.call(null, G__19103, path);
                        } else {
                          return G__19103;
                        }
                      }());
                      var new_query_19183 = cljs.core.assoc.call(null, qnode_19182, prop, query_SINGLEQUOTE__SINGLEQUOTE__19179);
                      var q_SINGLEQUOTE__19184 = function() {
                        var G__19104 = clojure.zip.replace.call(null, om.next.query_template.call(null, clojure.zip.root.call(null, q_19181), path), new_query_19183);
                        if (class$ == null) {
                          return om.next.query_template.call(null, om.next.focus_query.call(null, clojure.zip.root.call(null, G__19104), cljs.core.pop.call(null, path)), cljs.core.pop.call(null, path));
                        } else {
                          return G__19104;
                        }
                      }();
                      var qs_SINGLEQUOTE__19185 = cljs.core.into.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([q_SINGLEQUOTE__19184], true), cljs.core.remove.call(null, cljs.core.PersistentHashSet.createAsIfByAssoc([q_19181], true)), qs_19180);
                      var cp__GT_q_SINGLEQUOTE__19186 = cljs.core.merge.call(null, cljs.core.PersistentArrayMap.createAsIfByAssoc([classpath__$1, qs_SINGLEQUOTE__19185]), om.next.cascade_query.call(null, cljs.core.deref.call(null, class_path__GT_query), cljs.core.pop.call(null, classpath__$1), path, clojure.zip.node.call(null, q_SINGLEQUOTE__19184), union_keys));
                      cljs.core.swap_BANG_.call(null, class_path__GT_query, cljs.core.merge, cp__GT_q_SINGLEQUOTE__19186);
                    } else {
                    }
                    om$next$build_index_STAR_.call(null, class_SINGLEQUOTE__19176, query_SINGLEQUOTE__SINGLEQUOTE__19179, path_SINGLEQUOTE__19175, classpath__$1, query, cljs.core.conj.call(null, union_keys, prop));
                    var G__19187 = cljs.core.next.call(null, seq__19091__$1);
                    var G__19188 = null;
                    var G__19189 = 0;
                    var G__19190 = 0;
                    seq__19091 = G__19187;
                    chunk__19092 = G__19188;
                    count__19093 = G__19189;
                    i__19094 = G__19190;
                    continue;
                  }
                } else {
                  return null;
                }
              }
              break;
            }
          } else {
            return null;
          }
        }
      } else {
        return null;
      }
    };
  }(prop__GT_classes, class_path__GT_query, rootq, root_class, ___$1);
  build_index_STAR_.call(null, root_class, rootq, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY, null, cljs.core.PersistentVector.EMPTY);
  return cljs.core.swap_BANG_.call(null, self__.indexes, cljs.core.merge, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "prop-\x3eclasses", "prop-\x3eclasses", 515892717), cljs.core.deref.call(null, prop__GT_classes), new cljs.core.Keyword(null, "class-path-\x3equery", "class-path-\x3equery", -1222593700), cljs.core.deref.call(null, class_path__GT_query)], null));
};
om.next.Indexer.prototype.om$next$protocols$IIndexer$index_component_BANG_$arity$2 = function(_, c) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.indexes, function(___$1) {
    return function(indexes__$1) {
      var indexes__$2 = cljs.core.update_in.call(null, (new cljs.core.Keyword(null, "index-component", "index-component", -1258618905)).cljs$core$IFn$_invoke$arity$1(self__.extfs).call(null, indexes__$1, c), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-\x3ecomponents", "class-\x3ecomponents", 436435919), om.next.react_type.call(null, c)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), c);
      var data_path = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.number_QMARK_), om.next.path.call(null, c));
      var indexes__$3 = cljs.core.update_in.call(null, (new cljs.core.Keyword(null, "index-component", "index-component", -1258618905)).cljs$core$IFn$_invoke$arity$1(self__.extfs).call(null, indexes__$2, c), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data-path-\x3ecomponents", "data-path-\x3ecomponents", -1244619750), data_path], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), c);
      var ident = (!(c == null) ? false || cljs.core.PROTOCOL_SENTINEL === c.om$next$Ident$ ? true : false : false) ? function() {
        var ident = om.next.ident.call(null, c, om.next.props.call(null, c));
        var l__17549__auto___19191 = om.next._STAR_logger_STAR_;
        if (om.util.ident_QMARK_.call(null, ident)) {
        } else {
          goog.log.error(l__17549__auto___19191, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invariant Violation"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(null == null ? null : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(" (in function: `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(null), cljs.core.str.cljs$core$IFn$_invoke$arity$1("`)")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("malformed Ident. An ident must be a vector of "), 
          cljs.core.str.cljs$core$IFn$_invoke$arity$1("two elements (a keyword and an EDN value). Check "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("the Ident implementation of component `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(c.constructor.displayName), cljs.core.str.cljs$core$IFn$_invoke$arity$1("`.")].join(""))].join(""));
        }
        var l__17549__auto___19192 = om.next._STAR_logger_STAR_;
        if (!(cljs.core.second.call(null, ident) == null)) {
        } else {
          goog.log.error(l__17549__auto___19192, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invariant Violation"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(null == null ? null : [cljs.core.str.cljs$core$IFn$_invoke$arity$1(" (in function: `"), cljs.core.str.cljs$core$IFn$_invoke$arity$1(null), cljs.core.str.cljs$core$IFn$_invoke$arity$1("`)")].join("")), cljs.core.str.cljs$core$IFn$_invoke$arity$1(": "), cljs.core.str.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1("component "), 
          cljs.core.str.cljs$core$IFn$_invoke$arity$1(c.constructor.displayName), cljs.core.str.cljs$core$IFn$_invoke$arity$1("'s ident ("), cljs.core.str.cljs$core$IFn$_invoke$arity$1(ident), cljs.core.str.cljs$core$IFn$_invoke$arity$1(") has a `nil` second element."), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" This warning can be safely ignored if that is intended.")].join(""))].join(""));
        }
        return ident;
      }() : null;
      if (!(ident == null)) {
        var G__19106 = indexes__$3;
        if (cljs.core.truth_(ident)) {
          return cljs.core.update_in.call(null, G__19106, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249), ident], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), c);
        } else {
          return G__19106;
        }
      } else {
        return indexes__$3;
      }
    };
  }(___$1));
};
om.next.Indexer.prototype.om$next$protocols$IIndexer$drop_component_BANG_$arity$2 = function(_, c) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.indexes, function(___$1) {
    return function(indexes__$1) {
      var indexes__$2 = cljs.core.update_in.call(null, (new cljs.core.Keyword(null, "drop-component", "drop-component", 1805913749)).cljs$core$IFn$_invoke$arity$1(self__.extfs).call(null, indexes__$1, c), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-\x3ecomponents", "class-\x3ecomponents", 436435919), om.next.react_type.call(null, c)], null), cljs.core.disj, c);
      var data_path = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.number_QMARK_), om.next.path.call(null, c));
      var indexes__$3 = cljs.core.update_in.call(null, (new cljs.core.Keyword(null, "drop-component", "drop-component", 1805913749)).cljs$core$IFn$_invoke$arity$1(self__.extfs).call(null, indexes__$2, c), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "data-path-\x3ecomponents", "data-path-\x3ecomponents", -1244619750), data_path], null), cljs.core.disj, c);
      var ident = (!(c == null) ? false || cljs.core.PROTOCOL_SENTINEL === c.om$next$Ident$ ? true : false : false) ? om.next.ident.call(null, c, om.next.props.call(null, c)) : null;
      if (!(ident == null)) {
        var G__19108 = indexes__$3;
        if (cljs.core.truth_(ident)) {
          return cljs.core.update_in.call(null, G__19108, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249), ident], null), cljs.core.disj, c);
        } else {
          return G__19108;
        }
      } else {
        return indexes__$3;
      }
    };
  }(___$1));
};
om.next.Indexer.prototype.om$next$protocols$IIndexer$key__GT_components$arity$2 = function(_, k) {
  var self__ = this;
  var ___$1 = this;
  var indexes__$1 = cljs.core.deref.call(null, self__.indexes);
  if (om.next.component_QMARK_.call(null, k)) {
    return cljs.core.PersistentHashSet.createAsIfByAssoc([k], true);
  } else {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249)).cljs$core$IFn$_invoke$arity$1(self__.extfs).call(null, indexes__$1, k);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var cs = temp__4655__auto__;
      return cs;
    } else {
      return cljs.core.transduce.call(null, cljs.core.map.call(null, function(temp__4655__auto__, indexes__$1, ___$1) {
        return function(p1__18992_SHARP_) {
          return cljs.core.get_in.call(null, indexes__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-\x3ecomponents", "class-\x3ecomponents", 436435919), p1__18992_SHARP_], null));
        };
      }(temp__4655__auto__, indexes__$1, ___$1)), cljs.core.completing.call(null, cljs.core.into), cljs.core.get_in.call(null, indexes__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249), k], null), cljs.core.PersistentHashSet.EMPTY), cljs.core.get_in.call(null, indexes__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
      "prop-\x3eclasses", "prop-\x3eclasses", 515892717), k], null)));
    }
  }
};
om.next.Indexer.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8037__auto__, k__8038__auto__) {
  var self__ = this;
  var this__8037__auto____$1 = this;
  return this__8037__auto____$1.cljs$core$ILookup$_lookup$arity$3(null, k__8038__auto__, null);
};
om.next.Indexer.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8039__auto__, k18994, else__8040__auto__) {
  var self__ = this;
  var this__8039__auto____$1 = this;
  var G__19109 = k18994 instanceof cljs.core.Keyword ? k18994.fqn : null;
  switch(G__19109) {
    case "indexes":
      return self__.indexes;
      break;
    case "extfs":
      return self__.extfs;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k18994, else__8040__auto__);
  }
};
om.next.Indexer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8051__auto__, writer__8052__auto__, opts__8053__auto__) {
  var self__ = this;
  var this__8051__auto____$1 = this;
  var pr_pair__8054__auto__ = function(this__8051__auto____$1) {
    return function(keyval__8055__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__8052__auto__, cljs.core.pr_writer, "", " ", "", opts__8053__auto__, keyval__8055__auto__);
    };
  }(this__8051__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__8052__auto__, pr_pair__8054__auto__, "#om.next.Indexer{", ", ", "}", opts__8053__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indexes", "indexes", 1496475545), self__.indexes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "extfs", "extfs", 607041493), self__.extfs], null)], null), self__.__extmap));
};
om.next.Indexer.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
om.next.Indexer.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__18993) {
  var self__ = this;
  var G__18993__$1 = this;
  return new cljs.core.RecordIter(0, G__18993__$1, 2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indexes", "indexes", 1496475545), new cljs.core.Keyword(null, "extfs", "extfs", 607041493)], null), cljs.core.truth_(self__.__extmap) ? cljs.core._iterator.call(null, self__.__extmap) : cljs.core.nil_iter.call(null));
};
om.next.Indexer.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8035__auto__) {
  var self__ = this;
  var this__8035__auto____$1 = this;
  return self__.__meta;
};
om.next.Indexer.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__8031__auto__) {
  var self__ = this;
  var this__8031__auto____$1 = this;
  return new om.next.Indexer(self__.indexes, self__.extfs, self__.__meta, self__.__extmap, self__.__hash);
};
om.next.Indexer.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8041__auto__) {
  var self__ = this;
  var this__8041__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
om.next.Indexer.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8032__auto__) {
  var self__ = this;
  var this__8032__auto____$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_imap.call(null, this__8032__auto____$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
om.next.Indexer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8033__auto__, other__8034__auto__) {
  var self__ = this;
  var this__8033__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = other__8034__auto__;
    if (cljs.core.truth_(and__7398__auto__)) {
      return this__8033__auto____$1.constructor === other__8034__auto__.constructor && cljs.core.equiv_map.call(null, this__8033__auto____$1, other__8034__auto__);
    } else {
      return and__7398__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
om.next.Indexer.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8046__auto__, k__8047__auto__) {
  var self__ = this;
  var this__8046__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "extfs", "extfs", 607041493), null, new cljs.core.Keyword(null, "indexes", "indexes", 1496475545), null], null), null), k__8047__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8046__auto____$1), self__.__meta), k__8047__auto__);
  } else {
    return new om.next.Indexer(self__.indexes, self__.extfs, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8047__auto__)), null);
  }
};
om.next.Indexer.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8044__auto__, k__8045__auto__, G__18993) {
  var self__ = this;
  var this__8044__auto____$1 = this;
  var pred__19110 = cljs.core.keyword_identical_QMARK_;
  var expr__19111 = k__8045__auto__;
  if (cljs.core.truth_(pred__19110.call(null, new cljs.core.Keyword(null, "indexes", "indexes", 1496475545), expr__19111))) {
    return new om.next.Indexer(G__18993, self__.extfs, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19110.call(null, new cljs.core.Keyword(null, "extfs", "extfs", 607041493), expr__19111))) {
      return new om.next.Indexer(self__.indexes, G__18993, self__.__meta, self__.__extmap, null);
    } else {
      return new om.next.Indexer(self__.indexes, self__.extfs, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8045__auto__, G__18993), null);
    }
  }
};
om.next.Indexer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8049__auto__) {
  var self__ = this;
  var this__8049__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "indexes", "indexes", 1496475545), self__.indexes], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "extfs", "extfs", 607041493), self__.extfs], null)], null), self__.__extmap));
};
om.next.Indexer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8036__auto__, G__18993) {
  var self__ = this;
  var this__8036__auto____$1 = this;
  return new om.next.Indexer(self__.indexes, self__.extfs, G__18993, self__.__extmap, self__.__hash);
};
om.next.Indexer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8042__auto__, entry__8043__auto__) {
  var self__ = this;
  var this__8042__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8043__auto__)) {
    return this__8042__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.call(null, entry__8043__auto__, 0), cljs.core._nth.call(null, entry__8043__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8042__auto____$1, entry__8043__auto__);
  }
};
om.next.Indexer.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.deref.call(null, self__.indexes);
};
om.next.Indexer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "indexes", "indexes", -1157960224, null), new cljs.core.Symbol(null, "extfs", "extfs", -2047394276, null)], null);
};
om.next.Indexer.cljs$lang$type = true;
om.next.Indexer.cljs$lang$ctorPrSeq = function(this__8071__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "om.next/Indexer");
};
om.next.Indexer.cljs$lang$ctorPrWriter = function(this__8071__auto__, writer__8072__auto__) {
  return cljs.core._write.call(null, writer__8072__auto__, "om.next/Indexer");
};
om.next.__GT_Indexer = function om$next$__GT_Indexer(indexes, extfs) {
  return new om.next.Indexer(indexes, extfs, null, null, null);
};
om.next.map__GT_Indexer = function om$next$map__GT_Indexer(G__18995) {
  return new om.next.Indexer((new cljs.core.Keyword(null, "indexes", "indexes", 1496475545)).cljs$core$IFn$_invoke$arity$1(G__18995), (new cljs.core.Keyword(null, "extfs", "extfs", 607041493)).cljs$core$IFn$_invoke$arity$1(G__18995), null, cljs.core.dissoc.call(null, G__18995, new cljs.core.Keyword(null, "indexes", "indexes", 1496475545), new cljs.core.Keyword(null, "extfs", "extfs", 607041493)), null);
};
om.next.indexer = function om$next$indexer(var_args) {
  var args19194 = [];
  var len__8523__auto___19197 = arguments.length;
  var i__8524__auto___19198 = 0;
  while (true) {
    if (i__8524__auto___19198 < len__8523__auto___19197) {
      args19194.push(arguments[i__8524__auto___19198]);
      var G__19199 = i__8524__auto___19198 + 1;
      i__8524__auto___19198 = G__19199;
      continue;
    } else {
    }
    break;
  }
  var G__19196 = args19194.length;
  switch(G__19196) {
    case 0:
      return om.next.indexer.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.next.indexer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19194.length)].join(""));
  }
};
om.next.indexer.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.next.indexer.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "index-component", "index-component", -1258618905), function(indexes, component) {
    return indexes;
  }, new cljs.core.Keyword(null, "drop-component", "drop-component", 1805913749), function(indexes, component) {
    return indexes;
  }, new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249), function(indexes, ref) {
    return null;
  }], null));
};
om.next.indexer.cljs$core$IFn$_invoke$arity$1 = function(extfs) {
  return new om.next.Indexer(cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "class-\x3ecomponents", "class-\x3ecomponents", 436435919), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "data-path-\x3ecomponents", "data-path-\x3ecomponents", -1244619750), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249), cljs.core.PersistentArrayMap.EMPTY], null)), extfs, null, null, 
  null);
};
om.next.indexer.cljs$lang$maxFixedArity = 1;
om.next.get_indexer = function om$next$get_indexer(reconciler) {
  if (cljs.core.truth_(om.next.reconciler_QMARK_.call(null, reconciler))) {
  } else {
    throw new Error("Assert failed: (reconciler? reconciler)");
  }
  return (new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(reconciler));
};
om.next.ref__GT_components = function om$next$ref__GT_components(x, ref) {
  if (ref == null) {
    return null;
  } else {
    var indexer = cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x)) ? om.next.get_indexer.call(null, x) : x;
    return om.next.protocols.key__GT_components.call(null, indexer, ref);
  }
};
om.next.ref__GT_any = function om$next$ref__GT_any(x, ref) {
  var indexer = cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x)) ? om.next.get_indexer.call(null, x) : x;
  return cljs.core.first.call(null, om.next.protocols.key__GT_components.call(null, indexer, ref));
};
om.next.class__GT_any = function om$next$class__GT_any(x, class$) {
  var indexer = cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x)) ? om.next.get_indexer.call(null, x) : x;
  return cljs.core.first.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, indexer), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-\x3ecomponents", "class-\x3ecomponents", 436435919), class$], null)));
};
om.next.class_path__GT_queries = function om$next$class_path__GT_queries(x, y) {
  var indexer = cljs.core.truth_(om.next.reconciler_QMARK_.call(null, x)) ? om.next.get_indexer.call(null, x) : x;
  var cp = om.next.component_QMARK_.call(null, y) ? om.next.class_path.call(null, y) : y;
  return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.map.call(null, clojure.zip.root), cljs.core.get_in.call(null, cljs.core.deref.call(null, indexer), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-path-\x3equery", "class-path-\x3equery", -1222593700), cp], null)));
};
om.next.full_query = function om$next$full_query(var_args) {
  var args19202 = [];
  var len__8523__auto___19206 = arguments.length;
  var i__8524__auto___19207 = 0;
  while (true) {
    if (i__8524__auto___19207 < len__8523__auto___19206) {
      args19202.push(arguments[i__8524__auto___19207]);
      var G__19208 = i__8524__auto___19207 + 1;
      i__8524__auto___19207 = G__19208;
      continue;
    } else {
    }
    break;
  }
  var G__19204 = args19202.length;
  switch(G__19204) {
    case 1:
      return om.next.full_query.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.full_query.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19202.length)].join(""));
  }
};
om.next.full_query.cljs$core$IFn$_invoke$arity$1 = function(component) {
  if (om.next.iquery_QMARK_.call(null, component)) {
    if (om.next.path.call(null, component) == null) {
      return om.next.replace.call(null, cljs.core.first.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, om.next.get_indexer.call(null, om.next.get_reconciler.call(null, component))), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-path-\x3equery", "class-path-\x3equery", -1222593700), om.next.class_path.call(null, component)], null))), om.next.get_query.call(null, component));
    } else {
      return om.next.full_query.call(null, component, om.next.get_query.call(null, component));
    }
  } else {
    return null;
  }
};
om.next.full_query.cljs$core$IFn$_invoke$arity$2 = function(component, query) {
  if (om.next.iquery_QMARK_.call(null, component)) {
    var xf = function() {
      var G__19205 = cljs.core.remove.call(null, cljs.core.number_QMARK_);
      if (om.next.recursive_class_path_QMARK_.call(null, component)) {
        return cljs.core.comp.call(null, cljs.core.distinct.call(null), G__19205);
      } else {
        return G__19205;
      }
    }();
    var path_SINGLEQUOTE_ = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, xf, om.next.path.call(null, component));
    var cp = om.next.class_path.call(null, component);
    var qs = cljs.core.get_in.call(null, cljs.core.deref.call(null, om.next.get_indexer.call(null, om.next.get_reconciler.call(null, component))), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-path-\x3equery", "class-path-\x3equery", -1222593700), cp], null));
    if (!cljs.core.empty_QMARK_.call(null, qs)) {
      var q = cljs.core.first.call(null, cljs.core.filter.call(null, function(xf, path_SINGLEQUOTE_, cp, qs) {
        return function(p1__19201_SHARP_) {
          return cljs.core._EQ_.call(null, path_SINGLEQUOTE_, cljs.core.mapv.call(null, om.next.get_dispatch_key, om.next.focus__GT_path.call(null, clojure.zip.root.call(null, p1__19201_SHARP_), path_SINGLEQUOTE_)));
        };
      }(xf, path_SINGLEQUOTE_, cp, qs), qs));
      if (!(q == null)) {
        return om.next.replace.call(null, q, query);
      } else {
        throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("No queries exist at the intersection of component path "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cp), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" and data path "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(path_SINGLEQUOTE_)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("om.next", "no-queries", "om.next/no-queries", 
        2125033807)], null));
      }
    } else {
      throw cljs.core.ex_info.call(null, [cljs.core.str.cljs$core$IFn$_invoke$arity$1("No queries exist for component path "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(cp)].join(""), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "type", "type", 1174270348), new cljs.core.Keyword("om.next", "no-queries", "om.next/no-queries", 2125033807)], null));
    }
  } else {
    return null;
  }
};
om.next.full_query.cljs$lang$maxFixedArity = 2;
om.next.normalize_STAR_ = function om$next$normalize_STAR_(query, data, refs, union_seen) {
  if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", 345799209, null)], null), query)) {
    return data;
  } else {
    if (cljs.core.map_QMARK_.call(null, query)) {
      var class$ = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query));
      var ident = (!(class$ == null) ? false || cljs.core.PROTOCOL_SENTINEL === class$.om$next$Ident$ ? true : false : false) ? om.next.ident.call(null, class$, data) : null;
      if (!(ident == null)) {
        return cljs.core.vary_meta.call(null, om.next.normalize_STAR_.call(null, cljs.core.get.call(null, query, cljs.core.first.call(null, ident)), data, refs, union_seen), cljs.core.assoc, new cljs.core.Keyword("om", "tag", "om/tag", -1290356769), cljs.core.first.call(null, ident));
      } else {
        throw new Error("Union components must implement Ident");
      }
    } else {
      if (cljs.core.vector_QMARK_.call(null, data)) {
        return data;
      } else {
        var q = cljs.core.seq.call(null, query);
        var ret = data;
        while (true) {
          if (!(q == null)) {
            var expr = cljs.core.first.call(null, q);
            if (cljs.core.truth_(om.util.join_QMARK_.call(null, expr))) {
              var vec__19230 = om.util.join_entry.call(null, expr);
              var k = cljs.core.nth.call(null, vec__19230, 0, null);
              var sel = cljs.core.nth.call(null, vec__19230, 1, null);
              var recursive_QMARK_ = om.util.recursion_QMARK_.call(null, sel);
              var union_entry = om.util.union_QMARK_.call(null, expr) ? sel : union_seen;
              var sel__$1 = recursive_QMARK_ ? !(union_seen == null) ? union_seen : query : sel;
              var class$ = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, sel__$1));
              var v = cljs.core.get.call(null, data, k);
              if (recursive_QMARK_ && om.util.ident_QMARK_.call(null, v)) {
                var G__19245 = cljs.core.next.call(null, q);
                var G__19246 = ret;
                q = G__19245;
                ret = G__19246;
                continue;
              } else {
                if (cljs.core.map_QMARK_.call(null, v)) {
                  var x = om.next.normalize_STAR_.call(null, sel__$1, v, refs, union_entry);
                  if (!(class$ == null || !(!(class$ == null) ? false || cljs.core.PROTOCOL_SENTINEL === class$.om$next$Ident$ ? true : false : false))) {
                    var i = om.next.ident.call(null, class$, v);
                    cljs.core.swap_BANG_.call(null, refs, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, i), cljs.core.second.call(null, i)], null), cljs.core.merge, x);
                    var G__19247 = cljs.core.next.call(null, q);
                    var G__19248 = cljs.core.assoc.call(null, ret, k, i);
                    q = G__19247;
                    ret = G__19248;
                    continue;
                  } else {
                    var G__19249 = cljs.core.next.call(null, q);
                    var G__19250 = cljs.core.assoc.call(null, ret, k, x);
                    q = G__19249;
                    ret = G__19250;
                    continue;
                  }
                } else {
                  if (cljs.core.vector_QMARK_.call(null, v)) {
                    var xs = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(q, ret, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr) {
                      return function(p1__19210_SHARP_) {
                        return om.next.normalize_STAR_.call(null, sel__$1, p1__19210_SHARP_, refs, union_entry);
                      };
                    }(q, ret, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr)), v);
                    if (!(class$ == null || !(!(class$ == null) ? false || cljs.core.PROTOCOL_SENTINEL === class$.om$next$Ident$ ? true : false : false))) {
                      var is = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(q, ret, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr) {
                        return function(p1__19212_SHARP_) {
                          return om.next.ident.call(null, class$, p1__19212_SHARP_);
                        };
                      }(q, ret, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr)), xs);
                      if (cljs.core.vector_QMARK_.call(null, sel__$1)) {
                        if (cljs.core.empty_QMARK_.call(null, is)) {
                        } else {
                          cljs.core.swap_BANG_.call(null, refs, function(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr) {
                            return function(refs__$1) {
                              return cljs.core.reduce.call(null, function(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr) {
                                return function(m, p__19237) {
                                  var vec__19238 = p__19237;
                                  var i = cljs.core.nth.call(null, vec__19238, 0, null);
                                  var x = cljs.core.nth.call(null, vec__19238, 1, null);
                                  return cljs.core.update_in.call(null, m, i, cljs.core.merge, x);
                                };
                              }(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr), refs__$1, cljs.core.zipmap.call(null, is, xs));
                            };
                          }(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr));
                        }
                      } else {
                        cljs.core.swap_BANG_.call(null, refs, function(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr) {
                          return function(refs_SINGLEQUOTE_) {
                            return cljs.core.reduce.call(null, function(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr) {
                              return function(ret__$1, p__19241) {
                                var vec__19242 = p__19241;
                                var i = cljs.core.nth.call(null, vec__19242, 0, null);
                                var x = cljs.core.nth.call(null, vec__19242, 1, null);
                                return cljs.core.update_in.call(null, ret__$1, i, cljs.core.merge, x);
                              };
                            }(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr), refs_SINGLEQUOTE_, cljs.core.map.call(null, cljs.core.vector, is, xs));
                          };
                        }(q, ret, is, xs, vec__19230, k, sel, recursive_QMARK_, union_entry, sel__$1, class$, v, expr));
                      }
                      var G__19251 = cljs.core.next.call(null, q);
                      var G__19252 = cljs.core.assoc.call(null, ret, k, is);
                      q = G__19251;
                      ret = G__19252;
                      continue;
                    } else {
                      var G__19253 = cljs.core.next.call(null, q);
                      var G__19254 = cljs.core.assoc.call(null, ret, k, xs);
                      q = G__19253;
                      ret = G__19254;
                      continue;
                    }
                  } else {
                    if (v == null) {
                      var G__19255 = cljs.core.next.call(null, q);
                      var G__19256 = ret;
                      q = G__19255;
                      ret = G__19256;
                      continue;
                    } else {
                      var G__19257 = cljs.core.next.call(null, q);
                      var G__19258 = cljs.core.assoc.call(null, ret, k, v);
                      q = G__19257;
                      ret = G__19258;
                      continue;
                    }
                  }
                }
              }
            } else {
              var k = cljs.core.seq_QMARK_.call(null, expr) ? cljs.core.first.call(null, expr) : expr;
              var v = cljs.core.get.call(null, data, k);
              if (v == null) {
                var G__19259 = cljs.core.next.call(null, q);
                var G__19260 = ret;
                q = G__19259;
                ret = G__19260;
                continue;
              } else {
                var G__19261 = cljs.core.next.call(null, q);
                var G__19262 = cljs.core.assoc.call(null, ret, k, v);
                q = G__19261;
                ret = G__19262;
                continue;
              }
            }
          } else {
            return ret;
          }
          break;
        }
      }
    }
  }
};
om.next.tree__GT_db = function om$next$tree__GT_db(var_args) {
  var args19263 = [];
  var len__8523__auto___19266 = arguments.length;
  var i__8524__auto___19267 = 0;
  while (true) {
    if (i__8524__auto___19267 < len__8523__auto___19266) {
      args19263.push(arguments[i__8524__auto___19267]);
      var G__19268 = i__8524__auto___19267 + 1;
      i__8524__auto___19267 = G__19268;
      continue;
    } else {
    }
    break;
  }
  var G__19265 = args19263.length;
  switch(G__19265) {
    case 2:
      return om.next.tree__GT_db.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.tree__GT_db.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19263.length)].join(""));
  }
};
om.next.tree__GT_db.cljs$core$IFn$_invoke$arity$2 = function(x, data) {
  return om.next.tree__GT_db.call(null, x, data, false);
};
om.next.tree__GT_db.cljs$core$IFn$_invoke$arity$3 = function(x, data, merge_idents) {
  var refs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var x__$1 = cljs.core.vector_QMARK_.call(null, x) ? x : om.next.get_query.call(null, x);
  var ret = om.next.normalize_STAR_.call(null, x__$1, data, refs, null);
  if (merge_idents) {
    var refs_SINGLEQUOTE_ = cljs.core.deref.call(null, refs);
    return cljs.core.assoc.call(null, cljs.core.merge.call(null, ret, refs_SINGLEQUOTE_), new cljs.core.Keyword("om.next", "tables", "om.next/tables", 1677536335), cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, cljs.core.keys.call(null, refs_SINGLEQUOTE_)));
  } else {
    return cljs.core.with_meta.call(null, ret, cljs.core.deref.call(null, refs));
  }
};
om.next.tree__GT_db.cljs$lang$maxFixedArity = 3;
om.next.sift_idents = function om$next$sift_idents(res) {
  var map__19273 = cljs.core.group_by.call(null, function(p1__19270_SHARP_) {
    return cljs.core.vector_QMARK_.call(null, cljs.core.first.call(null, p1__19270_SHARP_));
  }, res);
  var map__19273__$1 = (!(map__19273 == null) ? map__19273.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19273.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19273) : map__19273;
  var idents = cljs.core.get.call(null, map__19273__$1, true);
  var rest = cljs.core.get.call(null, map__19273__$1, false);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, idents), cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, rest)], null);
};
om.next.reduce_query_depth = function om$next$reduce_query_depth(q, k) {
  if (!cljs.core.empty_QMARK_.call(null, om.next.focus_query.call(null, q, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)))) {
    var pos = om.next.query_template.call(null, q, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null));
    var node = clojure.zip.node.call(null, pos);
    var node_SINGLEQUOTE_ = function() {
      var G__19276 = node;
      if (typeof node === "number") {
        return G__19276 - 1;
      } else {
        return G__19276;
      }
    }();
    return om.next.replace.call(null, pos, node_SINGLEQUOTE_);
  } else {
    return q;
  }
};
om.next.reduce_union_recursion_depth = function om$next$reduce_union_recursion_depth(union_expr, recursion_key) {
  return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.map.call(null, function(p__19281) {
    var vec__19282 = p__19281;
    var k = cljs.core.nth.call(null, vec__19282, 0, null);
    var q = cljs.core.nth.call(null, vec__19282, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, om.next.reduce_query_depth.call(null, q, recursion_key)], null);
  }, union_expr));
};
om.next.mappable_ident_QMARK_ = function om$next$mappable_ident_QMARK_(refs, ident) {
  return om.util.ident_QMARK_.call(null, ident) && cljs.core.contains_QMARK_.call(null, refs, cljs.core.first.call(null, ident));
};
om.next.denormalize_STAR_ = function om$next$denormalize_STAR_(query, data, refs, map_ident, idents_seen, union_expr, recurse_key) {
  var union_recur_QMARK_ = function() {
    var and__7398__auto__ = union_expr;
    if (cljs.core.truth_(and__7398__auto__)) {
      return recurse_key;
    } else {
      return and__7398__auto__;
    }
  }();
  var recur_ident = cljs.core.truth_(union_recur_QMARK_) ? data : null;
  var data__$1 = function() {
    var data__$1 = data;
    while (true) {
      if (cljs.core.truth_(om.next.mappable_ident_QMARK_.call(null, refs, data__$1))) {
        var G__19332 = cljs.core.get_in.call(null, refs, map_ident.call(null, data__$1));
        data__$1 = G__19332;
        continue;
      } else {
        return data__$1;
      }
      break;
    }
  }();
  if (cljs.core.vector_QMARK_.call(null, data__$1)) {
    var step = function(union_recur_QMARK_, recur_ident, data__$1) {
      return function(ident) {
        if (cljs.core.not.call(null, om.next.mappable_ident_QMARK_.call(null, refs, ident))) {
          if (cljs.core._EQ_.call(null, query, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", 345799209, null)], null))) {
            return ident;
          } else {
            var map__19310 = cljs.core.group_by.call(null, om.util.join_QMARK_, query);
            var map__19310__$1 = (!(map__19310 == null) ? map__19310.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19310.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19310) : map__19310;
            var props = cljs.core.get.call(null, map__19310__$1, false);
            var joins = cljs.core.get.call(null, map__19310__$1, true);
            var props__$1 = cljs.core.mapv.call(null, function(map__19310, map__19310__$1, props, joins, union_recur_QMARK_, recur_ident, data__$1) {
              return function(p1__19285_SHARP_) {
                var G__19312 = p1__19285_SHARP_;
                if (cljs.core.seq_QMARK_.call(null, p1__19285_SHARP_)) {
                  return cljs.core.first.call(null, G__19312);
                } else {
                  return G__19312;
                }
              };
            }(map__19310, map__19310__$1, props, joins, union_recur_QMARK_, recur_ident, data__$1), props);
            var joins__$1 = cljs.core.seq.call(null, joins);
            var ret = cljs.core.PersistentArrayMap.EMPTY;
            while (true) {
              if (!(joins__$1 == null)) {
                var join = cljs.core.first.call(null, joins__$1);
                var vec__19313 = om.util.join_entry.call(null, join);
                var key = cljs.core.nth.call(null, vec__19313, 0, null);
                var sel = cljs.core.nth.call(null, vec__19313, 1, null);
                var v = cljs.core.get.call(null, ident, key);
                var G__19333 = cljs.core.next.call(null, joins__$1);
                var G__19334 = cljs.core.assoc.call(null, ret, key, om.next.denormalize_STAR_.call(null, sel, v, refs, map_ident, idents_seen, union_expr, recurse_key));
                joins__$1 = G__19333;
                ret = G__19334;
                continue;
              } else {
                return cljs.core.merge.call(null, cljs.core.select_keys.call(null, ident, props__$1), ret);
              }
              break;
            }
          }
        } else {
          var ident_SINGLEQUOTE_ = cljs.core.get_in.call(null, refs, map_ident.call(null, ident));
          var query__$1 = function() {
            var G__19316 = query;
            if (cljs.core.truth_(union_recur_QMARK_)) {
              return om.next.reduce_union_recursion_depth.call(null, G__19316, recurse_key);
            } else {
              return G__19316;
            }
          }();
          var union_seen_SINGLEQUOTE_ = function() {
            var G__19317 = union_expr;
            if (cljs.core.truth_(union_recur_QMARK_)) {
              return om.next.reduce_union_recursion_depth.call(null, G__19317, recurse_key);
            } else {
              return G__19317;
            }
          }();
          var query_SINGLEQUOTE_ = function() {
            var G__19318 = query__$1;
            if (cljs.core.map_QMARK_.call(null, query__$1)) {
              return cljs.core.get.call(null, G__19318, cljs.core.first.call(null, ident));
            } else {
              return G__19318;
            }
          }();
          return om.next.denormalize_STAR_.call(null, query_SINGLEQUOTE_, ident_SINGLEQUOTE_, refs, map_ident, idents_seen, union_seen_SINGLEQUOTE_, null);
        }
      };
    }(union_recur_QMARK_, recur_ident, data__$1);
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, step), data__$1);
  } else {
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = cljs.core.map_QMARK_.call(null, query);
      if (and__7398__auto__) {
        return union_recur_QMARK_;
      } else {
        return and__7398__auto__;
      }
    }())) {
      return om.next.denormalize_STAR_.call(null, cljs.core.get.call(null, query, cljs.core.first.call(null, recur_ident)), data__$1, refs, map_ident, idents_seen, union_expr, recurse_key);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", 345799209, null)], null), query)) {
        return data__$1;
      } else {
        var map__19319 = cljs.core.group_by.call(null, function(union_recur_QMARK_, recur_ident, data__$1) {
          return function(p1__19286_SHARP_) {
            var or__7410__auto__ = om.util.join_QMARK_.call(null, p1__19286_SHARP_);
            if (cljs.core.truth_(or__7410__auto__)) {
              return or__7410__auto__;
            } else {
              return om.util.ident_QMARK_.call(null, p1__19286_SHARP_) || cljs.core.seq_QMARK_.call(null, p1__19286_SHARP_) && om.util.ident_QMARK_.call(null, cljs.core.first.call(null, p1__19286_SHARP_));
            }
          };
        }(union_recur_QMARK_, recur_ident, data__$1), query);
        var map__19319__$1 = (!(map__19319 == null) ? map__19319.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19319.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19319) : map__19319;
        var props = cljs.core.get.call(null, map__19319__$1, false);
        var joins = cljs.core.get.call(null, map__19319__$1, true);
        var props__$1 = cljs.core.mapv.call(null, function(map__19319, map__19319__$1, props, joins, union_recur_QMARK_, recur_ident, data__$1) {
          return function(p1__19287_SHARP_) {
            var G__19321 = p1__19287_SHARP_;
            if (cljs.core.seq_QMARK_.call(null, p1__19287_SHARP_)) {
              return cljs.core.first.call(null, G__19321);
            } else {
              return G__19321;
            }
          };
        }(map__19319, map__19319__$1, props, joins, union_recur_QMARK_, recur_ident, data__$1), props);
        var joins__$1 = cljs.core.seq.call(null, joins);
        var ret = cljs.core.PersistentArrayMap.EMPTY;
        while (true) {
          if (!(joins__$1 == null)) {
            var join = cljs.core.first.call(null, joins__$1);
            var join__$1 = function() {
              var G__19325 = join;
              if (cljs.core.seq_QMARK_.call(null, join)) {
                return cljs.core.first.call(null, G__19325);
              } else {
                return G__19325;
              }
            }();
            var join__$2 = function() {
              var G__19326 = join__$1;
              if (om.util.ident_QMARK_.call(null, join__$1)) {
                return cljs.core.PersistentHashMap.fromArrays([G__19326], [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "*", "*", 345799209, null)], null)]);
              } else {
                return G__19326;
              }
            }();
            var vec__19322 = om.util.join_entry.call(null, join__$2);
            var key = cljs.core.nth.call(null, vec__19322, 0, null);
            var sel = cljs.core.nth.call(null, vec__19322, 1, null);
            var recurse_QMARK_ = om.util.recursion_QMARK_.call(null, sel);
            var recurse_key__$1 = recurse_QMARK_ ? key : null;
            var v = om.util.ident_QMARK_.call(null, key) ? cljs.core._EQ_.call(null, new cljs.core.Symbol(null, "_", "_", -1201019570, null), cljs.core.second.call(null, key)) ? cljs.core.get.call(null, refs, cljs.core.first.call(null, key)) : cljs.core.get_in.call(null, refs, map_ident.call(null, key)) : cljs.core.get.call(null, data__$1, key);
            var key__$1 = function() {
              var G__19327 = key;
              if (om.util.unique_ident_QMARK_.call(null, key)) {
                return cljs.core.first.call(null, G__19327);
              } else {
                return G__19327;
              }
            }();
            var v__$1 = cljs.core.truth_(om.next.mappable_ident_QMARK_.call(null, refs, v)) ? function() {
              var v__$1 = v;
              while (true) {
                var next = cljs.core.get_in.call(null, refs, map_ident.call(null, v__$1));
                if (cljs.core.truth_(om.next.mappable_ident_QMARK_.call(null, refs, next))) {
                  var G__19335 = next;
                  v__$1 = G__19335;
                  continue;
                } else {
                  return map_ident.call(null, v__$1);
                }
                break;
              }
            }() : v;
            var limit = typeof sel === "number" ? sel : new cljs.core.Keyword(null, "none", "none", 1333468478);
            var union_entry = om.util.union_QMARK_.call(null, join__$2) ? sel : recurse_QMARK_ ? union_expr : null;
            var sel__$1 = recurse_QMARK_ ? !(union_expr == null) ? union_entry : om.next.reduce_query_depth.call(null, query, key__$1) : cljs.core.truth_(function() {
              var and__7398__auto__ = om.next.mappable_ident_QMARK_.call(null, refs, v__$1);
              if (cljs.core.truth_(and__7398__auto__)) {
                return om.util.union_QMARK_.call(null, join__$2);
              } else {
                return and__7398__auto__;
              }
            }()) ? cljs.core.get.call(null, sel, cljs.core.first.call(null, v__$1)) : om.util.ident_QMARK_.call(null, key__$1) && om.util.union_QMARK_.call(null, join__$2) ? cljs.core.get.call(null, sel, cljs.core.first.call(null, key__$1)) : sel;
            var graph_loop_QMARK_ = recurse_QMARK_ && cljs.core.contains_QMARK_.call(null, cljs.core.set.call(null, cljs.core.get.call(null, idents_seen, key__$1)), v__$1) && cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "none", "none", 1333468478), limit);
            var idents_seen__$1 = cljs.core.truth_(function() {
              var and__7398__auto__ = om.next.mappable_ident_QMARK_.call(null, refs, v__$1);
              if (cljs.core.truth_(and__7398__auto__)) {
                return recurse_QMARK_;
              } else {
                return and__7398__auto__;
              }
            }()) ? cljs.core.assoc_in.call(null, cljs.core.update_in.call(null, idents_seen, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [key__$1], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), v__$1), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-ident", "last-ident", 534500972), key__$1], null), v__$1) : idents_seen;
            if (cljs.core._EQ_.call(null, 0, limit)) {
              var G__19336 = cljs.core.next.call(null, joins__$1);
              var G__19337 = ret;
              joins__$1 = G__19336;
              ret = G__19337;
              continue;
            } else {
              if (graph_loop_QMARK_) {
                var G__19338 = cljs.core.next.call(null, joins__$1);
                var G__19339 = ret;
                joins__$1 = G__19338;
                ret = G__19339;
                continue;
              } else {
                if (v__$1 == null) {
                  var G__19340 = cljs.core.next.call(null, joins__$1);
                  var G__19341 = ret;
                  joins__$1 = G__19340;
                  ret = G__19341;
                  continue;
                } else {
                  var G__19342 = cljs.core.next.call(null, joins__$1);
                  var G__19343 = cljs.core.assoc.call(null, ret, key__$1, om.next.denormalize_STAR_.call(null, sel__$1, v__$1, refs, map_ident, idents_seen__$1, union_entry, recurse_key__$1));
                  joins__$1 = G__19342;
                  ret = G__19343;
                  continue;
                }
              }
            }
          } else {
            var temp__4655__auto__ = cljs.core.some.call(null, function(joins__$1, ret, map__19319, map__19319__$1, props, joins, props__$1, union_recur_QMARK_, recur_ident, data__$1) {
              return function(p__19328) {
                var vec__19329 = p__19328;
                var k = cljs.core.nth.call(null, vec__19329, 0, null);
                var identset = cljs.core.nth.call(null, vec__19329, 1, null);
                if (cljs.core.contains_QMARK_.call(null, identset, cljs.core.get.call(null, data__$1, k))) {
                  return cljs.core.get_in.call(null, idents_seen, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "last-ident", "last-ident", 534500972), k], null));
                } else {
                  return null;
                }
              };
            }(joins__$1, ret, map__19319, map__19319__$1, props, joins, props__$1, union_recur_QMARK_, recur_ident, data__$1), cljs.core.dissoc.call(null, idents_seen, new cljs.core.Keyword(null, "last-ident", "last-ident", 534500972)));
            if (cljs.core.truth_(temp__4655__auto__)) {
              var looped_key = temp__4655__auto__;
              return looped_key;
            } else {
              return cljs.core.merge.call(null, cljs.core.select_keys.call(null, data__$1, props__$1), ret);
            }
          }
          break;
        }
      }
    }
  }
};
om.next.db__GT_tree = function om$next$db__GT_tree(var_args) {
  var args19344 = [];
  var len__8523__auto___19347 = arguments.length;
  var i__8524__auto___19348 = 0;
  while (true) {
    if (i__8524__auto___19348 < len__8523__auto___19347) {
      args19344.push(arguments[i__8524__auto___19348]);
      var G__19349 = i__8524__auto___19348 + 1;
      i__8524__auto___19348 = G__19349;
      continue;
    } else {
    }
    break;
  }
  var G__19346 = args19344.length;
  switch(G__19346) {
    case 3:
      return om.next.db__GT_tree.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.db__GT_tree.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19344.length)].join(""));
  }
};
om.next.db__GT_tree.cljs$core$IFn$_invoke$arity$3 = function(query, data, refs) {
  if (cljs.core.map_QMARK_.call(null, refs)) {
  } else {
    throw new Error("Assert failed: (map? refs)");
  }
  return om.next.denormalize_STAR_.call(null, query, data, refs, cljs.core.identity, cljs.core.PersistentArrayMap.EMPTY, null, null);
};
om.next.db__GT_tree.cljs$core$IFn$_invoke$arity$4 = function(query, data, refs, map_ident) {
  if (cljs.core.map_QMARK_.call(null, refs)) {
  } else {
    throw new Error("Assert failed: (map? refs)");
  }
  return om.next.denormalize_STAR_.call(null, query, data, refs, map_ident, cljs.core.PersistentArrayMap.EMPTY, null, null);
};
om.next.db__GT_tree.cljs$lang$maxFixedArity = 4;
om.next.rewrite = function om$next$rewrite(rewrite_map, result) {
  var step = function om$next$rewrite_$_step(res, p__19374) {
    var vec__19378 = p__19374;
    var k = cljs.core.nth.call(null, vec__19378, 0, null);
    var orig_paths = cljs.core.nth.call(null, vec__19378, 1, null);
    var to_move = cljs.core.get.call(null, result, k);
    var res_SINGLEQUOTE_ = cljs.core.reduce.call(null, function(to_move, vec__19378, k, orig_paths) {
      return function(p1__19351_SHARP_, p2__19352_SHARP_) {
        return cljs.core.assoc_in.call(null, p1__19351_SHARP_, cljs.core.conj.call(null, p2__19352_SHARP_, k), to_move);
      };
    }(to_move, vec__19378, k, orig_paths), res, orig_paths);
    return cljs.core.dissoc.call(null, res_SINGLEQUOTE_, k);
  };
  return cljs.core.reduce.call(null, step, result, rewrite_map);
};
om.next.move_roots = function om$next$move_roots(join, result_roots, path) {
  var query_root_QMARK_ = function om$next$move_roots_$_query_root_QMARK_(join__$1) {
    return (new cljs.core.Keyword(null, "query-root", "query-root", 359781888)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, join__$1)) === true;
  };
  if (cljs.core.truth_(om.util.join_QMARK_.call(null, join))) {
    if (cljs.core.truth_(query_root_QMARK_.call(null, join))) {
      return cljs.core.conj.call(null, result_roots, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [join, path], null));
    } else {
      var joinvalue = om.util.join_value.call(null, join);
      if (cljs.core.vector_QMARK_.call(null, joinvalue)) {
        return cljs.core.mapcat.call(null, function(joinvalue) {
          return function(p1__19381_SHARP_) {
            return om.next.move_roots.call(null, p1__19381_SHARP_, result_roots, cljs.core.conj.call(null, path, om.util.join_key.call(null, join)));
          };
        }(joinvalue), joinvalue);
      } else {
        return result_roots;
      }
    }
  } else {
    return result_roots;
  }
};
om.next.merge_joins = function om$next$merge_joins(query) {
  var step = function om$next$merge_joins_$_step(res, expr) {
    if (cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "elements-seen", "elements-seen", 723482521)).cljs$core$IFn$_invoke$arity$1(res), expr)) {
      return res;
    } else {
      return cljs.core.update_in.call(null, cljs.core.truth_(function() {
        var and__7398__auto__ = om.util.join_QMARK_.call(null, expr);
        if (cljs.core.truth_(and__7398__auto__)) {
          return !om.util.union_QMARK_.call(null, expr) && !cljs.core.list_QMARK_.call(null, expr);
        } else {
          return and__7398__auto__;
        }
      }()) ? function() {
        var jk = om.util.join_key.call(null, expr);
        var jv = om.util.join_value.call(null, expr);
        var q = function() {
          var or__7410__auto__ = cljs.core.get.call(null, (new cljs.core.Keyword(null, "query-by-join", "query-by-join", -131270450)).cljs$core$IFn$_invoke$arity$1(res), jk);
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return cljs.core.PersistentVector.EMPTY;
          }
        }();
        var nq = om.util.recursion_QMARK_.call(null, q) ? q : om.util.recursion_QMARK_.call(null, jv) ? jv : om.next.merge_joins.call(null, cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.concat.call(null, q, jv)));
        return cljs.core.update_in.call(null, res, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "query-by-join", "query-by-join", -131270450)], null), cljs.core.assoc, jk, nq);
      }() : cljs.core.update_in.call(null, res, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "not-mergeable", "not-mergeable", -291093370)], null), cljs.core.conj, expr), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "elements-seen", "elements-seen", 723482521)], null), cljs.core.conj, expr);
    }
  };
  var init = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "query-by-join", "query-by-join", -131270450), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "elements-seen", "elements-seen", 723482521), cljs.core.PersistentHashSet.EMPTY, new cljs.core.Keyword(null, "not-mergeable", "not-mergeable", -291093370), cljs.core.PersistentVector.EMPTY], null);
  var res = cljs.core.reduce.call(null, step, init, query);
  return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.concat.call(null, (new cljs.core.Keyword(null, "not-mergeable", "not-mergeable", -291093370)).cljs$core$IFn$_invoke$arity$1(res), cljs.core.mapv.call(null, function(init, res) {
    return function(p__19386) {
      var vec__19387 = p__19386;
      var jkey = cljs.core.nth.call(null, vec__19387, 0, null);
      var jsel = cljs.core.nth.call(null, vec__19387, 1, null);
      return cljs.core.PersistentArrayMap.createAsIfByAssoc([jkey, jsel]);
    };
  }(init, res), (new cljs.core.Keyword(null, "query-by-join", "query-by-join", -131270450)).cljs$core$IFn$_invoke$arity$1(res))));
};
om.next.process_roots = function om$next$process_roots(query) {
  var retain = function om$next$process_roots_$_retain(expr) {
    return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [expr, cljs.core.PersistentVector.EMPTY], null)], null);
  };
  var reroot = function om$next$process_roots_$_reroot(expr) {
    var roots = om.next.move_roots.call(null, expr, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentVector.EMPTY);
    if (cljs.core.empty_QMARK_.call(null, roots)) {
      return retain.call(null, expr);
    } else {
      return roots;
    }
  };
  var rewrite_map_step = function om$next$process_roots_$_rewrite_map_step(rewrites, p__19411) {
    var vec__19415 = p__19411;
    var expr = cljs.core.nth.call(null, vec__19415, 0, null);
    var path = cljs.core.nth.call(null, vec__19415, 1, null);
    if (cljs.core.empty_QMARK_.call(null, path)) {
      return rewrites;
    } else {
      return cljs.core.update_in.call(null, rewrites, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.util.join_key.call(null, expr)], null), cljs.core.conj, path);
    }
  };
  var reroots = cljs.core.mapcat.call(null, reroot, query);
  var query__$1 = om.next.merge_joins.call(null, cljs.core.mapv.call(null, cljs.core.first, reroots));
  var rewrite_map = cljs.core.reduce.call(null, rewrite_map_step, cljs.core.PersistentArrayMap.EMPTY, reroots);
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "query", "query", -1288509510), query__$1, new cljs.core.Keyword(null, "rewrite", "rewrite", 870487388), cljs.core.partial.call(null, om.next.rewrite, rewrite_map)], null);
};
om.next.merge_idents = function om$next$merge_idents(tree, config, refs, query) {
  var map__19435 = config;
  var map__19435__$1 = (!(map__19435 == null) ? map__19435.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19435.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19435) : map__19435;
  var merge_ident = cljs.core.get.call(null, map__19435__$1, new cljs.core.Keyword(null, "merge-ident", "merge-ident", 1040841862));
  var indexer = cljs.core.get.call(null, map__19435__$1, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315));
  var ident_joins = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.filter.call(null, function(map__19435, map__19435__$1, merge_ident, indexer) {
    return function(p1__19418_SHARP_) {
      var and__7398__auto__ = om.util.join_QMARK_.call(null, p1__19418_SHARP_);
      if (cljs.core.truth_(and__7398__auto__)) {
        return om.util.ident_QMARK_.call(null, om.util.join_key.call(null, p1__19418_SHARP_));
      } else {
        return and__7398__auto__;
      }
    };
  }(map__19435, map__19435__$1, merge_ident, indexer), query));
  var step = function(map__19435, map__19435__$1, merge_ident, indexer, ident_joins) {
    return function om$next$merge_idents_$_step(tree_SINGLEQUOTE_, p__19444) {
      var vec__19448 = p__19444;
      var ident = cljs.core.nth.call(null, vec__19448, 0, null);
      var props = cljs.core.nth.call(null, vec__19448, 1, null);
      if (cljs.core.truth_((new cljs.core.Keyword(null, "normalize", "normalize", -1904390051)).cljs$core$IFn$_invoke$arity$1(config))) {
        var c_or_q = function() {
          var or__7410__auto__ = cljs.core.get.call(null, ident_joins, ident);
          if (cljs.core.truth_(or__7410__auto__)) {
            return or__7410__auto__;
          } else {
            return om.next.ref__GT_any.call(null, indexer, ident);
          }
        }();
        var props_SINGLEQUOTE_ = om.next.tree__GT_db.call(null, c_or_q, props);
        var refs__$1 = cljs.core.meta.call(null, props_SINGLEQUOTE_);
        return (new cljs.core.Keyword(null, "merge-tree", "merge-tree", -127861161)).cljs$core$IFn$_invoke$arity$1(config).call(null, merge_ident.call(null, config, tree_SINGLEQUOTE_, ident, props_SINGLEQUOTE_), refs__$1);
      } else {
        return merge_ident.call(null, config, tree_SINGLEQUOTE_, ident, props);
      }
    };
  }(map__19435, map__19435__$1, merge_ident, indexer, ident_joins);
  return cljs.core.reduce.call(null, step, tree, refs);
};
om.next.merge_novelty_BANG_ = function om$next$merge_novelty_BANG_(reconciler, state, res, query) {
  var config = (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(reconciler);
  var vec__19454 = om.next.sift_idents.call(null, res);
  var idts = cljs.core.nth.call(null, vec__19454, 0, null);
  var res_SINGLEQUOTE_ = cljs.core.nth.call(null, vec__19454, 1, null);
  var res_SINGLEQUOTE___$1 = cljs.core.truth_((new cljs.core.Keyword(null, "normalize", "normalize", -1904390051)).cljs$core$IFn$_invoke$arity$1(config)) ? om.next.tree__GT_db.call(null, function() {
    var or__7410__auto__ = query;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return (new cljs.core.Keyword(null, "root", "root", -448657453)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(reconciler)));
    }
  }(), res_SINGLEQUOTE_, true) : res_SINGLEQUOTE_;
  return (new cljs.core.Keyword(null, "merge-tree", "merge-tree", -127861161)).cljs$core$IFn$_invoke$arity$1(config).call(null, om.next.merge_idents.call(null, state, config, idts, query), res_SINGLEQUOTE___$1);
};
om.next.default_merge = function om$next$default_merge(reconciler, state, res, query) {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "keys", "keys", 1068423698), cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.remove.call(null, cljs.core.symbol_QMARK_), cljs.core.keys.call(null, res)), new cljs.core.Keyword(null, "next", "next", -117701485), om.next.merge_novelty_BANG_.call(null, reconciler, state, res, query), new cljs.core.Keyword(null, "tempids", "tempids", 1767509089), cljs.core.reduce.call(null, cljs.core.merge, cljs.core.PersistentArrayMap.EMPTY, 
  cljs.core.map.call(null, cljs.core.comp.call(null, new cljs.core.Keyword(null, "tempids", "tempids", 1767509089), cljs.core.second), cljs.core.filter.call(null, cljs.core.comp.call(null, cljs.core.symbol_QMARK_, cljs.core.first), res)))], null);
};
om.next.merge_BANG_ = function om$next$merge_BANG_(var_args) {
  var args19457 = [];
  var len__8523__auto___19462 = arguments.length;
  var i__8524__auto___19463 = 0;
  while (true) {
    if (i__8524__auto___19463 < len__8523__auto___19462) {
      args19457.push(arguments[i__8524__auto___19463]);
      var G__19464 = i__8524__auto___19463 + 1;
      i__8524__auto___19463 = G__19464;
      continue;
    } else {
    }
    break;
  }
  var G__19459 = args19457.length;
  switch(G__19459) {
    case 2:
      return om.next.merge_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return om.next.merge_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.merge_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19457.length)].join(""));
  }
};
om.next.merge_BANG_.cljs$core$IFn$_invoke$arity$2 = function(reconciler, delta) {
  return om.next.merge_BANG_.call(null, reconciler, delta, null);
};
om.next.merge_BANG_.cljs$core$IFn$_invoke$arity$3 = function(reconciler, delta, query) {
  return om.next.merge_BANG_.call(null, reconciler, delta, query, null);
};
om.next.merge_BANG_.cljs$core$IFn$_invoke$arity$4 = function(reconciler, delta, query, remote) {
  var config = (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(reconciler);
  var state = (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(config);
  var merge_STAR_ = (new cljs.core.Keyword(null, "merge", "merge", -1804319409)).cljs$core$IFn$_invoke$arity$1(config);
  var map__19460 = merge_STAR_.call(null, reconciler, cljs.core.deref.call(null, state), delta, query);
  var map__19460__$1 = (!(map__19460 == null) ? map__19460.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19460.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19460) : map__19460;
  var keys = cljs.core.get.call(null, map__19460__$1, new cljs.core.Keyword(null, "keys", "keys", 1068423698));
  var next = cljs.core.get.call(null, map__19460__$1, new cljs.core.Keyword(null, "next", "next", -117701485));
  var tempids = cljs.core.get.call(null, map__19460__$1, new cljs.core.Keyword(null, "tempids", "tempids", 1767509089));
  if (remote == null) {
    om.next.protocols.queue_BANG_.call(null, reconciler, keys);
  } else {
  }
  return cljs.core.reset_BANG_.call(null, state, function() {
    var temp__4655__auto__ = (new cljs.core.Keyword(null, "migrate", "migrate", -207110743)).cljs$core$IFn$_invoke$arity$1(config);
    if (cljs.core.truth_(temp__4655__auto__)) {
      var migrate = temp__4655__auto__;
      return cljs.core.merge.call(null, cljs.core.select_keys.call(null, next, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146)], null)), migrate.call(null, next, function() {
        var or__7410__auto__ = query;
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return om.next.get_query.call(null, (new cljs.core.Keyword(null, "root", "root", -448657453)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(reconciler))));
        }
      }(), tempids, (new cljs.core.Keyword(null, "id-key", "id-key", -1881730044)).cljs$core$IFn$_invoke$arity$1(config)));
    } else {
      return next;
    }
  }());
};
om.next.merge_BANG_.cljs$lang$maxFixedArity = 4;
om.next.Reconciler = function(config, state, __meta, __extmap, __hash) {
  this.config = config;
  this.state = state;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2229700362;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
om.next.Reconciler.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8037__auto__, k__8038__auto__) {
  var self__ = this;
  var this__8037__auto____$1 = this;
  return this__8037__auto____$1.cljs$core$ILookup$_lookup$arity$3(null, k__8038__auto__, null);
};
om.next.Reconciler.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8039__auto__, k19471, else__8040__auto__) {
  var self__ = this;
  var this__8039__auto____$1 = this;
  var G__19473 = k19471 instanceof cljs.core.Keyword ? k19471.fqn : null;
  switch(G__19473) {
    case "config":
      return self__.config;
      break;
    case "state":
      return self__.state;
      break;
    default:
      return cljs.core.get.call(null, self__.__extmap, k19471, else__8040__auto__);
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$ = cljs.core.PROTOCOL_SENTINEL;
om.next.Reconciler.prototype.om$next$protocols$IReconciler$queue_BANG_$arity$2 = function(this$, ks) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.om$next$protocols$IReconciler$queue_BANG_$arity$3(null, ks, null);
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$queue_BANG_$arity$3 = function(_, ks, remote) {
  var self__ = this;
  var ___$1 = this;
  if (!(remote == null)) {
    return cljs.core.swap_BANG_.call(null, self__.state, cljs.core.update_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remote-queue", "remote-queue", 1823260578), remote], null), cljs.core.into, ks);
  } else {
    return cljs.core.swap_BANG_.call(null, self__.state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "queue", "queue", 1455835879)], null), cljs.core.into, ks);
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$queue_sends_BANG_$arity$2 = function(_, sends) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.swap_BANG_.call(null, self__.state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "queued-sends", "queued-sends", 278114765)], null), (new cljs.core.Keyword(null, "merge-sends", "merge-sends", -1718434202)).cljs$core$IFn$_invoke$arity$1(self__.config), sends);
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$send_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var sends = (new cljs.core.Keyword(null, "queued-sends", "queued-sends", 278114765)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
  if (cljs.core.empty_QMARK_.call(null, sends)) {
    return null;
  } else {
    cljs.core.swap_BANG_.call(null, self__.state, function(sends, this$__$1) {
      return function(state__$1) {
        return cljs.core.assoc.call(null, cljs.core.assoc.call(null, state__$1, new cljs.core.Keyword(null, "queued-sends", "queued-sends", 278114765), cljs.core.PersistentArrayMap.EMPTY), new cljs.core.Keyword(null, "sends-queued", "sends-queued", -1276878712), false);
      };
    }(sends, this$__$1));
    return (new cljs.core.Keyword(null, "send", "send", -652151114)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, sends, function(sends, this$__$1) {
      return function() {
        var om$next$send_cb = null;
        var om$next$send_cb__1 = function(resp) {
          return om.next.merge_BANG_.call(null, this$__$1, resp, null);
        };
        var om$next$send_cb__2 = function(resp, query) {
          return om.next.merge_BANG_.call(null, this$__$1, resp, query);
        };
        var om$next$send_cb__3 = function(resp, query, remote) {
          if (remote == null) {
          } else {
            om.next.protocols.queue_BANG_.call(null, this$__$1, cljs.core.keys.call(null, resp), remote);
          }
          om.next.merge_BANG_.call(null, this$__$1, resp, query, remote);
          return om.next.protocols.reconcile_BANG_.call(null, this$__$1, remote);
        };
        om$next$send_cb = function(resp, query, remote) {
          switch(arguments.length) {
            case 1:
              return om$next$send_cb__1.call(this, resp);
            case 2:
              return om$next$send_cb__2.call(this, resp, query);
            case 3:
              return om$next$send_cb__3.call(this, resp, query, remote);
          }
          throw new Error("Invalid arity: " + (arguments.length - 1));
        };
        om$next$send_cb.cljs$core$IFn$_invoke$arity$1 = om$next$send_cb__1;
        om$next$send_cb.cljs$core$IFn$_invoke$arity$2 = om$next$send_cb__2;
        om$next$send_cb.cljs$core$IFn$_invoke$arity$3 = om$next$send_cb__3;
        return om$next$send_cb;
      }();
    }(sends, this$__$1));
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$reconcile_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.om$next$protocols$IReconciler$reconcile_BANG_$arity$2(null, null);
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$reconcile_BANG_$arity$2 = function(this$, remote) {
  var self__ = this;
  var this$__$1 = this;
  var st = cljs.core.deref.call(null, self__.state);
  var q = !(remote == null) ? cljs.core.get_in.call(null, st, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remote-queue", "remote-queue", 1823260578), remote], null)) : (new cljs.core.Keyword(null, "queue", "queue", 1455835879)).cljs$core$IFn$_invoke$arity$1(st);
  cljs.core.swap_BANG_.call(null, self__.state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "queued", "queued", 1701634607)], null), cljs.core.not);
  if (!(remote == null)) {
    cljs.core.swap_BANG_.call(null, self__.state, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remote-queue", "remote-queue", 1823260578), remote], null), cljs.core.PersistentVector.EMPTY);
  } else {
    cljs.core.swap_BANG_.call(null, self__.state, cljs.core.assoc, new cljs.core.Keyword(null, "queue", "queue", 1455835879), cljs.core.PersistentVector.EMPTY);
  }
  if (cljs.core.empty_QMARK_.call(null, q)) {
    return (new cljs.core.Keyword(null, "render", "render", -1408033454)).cljs$core$IFn$_invoke$arity$1(st).call(null);
  } else {
    var cs = cljs.core.transduce.call(null, cljs.core.map.call(null, function(st, q, this$__$1) {
      return function(p1__19467_SHARP_) {
        return om.next.protocols.key__GT_components.call(null, (new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)).cljs$core$IFn$_invoke$arity$1(self__.config), p1__19467_SHARP_);
      };
    }(st, q, this$__$1)), function(st, q, this$__$1) {
      return function(p1__19468_SHARP_, p2__19469_SHARP_) {
        return cljs.core.into.call(null, p1__19468_SHARP_, p2__19469_SHARP_);
      };
    }(st, q, this$__$1), cljs.core.PersistentHashSet.EMPTY, q);
    var map__19474 = self__.config;
    var map__19474__$1 = (!(map__19474 == null) ? map__19474.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19474.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19474) : map__19474;
    var ui__GT_props = cljs.core.get.call(null, map__19474__$1, new cljs.core.Keyword(null, "ui-\x3eprops", "ui-\x3eprops", -237981102));
    var env = om.next.to_env.call(null, self__.config);
    var root = (new cljs.core.Keyword(null, "root", "root", -448657453)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
    var seq__19476 = cljs.core.seq.call(null, (new cljs.core.Keyword(null, "optimize", "optimize", -1912349448)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, cs));
    var chunk__19477 = null;
    var count__19478 = 0;
    var i__19479 = 0;
    while (true) {
      if (i__19479 < count__19478) {
        var c = cljs.core._nth.call(null, chunk__19477, i__19479);
        var props_change_QMARK__19487 = this$__$1.om$next$protocols$IReconciler$basis_t$arity$1(null) > om.next.t.call(null, c);
        if (om.next.mounted_QMARK_.call(null, c)) {
          var computed_19488 = om.next.get_computed.call(null, om.next.props.call(null, c));
          var next_raw_props_19489 = ui__GT_props.call(null, env, c);
          var next_props_19490 = om.next.computed.call(null, next_raw_props_19489, computed_19488);
          if (typeof c.componentWillReceiveProps !== "undefined" && om.next.iquery_QMARK_.call(null, root) && props_change_QMARK__19487) {
            var next_props_19491__$1 = next_props_19490 == null ? function() {
              var temp__4657__auto__ = om.next.props.call(null, c);
              if (cljs.core.truth_(temp__4657__auto__)) {
                var props = temp__4657__auto__;
                return props;
              } else {
                return null;
              }
            }() : next_props_19490;
            c.componentWillReceiveProps({"omcljs$value":om.next.om_props.call(null, next_props_19491__$1, this$__$1.om$next$protocols$IReconciler$basis_t$arity$1(null))});
          } else {
          }
          if (cljs.core.truth_(om.next.should_update_QMARK_.call(null, c, next_props_19490, om.next.get_state.call(null, c)))) {
            if (!(next_props_19490 == null)) {
              om.next.update_component_BANG_.call(null, c, next_props_19490);
            } else {
              c.forceUpdate();
            }
            if (om.next.iquery_QMARK_.call(null, root) && cljs.core.not_EQ_.call(null, c, root) && props_change_QMARK__19487) {
              var temp__4657__auto___19492 = om.next.path.call(null, c);
              if (cljs.core.truth_(temp__4657__auto___19492)) {
                var update_path_19493 = temp__4657__auto___19492;
                var p_19494 = om.next.parent.call(null, c);
                while (true) {
                  if (!(p_19494 == null)) {
                    var update_path_SINGLEQUOTE__19495 = cljs.core.subvec.call(null, update_path_19493, cljs.core.count.call(null, om.next.path.call(null, p_19494)));
                    om.next.update_props_BANG_.call(null, p_19494, cljs.core.assoc_in.call(null, om.next.props.call(null, p_19494), update_path_SINGLEQUOTE__19495, next_raw_props_19489));
                    om.next.merge_pending_props_BANG_.call(null, p_19494);
                    var G__19496 = om.next.parent.call(null, p_19494);
                    p_19494 = G__19496;
                    continue;
                  } else {
                  }
                  break;
                }
              } else {
              }
            } else {
            }
          } else {
          }
        } else {
        }
        var G__19497 = seq__19476;
        var G__19498 = chunk__19477;
        var G__19499 = count__19478;
        var G__19500 = i__19479 + 1;
        seq__19476 = G__19497;
        chunk__19477 = G__19498;
        count__19478 = G__19499;
        i__19479 = G__19500;
        continue;
      } else {
        var temp__4657__auto__ = cljs.core.seq.call(null, seq__19476);
        if (temp__4657__auto__) {
          var seq__19476__$1 = temp__4657__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__19476__$1)) {
            var c__8229__auto__ = cljs.core.chunk_first.call(null, seq__19476__$1);
            var G__19501 = cljs.core.chunk_rest.call(null, seq__19476__$1);
            var G__19502 = c__8229__auto__;
            var G__19503 = cljs.core.count.call(null, c__8229__auto__);
            var G__19504 = 0;
            seq__19476 = G__19501;
            chunk__19477 = G__19502;
            count__19478 = G__19503;
            i__19479 = G__19504;
            continue;
          } else {
            var c = cljs.core.first.call(null, seq__19476__$1);
            var props_change_QMARK__19505 = this$__$1.om$next$protocols$IReconciler$basis_t$arity$1(null) > om.next.t.call(null, c);
            if (om.next.mounted_QMARK_.call(null, c)) {
              var computed_19506 = om.next.get_computed.call(null, om.next.props.call(null, c));
              var next_raw_props_19507 = ui__GT_props.call(null, env, c);
              var next_props_19508 = om.next.computed.call(null, next_raw_props_19507, computed_19506);
              if (typeof c.componentWillReceiveProps !== "undefined" && om.next.iquery_QMARK_.call(null, root) && props_change_QMARK__19505) {
                var next_props_19509__$1 = next_props_19508 == null ? function() {
                  var temp__4657__auto____$1 = om.next.props.call(null, c);
                  if (cljs.core.truth_(temp__4657__auto____$1)) {
                    var props = temp__4657__auto____$1;
                    return props;
                  } else {
                    return null;
                  }
                }() : next_props_19508;
                c.componentWillReceiveProps({"omcljs$value":om.next.om_props.call(null, next_props_19509__$1, this$__$1.om$next$protocols$IReconciler$basis_t$arity$1(null))});
              } else {
              }
              if (cljs.core.truth_(om.next.should_update_QMARK_.call(null, c, next_props_19508, om.next.get_state.call(null, c)))) {
                if (!(next_props_19508 == null)) {
                  om.next.update_component_BANG_.call(null, c, next_props_19508);
                } else {
                  c.forceUpdate();
                }
                if (om.next.iquery_QMARK_.call(null, root) && cljs.core.not_EQ_.call(null, c, root) && props_change_QMARK__19505) {
                  var temp__4657__auto___19510__$1 = om.next.path.call(null, c);
                  if (cljs.core.truth_(temp__4657__auto___19510__$1)) {
                    var update_path_19511 = temp__4657__auto___19510__$1;
                    var p_19512 = om.next.parent.call(null, c);
                    while (true) {
                      if (!(p_19512 == null)) {
                        var update_path_SINGLEQUOTE__19513 = cljs.core.subvec.call(null, update_path_19511, cljs.core.count.call(null, om.next.path.call(null, p_19512)));
                        om.next.update_props_BANG_.call(null, p_19512, cljs.core.assoc_in.call(null, om.next.props.call(null, p_19512), update_path_SINGLEQUOTE__19513, next_raw_props_19507));
                        om.next.merge_pending_props_BANG_.call(null, p_19512);
                        var G__19514 = om.next.parent.call(null, p_19512);
                        p_19512 = G__19514;
                        continue;
                      } else {
                      }
                      break;
                    }
                  } else {
                  }
                } else {
                }
              } else {
              }
            } else {
            }
            var G__19515 = cljs.core.next.call(null, seq__19476__$1);
            var G__19516 = null;
            var G__19517 = 0;
            var G__19518 = 0;
            seq__19476 = G__19515;
            chunk__19477 = G__19516;
            count__19478 = G__19517;
            i__19479 = G__19518;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$schedule_render_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "queued", "queued", 1701634607)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state)))) {
    cljs.core.swap_BANG_.call(null, self__.state, cljs.core.assoc, new cljs.core.Keyword(null, "queued", "queued", 1701634607), true);
    return true;
  } else {
    return false;
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$schedule_sends_BANG_$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "sends-queued", "sends-queued", -1276878712)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state)))) {
    cljs.core.swap_BANG_.call(null, self__.state, cljs.core.assoc, new cljs.core.Keyword(null, "sends-queued", "sends-queued", -1276878712), true);
    return true;
  } else {
    return false;
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$basis_t$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return (new cljs.core.Keyword(null, "t", "t", -1397832519)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$add_root_BANG_$arity$4 = function(this$, root_class, target, options) {
  var self__ = this;
  var this$__$1 = this;
  var ret = cljs.core.atom.call(null, null);
  var rctor = om.next.factory.call(null, root_class);
  var guid = cljs.core.random_uuid.call(null);
  if (om.next.iquery_QMARK_.call(null, root_class)) {
    om.next.protocols.index_root.call(null, (new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)).cljs$core$IFn$_invoke$arity$1(self__.config), root_class);
  } else {
  }
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = (new cljs.core.Keyword(null, "normalize", "normalize", -1904390051)).cljs$core$IFn$_invoke$arity$1(self__.config);
    if (cljs.core.truth_(and__7398__auto__)) {
      return cljs.core.not.call(null, (new cljs.core.Keyword(null, "normalized", "normalized", -1887621663)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state)));
    } else {
      return and__7398__auto__;
    }
  }())) {
    var new_state_19519 = om.next.tree__GT_db.call(null, root_class, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(self__.config)));
    var refs_19520 = cljs.core.meta.call(null, new_state_19519);
    cljs.core.reset_BANG_.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(self__.config), cljs.core.merge.call(null, new_state_19519, refs_19520));
    cljs.core.swap_BANG_.call(null, self__.state, cljs.core.assoc, new cljs.core.Keyword(null, "normalized", "normalized", -1887621663), true);
  } else {
  }
  var renderf = function(ret, rctor, guid, this$__$1) {
    return function(data) {
      var _STAR_reconciler_STAR_19480 = om.next._STAR_reconciler_STAR_;
      var _STAR_shared_STAR_19481 = om.next._STAR_shared_STAR_;
      var _STAR_instrument_STAR_19482 = om.next._STAR_instrument_STAR_;
      om.next._STAR_reconciler_STAR_ = this$__$1;
      om.next._STAR_shared_STAR_ = cljs.core.merge.call(null, (new cljs.core.Keyword(null, "shared", "shared", -384145993)).cljs$core$IFn$_invoke$arity$1(self__.config), cljs.core.truth_((new cljs.core.Keyword(null, "shared-fn", "shared-fn", -180260144)).cljs$core$IFn$_invoke$arity$1(self__.config)) ? (new cljs.core.Keyword(null, "shared-fn", "shared-fn", -180260144)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, data) : null);
      om.next._STAR_instrument_STAR_ = (new cljs.core.Keyword(null, "instrument", "instrument", -960698844)).cljs$core$IFn$_invoke$arity$1(self__.config);
      try {
        var c = !(target == null) ? (new cljs.core.Keyword(null, "root-render", "root-render", 835981146)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, rctor.call(null, data), target) : cljs.core.deref.call(null, ret) == null ? rctor.call(null, data) : function() {
          var temp__4657__auto__ = cljs.core.deref.call(null, ret);
          if (cljs.core.truth_(temp__4657__auto__)) {
            var c_SINGLEQUOTE_ = temp__4657__auto__;
            if (om.next.mounted_QMARK_.call(null, c_SINGLEQUOTE_)) {
              return c_SINGLEQUOTE_.forceUpdate(data);
            } else {
              return null;
            }
          } else {
            return null;
          }
        }();
        if (cljs.core.deref.call(null, ret) == null && !(c == null)) {
          cljs.core.swap_BANG_.call(null, self__.state, cljs.core.assoc, new cljs.core.Keyword(null, "root", "root", -448657453), c);
          return cljs.core.reset_BANG_.call(null, ret, c);
        } else {
          return null;
        }
      } finally {
        om.next._STAR_instrument_STAR_ = _STAR_instrument_STAR_19482;
        om.next._STAR_shared_STAR_ = _STAR_shared_STAR_19481;
        om.next._STAR_reconciler_STAR_ = _STAR_reconciler_STAR_19480;
      }
    };
  }(ret, rctor, guid, this$__$1);
  var parsef = function(renderf, ret, rctor, guid, this$__$1) {
    return function() {
      var sel = om.next.get_query.call(null, function() {
        var or__7410__auto__ = cljs.core.deref.call(null, ret);
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return root_class;
        }
      }());
      if (sel == null || cljs.core.vector_QMARK_.call(null, sel)) {
      } else {
        throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Assert failed: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1("Application root query must be a vector"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("\n"), cljs.core.str.cljs$core$IFn$_invoke$arity$1("(or (nil? sel) (vector? sel))")].join(""));
      }
      if (!(sel == null)) {
        var env = om.next.to_env.call(null, self__.config);
        var v = (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, env, sel);
        if (cljs.core.empty_QMARK_.call(null, v)) {
          return null;
        } else {
          return renderf.call(null, v);
        }
      } else {
        return renderf.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(self__.config)));
      }
    };
  }(renderf, ret, rctor, guid, this$__$1);
  cljs.core.swap_BANG_.call(null, self__.state, cljs.core.merge, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "target", "target", 253001721), target, new cljs.core.Keyword(null, "render", "render", -1408033454), parsef, new cljs.core.Keyword(null, "root", "root", -448657453), root_class, new cljs.core.Keyword(null, "remove", "remove", -131428414), function(renderf, parsef, ret, rctor, guid, this$__$1) {
    return function() {
      cljs.core.remove_watch.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(self__.config), function() {
        var or__7410__auto__ = target;
        if (cljs.core.truth_(or__7410__auto__)) {
          return or__7410__auto__;
        } else {
          return guid;
        }
      }());
      cljs.core.swap_BANG_.call(null, self__.state, function(renderf, parsef, ret, rctor, guid, this$__$1) {
        return function(p1__19466_SHARP_) {
          return cljs.core.dissoc.call(null, cljs.core.dissoc.call(null, cljs.core.dissoc.call(null, cljs.core.dissoc.call(null, p1__19466_SHARP_, new cljs.core.Keyword(null, "target", "target", 253001721)), new cljs.core.Keyword(null, "render", "render", -1408033454)), new cljs.core.Keyword(null, "root", "root", -448657453)), new cljs.core.Keyword(null, "remove", "remove", -131428414));
        };
      }(renderf, parsef, ret, rctor, guid, this$__$1));
      if (target == null) {
        return null;
      } else {
        return (new cljs.core.Keyword(null, "root-unmount", "root-unmount", 1692900789)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, target);
      }
    };
  }(renderf, parsef, ret, rctor, guid, this$__$1)], null));
  cljs.core.add_watch.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(self__.config), function() {
    var or__7410__auto__ = target;
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return guid;
    }
  }(), function(renderf, parsef, ret, rctor, guid, this$__$1) {
    return function(_, ___$1, ___$2, ___$3) {
      cljs.core.swap_BANG_.call(null, self__.state, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "t", "t", -1397832519)], null), cljs.core.inc);
      if (!om.next.iquery_QMARK_.call(null, root_class)) {
        return om.next.queue_render_BANG_.call(null, parsef);
      } else {
        return om.next.schedule_render_BANG_.call(null, this$__$1);
      }
    };
  }(renderf, parsef, ret, rctor, guid, this$__$1));
  parsef.call(null);
  var temp__4657__auto___19521 = om.next.get_query.call(null, function() {
    var or__7410__auto__ = function() {
      var and__7398__auto__ = target;
      if (cljs.core.truth_(and__7398__auto__)) {
        return cljs.core.deref.call(null, ret);
      } else {
        return and__7398__auto__;
      }
    }();
    if (cljs.core.truth_(or__7410__auto__)) {
      return or__7410__auto__;
    } else {
      return root_class;
    }
  }());
  if (cljs.core.truth_(temp__4657__auto___19521)) {
    var sel_19522 = temp__4657__auto___19521;
    var env_19523 = om.next.to_env.call(null, self__.config);
    var snds_19524 = om.next.gather_sends.call(null, env_19523, sel_19522, (new cljs.core.Keyword(null, "remotes", "remotes", 1132366312)).cljs$core$IFn$_invoke$arity$1(self__.config));
    if (cljs.core.empty_QMARK_.call(null, snds_19524)) {
    } else {
      var temp__4657__auto___19525__$1 = (new cljs.core.Keyword(null, "send", "send", -652151114)).cljs$core$IFn$_invoke$arity$1(self__.config);
      if (cljs.core.truth_(temp__4657__auto___19525__$1)) {
        var send_19526 = temp__4657__auto___19525__$1;
        send_19526.call(null, snds_19524, function(send_19526, temp__4657__auto___19525__$1, env_19523, snds_19524, sel_19522, temp__4657__auto___19521, renderf, parsef, ret, rctor, guid, this$__$1) {
          return function() {
            var om$next$send_cb = null;
            var om$next$send_cb__1 = function(resp) {
              om.next.merge_BANG_.call(null, this$__$1, resp, null);
              return renderf.call(null, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, env_19523, sel_19522));
            };
            var om$next$send_cb__2 = function(resp, query) {
              om.next.merge_BANG_.call(null, this$__$1, resp, query);
              return renderf.call(null, (new cljs.core.Keyword(null, "parser", "parser", -1543495310)).cljs$core$IFn$_invoke$arity$1(self__.config).call(null, env_19523, sel_19522));
            };
            var om$next$send_cb__3 = function(resp, query, remote) {
              if (remote == null) {
              } else {
                om.next.protocols.queue_BANG_.call(null, this$__$1, cljs.core.keys.call(null, resp), remote);
              }
              om.next.merge_BANG_.call(null, this$__$1, resp, query, remote);
              return om.next.protocols.reconcile_BANG_.call(null, this$__$1, remote);
            };
            om$next$send_cb = function(resp, query, remote) {
              switch(arguments.length) {
                case 1:
                  return om$next$send_cb__1.call(this, resp);
                case 2:
                  return om$next$send_cb__2.call(this, resp, query);
                case 3:
                  return om$next$send_cb__3.call(this, resp, query, remote);
              }
              throw new Error("Invalid arity: " + (arguments.length - 1));
            };
            om$next$send_cb.cljs$core$IFn$_invoke$arity$1 = om$next$send_cb__1;
            om$next$send_cb.cljs$core$IFn$_invoke$arity$2 = om$next$send_cb__2;
            om$next$send_cb.cljs$core$IFn$_invoke$arity$3 = om$next$send_cb__3;
            return om$next$send_cb;
          }();
        }(send_19526, temp__4657__auto___19525__$1, env_19523, snds_19524, sel_19522, temp__4657__auto___19521, renderf, parsef, ret, rctor, guid, this$__$1));
      } else {
      }
    }
  } else {
  }
  return cljs.core.deref.call(null, ret);
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$reindex_BANG_$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var root = cljs.core.get.call(null, cljs.core.deref.call(null, self__.state), new cljs.core.Keyword(null, "root", "root", -448657453));
  if (om.next.iquery_QMARK_.call(null, root)) {
    var indexer = (new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)).cljs$core$IFn$_invoke$arity$1(self__.config);
    var c = cljs.core.first.call(null, cljs.core.get_in.call(null, cljs.core.deref.call(null, indexer), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "class-\x3ecomponents", "class-\x3ecomponents", 436435919), root], null)));
    return om.next.protocols.index_root.call(null, indexer, function() {
      var or__7410__auto__ = c;
      if (cljs.core.truth_(or__7410__auto__)) {
        return or__7410__auto__;
      } else {
        return root;
      }
    }());
  } else {
    return null;
  }
};
om.next.Reconciler.prototype.om$next$protocols$IReconciler$remove_root_BANG_$arity$2 = function(_, target) {
  var self__ = this;
  var ___$1 = this;
  var temp__4657__auto__ = (new cljs.core.Keyword(null, "remove", "remove", -131428414)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
  if (cljs.core.truth_(temp__4657__auto__)) {
    var remove = temp__4657__auto__;
    return remove.call(null);
  } else {
    return null;
  }
};
om.next.Reconciler.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8051__auto__, writer__8052__auto__, opts__8053__auto__) {
  var self__ = this;
  var this__8051__auto____$1 = this;
  var pr_pair__8054__auto__ = function(this__8051__auto____$1) {
    return function(keyval__8055__auto__) {
      return cljs.core.pr_sequential_writer.call(null, writer__8052__auto__, cljs.core.pr_writer, "", " ", "", opts__8053__auto__, keyval__8055__auto__);
    };
  }(this__8051__auto____$1);
  return cljs.core.pr_sequential_writer.call(null, writer__8052__auto__, pr_pair__8054__auto__, "#om.next.Reconciler{", ", ", "}", opts__8053__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "config", "config", 994861415), self__.config], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "state", "state", -1988618099), self__.state], null)], null), self__.__extmap));
};
om.next.Reconciler.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;
om.next.Reconciler.prototype.cljs$core$IIterable$_iterator$arity$1 = function(G__19470) {
  var self__ = this;
  var G__19470__$1 = this;
  return new cljs.core.RecordIter(0, G__19470__$1, 2, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "config", "config", 994861415), new cljs.core.Keyword(null, "state", "state", -1988618099)], null), cljs.core.truth_(self__.__extmap) ? cljs.core._iterator.call(null, self__.__extmap) : cljs.core.nil_iter.call(null));
};
om.next.Reconciler.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8035__auto__) {
  var self__ = this;
  var this__8035__auto____$1 = this;
  return self__.__meta;
};
om.next.Reconciler.prototype.cljs$core$ICloneable$_clone$arity$1 = function(this__8031__auto__) {
  var self__ = this;
  var this__8031__auto____$1 = this;
  return new om.next.Reconciler(self__.config, self__.state, self__.__meta, self__.__extmap, self__.__hash);
};
om.next.Reconciler.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8041__auto__) {
  var self__ = this;
  var this__8041__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
om.next.Reconciler.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8032__auto__) {
  var self__ = this;
  var this__8032__auto____$1 = this;
  var h__7850__auto__ = self__.__hash;
  if (!(h__7850__auto__ == null)) {
    return h__7850__auto__;
  } else {
    var h__7850__auto____$1 = cljs.core.hash_imap.call(null, this__8032__auto____$1);
    self__.__hash = h__7850__auto____$1;
    return h__7850__auto____$1;
  }
};
om.next.Reconciler.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8033__auto__, other__8034__auto__) {
  var self__ = this;
  var this__8033__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__7398__auto__ = other__8034__auto__;
    if (cljs.core.truth_(and__7398__auto__)) {
      return this__8033__auto____$1.constructor === other__8034__auto__.constructor && cljs.core.equiv_map.call(null, this__8033__auto____$1, other__8034__auto__);
    } else {
      return and__7398__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
om.next.Reconciler.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8046__auto__, k__8047__auto__) {
  var self__ = this;
  var this__8046__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "config", "config", 994861415), null, new cljs.core.Keyword(null, "state", "state", -1988618099), null], null), null), k__8047__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8046__auto____$1), self__.__meta), k__8047__auto__);
  } else {
    return new om.next.Reconciler(self__.config, self__.state, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8047__auto__)), null);
  }
};
om.next.Reconciler.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8044__auto__, k__8045__auto__, G__19470) {
  var self__ = this;
  var this__8044__auto____$1 = this;
  var pred__19483 = cljs.core.keyword_identical_QMARK_;
  var expr__19484 = k__8045__auto__;
  if (cljs.core.truth_(pred__19483.call(null, new cljs.core.Keyword(null, "config", "config", 994861415), expr__19484))) {
    return new om.next.Reconciler(G__19470, self__.state, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__19483.call(null, new cljs.core.Keyword(null, "state", "state", -1988618099), expr__19484))) {
      return new om.next.Reconciler(self__.config, G__19470, self__.__meta, self__.__extmap, null);
    } else {
      return new om.next.Reconciler(self__.config, self__.state, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8045__auto__, G__19470), null);
    }
  }
};
om.next.Reconciler.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8049__auto__) {
  var self__ = this;
  var this__8049__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "config", "config", 994861415), self__.config], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "state", "state", -1988618099), self__.state], null)], null), self__.__extmap));
};
om.next.Reconciler.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8036__auto__, G__19470) {
  var self__ = this;
  var this__8036__auto____$1 = this;
  return new om.next.Reconciler(self__.config, self__.state, G__19470, self__.__extmap, self__.__hash);
};
om.next.Reconciler.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8042__auto__, entry__8043__auto__) {
  var self__ = this;
  var this__8042__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8043__auto__)) {
    return this__8042__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null, cljs.core._nth.call(null, entry__8043__auto__, 0), cljs.core._nth.call(null, entry__8043__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8042__auto____$1, entry__8043__auto__);
  }
};
om.next.Reconciler.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(self__.config));
};
om.next.Reconciler.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null, "config", "config", -1659574354, null), new cljs.core.Symbol(null, "state", "state", -348086572, null)], null);
};
om.next.Reconciler.cljs$lang$type = true;
om.next.Reconciler.cljs$lang$ctorPrSeq = function(this__8071__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "om.next/Reconciler");
};
om.next.Reconciler.cljs$lang$ctorPrWriter = function(this__8071__auto__, writer__8072__auto__) {
  return cljs.core._write.call(null, writer__8072__auto__, "om.next/Reconciler");
};
om.next.__GT_Reconciler = function om$next$__GT_Reconciler(config, state) {
  return new om.next.Reconciler(config, state, null, null, null);
};
om.next.map__GT_Reconciler = function om$next$map__GT_Reconciler(G__19472) {
  return new om.next.Reconciler((new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(G__19472), (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(G__19472), null, cljs.core.dissoc.call(null, G__19472, new cljs.core.Keyword(null, "config", "config", 994861415), new cljs.core.Keyword(null, "state", "state", -1988618099)), null);
};
om.next.default_ui__GT_props = function om$next$default_ui__GT_props(p__19527, c) {
  var map__19533 = p__19527;
  var map__19533__$1 = (!(map__19533 == null) ? map__19533.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19533.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19533) : map__19533;
  var env = map__19533__$1;
  var parser = cljs.core.get.call(null, map__19533__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
  var pathopt = cljs.core.get.call(null, map__19533__$1, new cljs.core.Keyword(null, "pathopt", "pathopt", -61073149));
  var ui = function() {
    var and__7398__auto__ = pathopt;
    if (and__7398__auto__) {
      var and__7398__auto____$1 = !(c == null) ? false || cljs.core.PROTOCOL_SENTINEL === c.om$next$Ident$ ? true : false : false;
      if (and__7398__auto____$1) {
        return om.next.iquery_QMARK_.call(null, c);
      } else {
        return and__7398__auto____$1;
      }
    } else {
      return and__7398__auto__;
    }
  }() ? function() {
    var id = om.next.ident.call(null, c, om.next.props.call(null, c));
    return cljs.core.get.call(null, parser.call(null, env, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([id, om.next.get_query.call(null, c)])], null)), id);
  }() : null;
  if (!(ui == null)) {
    return ui;
  } else {
    var fq = om.next.full_query.call(null, c);
    if (fq == null) {
      return null;
    } else {
      var s = cljs.core.system_time.call(null);
      var ui__$1 = parser.call(null, env, fq);
      var e = cljs.core.system_time.call(null);
      var temp__4657__auto___19538 = (new cljs.core.Keyword(null, "logger", "logger", -220675947)).cljs$core$IFn$_invoke$arity$1(env);
      if (cljs.core.truth_(temp__4657__auto___19538)) {
        var l_19539 = temp__4657__auto___19538;
        var dt_19540 = e - s;
        var component_name_19541 = c.constructor.displayName;
        if (16 < dt_19540) {
          goog.log.warning(l_19539, [cljs.core.str.cljs$core$IFn$_invoke$arity$1(component_name_19541), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" query took "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(dt_19540), cljs.core.str.cljs$core$IFn$_invoke$arity$1(" msecs")].join(""));
        } else {
        }
      } else {
      }
      return cljs.core.get_in.call(null, ui__$1, om.next.path.call(null, c));
    }
  }
};
om.next.default_merge_ident = function om$next$default_merge_ident(_, tree, ref, props) {
  return cljs.core.update_in.call(null, tree, ref, cljs.core.merge, props);
};
om.next.default_merge_tree = function om$next$default_merge_tree(a, b) {
  if (cljs.core.map_QMARK_.call(null, a)) {
    return cljs.core.merge.call(null, a, b);
  } else {
    return b;
  }
};
om.next.default_migrate = function om$next$default_migrate(var_args) {
  var args19542 = [];
  var len__8523__auto___19589 = arguments.length;
  var i__8524__auto___19590 = 0;
  while (true) {
    if (i__8524__auto___19590 < len__8523__auto___19589) {
      args19542.push(arguments[i__8524__auto___19590]);
      var G__19591 = i__8524__auto___19590 + 1;
      i__8524__auto___19590 = G__19591;
      continue;
    } else {
    }
    break;
  }
  var G__19544 = args19542.length;
  switch(G__19544) {
    case 3:
      return om.next.default_migrate.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return om.next.default_migrate.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19542.length)].join(""));
  }
};
om.next.default_migrate.cljs$core$IFn$_invoke$arity$3 = function(app_state_pure, query, tempids) {
  return om.next.default_migrate.call(null, app_state_pure, query, tempids, null);
};
om.next.default_migrate.cljs$core$IFn$_invoke$arity$4 = function(app_state_pure, query, tempids, id_key) {
  var dissoc_in = function om$next$dissoc_in(pure, p__19567) {
    var vec__19571 = p__19567;
    var table = cljs.core.nth.call(null, vec__19571, 0, null);
    var id = cljs.core.nth.call(null, vec__19571, 1, null);
    return cljs.core.assoc.call(null, pure, table, cljs.core.dissoc.call(null, cljs.core.get.call(null, pure, table), id));
  };
  var step = function om$next$step(pure, p__19574) {
    var vec__19582 = p__19574;
    var old = cljs.core.nth.call(null, vec__19582, 0, null);
    var vec__19585 = cljs.core.nth.call(null, vec__19582, 1, null);
    var _ = cljs.core.nth.call(null, vec__19585, 0, null);
    var id = cljs.core.nth.call(null, vec__19585, 1, null);
    var new$ = vec__19585;
    return cljs.core.assoc_in.call(null, dissoc_in.call(null, pure, old), new$, function() {
      var G__19588 = cljs.core.merge.call(null, cljs.core.get_in.call(null, pure, old), cljs.core.get_in.call(null, pure, new$));
      if (!(id_key == null)) {
        return cljs.core.assoc.call(null, G__19588, id_key, id);
      } else {
        return G__19588;
      }
    }());
  };
  if (!cljs.core.empty_QMARK_.call(null, tempids)) {
    var pure_SINGLEQUOTE_ = cljs.core.reduce.call(null, step, app_state_pure, tempids);
    return om.next.tree__GT_db.call(null, query, om.next.db__GT_tree.call(null, query, pure_SINGLEQUOTE_, pure_SINGLEQUOTE_, function(pure_SINGLEQUOTE_) {
      return function(ident) {
        return cljs.core.get.call(null, tempids, ident, ident);
      };
    }(pure_SINGLEQUOTE_)), true);
  } else {
    return app_state_pure;
  }
};
om.next.default_migrate.cljs$lang$maxFixedArity = 4;
om.next.has_error_QMARK_ = function om$next$has_error_QMARK_(x) {
  return cljs.core.map_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, x, new cljs.core.Keyword("om.next", "error", "om.next/error", -1841983205));
};
om.next.default_extract_errors = function om$next$default_extract_errors(reconciler, res, query) {
  var extract_STAR_ = function om$next$default_extract_errors_$_extract_STAR_(query__$1, res__$1, errs) {
    var class$ = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, query__$1));
    var top_error_QMARK_ = !(class$ == null) && om.next.has_error_QMARK_.call(null, res__$1) ? cljs.core.swap_BANG_.call(null, errs, function(class$) {
      return function(p1__19593_SHARP_) {
        return cljs.core.update_in.call(null, p1__19593_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [om.next.ident.call(null, class$, res__$1)], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), (new cljs.core.Keyword("om.next", "error", "om.next/error", -1841983205)).cljs$core$IFn$_invoke$arity$1(res__$1));
      };
    }(class$)) : null;
    var ret = top_error_QMARK_ == null ? cljs.core.PersistentArrayMap.EMPTY : null;
    if (cljs.core.vector_QMARK_.call(null, query__$1)) {
      if (cljs.core.vector_QMARK_.call(null, res__$1)) {
        return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(class$, top_error_QMARK_, ret) {
          return function(p1__19594_SHARP_) {
            return om$next$default_extract_errors_$_extract_STAR_.call(null, query__$1, p1__19594_SHARP_, errs);
          };
        }(class$, top_error_QMARK_, ret)), res__$1);
      } else {
        var exprs = cljs.core.seq.call(null, query__$1);
        var ret__$1 = ret;
        while (true) {
          if (!(exprs == null)) {
            var expr = cljs.core.first.call(null, exprs);
            var k = function() {
              var k = om.next.expr__GT_key.call(null, expr);
              var G__19605 = k;
              if (om.util.unique_ident_QMARK_.call(null, k)) {
                return cljs.core.first.call(null, G__19605);
              } else {
                return G__19605;
              }
            }();
            var data = cljs.core.get.call(null, res__$1, k);
            if (om.util.mutation_QMARK_.call(null, expr)) {
              var mk = om.util.mutation_key.call(null, expr);
              var ret_SINGLEQUOTE_ = cljs.core.get.call(null, res__$1, mk);
              if (om.next.has_error_QMARK_.call(null, ret_SINGLEQUOTE_)) {
                var x = (new cljs.core.Keyword(null, "mutator", "mutator", -1326825366)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, expr));
                cljs.core.swap_BANG_.call(null, errs, function(exprs, ret__$1, x, mk, ret_SINGLEQUOTE_, expr, k, data, class$, top_error_QMARK_, ret) {
                  return function(p1__19595_SHARP_) {
                    return cljs.core.update_in.call(null, p1__19595_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), (new cljs.core.Keyword("om.next", "error", "om.next/error", -1841983205)).cljs$core$IFn$_invoke$arity$1(ret_SINGLEQUOTE_));
                  };
                }(exprs, ret__$1, x, mk, ret_SINGLEQUOTE_, expr, k, data, class$, top_error_QMARK_, ret));
                var G__19606 = cljs.core.next.call(null, exprs);
                var G__19607 = ret__$1;
                exprs = G__19606;
                ret__$1 = G__19607;
                continue;
              } else {
                var G__19608 = cljs.core.next.call(null, exprs);
                var G__19609 = ret__$1 == null ? null : cljs.core.assoc.call(null, ret__$1, mk, ret_SINGLEQUOTE_);
                exprs = G__19608;
                ret__$1 = G__19609;
                continue;
              }
            } else {
              if (om.util.union_QMARK_.call(null, expr)) {
                var jk = om.util.join_key.call(null, expr);
                var jv = om.util.join_value.call(null, expr);
                var class_SINGLEQUOTE_ = (new cljs.core.Keyword(null, "component", "component", 1555936782)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, jv));
                if (!cljs.core.vector_QMARK_.call(null, data)) {
                  var ret_SINGLEQUOTE_ = om$next$default_extract_errors_$_extract_STAR_.call(null, cljs.core.get.call(null, jv, cljs.core.first.call(null, om.next.ident.call(null, class_SINGLEQUOTE_, data))), data, errs);
                  var G__19610 = cljs.core.next.call(null, exprs);
                  var G__19611 = ret__$1 == null ? null : cljs.core.assoc.call(null, ret__$1, jk, ret_SINGLEQUOTE_);
                  exprs = G__19610;
                  ret__$1 = G__19611;
                  continue;
                } else {
                  var ret_SINGLEQUOTE_ = cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, function(exprs, ret__$1, jk, jv, class_SINGLEQUOTE_, expr, k, data, class$, top_error_QMARK_, ret) {
                    return function(p1__19596_SHARP_) {
                      return om$next$default_extract_errors_$_extract_STAR_.call(null, cljs.core.get.call(null, jv, cljs.core.first.call(null, om.next.ident.call(null, class_SINGLEQUOTE_, p1__19596_SHARP_))), p1__19596_SHARP_, errs);
                    };
                  }(exprs, ret__$1, jk, jv, class_SINGLEQUOTE_, expr, k, data, class$, top_error_QMARK_, ret)), data);
                  var G__19612 = cljs.core.next.call(null, exprs);
                  var G__19613 = ret__$1 == null ? null : cljs.core.assoc.call(null, ret__$1, jk, ret_SINGLEQUOTE_);
                  exprs = G__19612;
                  ret__$1 = G__19613;
                  continue;
                }
              } else {
                if (cljs.core.truth_(om.util.join_QMARK_.call(null, expr))) {
                  var jk = om.util.join_key.call(null, expr);
                  var jv = om.util.join_value.call(null, expr);
                  var ret_SINGLEQUOTE_ = om$next$default_extract_errors_$_extract_STAR_.call(null, jv, data, errs);
                  var G__19614 = cljs.core.next.call(null, exprs);
                  var G__19615 = ret__$1 == null ? null : cljs.core.assoc.call(null, ret__$1, jk, ret_SINGLEQUOTE_);
                  exprs = G__19614;
                  ret__$1 = G__19615;
                  continue;
                } else {
                  if (cljs.core.map_QMARK_.call(null, data) && om.next.has_error_QMARK_.call(null, data)) {
                    cljs.core.swap_BANG_.call(null, errs, function(exprs, ret__$1, expr, k, data, class$, top_error_QMARK_, ret) {
                      return function(p1__19597_SHARP_) {
                        return cljs.core.update_in.call(null, p1__19597_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
                          var or__7410__auto__ = class$ == null ? null : om.next.ident.call(null, class$, res__$1);
                          if (cljs.core.truth_(or__7410__auto__)) {
                            return or__7410__auto__;
                          } else {
                            return k;
                          }
                        }()], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), (new cljs.core.Keyword("om.next", "error", "om.next/error", -1841983205)).cljs$core$IFn$_invoke$arity$1(data));
                      };
                    }(exprs, ret__$1, expr, k, data, class$, top_error_QMARK_, ret));
                    var G__19616 = cljs.core.next.call(null, exprs);
                    var G__19617 = null;
                    exprs = G__19616;
                    ret__$1 = G__19617;
                    continue;
                  } else {
                    var G__19618 = cljs.core.next.call(null, exprs);
                    var G__19619 = ret__$1 == null ? null : cljs.core.assoc.call(null, ret__$1, k, data);
                    exprs = G__19618;
                    ret__$1 = G__19619;
                    continue;
                  }
                }
              }
            }
          } else {
            return ret__$1;
          }
          break;
        }
      }
    } else {
      return null;
    }
  };
  var errs = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ret = extract_STAR_.call(null, query, res, errs);
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "tree", "tree", -196312028), ret, new cljs.core.Keyword(null, "errors", "errors", -908790718), cljs.core.deref.call(null, errs)], null);
};
om.next.reconciler = function om$next$reconciler(p__19625) {
  var map__19629 = p__19625;
  var map__19629__$1 = (!(map__19629 == null) ? map__19629.cljs$lang$protocol_mask$partition0$ & 64 || cljs.core.PROTOCOL_SENTINEL === map__19629.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__19629) : map__19629;
  var config = map__19629__$1;
  var root_render = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "root-render", "root-render", 835981146), function(map__19629, map__19629__$1, config) {
    return function(p1__19622_SHARP_, p2__19623_SHARP_) {
      return ReactDOM.render(p1__19622_SHARP_, p2__19623_SHARP_);
    };
  }(map__19629, map__19629__$1, config));
  var normalize = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "normalize", "normalize", -1904390051));
  var prune_tree = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "prune-tree", "prune-tree", 142138431), om.next.default_extract_errors);
  var tx_listen = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367));
  var pathopt = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "pathopt", "pathopt", -61073149), false);
  var instrument = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "instrument", "instrument", -960698844));
  var id_key = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "id-key", "id-key", -1881730044));
  var merge_sends = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "merge-sends", "merge-sends", -1718434202), function(map__19629, map__19629__$1, config, root_render, normalize, prune_tree, tx_listen, pathopt, instrument, id_key) {
    return function(p1__19620_SHARP_, p2__19621_SHARP_) {
      return cljs.core.merge_with.call(null, cljs.core.into, p1__19620_SHARP_, p2__19621_SHARP_);
    };
  }(map__19629, map__19629__$1, config, root_render, normalize, prune_tree, tx_listen, pathopt, instrument, id_key));
  var merge_ident = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "merge-ident", "merge-ident", 1040841862), om.next.default_merge_ident);
  var remotes = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "remotes", "remotes", 1132366312), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "remote", "remote", -1593576576)], null));
  var migrate = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "migrate", "migrate", -207110743), om.next.default_migrate);
  var easy_reads = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "easy-reads", "easy-reads", 803667467), true);
  var history = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "history", "history", -247395220), 100);
  var state = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "state", "state", -1988618099));
  var merge = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "merge", "merge", -1804319409), om.next.default_merge);
  var shared_fn = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "shared-fn", "shared-fn", -180260144));
  var ui__GT_props = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "ui-\x3eprops", "ui-\x3eprops", -237981102), om.next.default_ui__GT_props);
  var parser = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "parser", "parser", -1543495310));
  var indexer = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "indexer", "indexer", -1774914315), om.next.indexer);
  var root_unmount = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "root-unmount", "root-unmount", 1692900789), function(map__19629, map__19629__$1, config, root_render, normalize, prune_tree, tx_listen, pathopt, instrument, id_key, merge_sends, merge_ident, remotes, migrate, easy_reads, history, state, merge, shared_fn, ui__GT_props, parser, indexer) {
    return function(p1__19624_SHARP_) {
      return ReactDOM.unmountComponentAtNode(p1__19624_SHARP_);
    };
  }(map__19629, map__19629__$1, config, root_render, normalize, prune_tree, tx_listen, pathopt, instrument, id_key, merge_sends, merge_ident, remotes, migrate, easy_reads, history, state, merge, shared_fn, ui__GT_props, parser, indexer));
  var send = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "send", "send", -652151114));
  var merge_tree = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "merge-tree", "merge-tree", -127861161), om.next.default_merge_tree);
  var shared = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "shared", "shared", -384145993));
  var optimize = cljs.core.get.call(null, map__19629__$1, new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), function(map__19629, map__19629__$1, config, root_render, normalize, prune_tree, tx_listen, pathopt, instrument, id_key, merge_sends, merge_ident, remotes, migrate, easy_reads, history, state, merge, shared_fn, ui__GT_props, parser, indexer, root_unmount, send, merge_tree, shared) {
    return function(cs) {
      return cljs.core.sort_by.call(null, om.next.depth, cs);
    };
  }(map__19629, map__19629__$1, config, root_render, normalize, prune_tree, tx_listen, pathopt, instrument, id_key, merge_sends, merge_ident, remotes, migrate, easy_reads, history, state, merge, shared_fn, ui__GT_props, parser, indexer, root_unmount, send, merge_tree, shared));
  if (cljs.core.map_QMARK_.call(null, config)) {
  } else {
    throw new Error("Assert failed: (map? config)");
  }
  var idxr = indexer.call(null);
  var norm_QMARK_ = !(state == null) ? state.cljs$lang$protocol_mask$partition1$ & 16384 || cljs.core.PROTOCOL_SENTINEL === state.cljs$core$IAtom$ ? true : !state.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, state) : false : cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAtom, state);
  var state_SINGLEQUOTE_ = norm_QMARK_ ? state : cljs.core.atom.call(null, state);
  var logger = cljs.core.contains_QMARK_.call(null, config, new cljs.core.Keyword(null, "logger", "logger", -220675947)) ? (new cljs.core.Keyword(null, "logger", "logger", -220675947)).cljs$core$IFn$_invoke$arity$1(config) : om.next._STAR_logger_STAR_;
  var ret = new om.next.Reconciler(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "pathopt", "pathopt", -61073149), new cljs.core.Keyword(null, "id-key", "id-key", -1881730044), new cljs.core.Keyword(null, "instrument", "instrument", -960698844), new cljs.core.Keyword(null, "merge-ident", "merge-ident", 1040841862), new cljs.core.Keyword(null, "merge-sends", "merge-sends", -1718434202), new cljs.core.Keyword(null, "remotes", "remotes", 1132366312), new cljs.core.Keyword(null, 
  "migrate", "migrate", -207110743), new cljs.core.Keyword(null, "easy-reads", "easy-reads", 803667467), new cljs.core.Keyword(null, "history", "history", -247395220), new cljs.core.Keyword(null, "state", "state", -1988618099), new cljs.core.Keyword(null, "merge", "merge", -1804319409), new cljs.core.Keyword(null, "shared-fn", "shared-fn", -180260144), new cljs.core.Keyword(null, "parser", "parser", -1543495310), new cljs.core.Keyword(null, "ui-\x3eprops", "ui-\x3eprops", -237981102), new cljs.core.Keyword(null, 
  "logger", "logger", -220675947), new cljs.core.Keyword(null, "indexer", "indexer", -1774914315), new cljs.core.Keyword(null, "root-unmount", "root-unmount", 1692900789), new cljs.core.Keyword(null, "send", "send", -652151114), new cljs.core.Keyword(null, "shared", "shared", -384145993), new cljs.core.Keyword(null, "merge-tree", "merge-tree", -127861161), new cljs.core.Keyword(null, "optimize", "optimize", -1912349448), new cljs.core.Keyword(null, "root-render", "root-render", 835981146), new cljs.core.Keyword(null, 
  "normalize", "normalize", -1904390051), new cljs.core.Keyword(null, "prune-tree", "prune-tree", 142138431), new cljs.core.Keyword(null, "tx-listen", "tx-listen", 119130367)], [pathopt, id_key, instrument, merge_ident, merge_sends, remotes, migrate, easy_reads, om.next.cache.cache.call(null, history), state_SINGLEQUOTE_, merge, shared_fn, parser, ui__GT_props, logger, idxr, root_unmount, send, shared, merge_tree, optimize, root_render, function() {
    var or__7410__auto__ = !norm_QMARK_;
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      return normalize;
    }
  }(), prune_tree, tx_listen]), cljs.core.atom.call(null, cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "normalized", "normalized", -1887621663), new cljs.core.Keyword(null, "remote-queue", "remote-queue", 1823260578), new cljs.core.Keyword(null, "remove", "remove", -131428414), new cljs.core.Keyword(null, "queue", "queue", 1455835879), new cljs.core.Keyword(null, "sends-queued", "sends-queued", -1276878712), new cljs.core.Keyword(null, "queued-sends", "queued-sends", 278114765), 
  new cljs.core.Keyword(null, "queued", "queued", 1701634607), new cljs.core.Keyword(null, "render", "render", -1408033454), new cljs.core.Keyword(null, "root", "root", -448657453), new cljs.core.Keyword(null, "t", "t", -1397832519), new cljs.core.Keyword(null, "target", "target", 253001721)], [norm_QMARK_, cljs.core.PersistentArrayMap.EMPTY, null, cljs.core.PersistentVector.EMPTY, false, cljs.core.PersistentArrayMap.EMPTY, false, null, null, 0, null])), null, null, null);
  return ret;
};
om.next.reconciler_QMARK_ = function om$next$reconciler_QMARK_(x) {
  if (!(x == null)) {
    if (false || cljs.core.PROTOCOL_SENTINEL === x.om$next$protocols$IReconciler$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
om.next.app_state = function om$next$app_state(reconciler) {
  if (om.next.reconciler_QMARK_.call(null, reconciler)) {
  } else {
    throw new Error("Assert failed: (reconciler? reconciler)");
  }
  return (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(reconciler));
};
om.next.app_root = function om$next$app_root(reconciler) {
  if (om.next.reconciler_QMARK_.call(null, reconciler)) {
  } else {
    throw new Error("Assert failed: (reconciler? reconciler)");
  }
  return cljs.core.get.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(reconciler)), new cljs.core.Keyword(null, "root", "root", -448657453));
};
om.next.force_root_render_BANG_ = function om$next$force_root_render_BANG_(reconciler) {
  if (om.next.reconciler_QMARK_.call(null, reconciler)) {
  } else {
    throw new Error("Assert failed: (reconciler? reconciler)");
  }
  return cljs.core.get.call(null, cljs.core.deref.call(null, (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(reconciler)), new cljs.core.Keyword(null, "render", "render", -1408033454)).call(null);
};
om.next.from_history = function om$next$from_history(reconciler, uuid) {
  if (om.next.reconciler_QMARK_.call(null, reconciler)) {
  } else {
    throw new Error("Assert failed: (reconciler? reconciler)");
  }
  return (new cljs.core.Keyword(null, "history", "history", -247395220)).cljs$core$IFn$_invoke$arity$1((new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(reconciler)).get(uuid);
};
om.next.tempid = function om$next$tempid(var_args) {
  var args19634 = [];
  var len__8523__auto___19637 = arguments.length;
  var i__8524__auto___19638 = 0;
  while (true) {
    if (i__8524__auto___19638 < len__8523__auto___19637) {
      args19634.push(arguments[i__8524__auto___19638]);
      var G__19639 = i__8524__auto___19638 + 1;
      i__8524__auto___19638 = G__19639;
      continue;
    } else {
    }
    break;
  }
  var G__19636 = args19634.length;
  switch(G__19636) {
    case 0:
      return om.next.tempid.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.next.tempid.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19634.length)].join(""));
  }
};
om.next.tempid.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.tempid.tempid.call(null);
};
om.next.tempid.cljs$core$IFn$_invoke$arity$1 = function(id) {
  return om.tempid.tempid.call(null, id);
};
om.next.tempid.cljs$lang$maxFixedArity = 1;
om.next.tempid_QMARK_ = function om$next$tempid_QMARK_(x) {
  return om.tempid.tempid_QMARK_.call(null, x);
};
om.next.reader = function om$next$reader(var_args) {
  var args19641 = [];
  var len__8523__auto___19644 = arguments.length;
  var i__8524__auto___19645 = 0;
  while (true) {
    if (i__8524__auto___19645 < len__8523__auto___19644) {
      args19641.push(arguments[i__8524__auto___19645]);
      var G__19646 = i__8524__auto___19645 + 1;
      i__8524__auto___19645 = G__19646;
      continue;
    } else {
    }
    break;
  }
  var G__19643 = args19641.length;
  switch(G__19643) {
    case 0:
      return om.next.reader.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.next.reader.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19641.length)].join(""));
  }
};
om.next.reader.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.transit.reader.call(null);
};
om.next.reader.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  return om.transit.reader.call(null, opts);
};
om.next.reader.cljs$lang$maxFixedArity = 1;
om.next.writer = function om$next$writer(var_args) {
  var args19648 = [];
  var len__8523__auto___19651 = arguments.length;
  var i__8524__auto___19652 = 0;
  while (true) {
    if (i__8524__auto___19652 < len__8523__auto___19651) {
      args19648.push(arguments[i__8524__auto___19652]);
      var G__19653 = i__8524__auto___19652 + 1;
      i__8524__auto___19652 = G__19653;
      continue;
    } else {
    }
    break;
  }
  var G__19650 = args19648.length;
  switch(G__19650) {
    case 0:
      return om.next.writer.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return om.next.writer.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19648.length)].join(""));
  }
};
om.next.writer.cljs$core$IFn$_invoke$arity$0 = function() {
  return om.transit.writer.call(null);
};
om.next.writer.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  return om.transit.writer.call(null, opts);
};
om.next.writer.cljs$lang$maxFixedArity = 1;
om.next.force = function om$next$force(var_args) {
  var args19655 = [];
  var len__8523__auto___19658 = arguments.length;
  var i__8524__auto___19659 = 0;
  while (true) {
    if (i__8524__auto___19659 < len__8523__auto___19658) {
      args19655.push(arguments[i__8524__auto___19659]);
      var G__19660 = i__8524__auto___19659 + 1;
      i__8524__auto___19659 = G__19660;
      continue;
    } else {
    }
    break;
  }
  var G__19657 = args19655.length;
  switch(G__19657) {
    case 1:
      return om.next.force.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return om.next.force.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "), cljs.core.str.cljs$core$IFn$_invoke$arity$1(args19655.length)].join(""));
  }
};
om.next.force.cljs$core$IFn$_invoke$arity$1 = function(expr) {
  return om.next.force.call(null, expr, new cljs.core.Keyword(null, "remote", "remote", -1593576576));
};
om.next.force.cljs$core$IFn$_invoke$arity$2 = function(expr, target) {
  return cljs.core.with_meta.call(null, cljs.core._conj.call(null, function() {
    var x__8252__auto__ = expr;
    return cljs.core._conj.call(null, cljs.core.List.EMPTY, x__8252__auto__);
  }(), new cljs.core.Symbol(null, "quote", "quote", 1377916282, null)), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "target", "target", 253001721), target], null));
};
om.next.force.cljs$lang$maxFixedArity = 2;
goog.provide("clojurescript_app.app");
goog.require("cljs.core");
goog.require("goog.dom");
goog.require("om.dom");
goog.require("om.next");
cljs.core.enable_console_print_BANG_.call(null);
cljs.core.println.call(null, "This is the clojurescript app");
clojurescript_app.app.Hello = function clojurescript_app$app$Hello() {
  var this__17521__auto__ = this;
  React.Component.apply(this__17521__auto__, arguments);
  if (!(this__17521__auto__.initLocalState == null)) {
    this__17521__auto__.state = this__17521__auto__.initLocalState();
  } else {
    this__17521__auto__.state = {};
  }
  return this__17521__auto__;
};
clojurescript_app.app.Hello.prototype = goog.object.clone(React.Component.prototype);
var x19668_19678 = clojurescript_app.app.Hello.prototype;
x19668_19678.componentWillUpdate = function(x19668_19678) {
  return function(next_props__17409__auto__, next_state__17410__auto__) {
    var this__17408__auto__ = this;
    if (!(this__17408__auto__ == null) ? false || cljs.core.PROTOCOL_SENTINEL === this__17408__auto__.om$next$Ident$ ? true : false : false) {
      var ident__17412__auto___19679 = om.next.ident.call(null, this__17408__auto__, om.next.props.call(null, this__17408__auto__));
      var next_ident__17413__auto___19680 = om.next.ident.call(null, this__17408__auto__, om.next._next_props.call(null, next_props__17409__auto__, this__17408__auto__));
      if (cljs.core.not_EQ_.call(null, ident__17412__auto___19679, next_ident__17413__auto___19680)) {
        var idxr__17414__auto___19681 = cljs.core.get_in.call(null, om.next.get_reconciler.call(null, this__17408__auto__), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "config", "config", 994861415), new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)], null));
        if (idxr__17414__auto___19681 == null) {
        } else {
          cljs.core.swap_BANG_.call(null, (new cljs.core.Keyword(null, "indexes", "indexes", 1496475545)).cljs$core$IFn$_invoke$arity$1(idxr__17414__auto___19681), function(idxr__17414__auto___19681, ident__17412__auto___19679, next_ident__17413__auto___19680, this__17408__auto__, x19668_19678) {
            return function(indexes__17415__auto__) {
              return cljs.core.update_in.call(null, cljs.core.update_in.call(null, indexes__17415__auto__, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", -303587249), ident__17412__auto___19679], null), cljs.core.disj, this__17408__auto__), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "ref-\x3ecomponents", "ref-\x3ecomponents", 
              -303587249), next_ident__17413__auto___19680], null), cljs.core.fnil.call(null, cljs.core.conj, cljs.core.PersistentHashSet.EMPTY), this__17408__auto__);
            };
          }(idxr__17414__auto___19681, ident__17412__auto___19679, next_ident__17413__auto___19680, this__17408__auto__, x19668_19678));
        }
      } else {
      }
    } else {
    }
    om.next.merge_pending_props_BANG_.call(null, this__17408__auto__);
    return om.next.merge_pending_state_BANG_.call(null, this__17408__auto__);
  };
}(x19668_19678);
x19668_19678.shouldComponentUpdate = function(x19668_19678) {
  return function(next_props__17409__auto__, next_state__17410__auto__) {
    var this__17408__auto__ = this;
    var next_children__17411__auto__ = next_props__17409__auto__.children;
    var next_props__17409__auto____$1 = goog.object.get(next_props__17409__auto__, "omcljs$value");
    var next_props__17409__auto____$2 = function() {
      var G__19670 = next_props__17409__auto____$1;
      if (next_props__17409__auto____$1 instanceof om.next.OmProps) {
        return om.next.unwrap.call(null, G__19670);
      } else {
        return G__19670;
      }
    }();
    var or__7410__auto__ = cljs.core.not_EQ_.call(null, om.next.props.call(null, this__17408__auto__), next_props__17409__auto____$2);
    if (or__7410__auto__) {
      return or__7410__auto__;
    } else {
      var or__7410__auto____$1 = function() {
        var and__7398__auto__ = this__17408__auto__.state;
        if (cljs.core.truth_(and__7398__auto__)) {
          return cljs.core.not_EQ_.call(null, goog.object.get(this__17408__auto__.state, "omcljs$state"), goog.object.get(next_state__17410__auto__, "omcljs$state"));
        } else {
          return and__7398__auto__;
        }
      }();
      if (cljs.core.truth_(or__7410__auto____$1)) {
        return or__7410__auto____$1;
      } else {
        return cljs.core.not_EQ_.call(null, this__17408__auto__.props.children, next_children__17411__auto__);
      }
    }
  };
}(x19668_19678);
x19668_19678.componentWillUnmount = function(x19668_19678) {
  return function() {
    var this__17408__auto__ = this;
    var r__17419__auto__ = om.next.get_reconciler.call(null, this__17408__auto__);
    var cfg__17420__auto__ = (new cljs.core.Keyword(null, "config", "config", 994861415)).cljs$core$IFn$_invoke$arity$1(r__17419__auto__);
    var st__17421__auto__ = (new cljs.core.Keyword(null, "state", "state", -1988618099)).cljs$core$IFn$_invoke$arity$1(cfg__17420__auto__);
    var indexer__17418__auto__ = (new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)).cljs$core$IFn$_invoke$arity$1(cfg__17420__auto__);
    if (cljs.core.truth_(function() {
      var and__7398__auto__ = !(st__17421__auto__ == null);
      if (and__7398__auto__) {
        return cljs.core.get_in.call(null, cljs.core.deref.call(null, st__17421__auto__), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146), this__17408__auto__], null));
      } else {
        return and__7398__auto__;
      }
    }())) {
      cljs.core.swap_BANG_.call(null, st__17421__auto__, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword("om.next", "queries", "om.next/queries", -22717146)], null), cljs.core.dissoc, this__17408__auto__);
    } else {
    }
    if (indexer__17418__auto__ == null) {
      return null;
    } else {
      return om.next.protocols.drop_component_BANG_.call(null, indexer__17418__auto__, this__17408__auto__);
    }
  };
}(x19668_19678);
x19668_19678.componentDidUpdate = function(x19668_19678) {
  return function(prev_props__17416__auto__, prev_state__17417__auto__) {
    var this__17408__auto__ = this;
    return om.next.clear_prev_props_BANG_.call(null, this__17408__auto__);
  };
}(x19668_19678);
x19668_19678.isMounted = function(x19668_19678) {
  return function() {
    var this__17408__auto__ = this;
    return cljs.core.boolean$.call(null, goog.object.getValueByKeys(this__17408__auto__, "_reactInternalInstance", "_renderedComponent"));
  };
}(x19668_19678);
x19668_19678.componentWillMount = function(x19668_19678) {
  return function() {
    var this__17408__auto__ = this;
    var indexer__17418__auto__ = cljs.core.get_in.call(null, om.next.get_reconciler.call(null, this__17408__auto__), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "config", "config", 994861415), new cljs.core.Keyword(null, "indexer", "indexer", -1774914315)], null));
    if (indexer__17418__auto__ == null) {
      return null;
    } else {
      return om.next.protocols.index_component_BANG_.call(null, indexer__17418__auto__, this__17408__auto__);
    }
  };
}(x19668_19678);
x19668_19678.render = function(x19668_19678) {
  return function() {
    var this__17407__auto__ = this;
    var this$ = this__17407__auto__;
    var _STAR_reconciler_STAR_19671 = om.next._STAR_reconciler_STAR_;
    var _STAR_depth_STAR_19672 = om.next._STAR_depth_STAR_;
    var _STAR_shared_STAR_19673 = om.next._STAR_shared_STAR_;
    var _STAR_instrument_STAR_19674 = om.next._STAR_instrument_STAR_;
    var _STAR_parent_STAR_19675 = om.next._STAR_parent_STAR_;
    om.next._STAR_reconciler_STAR_ = om.next.get_reconciler.call(null, this__17407__auto__);
    om.next._STAR_depth_STAR_ = om.next.depth.call(null, this__17407__auto__) + 1;
    om.next._STAR_shared_STAR_ = om.next.shared.call(null, this__17407__auto__);
    om.next._STAR_instrument_STAR_ = om.next.instrument.call(null, this__17407__auto__);
    om.next._STAR_parent_STAR_ = this__17407__auto__;
    try {
      return om.dom.h1.call(null, null, "Hello from Clojurescript");
    } finally {
      om.next._STAR_parent_STAR_ = _STAR_parent_STAR_19675;
      om.next._STAR_instrument_STAR_ = _STAR_instrument_STAR_19674;
      om.next._STAR_shared_STAR_ = _STAR_shared_STAR_19673;
      om.next._STAR_depth_STAR_ = _STAR_depth_STAR_19672;
      om.next._STAR_reconciler_STAR_ = _STAR_reconciler_STAR_19671;
    }
  };
}(x19668_19678);
clojurescript_app.app.Hello.prototype.constructor = clojurescript_app.app.Hello;
clojurescript_app.app.Hello.prototype.constructor.displayName = "clojurescript-app.app/Hello";
clojurescript_app.app.Hello.prototype.om$isComponent = true;
var x19676_19682 = clojurescript_app.app.Hello;
var x19677_19683 = clojurescript_app.app.Hello.prototype;
clojurescript_app.app.Hello.cljs$lang$type = true;
clojurescript_app.app.Hello.cljs$lang$ctorStr = "clojurescript-app.app/Hello";
clojurescript_app.app.Hello.cljs$lang$ctorPrWriter = function(this__17524__auto__, writer__17525__auto__, opt__17526__auto__) {
  return cljs.core._write.call(null, writer__17525__auto__, "clojurescript-app.app/Hello");
};
clojurescript_app.app.hello = om.next.factory.call(null, clojurescript_app.app.Hello);
ReactDOM.render(clojurescript_app.app.hello.call(null), goog.dom.getElement("clojurescript-app"));
